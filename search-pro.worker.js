const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":814,\"nextId\":814,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"5\",\"5\":\"5#环境准备\",\"6\":\"5#_1-关闭防火墙\",\"7\":\"5#_2-更新-yum\",\"8\":\"5#_3-安装工具\",\"9\":\"5#安装-docker\",\"10\":\"5#_1-设置开机启动\",\"11\":\"5#_2-使用阿里加速\",\"12\":\"5#安装-rancher\",\"13\":\"5#安装-kubernetes\",\"14\":\"5#_1-创建集群\",\"15\":\"5#_2-安装-master\",\"16\":\"5#_3-安装-node\",\"17\":\"5#_4-笔记本合盖\",\"18\":\"5#_5-主机名\",\"19\":\"5#rancher-cli-工具使用\",\"20\":\"5#通过-ui-添加-token\",\"21\":\"5#使用\",\"22\":\"5#安装-kubectl\",\"23\":\"5#安装-harbor\",\"24\":\"5#配置-harbor\",\"25\":\"5#启动-harbor\",\"26\":\"5#注意\",\"27\":\"5#安装-jenkins\",\"28\":\"5#提升权限\",\"29\":\"5#设置环境\",\"30\":\"5#配置-jenkins-插件工具\",\"31\":\"5#设置流水线\",\"32\":\"5#kubernetes-部署-nginx-测试\",\"33\":\"5#jenkins-打包-springboot-镜像测试\",\"34\":\"5#设置-jenkins-流水线\",\"35\":\"5#查看打包过程\",\"36\":\"5#查看-kubernetes-集群中是否部署成功\",\"37\":\"5#后记\",\"38\":\"5#_1-安装-cookiecutter\",\"39\":\"5#_2-编写配置文件\",\"40\":\"5#_3-创建模版文件\",\"41\":\"6\",\"42\":\"6#项目描述\",\"43\":\"6#所用技术\",\"44\":\"6#个人职责\",\"45\":\"7\",\"46\":\"7#项目描述\",\"47\":\"7#所用技术\",\"48\":\"7#个人职责\",\"49\":\"7#业务背景\",\"50\":\"8\",\"51\":\"8@0\",\"52\":\"10\",\"53\":\"10#architectural-blueprints-the-4-1-view-model-of-software-architecture\",\"54\":\"10#introduction\",\"55\":\"10#介绍\",\"56\":\"10#an-architectural-model\",\"57\":\"10#架构模型\",\"58\":\"10#the-logical-architecture\",\"59\":\"10#逻辑架构\",\"60\":\"10#notation-for-the-logical-view\",\"61\":\"10#逻辑视图的表示法\",\"62\":\"10#style-for-the-logical-view\",\"63\":\"10#逻辑视图的风格\",\"64\":\"10#example-of-logical-bluprints\",\"65\":\"10#逻辑蓝图的例子\",\"66\":\"10#the-process-architecture\",\"67\":\"10#过程架构\",\"68\":\"10#notation-for-the-process-view\",\"69\":\"10#过程视图的表示法\",\"70\":\"10#style-for-the-process-view\",\"71\":\"10#过程视图的风格\",\"72\":\"10#example-of-a-process-blueprint\",\"73\":\"10#过程蓝图的例子\",\"74\":\"10#the-development-architecture\",\"75\":\"10#开发架构\",\"76\":\"10#notation-for-the-development-blueprint\",\"77\":\"10#开发蓝图的表示法\",\"78\":\"10#style-for-the-development-view\",\"79\":\"10#开发视图的风格\",\"80\":\"10#example-of-development-architecture\",\"81\":\"10#开发架构的例子\",\"82\":\"10#the-physical-architecture\",\"83\":\"10#物理架构\",\"84\":\"10#notation-for-the-physical-blueprint\",\"85\":\"10#物理蓝图的表示法\",\"86\":\"10#example-of-physical-blueprint\",\"87\":\"10#物理蓝图的例子\",\"88\":\"10#scenarios\",\"89\":\"10#场景\",\"90\":\"10#notation-for-the-scenarios\",\"91\":\"10#场景的表示法\",\"92\":\"10#example-of-a-scenario\",\"93\":\"10#场景的例子\",\"94\":\"10#correspondence-between-the-views\",\"95\":\"10#视图之间的关联\",\"96\":\"10#from-the-logical-to-the-process-view\",\"97\":\"10#从逻辑视图到过程视图\",\"98\":\"10#from-logical-to-development\",\"99\":\"10#从逻辑视图到开发视图\",\"100\":\"10#from-process-to-physical\",\"101\":\"10#从过程视图到物理视图\",\"102\":\"10#tailoring-the-model\",\"103\":\"10#裁剪模型\",\"104\":\"10#iterative-proccess\",\"105\":\"10#迭代过程\",\"106\":\"10#a-scenario-driven-approach\",\"107\":\"10#场景驱动的方法\",\"108\":\"10#documenting-the-architecture\",\"109\":\"10#架构的文档化\",\"110\":\"10#conclusion\",\"111\":\"10#结论\",\"112\":\"10#acknowledgments\",\"113\":\"10#致谢\",\"114\":\"10#references\",\"115\":\"10#参考文献\",\"116\":\"11\",\"117\":\"11@0\",\"118\":\"12\",\"119\":\"12@0\",\"120\":\"13\",\"121\":\"13@0\",\"122\":\"14\",\"123\":\"14@0\",\"124\":\"15\",\"125\":\"15#jvm-的编译\",\"126\":\"15#类加载子系统\",\"127\":\"15#加载\",\"128\":\"15#类加载器有哪些\",\"129\":\"15#tomcat-为什么要自定义类加载器\",\"130\":\"15#webappclassloader-加载流程\",\"131\":\"15#链接-linking\",\"132\":\"15#验证-verify\",\"133\":\"15#准备-prepare\",\"134\":\"15#解析-resolve\",\"135\":\"15#初始化-initialization\",\"136\":\"15#运行时数据区\",\"137\":\"15#虚拟机栈\",\"138\":\"15#本地方法栈\",\"139\":\"15#程序计数器\",\"140\":\"15#方法区\",\"141\":\"15#堆\",\"142\":\"15#执行引擎\",\"143\":\"15#解释器\",\"144\":\"15#jit\",\"145\":\"15#垃圾回收器\",\"146\":\"15#如何判断一个对象是否还存活\",\"147\":\"15#垃圾收集算法\",\"148\":\"15#垃圾收集器\",\"149\":\"15#优化\",\"150\":\"15#获取-jvm-数据\",\"151\":\"15#jvm-数据分析\",\"152\":\"15#调优\",\"153\":\"15#优化工具\",\"154\":\"16\",\"155\":\"18\",\"156\":\"18#面向对象\",\"157\":\"18#封装\",\"158\":\"18#继承\",\"159\":\"18#多态\",\"160\":\"18#重写和重载\",\"161\":\"18#重写\",\"162\":\"18#重载\",\"163\":\"18#泛型机制\",\"164\":\"18#为什么引入泛型\",\"165\":\"18#泛型的基本使用\",\"166\":\"18#泛型类\",\"167\":\"18#泛型接口\",\"168\":\"18#泛型方法\",\"169\":\"18#泛型的上下限\",\"170\":\"18#泛型数组\",\"171\":\"18#深入理解泛型\",\"172\":\"18#泛型的擦除原则\",\"173\":\"18#如何进行擦除\",\"174\":\"18#如何理解泛型的多态-泛型的桥接方法\",\"175\":\"18#如何理解基本类型不能作为泛型类型\",\"176\":\"18#如何理解泛型类型不能实例化\",\"177\":\"18#如何获取泛型的参数类型\",\"178\":\"18#注解机制\",\"179\":\"18#注解基础\",\"180\":\"18#java自带的标准注解\",\"181\":\"18#元注解\",\"182\":\"18#自定义注解\",\"183\":\"18#深入理解注解\",\"184\":\"18#java8提供了哪些新的注解\",\"185\":\"18#注解支持继承吗\",\"186\":\"18#注解实现的原理\",\"187\":\"18#自定义注解和aop-通过切面实现解耦\",\"188\":\"18#异常机制\",\"189\":\"18#异常的层次结构\",\"190\":\"18#异常基础\",\"191\":\"18#异常实践\",\"192\":\"18#深入理解异常\",\"193\":\"18#反射机制\",\"194\":\"18#反射基础\",\"195\":\"18#反射使用\",\"196\":\"18#反射机制执行的流程\",\"197\":\"18#spi-机制\",\"198\":\"18#spi-机制介绍\",\"199\":\"18#spi-机制的使用\",\"200\":\"18#spi-机制的实现原理\",\"201\":\"19\",\"202\":\"19#为什么需要多线程\",\"203\":\"19#为什么会出现并发问题\",\"204\":\"19#可见性-cpu缓存引起\",\"205\":\"19#原子性-分时复用引起\",\"206\":\"19#有序性-重排序引起\",\"207\":\"19#java是怎么解决并发问题的\",\"208\":\"19#volatile\",\"209\":\"19#synchronized\",\"210\":\"19#final\",\"211\":\"19#happens-before\",\"212\":\"19#原子性\",\"213\":\"19#可见性\",\"214\":\"19#有序性\",\"215\":\"19#线程安全分类\",\"216\":\"19#不可变\",\"217\":\"19#绝对线程安全\",\"218\":\"19#相对线程安全\",\"219\":\"19#线程兼容\",\"220\":\"19#线程对立\",\"221\":\"19#线程安全的实现\",\"222\":\"19#互斥同步\",\"223\":\"19#非阻塞同步\",\"224\":\"19#cas\",\"225\":\"19#atomicinteger\",\"226\":\"19#aba\",\"227\":\"19#无同步方案\",\"228\":\"19#栈封闭\",\"229\":\"19#线程本地存储-thread-local-storage\",\"230\":\"19#可重入代码-reentrant-code\",\"231\":\"19#线程状态\",\"232\":\"19#新建-new\",\"233\":\"19#可运行-runnable\",\"234\":\"19#阻塞-blocking\",\"235\":\"19#无限期等待-waiting\",\"236\":\"19#限期等待-timed-waiting\",\"237\":\"19#死亡-terminated\",\"238\":\"19#线程使用方式\",\"239\":\"19#实现接口-vs-继承-thread\",\"240\":\"19#基础线程机制\",\"241\":\"19#executor\",\"242\":\"19#daemon\",\"243\":\"19#sleep\",\"244\":\"19#yield\",\"245\":\"19#线程中断\",\"246\":\"19#interruptedexception\",\"247\":\"19#interrupted\",\"248\":\"19#executor-的中断操作\",\"249\":\"19#线程互斥同步\",\"250\":\"19#线程间的协作\",\"251\":\"19#join\",\"252\":\"19#wait-notify-notifyall\",\"253\":\"19#wait-和-sleep-的区别\",\"254\":\"19#await-signal-signalall\",\"255\":\"19#java-锁\",\"256\":\"19#乐观锁-vs-悲观锁\",\"257\":\"19#自旋锁-vs-适应性自旋锁\",\"258\":\"19#无锁-vs-偏向锁-vs-轻量级锁-vs-重量级锁\",\"259\":\"19#公平锁-vs-非公平锁\",\"260\":\"19#可重入锁-vs-非可重入锁\",\"261\":\"19#独享锁-排他锁-vs-共享锁\",\"262\":\"19#final-详解\",\"263\":\"19#final基础使用\",\"264\":\"19#修饰类\",\"265\":\"19#修饰方法\",\"266\":\"19#修饰参数\",\"267\":\"19#修饰变量\",\"268\":\"19#final域重排序规则\",\"269\":\"19#final域为基本类型\",\"270\":\"19#写final域重排序规则\",\"271\":\"19#读final域重排序规则\",\"272\":\"19#final域为引用类型\",\"273\":\"19#对final修饰的对象的成员域写操作\",\"274\":\"19#对final修饰的对象的成员域读操作\",\"275\":\"19#关于final重排序的总结\",\"276\":\"19#final的实现原理\",\"277\":\"19#volatile-详解\",\"278\":\"19#volatile的作用详解\",\"279\":\"19#防重排序\",\"280\":\"19#实现可见性\",\"281\":\"19#保证原子性-单次读-写\",\"282\":\"19#问题1-i-为什么不能保证原子性\",\"283\":\"19#问题2-共享的long和double变量的为什么要用volatile\",\"284\":\"19#volatile-的实现原理\",\"285\":\"19#volatile-可见性实现\",\"286\":\"19#volatile-有序性实现\",\"287\":\"19#happens-before-规则中有一条是-volatile-变量规则-对一个-volatile-域的写-happens-before-于任意后续对这个-volatile-域的读。\",\"288\":\"19#volatile-禁止重排序\",\"289\":\"19#synchronized-详解\",\"290\":\"19#juc\",\"291\":\"19#juc-原子类\",\"292\":\"19#juc-锁\",\"293\":\"19#juc-集合\",\"294\":\"19#juc-线程池\",\"295\":\"19#juc-工具类\",\"296\":\"19#threadlocal\",\"297\":\"19#transmittable-thread-local\",\"298\":\"20\",\"299\":\"20#collection\",\"300\":\"20#实现类比较\",\"301\":\"20#arraylist\",\"302\":\"20#构造方法\",\"303\":\"20#判断\",\"304\":\"20#新增\",\"305\":\"20#删除\",\"306\":\"20#扩展方法\",\"307\":\"20#linkedlist\",\"308\":\"20#构造方法-1\",\"309\":\"20#判断-1\",\"310\":\"20#新增-1\",\"311\":\"20#删除-1\",\"312\":\"20#扩展方法-1\",\"313\":\"20#vector\",\"314\":\"20#构造方法-2\",\"315\":\"20#判断-2\",\"316\":\"20#新增-2\",\"317\":\"20#删除-2\",\"318\":\"20#扩展方法-2\",\"319\":\"20#stack\",\"320\":\"20#hashset\",\"321\":\"20#treeset\",\"322\":\"20#copyonwritearraylist\",\"323\":\"20#copyonwritearrayset\",\"324\":\"20#concurrentskiplistset\",\"325\":\"20#map\",\"326\":\"20#hashmap\",\"327\":\"20#hashmap的扩缩容\",\"328\":\"20#treemap\",\"329\":\"20#weakhashmap\",\"330\":\"20#hashtable\",\"331\":\"20#concurrenthashmap\",\"332\":\"20#concurrentskiplistmap\",\"333\":\"20#queue\",\"334\":\"20#arrayblockingqueue\",\"335\":\"20#linkedblockingqueue\",\"336\":\"20#linkedblockingdeque\",\"337\":\"20#concurrentlinkedqueue\",\"338\":\"20#concurrentlinkeddeque\",\"339\":\"21\",\"340\":\"21#什么是代理\",\"341\":\"21#jdk-动态代理\",\"342\":\"21#实例\",\"343\":\"21#jdk动态代理步骤\",\"344\":\"21#cglib-代理\",\"345\":\"21#实例-1\",\"346\":\"21#对比\",\"347\":\"21#实现原理\",\"348\":\"21#面向\",\"349\":\"21#使用注意\",\"350\":\"21#各自局限\",\"351\":\"21#性能对比\",\"352\":\"22\",\"353\":\"22#_1-属性\",\"354\":\"22#_2-构造方法\",\"355\":\"22#public-string\",\"356\":\"22#public-string-string-original\",\"357\":\"22#public-string-char-value\",\"358\":\"22#public-string-byte-bytes\",\"359\":\"22#public-string-stringbuffer-buffer\",\"360\":\"22#public-string-stringbuilder-builder\",\"361\":\"22#_3-常用方法\",\"362\":\"22#字符串的长度-length\",\"363\":\"22#是否为空-isempty\",\"364\":\"22#获得字符串的第几个字符-charat-int-index\",\"365\":\"22#比较内容是否相等-equals-object-object\",\"366\":\"22#忽略大小写比较是否相等-equalsignorecase-string-anotherstring\",\"367\":\"22#比较字符串的大小-compareto-string-anotherstring\",\"368\":\"22#判断字符串是否从某个字符串开始的-startswith-string-prefix-int-toffset\",\"369\":\"22#_4-常见问题\",\"370\":\"23\",\"371\":\"23#_1-java-语言有哪些特点\",\"372\":\"23#_2-面向对象和面向过程的区别\",\"373\":\"23#_3-八种基本数据类型的大小、以及他们的封装类\",\"374\":\"23#_4-instanceof\",\"375\":\"23#_5-自动装箱和拆箱\",\"376\":\"23#_6-重载和重写\",\"377\":\"23#_7-和-equals\",\"378\":\"23#_8-hashcode-作用\",\"379\":\"23#_9-string、stringbuffer、stringbuilder-区别\",\"380\":\"23#_10-arraylist-和-linkedlist-的区别\",\"381\":\"23#_11-hashmap-和-hashtable-的区别\",\"382\":\"23#_12-collection-包和-collections-包的区别\",\"383\":\"23#_13-java-的四种引用\",\"384\":\"23#_14-泛型常用特点\",\"385\":\"23#_15-java-创建对象的方式\",\"386\":\"23#_16-有没有可能两个对象不等-但是-hashcode-相等\",\"387\":\"23#_17-深拷贝和浅拷贝\",\"388\":\"23#_18-final-有哪些用法\",\"389\":\"23#_19-static-的用法\",\"390\":\"23#_20-3-0-1-0-3-返回值是什么\",\"391\":\"23#_21-a-a-b-和-a-b-有什么区别\",\"392\":\"23#_22-try-catch-finally-try-里面有-return-finally-还会执行吗\",\"393\":\"23#_23-exception-和-error-包结构\",\"394\":\"23#_24-oom-你遇到过哪些情况-sof-你遇到过那些情况\",\"395\":\"23#_25-简述线程、程序、进程的基本概念。以及他们之间的关系\",\"396\":\"23#_26-某些字段不行序列化怎么办\",\"397\":\"23#_27-java-中的-io-流\",\"398\":\"23#_28-io-和-nio-的区别\",\"399\":\"23#_29-java-反射的作用与原理\",\"400\":\"23#_30-list、set、map-什么区别\",\"401\":\"23#_31-object-有哪些方法\",\"402\":\"23#_32-arraylist-和-linkedlist\",\"403\":\"23#_33-存在数组了为什么还要-arraylist\",\"404\":\"23#_34-什么是-fail-fast\",\"405\":\"23#_35-hashtable-和-hashmap\",\"406\":\"23#_36-hashmap-中的-key-可以使用任何类作为-key-吗\",\"407\":\"23#_37-hashmap-的长度为什么是-2-的-n-次方\",\"408\":\"23#_38-hashmap-和-concurrenthashmap-的异同\",\"409\":\"23#_39-红黑树\",\"410\":\"23#_40-怎么处理异常\",\"411\":\"30\",\"412\":\"30#安装与配置\",\"413\":\"30#windows-安装\",\"414\":\"30#ubuntu-安装\",\"415\":\"30#centos-安装\",\"416\":\"30#安装包安装\",\"417\":\"30#docker-安装\",\"418\":\"30#基础语法\",\"419\":\"30#函数\",\"420\":\"30#字符串函数\",\"421\":\"30#数值函数\",\"422\":\"30#时间和日期函数\",\"423\":\"30#流程函数\",\"424\":\"30#其他函数\",\"425\":\"30#mysql-50-题\",\"426\":\"30#学生表\",\"427\":\"30#科目表\",\"428\":\"30#教师表\",\"429\":\"30#成绩表\",\"430\":\"30#题目\",\"431\":\"30#存储引擎\",\"432\":\"30#储存引擎的对比\",\"433\":\"30#myisam-存储引擎\",\"434\":\"30#innodb-存储引擎\",\"435\":\"30#memory-存储引擎\",\"436\":\"30#merge-存储引擎\",\"437\":\"30#存储引擎的选择\",\"438\":\"30#触发器\",\"439\":\"30#触发器创建\",\"440\":\"30#删除触发器\",\"441\":\"30#查看触发器\",\"442\":\"30#使用规则\",\"443\":\"30#存储过程和函数\",\"444\":\"30#函数-1\",\"445\":\"30#存储过程\",\"446\":\"30#索引\",\"447\":\"30#创建索引\",\"448\":\"30#索引测试\",\"449\":\"30#设计索引的原则\",\"450\":\"30#btree-索引与-hash-索引\",\"451\":\"30#锁\",\"452\":\"30#类型\",\"453\":\"30#myisam-表锁\",\"454\":\"30#innodb-锁\",\"455\":\"30#优化\",\"456\":\"30#优化-sql-的一般步骤\",\"457\":\"30#索引问题\",\"458\":\"30#简单的优化方法\",\"459\":\"30#常用-sql-的优化\",\"460\":\"31\",\"461\":\"31#安装\",\"462\":\"31#基础\",\"463\":\"31#高级\",\"464\":\"31#实践\",\"465\":\"32\",\"466\":\"32#接口层\",\"467\":\"32#使用传统的-mybatis-提供的-api\",\"468\":\"32#使用-mapper-接口\",\"469\":\"32#数据处理层\",\"470\":\"32#通过传入参数构建动态-sql-语句\",\"471\":\"32#sql-语句的执行以及封装查询结果集成list-e\",\"472\":\"32#框架支撑层\",\"473\":\"32#引导层\",\"474\":\"32#主要构件及其相互关系\",\"475\":\"32@0\",\"476\":\"33\",\"477\":\"33#流程简解\",\"478\":\"33#src-main-resources-mybatis-config-xml\",\"479\":\"33#src-main-resources-teachermapper-xml\",\"480\":\"33#src-main-resources-log4j-properties\",\"481\":\"33#src-main-java-org-apache-ibatis-test-teacher-java\",\"482\":\"33#src-main-java-org-apache-ibatis-test-test-java\",\"483\":\"33#流程\",\"484\":\"33@0\",\"485\":\"34\",\"486\":\"34#包详解\",\"487\":\"34#transaction包\",\"488\":\"34#背景知识\",\"489\":\"34#讲解\",\"490\":\"34#jdbc包\",\"491\":\"34#背景知识-1\",\"492\":\"34#讲解-1\",\"493\":\"34#模版模式\",\"494\":\"34#易用性\",\"495\":\"34#sqlrunner类\",\"496\":\"34#scriptrunner类\",\"497\":\"34#datasource包\",\"498\":\"34#背景知识-2\",\"499\":\"34#讲解-2\",\"500\":\"34#数据库连接池\",\"501\":\"34#jndi\",\"502\":\"34#设计模式\",\"503\":\"34#exception包\",\"504\":\"34#背景知识-3\",\"505\":\"34#讲解-3\",\"506\":\"34#工厂模式\",\"507\":\"34#异常类型\",\"508\":\"34#annotations和-lang包\",\"509\":\"34#背景知识-4\",\"510\":\"34#讲解-4\",\"511\":\"34@0\",\"512\":\"35\",\"513\":\"35@0\",\"514\":\"36\",\"515\":\"36@0\",\"516\":\"37\",\"517\":\"37@0\",\"518\":\"38\",\"519\":\"38#下载代码\",\"520\":\"38#修改配置\",\"521\":\"38#添加测试包\",\"522\":\"38#本人代码库\",\"523\":\"38@0\",\"524\":\"39\",\"525\":\"39#spring-整体架构\",\"526\":\"39@0\",\"527\":\"40\",\"528\":\"40#spring-初始化流程\",\"529\":\"40#什么是-applicationcontext\",\"530\":\"40#无参-applicationcontext\",\"531\":\"40#注册对应的-class\",\"532\":\"40#注册对象\",\"533\":\"40#preparerefresh\",\"534\":\"40#obtainfreshbeanfactory\",\"535\":\"40#preparebeanfactory-beanfactory\",\"536\":\"40#postprocessbeanfactory-beanfactory\",\"537\":\"40#invokebeanfactorypostprocessors-beanfactory\",\"538\":\"40#执行-beanfactorypostprocessor\",\"539\":\"40#是否需要-aop\",\"540\":\"40#registerbeanpostprocessors-beanfactory\",\"541\":\"40#initmessagesource\",\"542\":\"40#initapplicationeventmulticaster\",\"543\":\"40#onrefresh\",\"544\":\"40#registerlisteners\",\"545\":\"40#附录\",\"546\":\"40#beandefinition的默认实现类\",\"547\":\"40@0\",\"548\":\"42\",\"549\":\"42#统计\",\"550\":\"42#板块轮动\",\"551\":\"42#涨停分析\",\"552\":\"42#跌停分析\",\"553\":\"42#龙虎榜分析\",\"554\":\"42#人气分析\",\"555\":\"42#板块分析\",\"556\":\"42#预案\",\"557\":\"43\",\"558\":\"43#今日操作\",\"559\":\"43#总览\",\"560\":\"43#卖出\",\"561\":\"43#天元智能\",\"562\":\"43#牧原股份\",\"563\":\"43#买入\",\"564\":\"43#万丰奥威\",\"565\":\"43#克来机电\",\"566\":\"43#操作总结\",\"567\":\"43#卖出-1\",\"568\":\"43#买入-1\",\"569\":\"43#今日情绪\",\"570\":\"43#板块轮动\",\"571\":\"43#个股选择\",\"572\":\"43#明日计划\",\"573\":\"43#思考\",\"574\":\"44\",\"575\":\"44#今日走势\",\"576\":\"44#今日操作\",\"577\":\"44#kimi\",\"578\":\"44#铜缆高速连接\",\"579\":\"44#昨日个股走势\",\"580\":\"44#kimi-1\",\"581\":\"44#低空经济\",\"582\":\"44#今日情绪\",\"583\":\"44#今日连板\",\"584\":\"44#地产链\",\"585\":\"44#京投发展\",\"586\":\"44#亚振家居\",\"587\":\"44#爱丽家居\",\"588\":\"44#选择\",\"589\":\"44#食品饮料\",\"590\":\"44#总结\",\"591\":\"44#问题\",\"592\":\"45\",\"593\":\"45#学习\",\"594\":\"45#今日连板\",\"595\":\"45#今日操作\",\"596\":\"45#地产链\",\"597\":\"45#今日情绪\",\"598\":\"45#今日大盘\",\"599\":\"45#煤炭\",\"600\":\"45#短剧游戏\",\"601\":\"45#低空经济尝试修复\",\"602\":\"46\",\"603\":\"46#概览\",\"604\":\"46#大盘情况\",\"605\":\"46#晋级情况\",\"606\":\"46#今日连板情况\",\"607\":\"46#板块轮动\",\"608\":\"46#情绪分析图\",\"609\":\"46#期货情况\",\"610\":\"46#美股\",\"611\":\"46#分析\",\"612\":\"46#大盘\",\"613\":\"46#板块\",\"614\":\"46#低空经济\",\"615\":\"46#个股\",\"616\":\"46#有色金属\",\"617\":\"47\",\"618\":\"47#概览\",\"619\":\"47#大盘情况\",\"620\":\"47#晋级情况\",\"621\":\"47#今日连板情况\",\"622\":\"47#板块轮动\",\"623\":\"47#情绪分析图\",\"624\":\"47#分析\",\"625\":\"47#大盘\",\"626\":\"47#板块\",\"627\":\"47#低空经济\",\"628\":\"47#军工\",\"629\":\"47#个股\",\"630\":\"48\",\"631\":\"48#大盘\",\"632\":\"48#持仓个股\",\"633\":\"48#苏交科\",\"634\":\"48#锡业股份\",\"635\":\"48#博迁新材\",\"636\":\"48#低空经济\",\"637\":\"48#今日异动机会\",\"638\":\"48#今日涨停复盘\",\"639\":\"48#明日\",\"640\":\"48#反思\",\"641\":\"49\",\"642\":\"49#大盘\",\"643\":\"49#个股\",\"644\":\"49#持仓个股\",\"645\":\"49#中衡设计\",\"646\":\"49#低空经济\",\"647\":\"49#今日异动机会\",\"648\":\"49#铜缆高速连接\",\"649\":\"49#通信工程\",\"650\":\"49#云服务\",\"651\":\"49#时空大数据\",\"652\":\"49#cpo-概念\",\"653\":\"49#光通信\",\"654\":\"49#毫米波雷达\",\"655\":\"49#高贝塔值\",\"656\":\"49#华为算力\",\"657\":\"49#今日涨停复盘\",\"658\":\"49#明日\",\"659\":\"49#题材-1\",\"660\":\"49#题材-2\",\"661\":\"49#反思\",\"662\":\"50\",\"663\":\"50#反思\",\"664\":\"53\",\"665\":\"53#数组\",\"666\":\"53#链表\",\"667\":\"53#栈\",\"668\":\"53#队列\",\"669\":\"53#树\",\"670\":\"53#二叉树\",\"671\":\"53#平衡二叉树\",\"672\":\"53#红黑树\",\"673\":\"53#b-树\",\"674\":\"53#b-树-1\",\"675\":\"53#散列表\",\"676\":\"53#堆\",\"677\":\"53#图\",\"678\":\"53#有向图\",\"679\":\"53#无向图\",\"680\":\"56\",\"681\":\"56#docker环境搭建\",\"682\":\"56#docker命令使用\",\"683\":\"56#启动容器\",\"684\":\"56#停止容器\",\"685\":\"56#删除容器\",\"686\":\"56#查看容器\",\"687\":\"56#构建镜像\",\"688\":\"56#离线下载镜像\",\"689\":\"56#删除镜像\",\"690\":\"56#镜像打标签\",\"691\":\"56#镜像优化\",\"692\":\"56#docker-原理\",\"693\":\"56#cgroups-控制组\",\"694\":\"56#cgroup-介绍\",\"695\":\"56#docker-如何使用的-cgroup\",\"696\":\"56#namespace-命名空间\",\"697\":\"56#unionfs-联合文件系统\",\"698\":\"56#docker-存储\",\"699\":\"56#docker-持久化\",\"700\":\"56#docker-网络\",\"701\":\"59\",\"702\":\"59#sealos安装集群\",\"703\":\"59#下载sealos\",\"704\":\"59#下载kube安装包\",\"705\":\"59#添加master\",\"706\":\"59#删除master\",\"707\":\"59#添加node\",\"708\":\"59#删除node\",\"709\":\"59#清理集群\",\"710\":\"59#安装应用\",\"711\":\"59#参考\",\"712\":\"59#注意\",\"713\":\"59#rancher安装集群\",\"714\":\"59#_1-创建集群\",\"715\":\"59#_2-安装-master\",\"716\":\"59#_3-安装-node\",\"717\":\"59#_4-笔记本合盖\",\"718\":\"59#_5-主机名\",\"719\":\"59#脚本安装\",\"720\":\"59#服务器规划\",\"721\":\"59#修改hostname-所有节点\",\"722\":\"59#安装前检查-所有节点\",\"723\":\"59#安装负载均衡-apiserver-lb\",\"724\":\"59#安装-docker-kubelet-所有master、node节点\",\"725\":\"59#初始化第一个master节点-k8s-master01\",\"726\":\"59#初始化第二、三个master节点-k8s-master02、k8s-master03\",\"727\":\"59#初始化-worker节点-k8s-node01、k8s-node02\",\"728\":\"59#移除worker节点\",\"729\":\"59#安装kubernetes-dashboard-k8s-master01\",\"730\":\"59#问题排查\",\"731\":\"59#附件\",\"732\":\"61\",\"733\":\"61#阻塞式-i-o-bio\",\"734\":\"61#非阻塞式-i-o-nio\",\"735\":\"61#i-o复用-select和-poll\",\"736\":\"61#信号驱动式-i-o-sigio\",\"737\":\"61#异步-i-o-aio\",\"738\":\"61#比较\",\"739\":\"61#参考\",\"740\":\"62\",\"741\":\"62#_1-介绍和举例\",\"742\":\"62#_1-1-课程内容简介\",\"743\":\"62#_1-2-操作系统结构\",\"744\":\"62#_1-3-挑战和快乐\",\"745\":\"62#_1-4-课程资源\",\"746\":\"62#_1-5-函数\",\"747\":\"62#_2-操作系统架构和系统调用\",\"748\":\"63\",\"749\":\"63#七大原则\",\"750\":\"63#开闭原则\",\"751\":\"63#单一职责原则\",\"752\":\"63#里氏替换原则\",\"753\":\"63#依赖倒置原则\",\"754\":\"63#接口隔离原则\",\"755\":\"63#迪米特法则\",\"756\":\"63#组合-聚合复用原则\",\"757\":\"63#创建型\",\"758\":\"63#单例模式\",\"759\":\"63#饿汉式\",\"760\":\"63#懒汉式\",\"761\":\"63#工厂模式\",\"762\":\"63#抽象工厂模式\",\"763\":\"63#建造者模式\",\"764\":\"63#原型模式\",\"765\":\"63#结构型\",\"766\":\"63#适配器模式\",\"767\":\"63#桥梁模式\",\"768\":\"63#装饰器模式\",\"769\":\"63#门面模式\",\"770\":\"63#合成模式\",\"771\":\"63#享元模式\",\"772\":\"63#代理模式\",\"773\":\"63#注意事项\",\"774\":\"63#行为型\",\"775\":\"63#策略模式\",\"776\":\"63#模版方法模式\",\"777\":\"63#观察者模式\",\"778\":\"63#迭代器模式\",\"779\":\"63#责任链模式\",\"780\":\"63#命令模式\",\"781\":\"63#备忘录模式\",\"782\":\"63#状态模式\",\"783\":\"63#访问者模式\",\"784\":\"63#中介者模式\",\"785\":\"63#解释器模式\",\"786\":\"64\",\"787\":\"65\",\"788\":\"66\",\"789\":\"67\",\"790\":\"68\",\"791\":\"69\",\"792\":\"70\",\"793\":\"71\",\"794\":\"72\",\"795\":\"73\",\"796\":\"74\",\"797\":\"75\",\"798\":\"76\",\"799\":\"77\",\"800\":\"78\",\"801\":\"79\",\"802\":\"80\",\"803\":\"81\",\"804\":\"82\",\"805\":\"83\",\"806\":\"84\",\"807\":\"85\",\"808\":\"86\",\"809\":\"87\",\"810\":\"88\",\"811\":\"89\",\"812\":\"90\",\"813\":\"91\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[null,null,1],\"3\":[1,55],\"4\":[1,17],\"5\":[1],\"6\":[2,8],\"7\":[3,3],\"8\":[2,10],\"9\":[2,23],\"10\":[2,4],\"11\":[2,25],\"12\":[2,20],\"13\":[2],\"14\":[2,5],\"15\":[3,6],\"16\":[3,3],\"17\":[2,2],\"18\":[2,8],\"19\":[3,19],\"20\":[4],\"21\":[1,17],\"22\":[2,34],\"23\":[2,20],\"24\":[2,115],\"25\":[2,5],\"26\":[1,62],\"27\":[2,28],\"28\":[1,16],\"29\":[1,44],\"30\":[3,6],\"31\":[1,25],\"32\":[4,58],\"33\":[4],\"34\":[3,146],\"35\":[1,6],\"36\":[3,1],\"37\":[1,5],\"38\":[3,4],\"39\":[2,28],\"40\":[2,55],\"41\":[1],\"42\":[1,5],\"43\":[1,7],\"44\":[1,6],\"45\":[1],\"46\":[2,8],\"47\":[2,7],\"48\":[2,15],\"49\":[1,42],\"50\":[1],\"51\":[null,null,1],\"52\":[5,24],\"53\":[9,87],\"54\":[1],\"55\":[1,179],\"56\":[3],\"57\":[1,311],\"58\":[3],\"59\":[1,168],\"60\":[5],\"61\":[1,60],\"62\":[5],\"63\":[1,42],\"64\":[4],\"65\":[1,195],\"66\":[3],\"67\":[1,276],\"68\":[5],\"69\":[1,122],\"70\":[5],\"71\":[1,71],\"72\":[5],\"73\":[1,99],\"74\":[3],\"75\":[1,157],\"76\":[5],\"77\":[1,73],\"78\":[5],\"79\":[1,71],\"80\":[4],\"81\":[1,128],\"82\":[3],\"83\":[1,98],\"84\":[5],\"85\":[1,55],\"86\":[4],\"87\":[1,58],\"88\":[1],\"89\":[1,121],\"90\":[4],\"91\":[1,53],\"92\":[4],\"93\":[1,84],\"94\":[4],\"95\":[1,28],\"96\":[6],\"97\":[1,475],\"98\":[4],\"99\":[1,167],\"100\":[4],\"101\":[1,59],\"102\":[3],\"103\":[1,65],\"104\":[2],\"105\":[1,146],\"106\":[4],\"107\":[1,306],\"108\":[3],\"109\":[1,111],\"110\":[1],\"111\":[1,250],\"112\":[1],\"113\":[1,53],\"114\":[1],\"115\":[1,34],\"116\":[1],\"117\":[null,null,1],\"118\":[1],\"119\":[null,null,1],\"120\":[1],\"121\":[null,null,1],\"122\":[1],\"123\":[null,null,1],\"124\":[1,31],\"125\":[2,10],\"126\":[1,16],\"127\":[1,2],\"128\":[1],\"129\":[2,44],\"130\":[2,200],\"131\":[2,4],\"132\":[3,26],\"133\":[3,5],\"134\":[3,4],\"135\":[2,8],\"136\":[1,54],\"137\":[1,10],\"138\":[1,15],\"139\":[1,16],\"140\":[1,23],\"141\":[1,38],\"142\":[1,2],\"143\":[1],\"144\":[1,6],\"145\":[1,1],\"146\":[1,23],\"147\":[1,63],\"148\":[1,104],\"149\":[1],\"150\":[3,8],\"151\":[2,11],\"152\":[1,2],\"153\":[1,24],\"154\":[2],\"155\":[1],\"156\":[1],\"157\":[1,23],\"158\":[1,26],\"159\":[1,8],\"160\":[1],\"161\":[1,47],\"162\":[1,19],\"163\":[1,12],\"164\":[1,29],\"165\":[1],\"166\":[1,67],\"167\":[1,41],\"168\":[1,3],\"169\":[1,83],\"170\":[1,21],\"171\":[1,19],\"172\":[1,13],\"173\":[1,4],\"174\":[2],\"175\":[1,5],\"176\":[2,31],\"177\":[1,3],\"178\":[1],\"179\":[1,44],\"180\":[1,13],\"181\":[1,28],\"182\":[1],\"183\":[1],\"184\":[1],\"185\":[2],\"186\":[1,3],\"187\":[2],\"188\":[1],\"189\":[1],\"190\":[1],\"191\":[1],\"192\":[1],\"193\":[1],\"194\":[1],\"195\":[1],\"196\":[1],\"197\":[2],\"198\":[2,39],\"199\":[2],\"200\":[2,6],\"201\":[2],\"202\":[1,26],\"203\":[1],\"204\":[2,21],\"205\":[2,24],\"206\":[2,50],\"207\":[1,14],\"208\":[1],\"209\":[1],\"210\":[1],\"211\":[2,43],\"212\":[1,7],\"213\":[1,16],\"214\":[1,13],\"215\":[1],\"216\":[1,7],\"217\":[1,3],\"218\":[1,5],\"219\":[1,16],\"220\":[1,9],\"221\":[1],\"222\":[1,12],\"223\":[1],\"224\":[1,34],\"225\":[1,15],\"226\":[1,24],\"227\":[1,5],\"228\":[1,5],\"229\":[5,29],\"230\":[1,13],\"231\":[1,2],\"232\":[3,2],\"233\":[3,9],\"234\":[3,3],\"235\":[3,20],\"236\":[4,37],\"237\":[3,3],\"238\":[1,15],\"239\":[4,12],\"240\":[1],\"241\":[1,15],\"242\":[1,11],\"243\":[2,13],\"244\":[2,8],\"245\":[1,3],\"246\":[1,15],\"247\":[2,21],\"248\":[2,11],\"249\":[1,10],\"250\":[1,4],\"251\":[2,7],\"252\":[4,27],\"253\":[4,11],\"254\":[4,21],\"255\":[2],\"256\":[3,22],\"257\":[3,34],\"258\":[5,8],\"259\":[3,19],\"260\":[3,8],\"261\":[4,13],\"262\":[2],\"263\":[1],\"264\":[1,9],\"265\":[1,16],\"266\":[1],\"267\":[1],\"268\":[1],\"269\":[1],\"270\":[1,8],\"271\":[1,13],\"272\":[1],\"273\":[1,9],\"274\":[1,12],\"275\":[1,13],\"276\":[1,17],\"277\":[2],\"278\":[1],\"279\":[1,13],\"280\":[1,6],\"281\":[3,3],\"282\":[3,14],\"283\":[3,8],\"284\":[2],\"285\":[2,22],\"286\":[2],\"287\":[10],\"288\":[2,44],\"289\":[2],\"290\":[1],\"291\":[2],\"292\":[2],\"293\":[2],\"294\":[2],\"295\":[2],\"296\":[1],\"297\":[3],\"298\":[1,8],\"299\":[1,62],\"300\":[1,24],\"301\":[1,12],\"302\":[1,25],\"303\":[1,4],\"304\":[1,62],\"305\":[1,11],\"306\":[1],\"307\":[1,6],\"308\":[1,5],\"309\":[1,3],\"310\":[1,14],\"311\":[1,4],\"312\":[1],\"313\":[1,8],\"314\":[1,6],\"315\":[1,4],\"316\":[1,3],\"317\":[1],\"318\":[1],\"319\":[1],\"320\":[1],\"321\":[1],\"322\":[1],\"323\":[1],\"324\":[1],\"325\":[1,82],\"326\":[1,74],\"327\":[1,37],\"328\":[1],\"329\":[1],\"330\":[1],\"331\":[1],\"332\":[1],\"333\":[1],\"334\":[1],\"335\":[1],\"336\":[1],\"337\":[1],\"338\":[1],\"339\":[4],\"340\":[1,9],\"341\":[2,20],\"342\":[1,52],\"343\":[1,18],\"344\":[2,9],\"345\":[1,56],\"346\":[1],\"347\":[1,7],\"348\":[1,5],\"349\":[2,6],\"350\":[2,8],\"351\":[1,14],\"352\":[1],\"353\":[2,37],\"354\":[2],\"355\":[3,35],\"356\":[4,47],\"357\":[5,44],\"358\":[5,65],\"359\":[5,49],\"360\":[5,65],\"361\":[2],\"362\":[3,32],\"363\":[3,25],\"364\":[5,65],\"365\":[5,68],\"366\":[5,89],\"367\":[5,135],\"368\":[7,79],\"369\":[2],\"370\":[2],\"371\":[3,13],\"372\":[2,21],\"373\":[3,45],\"374\":[2,17],\"375\":[2,11],\"376\":[2,10],\"377\":[4,5],\"378\":[3,7],\"379\":[5,14],\"380\":[5,12],\"381\":[5,21],\"382\":[5,4],\"383\":[3,21],\"384\":[2,1],\"385\":[3,7],\"386\":[6,27],\"387\":[2,6],\"388\":[3,74],\"389\":[3,6],\"390\":[7,2],\"391\":[5,13],\"392\":[8,8],\"393\":[5,7],\"394\":[5,2],\"395\":[5,29],\"396\":[3,8],\"397\":[5,9],\"398\":[5,11],\"399\":[3,59],\"400\":[5,10],\"401\":[3,21],\"402\":[4],\"403\":[3,1],\"404\":[4,10],\"405\":[4],\"406\":[7,11],\"407\":[7],\"408\":[6],\"409\":[2],\"410\":[2],\"411\":[1],\"412\":[1],\"413\":[2],\"414\":[2],\"415\":[2],\"416\":[1],\"417\":[2,22],\"418\":[1],\"419\":[1],\"420\":[1,15],\"421\":[1],\"422\":[1,19],\"423\":[1],\"424\":[1],\"425\":[3],\"426\":[1,49],\"427\":[1,19],\"428\":[1,17],\"429\":[1,36],\"430\":[1,285],\"431\":[1,31],\"432\":[1],\"433\":[2,60],\"434\":[2,106],\"435\":[2,43],\"436\":[2,48],\"437\":[1,56],\"438\":[1,3],\"439\":[1,36],\"440\":[1,6],\"441\":[1,4],\"442\":[1,21],\"443\":[1,18],\"444\":[1,28],\"445\":[1,28],\"446\":[1,59],\"447\":[1,63],\"448\":[1],\"449\":[1,69],\"450\":[4,33],\"451\":[1],\"452\":[1,26],\"453\":[2,69],\"454\":[2,70],\"455\":[1],\"456\":[3,174],\"457\":[1,10],\"458\":[1,4],\"459\":[3,16],\"460\":[1],\"461\":[1,13],\"462\":[1,261],\"463\":[1,201],\"464\":[1,44],\"465\":[1,3],\"466\":[1,9],\"467\":[4,15],\"468\":[3,59],\"469\":[1,9],\"470\":[4,32],\"471\":[2,14],\"472\":[1,48],\"473\":[1,11],\"474\":[1,59],\"475\":[null,null,1],\"476\":[1],\"477\":[1],\"478\":[1,77],\"479\":[1,54],\"480\":[1,16],\"481\":[1,27],\"482\":[1,59],\"483\":[1,15],\"484\":[null,null,1],\"485\":[1],\"486\":[1],\"487\":[1],\"488\":[1,1],\"489\":[1,6],\"490\":[1],\"491\":[1,2],\"492\":[1],\"493\":[1,46],\"494\":[1,5],\"495\":[1,67],\"496\":[1,64],\"497\":[1,4],\"498\":[1,6],\"499\":[1],\"500\":[1,65],\"501\":[1,2],\"502\":[1,71],\"503\":[1,2],\"504\":[1,2],\"505\":[1],\"506\":[1,26],\"507\":[1,66],\"508\":[2],\"509\":[1],\"510\":[1],\"511\":[null,null,1],\"512\":[1],\"513\":[null,null,1],\"514\":[1],\"515\":[null,null,1],\"516\":[1],\"517\":[null,null,1],\"518\":[1],\"519\":[1,9],\"520\":[1,5],\"521\":[1,106],\"522\":[1,8],\"523\":[null,null,1],\"524\":[2],\"525\":[2],\"526\":[null,null,1],\"527\":[2],\"528\":[2,16],\"529\":[2,19],\"530\":[2,24],\"531\":[2,26],\"532\":[1,102],\"533\":[1,88],\"534\":[1,14],\"535\":[1,84],\"536\":[1,38],\"537\":[1,17],\"538\":[2,155],\"539\":[2,24],\"540\":[1,115],\"541\":[1,56],\"542\":[1,38],\"543\":[1,8],\"544\":[1,69],\"545\":[1],\"546\":[1,212],\"547\":[null,null,1],\"548\":[4],\"549\":[1],\"550\":[1,1],\"551\":[1],\"552\":[1],\"553\":[1],\"554\":[1],\"555\":[1],\"556\":[1],\"557\":[4],\"558\":[1],\"559\":[1,1],\"560\":[1],\"561\":[1,1],\"562\":[1,1],\"563\":[1],\"564\":[1,1],\"565\":[1,1],\"566\":[1],\"567\":[1,9],\"568\":[1,11],\"569\":[1,2],\"570\":[1,2],\"571\":[1,6],\"572\":[1,3],\"573\":[1,3],\"574\":[4],\"575\":[1],\"576\":[1],\"577\":[1,13],\"578\":[1,2],\"579\":[1],\"580\":[1,9],\"581\":[1,4],\"582\":[1,9],\"583\":[1,1],\"584\":[1,6],\"585\":[1,10],\"586\":[1,9],\"587\":[1,10],\"588\":[1,2],\"589\":[1],\"590\":[1,2],\"591\":[1,3],\"592\":[4],\"593\":[1,1],\"594\":[1],\"595\":[1],\"596\":[1,18],\"597\":[1,12],\"598\":[1],\"599\":[1],\"600\":[1,5],\"601\":[1,6],\"602\":[4],\"603\":[1],\"604\":[1],\"605\":[1,1],\"606\":[1,1],\"607\":[1,1],\"608\":[1,1],\"609\":[1],\"610\":[1],\"611\":[1],\"612\":[1,7],\"613\":[1],\"614\":[1,19],\"615\":[1,7],\"616\":[1,7],\"617\":[4],\"618\":[1],\"619\":[1],\"620\":[1,1],\"621\":[1,1],\"622\":[1,1],\"623\":[1,1],\"624\":[1],\"625\":[1,4],\"626\":[1],\"627\":[1],\"628\":[1,1],\"629\":[1],\"630\":[4],\"631\":[1,3],\"632\":[1],\"633\":[1,23],\"634\":[1,6],\"635\":[1,6],\"636\":[1],\"637\":[1,1],\"638\":[1],\"639\":[1,1],\"640\":[1,12],\"641\":[4],\"642\":[1,3],\"643\":[1,1],\"644\":[1],\"645\":[1,14],\"646\":[1,3],\"647\":[1,1],\"648\":[1,3],\"649\":[1,3],\"650\":[1,3],\"651\":[1,3],\"652\":[2,3],\"653\":[1,3],\"654\":[1,3],\"655\":[1,3],\"656\":[1,3],\"657\":[1,4],\"658\":[1],\"659\":[2],\"660\":[2],\"661\":[1,44],\"662\":[4],\"663\":[1,46],\"664\":[1,10],\"665\":[1,14],\"666\":[1,17],\"667\":[1,6],\"668\":[1,12],\"669\":[1,16],\"670\":[1,2],\"671\":[1,10],\"672\":[1,13],\"673\":[2,32],\"674\":[1,7],\"675\":[1,10],\"676\":[1,5],\"677\":[1,8],\"678\":[1,2],\"679\":[1,3],\"680\":[1,11],\"681\":[1,26],\"682\":[1],\"683\":[1],\"684\":[1],\"685\":[1],\"686\":[1],\"687\":[1],\"688\":[1],\"689\":[1],\"690\":[1],\"691\":[1],\"692\":[2,59],\"693\":[2],\"694\":[2,77],\"695\":[3,58],\"696\":[2,19],\"697\":[2],\"698\":[2],\"699\":[2],\"700\":[2],\"701\":[2],\"702\":[1],\"703\":[1,23],\"704\":[1,50],\"705\":[1,11],\"706\":[1,11],\"707\":[1,11],\"708\":[1,11],\"709\":[1,4],\"710\":[1,2],\"711\":[1,4],\"712\":[1,11],\"713\":[1],\"714\":[2,5],\"715\":[3,6],\"716\":[3,3],\"717\":[2,2],\"718\":[2,8],\"719\":[1],\"720\":[1,1],\"721\":[3,34],\"722\":[3,33],\"723\":[1,11],\"724\":[6,6],\"725\":[4,57],\"726\":[6,5],\"727\":[6,5],\"728\":[1,9],\"729\":[5,78],\"730\":[1,16],\"731\":[1,375],\"732\":[2,26],\"733\":[5,14],\"734\":[5,17],\"735\":[5,34],\"736\":[5,22],\"737\":[5,21],\"738\":[1],\"739\":[1,8],\"740\":[1],\"741\":[2],\"742\":[2,14],\"743\":[3,16],\"744\":[3,8],\"745\":[3],\"746\":[3,97],\"747\":[2],\"748\":[1,2],\"749\":[1],\"750\":[1,5],\"751\":[1,2],\"752\":[1,2],\"753\":[1,7],\"754\":[1,5],\"755\":[1,5],\"756\":[2,4],\"757\":[1],\"758\":[1],\"759\":[1,7],\"760\":[1,14],\"761\":[1,6],\"762\":[1,3],\"763\":[1,5],\"764\":[1,2],\"765\":[1,6],\"766\":[1,5],\"767\":[1],\"768\":[1,14],\"769\":[1],\"770\":[1],\"771\":[1],\"772\":[1,12],\"773\":[2,9],\"774\":[1,5],\"775\":[1],\"776\":[1],\"777\":[1],\"778\":[1],\"779\":[1],\"780\":[1],\"781\":[1],\"782\":[1],\"783\":[1],\"784\":[1],\"785\":[1],\"786\":[1,3],\"787\":[1],\"788\":[1],\"789\":[1],\"790\":[1],\"791\":[1],\"792\":[1],\"793\":[2],\"794\":[1],\"795\":[1],\"796\":[1],\"797\":[1],\"798\":[1],\"799\":[1],\"800\":[1],\"801\":[1],\"802\":[1],\"803\":[1],\"804\":[1],\"805\":[1],\"806\":[1],\"807\":[1],\"808\":[1],\"809\":[1],\"810\":[1],\"811\":[1],\"812\":[1],\"813\":[1]},\"averageFieldLength\":[1.7182224717450745,33.98532488469028,0.37852997878000866],\"storedFields\":{\"0\":{\"h\":\"总览\"},\"1\":{\"h\":\"总览\"},\"2\":{\"c\":[\"it\"]},\"3\":{\"h\":\"个人简历\",\"t\":[\"基本信息\",\"张家豪\",\"微信号： jiuxialb | 邮箱：961099916@qq.com\",\"求职意向：Java | 工作年限： 5 年\",\"教育经历\",\"学校\",\"专业\",\"学历\",\"就读时间\",\"大连民族大学\",\"通信工程\",\"本科\",\"2015.09 - 2019.07\",\"软件技能\",\"熟练掌握 JVM 和并发编程；\",\"熟练掌握 Mybatis、Spring 、SpringBoot、SpringCloud、Netty等框架；\",\"熟练掌握 Redis、MySQL、RocketMQ，能够根据实际场景给出方案；\",\"熟练掌握常用的设计模式，并能够选择合适的设计模式；\",\"熟悉 Docker 和 Kubernetes ，并有一定的了解；\",\"掌握 Jenkins、Maven、Git 等相应工具；\",\"掌握 Linux 和 Python，能够进行日常项目搭建和脚本的编写；\"]},\"4\":{\"h\":\"云平台搭建\",\"t\":[\"云平台主要采用的技术如下：\",\"名称\",\"简介\",\"Docker\",\"应用容器引擎，从而实现同一应用运行在任何地方\",\"Kubernetes\",\"容器化编排工具，能够实现容器化的集群部署\",\"Rancher\",\"Kubernetes 管理工具，能够快速搭建高可用 Kubernetes 和搭建部分常用服务\",\"Harbor\",\"私有镜像仓库\",\"Jenkins\",\"持续集成工具\"]},\"5\":{\"h\":\"环境准备\"},\"6\":{\"h\":\"1.关闭防火墙\",\"t\":[\"### 停止防火墙 systemctl stop firewalld.service ### 禁止开机启动 systemctl disable firewalld.service \"]},\"7\":{\"h\":\"2.更新 yum\",\"t\":[\"yum update \"]},\"8\":{\"h\":\"3.安装工具\",\"t\":[\"yum install -y yum-utils device-mapper-persistent-data lvm2 \"]},\"9\":{\"h\":\"安装 Docker\",\"t\":[\"### 添加Docker源 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo ### 更新yum yum update -y ### 安装Docker yum install -y docker-ce ### 启动Docker systemctl start docker \"]},\"10\":{\"h\":\"1. 设置开机启动\",\"t\":[\"systemctl enable docker \"]},\"11\":{\"h\":\"2.使用阿里加速\",\"t\":[\"### 使用阿里的容器镜像服务进行加速（个人加速器可更换） ### Linux 加速 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json <<-'EOF' { \\\"registry-mirrors\\\": [\\\"https://q47dgr1i.mirror.aliyuncs.com\\\"] } EOF sudo systemctl daemon-reload sudo systemctl restart docker \"]},\"12\":{\"h\":\"安装 Rancher\",\"t\":[\"### 拉取镜像 sudo docker pull rancher/rancher ### 运行镜像 sudo docker run -d --restart=unless-stopped -p 8080:80 -p 8443:443 --name rancher rancher/rancher \",\"如果映射端口为 80、443 可能会导致无法访问，更换端口即可\"]},\"13\":{\"h\":\"安装 Kubernetes\"},\"14\":{\"h\":\"1.创建集群\",\"t\":[\"添加集群\",\"选择自定义，然后填写创建的配置，点击下一步\",\"添加节点\"]},\"15\":{\"h\":\"2.安装 master\",\"t\":[\"安装 master 节点，需要选择 Control 然后复制执行命令在相应的主机执行命令即可\"]},\"16\":{\"h\":\"3.安装 node\",\"t\":[\"只需要选择 work 然后复制执行命令在相应的主机执行命令即可\"]},\"17\":{\"h\":\"4.笔记本合盖\",\"t\":[\"需要设置合盖不影响，否则盒盖休眠就会影响该节点\"]},\"18\":{\"h\":\"5.主机名\",\"t\":[\"若主机名重复，则可能导致无法做安装节点 若 k8s.master k8s.node 他主机名显示的都为 k8s 导致无法添加\"]},\"19\":{\"h\":\"Rancher-cli 工具使用\",\"t\":[\"linux 下载链接：https://releases.rancher.com/cli2/v2.4.3/rancher-linux-amd64-v2.4.3.tar.gz\",\"window 下载链接：https://releases.rancher.com/cli2/v2.4.3/rancher-windows-386-v2.4.3.zip\",\"MacOS 下载链接：https://releases.rancher.com/cli2/v2.4.3/rancher-darwin-amd64-v2.4.3.tar.gz\"]},\"20\":{\"h\":\"通过 UI 添加 token\"},\"21\":{\"h\":\"使用\",\"t\":[\"## 进入解压包中，使用命令即可登录rancher ./rancher login https://172.22.190.240:8443/v3 -t token-d7sx4:jh2wgcjjnmvq7m9l9rbr8qdw5fr7nrd2bjssjfngmcjrsxncdphf7d \",\"需要下载kubectl工具对kubernetes进行操作\"]},\"22\":{\"h\":\"安装 kubectl\",\"t\":[\"# 1. 配置阿里云源 cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 EOF # 2. 开始安装 yum -y install kubectl # 3. 测试 查看节点 ./rancher kubectl get nodes \"]},\"23\":{\"h\":\"安装 Harbor\",\"t\":[\"# 1. 下载安装文件（可以在指定目录下载） wget https://storage.googleapis.com/harbor-releases/harbor-online-installer-v1.5.2.tgz # 2. 解压下载的文件 tar xvf harbor-online-installer-v1.5.2.tgz \"]},\"24\":{\"h\":\"配置 Harbor\",\"t\":[\"1. 修改Harbor的配置文件 cd harbor vim harbor.cfg 内容如下： # hostname设置访问地址，可以使用ip、域名，不可以设置为127.0.0.1或localhost hostname = hub.k8s.com # 访问协议，默认是http，也可以设置https，如果设置https，则nginx ssl需要设置on ui_url_protocol = http # mysql数据库root用户默认密码root123，实际使用时修改下 db_password = root@1234 max_job_workers = 3 customize_crt = on ssl_cert = /data/cert/server.crt ssl_cert_key = /data/cert/server.key secretkey_path = /data admiral_url = NA # 邮件设置，发送重置密码邮件时使用 email_identity = email_server = smtp.mydomain.com email_server_port = 25 email_username = sample_admin@mydomain.com email_password = abc email_from = admin <sample_admin@mydomain.com> email_ssl = false # 启动Harbor后，管理员UI登录的密码，默认是Harbor12345 harbor_admin_password = root@1234 # 认证方式，这里支持多种认证方式，如LADP、本次存储、数据库认证。默认是db_auth，mysql数据库认证 auth_mode = db_auth # LDAP认证时配置项 #ldap_url = ldaps://ldap.mydomain.com #ldap_searchdn = uid=searchuser,ou=people,dc=mydomain,dc=com #ldap_search_pwd = password #ldap_basedn = ou=people,dc=mydomain,dc=com #ldap_filter = (objectClass=person) #ldap_uid = uid #ldap_scope = 3 #ldap_timeout = 5 # 是否开启自注册 self_registration = on # Token有效时间，默认30分钟 token_expiration = 30 # 用户创建项目权限控制，默认是everyone（所有人），也可以设置为adminonly（只能管理员） project_creation_restriction = everyone verify_remote_cert = on \"]},\"25\":{\"h\":\"启动 Harbor\",\"t\":[\"# 1.在当前安装目录下 ./install.sh \"]},\"26\":{\"h\":\"注意\",\"t\":[\"执行 install.sh 报以下错误\",\"root@ubuntu:~/harbor# ./prepare Generated and saved secret to file: /data/secretkey Generated configuration file: ./common/config/nginx/nginx.conf Generated configuration file: ./common/config/adminserver/env Generated configuration file: ./common/config/ui/env Generated configuration file: ./common/config/registry/config.yml Generated configuration file: ./common/config/db/env Generated configuration file: ./common/config/jobservice/env Generated configuration file: ./common/config/jobservice/config.yml Generated configuration file: ./common/config/log/logrotate.conf Generated configuration file: ./common/config/jobservice/config.yml Generated configuration file: ./common/config/ui/app.conf Fail to generate key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt \",\"需要修改 prepare 文件，将第 498 行：\",\"empty_subj = \\\"/C=/ST=/L=/O=/CN=/\\\" \",\"修改如下：\",\"empty_subj = \\\"/C=US/ST=California/L=Palo Alto/O=VMware, Inc./OU=Harbor/CN=notarysigner\\\" \"]},\"27\":{\"h\":\"安装 Jenkins\",\"t\":[\"sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key yum install jenkins ## 启动 systemctl restart jenkins ## 密码 cat /var/lib/jenkins/secrets/initialAdminPassowrd \"]},\"28\":{\"h\":\"提升权限\",\"t\":[\"# 将jenkins账号分别加入到root组中 gpasswd -a root jenkins vi /etc/sysconfig/jenkins # JENKINS_USER=root # JENKINS_GROUP=root ## 重启 service Jenkins restart \"]},\"29\":{\"h\":\"设置环境\",\"t\":[\"## 下载java wget --no-cookies --no-check-certificate --header \\\"Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie\\\" \\\"http://download.oracle.com/otn-pub/java/jdk/8u141-b15/336fa29ff2bb4ef291e347e091f7f4a7/jdk-8u141-linux-x64.tar.gz\\\" ## 下载maven wget https://archive.apache.org/dist/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.tar.gz \"]},\"30\":{\"h\":\"配置 Jenkins 插件工具\",\"t\":[\"Manage Jenkins --- > Global Tool Configure\"]},\"31\":{\"h\":\"设置流水线\",\"t\":[\"新建 Item\",\"选择创建任务的类型和名称\",\"配置源码管理\",\"构建触发器：可设置定时构建、WebHooks 触发构建\",\"构建环境：需要 NodeJs 的可以添加环境，或者直接在脚本中直接通过 node 的位置直接执行\",\"build 命令：可指定文件执行 maven 命令\",\"Post Steps: 可以指定运行脚本等，根据安装的插件可添加很多功能\",\"构建设置：可设置通知\"]},\"32\":{\"h\":\"Kubernetes 部署 Nginx 测试\",\"t\":[\"通过 rancher-cli 进行部署，部署文件的内容：\",\"apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment namespace: \\\"default\\\" labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.12.2 ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: \\\"test-nginx\\\" namespace: \\\"default\\\" labels: app: \\\"test-nginx\\\" spec: ports: - name: \\\"80\\\" port: 80 targetPort: 80 selector: app: nginx status: loadBalancer: {} --- apiVersion: extensions/v1beta1 kind: Ingress metadata: labels: app: nginx name: test-nginx spec: rules: - host: test-nginx.default.172.22.190.240.xip.io http: paths: - backend: serviceName: test-nginx servicePort: 80 path: / status: loadBalancer: ingress: - ip: 172.22.190.240 \"]},\"33\":{\"h\":\"Jenkins 打包 SpringBoot 镜像测试\"},\"34\":{\"h\":\"设置 Jenkins 流水线\",\"t\":[\"添加源码管理并指定分支\",\"项目中使用到了 NodeJs，添加 NodeJs 构建环境\",\"执行 Maven 命令进行构建打包\",\"执行自定义（deploy）制作镜像-->推送镜像--->部署的脚本\",\"点击应用，保存该流水线。\",\"deploy 内容\",\"#!/bin/bash cd ./contract-parent/contract-server && \\\\ docker build -t 172.22.190.250/library/contract:latest . && \\\\ docker push 172.22.190.250/library/contract:latest && \\\\ /usr/local/bin/rancher kubectl apply -f deployment.yaml && \\\\ cd ../../ && \\\\ cd ./project-parent/project-server && \\\\ docker build -t 172.22.190.250/library/project:latest . && \\\\ docker push 172.22.190.250/library/project:latest && \\\\ /usr/local/bin/rancher kubectl apply -f deployment.yaml && \\\\ cd ../../ && \\\\ cd ./public-data-parent/public-data-server && \\\\ docker build -t 172.22.190.250/library/public-data:latest . && docker push 172.22.190.250/library/public-data:latest && /usr/local/bin/rancher kubectl apply -f deployment.yaml && cd ../../ && \\\\ cd ./omgt-web && rm -rf dest && npm install && \\\\ npm run build && docker build -t 172.22.190.250/library/omgt-web:latest . && \\\\ docker push 172.22.190.250/library/omgt-web:latest && \\\\ /usr/local/bin/rancher kubectl apply -f deployment.yaml && cd ../../ \",\"其中一个 Dockerfile 的内容\",\"FROM anapsix/alpine-java:8_server-jre_unlimited MAINTAINER 961099916@qq.com ENV TZ=Asia/Shanghai RUN ln -sf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone RUN mkdir -p /omgt WORKDIR /omgt EXPOSE 8038 ADD ./target/public-data-server.jar ./ CMD sleep 10;java -Djava.security.egd=file:/dev/./urandom -jar public-data-server.jar >> start.log \",\"其中一个 deployment.yaml 的内容\",\"apiVersion: apps/v1 kind: Deployment metadata: name: public-data-deployment namespace: default labels: app: public-data dept: omgt env: dev spec: replicas: 2 selector: matchLabels: app: public-data dept: omgt env: dev template: metadata: labels: app: public-data dept: omgt env: dev spec: containers: - name: omgt-public-data image: 172.22.190.250/library/public-data:latest imagePullPolicy: Always ports: - containerPort: 8038 --- apiVersion: v1 kind: Service metadata: name: public-data-service namespace: default labels: app: public-data dept: omgt env: dev spec: ports: - name: \\\"8038\\\" port: 8038 targetPort: 8038 selector: app: public-data dept: omgt env: dev status: loadBalancer: {} --- apiVersion: extensions/v1beta1 kind: Ingress metadata: labels: app: public-data dept: omgt name: public-data-ingress spec: rules: - host: public-data-ingress.default.172.22.190.240.xip.io http: paths: - backend: serviceName: public-data-service servicePort: 8038 path: / status: loadBalancer: ingress: - ip: 172.22.190.240 \"]},\"35\":{\"h\":\"查看打包过程\",\"t\":[\"点击 Build Now 运行流水线\",\"点击历史可进入正在运行的流水线\",\"通过控制台进行查看流水线日志\"]},\"36\":{\"h\":\"查看 Kubernetes 集群中是否部署成功\",\"t\":[\"查看指定的命名空间和服务名称\"]},\"37\":{\"h\":\"后记\",\"t\":[\"部署文件的编写可能需要学习 Kubernetes 才能编写，而次次重新编写可能过于麻烦，可通过cookiecutter进行模板化生成\"]},\"38\":{\"h\":\"1.安装 cookiecutter\",\"t\":[\"pip install cookiecutter \"]},\"39\":{\"h\":\"2.编写配置文件\",\"t\":[\"# 创建文件 mkdir cookiecutter.json \",\"cookiecutter 内容如下：\",\"{ \\\"project\\\": \\\"kubernetes\\\", \\\"dept\\\": \\\"omgt\\\", \\\"env\\\": \\\"dev\\\", \\\"namespace\\\": \\\"default\\\", \\\"app_name\\\": \\\"nginx\\\", \\\"app_port\\\": \\\"8080\\\", \\\"app_replicas\\\": \\\"1\\\", \\\"app_image\\\": \\\"nginx\\\", \\\"app_image_version\\\": \\\"latest\\\", \\\"lbip\\\": \\\"192.168.1.3\\\" } \"]},\"40\":{\"h\":\"3.创建模版文件\",\"t\":[\"mkdir {{cookiecutter.project}} touch default_dev.yaml \",\"default_dev.yaml 内容如下：\",\"apiVersion: apps/v1 kind: Deployment metadata: name: {{cookiecutter.app_name}}-deployment namespace: {{cookiecutter.namespace}} labels: app: {{cookiecutter.app_name}} dept: {{cookiecutter.dept}} env: {{cookiecutter.env}} spec: replicas: {{cookiecutter.app_replicas}} selector: matchLabels: app: {{cookiecutter.app_name}} dept: {{cookiecutter.dept}} env: {{cookiecutter.env}} template: metadata: labels: app: {{cookiecutter.app_name}} dept: {{cookiecutter.dept}} env: {{cookiecutter.env}} spec: containers: - name: nginx image: {{cookiecutter.app_image}}:{{cookiecutter.app_image_version}} ports: - containerPort: {{cookiecutter.app_port}} --- apiVersion: v1 kind: Service metadata: name: {{cookiecutter.app_name}}-service namespace: {{cookiecutter.namespace}} labels: app: {{cookiecutter.app_name}} dept: {{cookiecutter.dept}} env: {{cookiecutter.env}} spec: ports: - name: \\\"{{cookiecutter.app_port}}\\\" port: {{cookiecutter.app_port}} targetPort: {{cookiecutter.app_port}} selector: app: {{cookiecutter.app_name}} dept: {{cookiecutter.dept}} env: {{cookiecutter.env}} status: loadBalancer: {} --- apiVersion: extensions/v1beta1 kind: Ingress metadata: labels: app: {{cookiecutter.app_name}} dept: {{cookiecutter.dept}} name: {{cookiecutter.app_name}}-ingress spec: rules: - host: {{cookiecutter.app_name}}-ingress.{{cookiecutter.namespace}}.{{cookiecutter.lbip}}.xip.io http: paths: - backend: serviceName: {{cookiecutter.app_name}}-service servicePort: {{cookiecutter.app_port}} path: / status: loadBalancer: ingress: - ip: {{cookiecutter.lbip}} \"]},\"41\":{\"h\":\"新之科技供应链平台\"},\"42\":{\"h\":\"项目描述\",\"t\":[\"由于新再生交易平台底层设计的多租户模式导致订单无法实现多客户查看，于是趁可再生资源大厂提供需求和设计，借此实现架构升级，让新再生交易平台更加通用和适配。\"]},\"43\":{\"h\":\"所用技术\",\"t\":[\"SpringBoot、SpringCloudAlibaba、Netty、Nacos、RocketMQ、Redis、MySQL\"]},\"44\":{\"h\":\"个人职责\",\"t\":[\"负责交易系统的需求分析、任务编写\",\"参与物联网服务的任务编写\",\"参与通知服务的迁移和优化\",\"参与合同服务的迁移和优化\",\"参与个体户代办的任务编写\"]},\"45\":{\"h\":\"新再生交易平台\"},\"46\":{\"h\":\"项目描述：\",\"t\":[\"是一个可再生资源从收集到工厂制作为成品的一站式平台，主要解决可再生资源供应商入驻、出售、配送、入库、支付、发票等全流程的平台。\"]},\"47\":{\"h\":\"所用技术：\",\"t\":[\"SpringBoot、SpringCloudAlibaba、Netty、Nacos、RocketMQ、Redis、MySQL\"]},\"48\":{\"h\":\"个人职责：\",\"t\":[\"参与可再生资源入库单流程的任务编写\",\"独立负责某大客户所有需求，并需求分析、迭代划分、任务安排、人员指导、部署上线等。\",\"采用 DFS 和 BFS 算法实现订单和回单的匹配。\",\"参与设计存证平台设计和实现\",\"根据现有通知业务进行业务抽象设计和实现\",\"根据现有日志进行抽象设计和实现\"]},\"49\":{\"h\":\"业务背景\",\"t\":[\"公司已有的新再生网交易平台，主要流程如下： 虽然上述平台能够实现可再生资源的交易，但是并未解决可再生资源回收过程中的问题。例如：\",\"可再生资源运输问题\",\"可再生资源入库问题\",\"订单完成问题\",\"整个流程存证问题\",\"公司为了解决上述问题，搭建了新再生交易平台，其中主要有以下功能以此解决上述问题：\",\"功能名称\",\"要解决的问题\",\"网络货运平台\",\"解决可再生资源运输问题\",\"出入库管理\",\"解决可再生资源出库和到工厂的入库问题\",\"工厂管理、采集上传\",\"解决可再生资源入库问题\",\"入库单审核\",\"解决订单完成问题\",\"物流管理\",\"解决运输过程存证问题\",\"发票管理、回单管理\",\"解决支付存证问题\",\"其中也添加了增添其他功能，实现可再生资源回收整个过程的管理，其他功能如下：\",\"功能名称\",\"要解决的问题\",\"采购计划、招投标\",\"解决可再生资源供应成本问题\",\"供应商管理\",\"解决个体工商户税额问题\",\"合同管理\",\"解决订单真实性和双方法律效应问题\",\"生产管理\",\"解决可再生资源到成本过程记录问题\",\"新再生交易平台的流程如下：\"]},\"50\":{\"h\":\"总览\"},\"51\":{\"c\":[\"it\"]},\"52\":{\"h\":\"翻译：架构蓝图—软件架构的4+1视图模型（中英文对照） - 知乎\",\"t\":[\"英文原文链接：http://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf 原文发表于1995年的《IEEE Software》 翻译 by 大白白 本人水平有限，有些地方实在无法确定原文的意思，只能勉强按字面意思翻译。为了避免误导，所以把原文和译文对照着放在一起以便对照理解。\"]},\"53\":{\"h\":\"Architectural Blueprints -- The \\\"4+1\\\" View Model of Software Architecture\",\"t\":[\"Philippe KruchtenRational SoftwareAbstract摘要 This article presents a model for describing the architecture of software-intensive system, based on the use of multiple, concurrent views. This use of multiple views allows to address separately the concerns of the various 'stakeholders' of the architecture: end-user, developers, systems engineers, project managers, etc., and to handle separately the functional and non functional requirements. Each of the five views is described, together with a notation to capture it. The views are designed using an architecture-centered, scenario-driven, iterative development process. 本文提出了一种模型，该模型使用多个、并行的视图来描述软件密集型系统的架构。多个视图分别解决不同利益相关人关注的问题：最终用户、开发人员、系统工程师、项目经理、等等，并分别处理功能和非功能需求。五个视图被逐一描述，并同时描述了用于记录视图的表示法。使用以架构为中心、场景驱动、迭代开发流程来设计这些视图。Keywords: software architecture, view, object-oriented design, software development process关键词：软件架构、视图、面向对象设计、软件开发流程\"]},\"54\":{\"h\":\"Introduction\"},\"55\":{\"h\":\"介绍\",\"t\":[\"We all have seen many books and articles in which a single diagram attempts to capture the gist of a system architecture. But looking carefully at the set of boxes and arrows shown on these diagrams, it becomes clear that their authors have struggled hard to represent more on one blueprint than it can actually express. Are the boxes representing running programs? Or chunks of source code? Or physical computers? Or merely logical groupings of functionality? Are the arrows representing compilation dependencies? Or control flows? Or dataflows? Usually it is a bit of everything. Does an architecture need a single architectural style? Sometimes the architecture of the software suffers scars from a system design that went too far into prematurely partitioning the software, or from an over-emphasis on one aspect of software development: data engineering, or run-time efficiency, or development strategy and team organization. Often also the architecture does not address the concerns of all its \\\"customers\\\" (or \\\"stakeholders\\\" as they are called at USC). This problem has been noted by several authors: Garlan & Shaw1, Abowd & Allen at CMU, Clements at the SEI. As a remedy, we propose to organize the description of a software architecture using several concurrent views, each one addressing one specific set of concerns. 我们都看过很多企图用单个图来表述系统架构设计要点的书籍和文章。但是，当你仔细查看图中的方框和箭头时，你就会发现，作者挣扎着想表达的内容明显比实际图上能表达出来的要多。方框表达的是正在运行的程序吗？或是源代码块吗？或是物理计算机吗？或是功能的逻辑分组？箭头表达的是编译依赖关系吗？或是控制流吗？或是数据流吗？通常是什么都用同样的符号在表达。架构需要的是单一的风格吗？有时软件架构会受到系统设计者过设计的负面影响，这些过设计包括：过早的划分软件，或者过分强调开发的某个方面（像数据工程、或者运行时的效率、或者开发策略和团队组织）。通常软件架构没有考虑到所有“客户”的关注点（在 USC 中，此处的“客户”被称为“利益相关人”）。这个问题已经被一些作者提及，他们是：Garlan & Shaw1、CMU的Abowd & Allen、SEI的Clements。我们建议的解决方法是使用多个并行的_视图_来组织软件架构的描述，每个视图解决一组特定的问题。\"]},\"56\":{\"h\":\"An Architectural Model\"},\"57\":{\"h\":\"架构模型\",\"t\":[\"Software architecture deals with the design and implementation of the high-level structure of the software. It is the result of assembling a certain number of architectural elements in some well-chosen forms to satisfy the major functionality and performance requirements of the system, as well as some other, non-functional requirements such as reliability, scalability, portability, and availability. Perry and Wolfe put it very nicely in this formula2, modified by Boehm: _Software architecture _= {Elements, Forms, Rationale/Constraints} 软件架构用来处理软件高层次结构的设计和实现。它以精心选择的形式来组合若干架构元素，从而满足系统主要的功能和性能需求，以及其他非功能需求，比如可靠性、可扩展性、可移植性和可用性。Perry 和 Wolfe 运用一个公式对此进行了很恰当地表达，Boehn又对公式进行了优化。该公式如下： 软件架构 = {元素、形式、逻辑依据/约束} Software architecture deals with abstraction, with decomposition and composition, with style and esthetics. To describe a software architecture, we use a model composed of multiple views or perspectives. In order to eventually address large and challenging architectures, the model we propose is made up of five main views (cf. fig. 1): 软件架构处理抽象，处理分解与组合，处理风格和美学。我们使用一种多个_视图_或视角的模型来描述软件架构。为了最终解决大型的、具有挑战性的架构，我们提出的模型由5个主要的视图组成（参见图1）：\",\"The logical view, which is object model of design (when an object-oriented design method is used),\",\"逻辑视图，描述设计的对象模型（当使用面向对象设计方法时），\",\"The process view, which captures the concurrency and synchronization aspects of design.\",\"_过程_视图，捕捉设计的并发和同步特性。\",\"The physical view, which describes the mapping(s) of the software onto the hardware and reflects its distributed aspect.\",\"_物理_视图，描述软件部署到硬件的映射关系，同时反应了分布式部署的情况。\",\"The development view, which describes the static organization of the software in its development environment.\",\"_开发_视图，描述软件在其开发环境中的静态组织结构。\",\"The description of an architecture -- the decisions made -- can be organized around these four views, and then illustrated by a few selected use cases, or scenarios which become a fifth view. The architecture is in fact partially evolved from these scenarios as we will see later. 架构的描述，即已做出的架构决策，可以围绕这四个视图来组织，然后用一些选定的_用例_或_场景_来证实，这些用例或场景构成了第五个视图。正如我们后面将看到的，实际上该架构是从这些场景中部分演化而来的。 Figure 1 -- The \\\"4+1\\\" view model 图1 “4+1”视图模型 We apply Perry & Wolf's equation independently on each view, i.e., for each view we define the set of elements to use (components, containers, and connectors), we capture the forms and patterns that work, and we capture the rationale and constraints, connecting the architecture to some of the requirements. 我们把 Perry 和 Wolf 的公式独立地运用在每种视图上，即，我们为每种视图定义了一组要使用的元素（组件、容器、和连接器），我们捕捉有效的形式和模式，同时我们也捕捉逻辑依据和约束，将架构和某些需求联系起来。 Each view is described by a blueprint using its own particular notation. For each view also, the architects can pick a certain architectural style, hence allowing the coexistence of multiple styles in one system. 每种视图都用一个_蓝图_来描述，每个蓝图使用它自己特定的表示法。架构师也可以为每种视图选择某种架构风格，因此允许多种风格在一个系统中共存。 We will now look in turn at each of the five views, giving for each its purpose: which concerns is addresses, a notation for the corresponding architectural blueprint, the tools we have used to describe and manage it. Small examples are drawn from the design of a PABX, derived from our work at Alcatel Business System and an Air Traffic Control system3, but in very simplified form -- the intent here is just to give a flavor of the views and their notation and not to define the architecture of those systems. 我们将依次观察五个视图，并展示每个视图的目的，这些目的包括：每个视图要解决哪方面的问题、对应的架构蓝图的表示法是怎样的、哪些工具可以用来描述和管理对应的视图。以PABX设计作为小例子，PABX来源于我们在阿尔卡特商业系统（Alcatel Business System）和空中交通控制系统（Air Traffic Control system）3 的工作。 The \\\"4+1\\\" view model is rather \\\"generic\\\": other notations and tools can be used, other design methods can be used, especially for the and the logical and process decompositions, but we have indicated the ones we have used with succcess. “4+1”视图非常的“通用”：可以使用其它的表示法和工具，可以使用其它设计方法，特别是在进行逻辑和过程分解的时候，但是我们给出的方法是我们已经成功使用过的。\"]},\"58\":{\"h\":\"The Logical Architecture\"},\"59\":{\"h\":\"逻辑架构\",\"t\":[\"The Object-Oriented Decomposition面向对象的分解\",\"The logical architecture primarily supports the functional requirements -- what the system should provide in terms of services to its users. The system is decomposed into a set of key abstractions, taken (mostly) from the problem domain, in the form of objects or object classes. They exploit the principles of abstraction, encapsulation, and inheritance. This decomposition is not only for the sake of functional analysis, but also serves to identify common mechanisms and design elements across the various parts of the system. We use the Rational/Booch approacch for representing the logical architecture, by means of class diagrams and class templates.4 A class diagram shows a set of classes and their logical relationships: association, usage, composition, inheritance, and so forth. Sets of related classes can be grouped into class categories. Class templates focus on each individual class; they emphasize the main class operations, and identify key object characteristics. If it is important to define the internal behavior of an object, this is done with state transition diagrams, or state charts. Common mechanisms or services are defined in class utilities. 逻辑视图主要用于功能需求 —— 系统应该向用户提供什么服务。系统被分解为一组主要来自问题领域的关键抽象，这些抽象的形式是_对象_或者_对象类别_。它们利用抽象、封装和继承的原则。这种分解不仅仅是为了功能分析，也是为了识别跨系统不同部件的通用机制和设计元素。我们使用 Rational/Booch 方法通过类图和模板来表示逻辑架构。类图展示了一组类和它们之间的逻辑关系：关联、使用、组合、继承、等等。一组相关的类可以被归入一个类组中。类模板聚焦于每个独立的类；它们强调主要的类操作，并识别关键的对象特征。如果定义对象的内部行为很重要，可以用状态转换图或状态图来完成。可以使用_类实用程序_来定义通用机制或服务。 Alternatively to an OO approach, an application that is very data-driven may use some other form of logical view, such as E-R diagrams. 除了OO方法，以数据驱动为主的应用程序可以使用其它形式的逻辑视图，如E-R图。\"]},\"60\":{\"h\":\"Notation for the logical view\"},\"61\":{\"h\":\"逻辑视图的表示法\",\"t\":[\"The notation for the logical view is derived from the Booch notation4. It is considerably simplified to take into account only the items that are architecturally significant. In particular, the numerous adornments are not very useful at this level of design. We use Rational Rose® to support the logical architecture design. 逻辑视图的表示法是从 Booch 表示法4衍生而来的。当只考虑在架构上有重大意义的条目时，这种表示法是非常简单的。特别是，在这个层次的设计上，大量的修饰并没什么作用。我们使用 Rational Rose（Rational Rose 是 Rational 公司出品的一种面向对象的统一建模语言的可视化建模工具）支撑逻辑架构的设计。 Figure 2 Notation for the logical blueprint 图2 逻辑蓝图的表示法\"]},\"62\":{\"h\":\"Style for the logical view\"},\"63\":{\"h\":\"逻辑视图的风格\",\"t\":[\"The style we use for the logical view is an object-oriented style. The main guideline for the design of the logical view is to try to keep a single, coherent object model across the whole system, to avoid premature specialization of classes and mechanisms per site or per proccessor. 对于逻辑视图，我们使用面向对象的风格。我们遵循的主要设计准则是在整个系统中尽量保持单一的、条理清晰的对象模型，避免过早地具体化每个站点和每个处理器的类和机制。\"]},\"64\":{\"h\":\"Example of Logical bluprints\"},\"65\":{\"h\":\"逻辑蓝图的例子\",\"t\":[\"Figure 3a shows the main classes involved in the Telic PABX architecture. 图3a 显示了 Telic PABX 架构涉及的主要类。 Figure3 a.Logical blueprint for the Telic PABX. b.Blueprint for an Air Traffic Control System 图3a.Telic PABX的逻辑蓝图，b.空中交通控制系统的蓝图 A PABX establishes communications between terminals. A terminal may be a telephone set, a trunk line (i.e., line to certral-office), a tie line (i.e., private PABX to PABX line), a feature phone line, a data line, an ISDN line, etc. Different lines are supported by different line interface cards. The responsibility of a line controller object to decode and inject all the signals on the line interface card, translating card-specific signals to and from a small, uniform set of events: start, stop, digit, etc. The controller also bears all the hard real-time constraints. This class has many subclasses to cater for different kinds of interfaces. The responsibility of the terminal object is to maintain the state of a terminal, and negotiate services on behalf of that line. For example, it uses the services of the numbering plan to interpret the dialing in the selection phase. The conversation represents a set of terminals engaged in a conversation. The conversation uses the translation service (directory, logical to physical address mapping, routes), and connection services to establish a voice path between the terminals. PABX建立终端之间的通信。终端可能是电话、中继线(即：到中央办公室的线路)、连接线(即：专用的PABX到PABX的线路)、功能电话线路、数据线路、ISDN线路、等等。不同的线路接口卡支持不同的线路。线路的_控制器_（controller）对象的职责是将所有信号解码并注入到线路接口卡上，将特定于卡的信号转换成一组小的、统一的事件：开始、停止、数字等。控制器也承担了所有的硬实时约束。这个类有很多满足不同接口的子类。终端（terminal）对象的职责是维护终端的状态，并代表线路协商终端需提供的服务。例如：在选择阶段，终端使用_编号方案_（numbering plan）对象来解析拨号信息。会话（conversation）代表一组参与会话的终端。它使用_传输服务_（translation service）（访问目录、映射逻辑地址到到物理地址、路由）和_连接_（connection）服务建立多个终端之间的语音通路。 For a much bigger system, which contains a few dozen classes of architectural significance, figure 3b show the top level class diagram of an air traffic control system, containing 8 class categories(i.e., groups of classes). 对于一个更大的、包含几十个架构级重要类的系统，图3b显示了空中交通控制系统的顶级类图，它包含8个类别的类（即：8组类）。\"]},\"66\":{\"h\":\"The Process Architecture\"},\"67\":{\"h\":\"过程架构\",\"t\":[\"The Process Decomposition进程分解\",\"The process architecture takes into account some non-functional requirements, such as performance and availability. It addresses issues of concurrency and distribution, of system's integrity, of fault-tolerance, and how the main abstractions from the logical view fit within the process architecture -- on which thread of control is an operation for an object actually executed. 过程架构考虑一些非功能需求，比如性能和可用性。它解决并发性、分布式、系统完整性、容错问题，以及逻辑视图中的主要抽象如何对应到过程架构中，即：对象操作实际在哪个控制任务上执行。 The process architecture can be described at several levels of abstraction, each level addressing different concerns. At the highest level, the process architecture can be viewed as a set of independently executing logical networks of communicating programs (called \\\"processes\\\"), distributed across a set of hardware resources connected by a LAN or a WAN. Multiple logical networks may exist simultaneously, sharing the same physical resources. For example, independent logical networks may be used to support separation of the on-line operational system from the off-line system, as well as supporting the coexistence of simulation or test versions of the software. 过程架构可以在几个抽象层次上描述，每个层次解决一个不同的关注点。在最高层次上，处理架构可以被看做是一组独立执行的通信程序（被之称为“进程”）的逻辑_网络_，它们分布在一组硬件资源上，这组硬件资源通过本地网络或者广域网连接起来。多个逻辑网络可以同时存在，它们可以共享相同的物理资源。例如，独立的逻辑网络可以被用于支持分离连机和脱机操作系统，也可以被用于支持软件仿真和测试版本的共存。 A process is a group of tasks that form an executable unit. Processes represent the level at which the process architecture can be tactically controlled (i.e., started, recovered, reconfigured, and shut down). In addition, processes can be replicated for increased distribution of processing load, or for improved availability.进程_是构成一个可执行单元的一组任务。进程表示过程架构可以被有策略地控制的层次（即：启动、恢复、重新配置、和关闭）。此外，可以通过复制进程来增加负载处理的分布性，或者提升可用性。 The software is partitioned into a set of independent tasks. A task is a separate thread of control, that can be scheduled individually on one processing node. 软件可以被划分成一组独立的_任务。 一个任务是一个单独的、可以在一个处理节点上被独立调用控制线程。 We can distinguish then: major tasks, are the architectural elements that can be uniquely addressed and minor task, that are additional tasks introduced locally for implementation reasons (cyclical activities, buffering, time-outs, etc.). They can be implemented as Ada tasks for example, or light-weight threads. Major tasks communicate via a set of well-defined inter-task communication mechanisms: synchronous and asynchronous message-based communication services, remote procedure calls, event broadcasts, etc. Minor tasks may communicate by rendezvous or shared memory. Major tasks should not make assumptions about their collocation in the same process or processing node. 然后，我们可以区分主要_任务_和次要_任务_。主要任务是可以被唯一指定的架构元素，而次要任务是因为某些实施原因（循环活动、缓冲、超时、等等）而在本地引入的额外的任务。它们可以被作为 Ada 任务或者轻量级线程来执行。主要任务通信是通过一组事先定义好的任务间通信机制：同步和异步的基于消息的通信服务、远程处理调用、事件广播、等等。次要任务通过集合和共享内存来通信。主要任务在同一流程和处理节点中的配置不应该被假设。 Flow of messages, process loads can be estimated based on the process blueprint. It is also possible to implement a \\\"hollow\\\" process architecture with dummy loads for the processes, and measure its performance on the target system, as described by Filarey et al. in their Eurocontrol experiment. 可以基于过程蓝图来评估消息流和过程负载。也可以像 Filarey 等人在他们的 Eurocontrol 实验中描述的那样，实现一个带有虚拟过程负载的“空的”过程架构，并在目标系统上测量其性能。\"]},\"68\":{\"h\":\"Notation for the Process view\"},\"69\":{\"h\":\"过程视图的表示法\",\"t\":[\"The notation we use for the process view is expanded from the notation originally proposed by Booch for Ada tasking. Again the notation used focuses on the elements that are architecturally significant. (Fig. 4) 我们使用的过程视图的表示法是从 Booch 为 Ada 任务提出的原始符号中扩展而来的。同样地，表示法聚焦于在架构上有重大意义的元素。（图4） Figure 4 -- Notation for the Process blueprint 图4 过程蓝图的表示法 We have used the Universal Network Architecture Services (UNAS) product from TRW to architect and implement the set of processes and tasks (and their redundancies) into networks of processes. UNAS contains a tool -- the Software Architects Lifecycle Environment (SALE) -- which supports such a notation. SALE allows for the graphical depiction of the process architecture, including specifications of the possible inter-task communication paths, from which the corresponding Ada or C++ source code is automatically generated. The benefit of this approach to specifying and implementing the process architecture is that changes can be incorporated easily without much impact on the application software. 我们已经使用TRW的全球网络架构服务（Universal Network Architecture Services，缩写为UNAS）来构建一组进程和任务（以及它们的冗余）到进程网络中。UNAS包含一个工具--软件架构生命周期环境（Software Architects Lifecycle Environment，缩写为SALE），SALE 支持这种表示法。SALE 允许图形化地描绘过程架构，包括可能的任务间通信路径的规格说明。SALE能自动地生成相应的 Ada 和 C++ 源代码。这种指定和实施过程架构的方法的优点就是：可以在不太影响应用软件的情况下，较容易地合入变更。\"]},\"70\":{\"h\":\"Style for the process view\"},\"71\":{\"h\":\"过程视图的风格\",\"t\":[\"Several styles would fit the process view. For example, picking from Garlan and Shaw's taxonomy1 we can have: pipes and filters, or client/server, with variants of multiple client/single server and multiple clients/multiple servers. For more complex systems, one could use a style similar to the process groups approach of the ISIS system as described by K.Birman with another notation and toolset. 有多种风格都适合于过程视图。比如：使用 Garlan 和 Shaw 的分类法，我们可以得到：管道、过滤器、客户端/服务器、以及多客户端/单服务器和多客户端/多服务器的变体。对于更复杂的系统，可以使用类似 K.Birman 所描述的 ISIS 系统的进程组方法中的另一种表示法和工具集。\"]},\"72\":{\"h\":\"Example of a Process blueprint\"},\"73\":{\"h\":\"过程蓝图的例子\",\"t\":[\" Figure 5 -- Process blueprint for the Telic PABX (partial) 图5 Telic PABX 的过程蓝图（一部分） All terminals are handled by a single terminal process, which is driven by messages in its input queues. The controller objects are executed on one of three tasks that composes the controller process: a low cycle rate task scans all inactive terminial (200 ms), puts any terminal becoming active in the scan list of the high cycle rate task (10 ms), which detects any significant change of state, and passes them to the main controller task which interprets the changes and communicates them by message to the corresponding terminial. Here message passing within the controller process is done via shared memory. 所有终端都被一个_终端进程_（terminal process）控制，这个终端进程受其输入队列中的消息驱动。控制器对象在组成控制器进程（controller process）的三个任务中的一个上执行，这三个任务分别是：一个是_低速循环任务_（low cycle rate task），它以200ms为周期扫描所有非活动状态的终端，并将其中变为活动状态的终端放入高速循环任务扫描的列表中；另一个就是_高速循环任务_（high cycle rate task），它以10ms为周期捕获终端的状态是否有显著的变化，一旦发现就将该终端传递给主控制器任务；最后一个就是_主控制器任务_（main controller task），它解析状态变化并通过消息和相应的终端通信。控制器进程中的消息传递是通过共享内存实现的。\"]},\"74\":{\"h\":\"The Development Architecture\"},\"75\":{\"h\":\"开发架构\",\"t\":[\"Subsystem decomposition 子系统分解\",\"The development architecture focuses on the actual software module organization on the software development environment. The software is packaged in small chunks -- program libraries, or subsystems -- that can be developed by one or a small number of developers. The subsystems are organized in a hierarchy of layers, each layer providing a narrow and well-defined interface to the layers above it. 开发架构聚焦于软件模块在实际的开发环境中如何组织。软件被分割成程序库或者_子系统_这样的小块，使得程序库或者_子系统_可以分给一个或少数几个开发者来开发。子系统分_层_（layers）进行组织，每一层都为它的上层提供一个小范围的、定义好的接口。\",\"The development architecture of the system is represented by module and subsystem diagrams, showing the 'export' and 'import' relationships. The complete development architecture can only be described when all the elements of the software have been identified. It is, however, possible to list the rules that govern the development architecture: partitioning, grouping, visibility. 系统的开发架构由表示系统‘导出’和‘导入’关系的模块和子系统图表示。只有当所有的软件元素都被确定好后，才能描述出完整的开发架构。当然，可以先列出影响开发架构的规则，比如：分区、分组、和可视化。\",\"For the most part, the development architecture takes into account internal requirements related to the ease of development, software management, reuse or commonality, and to the constraints imposed by the toolset, or the programming language. The development view serves as the basis for requirement allocation, for allocation of work to teams (or even for team organization), for cost evaluation and planning, for monitoring the progress of the project, for reasoning about softare reuse, portability and security. It is the basis for establishing a line-of-product. 对于大多数情况，开发架构考虑了开发的简易性、软件管理、可复用性或通用性相关的内部需求，以及工具集或编程语言所带来的约束。开发视图是需求分配的基础，它可以支撑将工作分配到某个团队（甚至团队组织），也可以支撑成本评估、计划、项目进度监控，还可以支撑软件可复用性、可移植性、以及安全性分析。它是打造产品线的基础。\"]},\"76\":{\"h\":\"Notation for the Development Blueprint\"},\"77\":{\"h\":\"开发蓝图的表示法\",\"t\":[\"Again, a variation of the Booch notation, limiting it to the items that are architecturally significant. 我们又一次使用 Booch 表示法的变体，仅限于使用在架构上有重大意义的条目。 Figure 5 -- Notation for the Development blueprint 图5 开发蓝图的表示法 The Apex Development Environment from Ratinal supports the definition and the implementation of the development architcture, the layering strategy described above, and the enforcement of the design rules. Rational Rose can draw the development blueprints at the module and subsystem level, in forward engineering and by reverse engineering from the development sourcce code, for Ada and C++. Rational 的 Apex 开发环境（Apex Development Enviroment）支持开发架构的定义和实现、支持上述分层策略、支持设计规则的实施。Rational Rose 可以为 Ada 和 C++ 绘制模块和子系统层次的开发蓝图，也可以通过逆向工程通过源代码反推开发蓝图。\"]},\"78\":{\"h\":\"Style for the Development View\"},\"79\":{\"h\":\"开发视图的风格\",\"t\":[\"We recommend adopting a layered style for the development view, defining some 4 to 6 layers of subsytems. Each layer has a well-defined responsibility. The design rule is that a subsystem in a certain can only depend on subsystem that are in the same layer or in layers below, in order to minimize the development of very complex networks of denpendencies between modules and allow simple release strategies layer by layer. 我们建议开发视图采用_分层的风格_，定义4到6层子系统。每层都有预先定义好的职责。设计规则是：子系统只能依赖与它相同层或更低层的子系统，目的是化了模块之间非常复杂的依赖网络的开发，且允许一种更简单、逐层发布的策略。 Figure 6 -- The 5 layers of Hughes Air Traffic System 图6 Hughes Air Traffic System的5层\"]},\"80\":{\"h\":\"Example of Development architecture\"},\"81\":{\"h\":\"开发架构的例子\",\"t\":[\"Figure 6 represents the development organization in five layers of a line-of-product of Air Traffic Control systems developed by Hughes Aircraft of Canada3. This is the development architecture corresponding to the logical architecture shown in fig.3b. 图6代表了加拿大 Hughes 飞机3（Hughes Aircraft of Canada）公司开发的空中交通控制系统（Air Traffic Control system，缩写为 ATC）产品线的5层开发组织。这个开发架构相应的逻辑架构如图3b所示。\",\"Layer 1 and 2 constitute a domain-independent distributed infrastructure that is common across the line of products and shields it from variations in hardware platform, operating system, or off-the-shelf products such as database management system. To this infrastructure, layer 3 adds an ATC framework to form a domain-specific software architecture. Using this framework a palette of functionality is build in layer 4. Layer 5 is very constomer- and product-dependent, and contains most of the user-interface and interfaces with the external systems. Some 72 subsystems are spread across of the 5 layers, containing each from 10 to 50 modules, and can be represented on additional blueprints. 第1层和第2层构成了一个独立于领域的、分布式基础设施。这个基础设施是跨产品线通用的，并且可以保护应用程序免受硬件平台、操作系统、或者数据管理系统这样的现成产品变化的影响。在这个基础设施之上，第3层添加了一个 ATC 框架，从而形成了一个_特定领域的软件架构_。第4层在 ATC 框架上添加了一个选项功能。第5层强依赖于客户和产品，它包含了大部分用户接口和外部系统扩展接口。横跨这5层的是72个子系统，每个子系统包含10到50个模块。我们用另外的蓝图来表述这些子系统。\"]},\"82\":{\"h\":\"The Physical Architecture\"},\"83\":{\"h\":\"物理架构\",\"t\":[\"Mapping the software to the hardware建立软件和硬件的映射关系\",\"The physical architecture takes into account primarily the non-functional requirements of the system such as availability, reliability (fault-tolerance), performance (throughput), and scalability. The software executes on a network of computers, or processing nodes (or just nodes for short). The various elements identified -- networks, processes, tasks, and objects -- need to be mapped onto the various nodes. We expect that several different physical configurations will be used: some for development and testing, others for the deployment of the system for various sites or for different customers. The mapping of the software to the nodes therefore needs to be highly flexible and have a minimal impact on the source code itself. 物理架构考虑系统的非功能需求，比如：系统可用性、可靠性（容错）、性能、和可扩展性。软件在一个计算网络上或处理节点上（简称为节点）执行。各种已定义的元素（网络、进程、任务、对象）必须被映射到不同的节点上。我们希望使用几种不同的物理配置：一些用于开发和测试，另一些用于不站点或者不同客户的系统部署。因此，软件到节点的映射需要高度灵活，并且对源代码本身的影响最小。\"]},\"84\":{\"h\":\"Notation for the Physical Blueprint\"},\"85\":{\"h\":\"物理蓝图的表示法\",\"t\":[\"Physical blueprints can become very messy in large systems, so they take several forms, with or without the mapping from the process view. 大型系统的物理蓝图可能会变得非常凌乱，所以物理蓝图有一些不同的形式，包括：从或者不从过程视图映射而来的物理视图。 Figure 7 -- Notation for the Physical blueprint图7 物理蓝图的表示法 UNAS from TRW provide us here with data-driven means of mapping the process architecture onto the physical architecture allowing a large class of changes in the mapping without source code modifications. TRW 的 UNAS 为我们提供了一种数据驱动的方法来将过程架构映射到物理架构上，这种方法允许在不修改源代码的情况下对映射做大量的改动。\"]},\"86\":{\"h\":\"Example of Physical blueprint\"},\"87\":{\"h\":\"物理蓝图的例子\",\"t\":[\" Figure 7 -- Notation for the Physical blueprint 图7 物理蓝图的表示法 Figure 8 shows one possible hardware configuration for a large PABX, whereas figures 9 and 10 show mappings of the process architecture on two different physical architectures, corresponding to a small and a large PABX. C, F and K are three types of computers of differents capacity, supporting three different executables. 图8展示了大型PABX的一种可能的硬件配置，图9和10是过程视图跟小型PABX和大型PABX两种不同的物理视图的映射关系。C、F、K 是三种不同能力的计算机，支持三种不同的可执行文件。 Figure 9 -- A small PABX physical architecture with process allocation 图9 带有进程分配的小型 PABX 的物理架构 Figure 9 -- A small PABX physical architecture with process allocation 图9 带有进程分配的小型 PABX 的物理架构\"]},\"88\":{\"h\":\"Scenarios\"},\"89\":{\"h\":\"场景\",\"t\":[\"Putting it all together综合所有的视图\",\"The elements in the four views are shown to work together seamlessly by the use of a small set of important scenarios -- instances of more general use case -- for which we describe the corresponding scripts (sequences of interactions betwenen objects, and between processes) as described by Rubin and Goldberg6. The scenarios are in some sense an abstraction of the most important requirements. Their design is expressed using object scenario diagrams and object interaction diagrams4. 四个视图中的元素通过一小组重要_场景_无缝地协同工作（场景_是更通用的_用例（use case）的实例）。如 Rubin 和 Goldberg6 所描述的那样，用对应的脚本来描述场景（脚本是指对象之间、进程之间的交互序列）。从某种意义上讲，场景是最重要的需求的抽象。我们用对象场景图或者对象交互图来描述场景的设计。 This view is redundant with the other ones (hence the \\\"+1\\\"), but it serves two main purposes: 这个视图相对其它几个视图来说是冗余的（因此，作为“+1”的视图），但是它扮演了两个重要角色：\",\"as a driver to discover the architectural elements during the architecture design as we will describe later\",\"驱动我们在架构设计中去发现架构元素，我们将在后面对此进行描述\",\"as a validation and illustration role after this architecture design is complete, both on paper and as the starting point for the tests of an architectural prototype.\",\"当架构设计完成后，验证和证实已完成的架构设计，这既是一个纸面上的工作，也是架构原型测试的起点。\"]},\"90\":{\"h\":\"Notation for the Scenarios\"},\"91\":{\"h\":\"场景的表示法\",\"t\":[\"The notation is very similar to the Logical view for the components (cf. fig. 2), but uses the connectors of the Process view for interactions between object (cf. fig. 4). Note that object instances are denoted with solid lines. As for the logical blueprint, we capture and manage object scenario diagrams using Rational Rose. 场景的表示法和逻辑视图的表示法非常相似（参见图2），但是场景使用过程视图中的连接器来描述对象间的交互（参见图4）。请注意，对象实例用实线表示。至于逻辑蓝图，我们使用 Rational Rose 捕获和管理对象场景图。\"]},\"92\":{\"h\":\"Example of a Scenario\"},\"93\":{\"h\":\"场景的例子\",\"t\":[\"Fig.11 shows a fragment of a scenario for the small PABX. The corresponding script reads: 图11为小型PABX的一个场景片段。相应的脚本内容如下： 1.The controller of Joe's phone detects and validate the transition from on-hook to off-hook and sends a message to wake up the corresponding terminal object. 2.The terminal allocates some resources, and tells the controller to emit some dial-tone. 3.The controller receives digits and transmits them to the terminal. 4.The terminal uses the numbering plan to analyze the digit flow. 5.When a valid sequence of digits has been entered, the terminal opens a conversation. 1.控制器检测并验证到Joe的电话从挂机状态变为摘机状态，发送消息唤醒相应的终端对象。 2.终端分配资源，并告诉控制器发送拨号音。 3.控制器接收拨号数字，并将数字发送给终端。 4.终端根据编号方案分析数字流。 5.当输入了有效的数字序列后，终端打开一个会话。 Figure 11 -- Embryo of a scenario for a local call -- selection phase 图11 本地呼叫的一个场景雏形 -- 选择阶段\"]},\"94\":{\"h\":\"Correspondence Between the Views\"},\"95\":{\"h\":\"视图之间的关联\",\"t\":[\"The various views are not fully orthogonal or independent. Elements of one view are connceted to elements in other views, following certain design rules and heuristics. 各个视图之间不是完全正交的，也不是完全独立的。一个视图中的元素可根据确定的设计规则和启发式与其它视图中的元素相连。\"]},\"96\":{\"h\":\"From the logical to the process view\"},\"97\":{\"h\":\"从逻辑视图到过程视图\",\"t\":[\"We identify several important characteristics of the classes of the logical architecture: 我们为逻辑架构的类定义了一些重要特征：\",\"Autonomy: are the objects active, passive, protected? -an active object takes the initiative of invoking other objects' operations or its own operations, and has full control over the invocation of its own operations by other objects -a passive object never invokes spontaneously any operations and has no control over the invocation of its own operations by other objects -a protected object never invokes spontaneously any operations but performs some arbitration on the invocation of its operations.\",\"自主性：对象是主动的、被动的，还是受保护的？ -_主动_对象可以主动调用其它对象的操作，也可以主动调用该对象自己的操作，而且它对其它对象调用它的操作有完全的控制权 -_被动_对象不能自主地调用任何操作，而且它对其它对象调用它的操作没有控制权 -_受保护_对象不能自主地调用任何操作，但它可以对其它对象调用它的操作做仲裁\",\"Persistence: are the object transient, permanent? Do they the failure of a process or processor?\",\"持久性：对象是短暂存在的，还是持久存在的？它们处理进程或处理器的故障吗？\",\"Subordination: are the existence or persistence of an object depending on anoter object?\",\"从属关系：对象的存在或者持久性是否依赖另一个对象？\",\"Distribution: are the state or the operations of an object accessible from many nodes in the physical architecture, from several processes in the process architecture?\",\"分布性：对象的状态或操作是否可以从物理架构上的很多节点去访问？是否可以从过程架构中的不同进程去访问？ In the logical view of the architecture we consider each object as active, and potentially \\\"concurrent,\\\" i.e., behaving \\\"in parallel\\\" with other objects, and we pay no more attention to the exact degree of concurrency we need to achieve this effect. Hence the logical architecture takes into account only the functional aspect of the requirements. 在架构的逻辑视图中，我们认为每个对象都是主动的，而且是可能“并发的”，比如：与其它对象的行为是“并行”，但我们并不关心实现这种效果所需的准确的并发程度。因此逻辑架构考虑的仅仅是功能方面的需求。 However when we come to defining the process architecture, implementing each object with its own thread of control (e.g., its own Unix process or Ada task) is not quite practical in the current state of technology, because of the huge overhead this imposes. Moreover, if objects are concurrent, there must be some form of arbitration for invoking their operations. 然而，当我们定义过程架构时，凭当前技术难以实现每个对象都用自己的线程（比如：它自己的Unix进程或者Ada任务）来控制，因为这会带来巨大的开销。此外，如果对象是并发的，那么必须有某种形式的仲裁来调用它们的操作。 On another hand, multiple threads of control are needed for several reasons: 另一方面，需要多线程控制有几个原因：\",\"To react rapidly to certain classes of external stimuli, including time-related events\",\"To take advantage of multiple CPUs in a node, or multiple nodes in a distributed system\",\"To increase the CPU utilization, by allocating the CPU to other activities while some thread of control is suspended waiting for some other activity to complete (e.g., access to some external device, or access to some other active object)\",\"To prioritize activities (and potentially improve responsiveness)\",\"To support system scalability (with additional processes sharing the load)\",\"To separate concerns between different areas of the software\",\"To achieve a higher system availability (with backup processes)\",\"对某些类型的外部刺激作出快速响应，包括时间相关的事件\",\"发挥一个节点中多CPU，或者一个分布式系统中多节点的优势\",\"当一些控制线程因等待其它活动（比如：访问一些外设，或是访问其它某些主动对象）的完成而被挂起时，将CPU分别给其它活动，以此提高CPU使用率\",\"对活动进行优先级排序（潜在地提升响应能力）\",\"支持系统可扩展性（使用额外的进程分摊负载）\",\"将不同的关注点划分到不同软件区域上\",\"实现更高的系统可用性（使用备份进程） We use concurrently two strategies to determine the 'right' amount of concurrency and define the set of processes that are needed. Keeping in mind the set of potential physical target architectures, we can proceed either: 我们同时使用两种策略来决定“正确的”并发数量，并定义所需的进程组。牢记可能的物理目标架构，我们可以继续处理：\",\"Inside-out:\",\"由内向外 Staring from the logical architecture: define agent tasks which multiplex a single thread of control across multiple active objects of a class; objects whose persistency or life is subordinate to an active object are also executed on that same agent; several classes that need to be executed in mutual exclusion, or that require only small amount of processing share a single agent. This clustering proceeds until we have reduced the processes to a reasonably small number that still allows distribution and use of the physical resources. 从逻辑架构开始：定义代理任务，该代理任务可以让一个类的多个活动对象复用单个控制线程；持久性和生命周期从属于其它主动对象的对象也在同一个代理上执行；需要互斥或者仅需要少量处理能力的类共享一个代理。这种集群一直进行下去，直到将进程降低到合理的数量。合理的数量是指可以继续分配和使用物理资源的数量。\",\"Outside-in:\",\"由外向内 Starting with the physical architecture: identify external stimuli (requests) to the system, define client processes to handle the stimuli and servers processes that only provide services and do not initiate them; use the data integrity and serialization constraints of the problem to define the right set of servers, and allocate objects to the client and servers agents; identify which objects must be distributed. 从物理架构开始：识别系统的外部激励（响应），定义处理激励的客户端进程以及仅提供服务但不启动服务的服务端进程；使用问题的数据完整性和序列化约束来定义一组服务；并且为客户端和服务端代理分配对象；识别必须分配哪些对象。\",\"The result is a mapping of classes (and their objects) onto a set of tasks and processes of the process architecture. Typically, there is an agent task for an active class, with some variations: several agents for a given class to increase throughput, or several classes mapped onto a single agent because their operations are infrequently invoked or to guarantee sequential execution. 其结果是将类（及其对象）映射到过程视图的一组任务和进程上。通常，一个主动类有一个“代理”任务，但有一些差异：有时一个类有多个代理以增加其吞吐量，有时多个类只有一个代理因为它们的操作调用频率较低或者它们必须按顺序执行的。 Note that this is not a linear, deterministic process leading to an optimal process architecture; its requires a few iterations to get an acceptable compromise. There are numerous other ways to proceed, as shown by Birman et al. or Witt et al. for example. The precise method used to construct the mapping is outside of the scope of this article, but we can illustrate it on a small example. 请注意：推导最佳过程架构不是一个线性的、确定性的流程；它需要多次迭代来获得一个可接受的“妥协”。还有很多其它的方法来推导，这些方法包括Birman等人提出的方法、Witt等人提出的方法。构造映射关系的详细方法超出了本文的范围，但是我们可以用一个小例子来说明。 Fig.12 shows how a small set of classes from some hypothetical air-traffic control system maybe mapped onto processes. 图12显示如何将一些假设的空中交通控制系统中的一小组类是映射到进程。 Figure 12: Mapping from Logical to Process view 图12 逻辑视图到过程视图的映射 The flight class is mapped onto a set of flight agents: there are many flights to process, a high rate of external stimuli, response time is critical, the load must be spread across multiple CPUs. Moreover the persistency and distribution aspects of the flight processing are deferred to a flight server, which is duplicated for availability reasons. _flight_类被映射到一组_flight agents_上：因为需要处理的飞机很多，所以外部激励的频率很高，响应时间非常关键，因此必须把负载分配到多个CPU上。此外，飞机的持久性和分布式方面的处理被推到_flight server_上，还有可用性方面的处理也是一样的。 A flight profile or a clearance are always subordinate to a flight, and although there are complex classes, they share the processes of the flight class. Flights are distributed to several other processes, notably for to display and external interfaces. 飞机的_profile_或_clearance_总是从属于飞机，虽然它们是很复杂的类，但它们于飞机类共享处理进程。飞机被分配到很多不同的进程上，特别是为了显示和外部接口。 A sectorization class, which established a partitioning of airspace for the assignment of jurisdiction of controllers over flights, because of its integrity constraints, can be handled only by a single agent, but can share the server process with the flight: updates are infrequent. _sectorization_类为飞机的管辖控制而建立了空域的划分，因为完整性约束，_sectorization_类只能被单个代理处理，但是因为它不需要频繁更新，所以可以与飞机共享服务进程。Locations and airspace and other static aeronautical information are protected objects, shared among several classes, rarely updated; they are mapped on their own server, and distributed to other processes.Locations_和_airspace 以及其它静态的航空信息是受保护对象，在几个类之间共享，很少更新；它们被映射到它们自己的服务上，并且被分配到其它进程。\"]},\"98\":{\"h\":\"From logical to development\"},\"99\":{\"h\":\"从逻辑视图到开发视图\",\"t\":[\"A class is usually implemented as a module, for example a type in the visible part of an Ada package. Large classes are decomposed into multiple packages. Collections of closely related classes -- class categories -- are grouped into subsystems. Additional constraints must be considered for the definition of subsystems, such as team organization, expected magnitude of code (typically 5K to 20K SLOC per subsystem), degree of expected reuse and commonality, and strict layering principles (visibility issues), release policy and configuration management. Therefore we usually end up with a view that does not have a one to one correspondence with the logic view. 一个类通常被实现为一个模块，比如 Ada _package_的可见部分的一个类型。大的类被分解为多个包。密切相关的类的集合（同一类别的类）被分组为子系统。对于子系统的定义，还需要考虑一些额外的约束，比如：团队组织、预期的代码规模（一个子系统的典型代码行数为5K到20K）、预期的可复用性和通用性的程度、以及严格的分层原则（可见性问题）、发布策略和配置管理。因此我们得到的结果常常与逻辑视图没有一一对应的关系。 The logical and development views are very close, but address very different concern. We have found that the larger the project, the greater the distance between these views. Similarly for the process and physical views: the larger the project, the greater the distance between the views. For example, if we compare fig.3b and fig.6, there is no one mapping of the class categories to the layers. If we take the 'External interfaces -- Gateway' category, its implementation is spread across several layers: communications protocols are in subsystems in or below layer 1, general gateway mechanisms are in subsytems in layer 2, and the actual specific gateways in layer 5 subsystems. 逻辑视图和开发视图是很相似的，但是它们解决的是完全不同的问题。我们发现项目规模越大，这两个视图的差距也就越大。过程视图和物理视图也是类似的：项目规模越大，这两个视图的差距也就越大。例如：如果我们比较图3b和图6，我们会发现并没有一个从类到层的映射关系。如果我们观察‘外部接口--Gateway’，我们会发现它的实现垮了好几层：通信协议在第1层或更低层的子系统中，通用的网关机制在第2层子系统中，而实际的特定的网关在第5层子系统中。\"]},\"100\":{\"h\":\"From process to physical\"},\"101\":{\"h\":\"从过程视图到物理视图\",\"t\":[\"Processes and process groups are mapped onto available physical hardware, in various configurations for testing or deployment. Birman describes some very elaborate schemes for this mapping in the Isis project. 根据测试或部署的各种配置，进程和进程组被映射到可用的物理硬件上。Birman 在 Isis 项目中描述了一些非常复杂的映射方案。 The scenarios relate mostly to the logical view, in terms of which classes are used, and to the process view when the interactions between objects involve more than one thread of control. 在哪些类被使用这一方面，场景视图与逻辑视图关联比较多。在对象间的交互涉及不止一个控制线程时，场景视图与过程视图的关联比较多。\"]},\"102\":{\"h\":\"Tailoring the Model\"},\"103\":{\"h\":\"裁剪模型\",\"t\":[\"Not all software architecture need the full \\\"4+1\\\" views. Views that are useless can be omitted from the architecture description, such as the physical view, if there is only one processor, and the process view if there is only process or program. For very small system, it is even possible that the logical view and the development view are so similar that they do not require separate descriptions. The scenarios are useful in all circumstances. 不是所有的软件架构都需要完整的“4+1”视图。架构描述时可以将没什么用的视图省略掉，比如：如果只有一个处理器而且只有一个进程或程序时，可以省略过程视图。对于非常小的系统，逻辑视图和开发视图可能几乎是一样的，那就没必要分开来描述。但场景视图在任何情况下都是有用的。\"]},\"104\":{\"h\":\"Iterative proccess\"},\"105\":{\"h\":\"迭代过程\",\"t\":[\"Witt et al. indicate 4 phases for the design or an architecture: sketching, organizing, specifying and optimizing, subdivided into some 12 steps. They indicate that some backtracking may be needed. We think that this approach is too \\\"linear\\\" for an ambitious and rather unprecedented project. Too little is known at the end of the 4 phases to validate the architecture. We advocate a more iterative development, were the architecture is actually prototyped, tested, measured, analyzed, and then refined in subsequent iterations. Besides allowing to mitigate the risks associated with the architecture, such an approach has other side benefits for the project: team building, training, acquaintance with the architecture, acquisition of tools, run-in of procedures and tools, etc. (We are speaking here of an evolutionary prototype, that slowly grows into becoming the system, and not of throw-away, exploratory prototypes.) This iterative approach also allows the requirements to be refined, matured, better understood. Witt等人提出了架构设计的4个阶段：草图、组织、细化、优化，再细分为12个步骤。它们指出设计过程可能需要一些回溯机制。我们认为这种方法对于一个艰巨的，且没有先例的项目来说，太过于“线性”。在4个阶段结束时，我们仍然对如何证明架构的有效性知之甚少。我们更提倡迭代的开发，架构被原型化、测试、测量、分析，然后在下一个迭代中持续改进。除了可以减少架构相关的风险，这个方法对项目来说还有其它的优点：团队建设、培训、熟悉架构、获取工具、运行流程和工具，等等。（我们这里说是的是用于进化的原型，它慢慢地长成最终的系统，而不是会被抛弃的探索性原型。）这种迭代方法也使得需求可以被优化、逐步成熟，且更易于理解。 （译者备注：本段第一句，原文中 \\\"the design or an architecture\\\" 中的 or 疑为 of 的笔误，本译文按 of 翻译）\"]},\"106\":{\"h\":\"A scenario-driven approach\"},\"107\":{\"h\":\"场景驱动的方法\",\"t\":[\"The most critical functionality of the system is captured in the form of scenarios (or use cases). By critical we mean: functions that are the most important, the raison d'etre of the system, or that have the highest frequency of use, or that present some significant technical risk that must be mitigated. 系统最关键的功能是以场景（或者用例）的形式被捕获的。所谓的关键的功能是指：最重要的功能、作为系统存在理由的功能、或者使用频率最高的功能，或者存在必须被消减的重大技术风险的功能。Start:\",\"A small number of the scenarios are chosen for an iteration based on risk and criticality. Scenarios may be synthesized to abstract a number of user requirements.\",\"A strawman architecture is put in place. The scenarios are then \\\"scripted\\\" in order to identify major abstraction (classes, mechanisms, processes, subsytems) as indicated by Rubin and Goldberg6 -- deccomposed in sequences of pairs (object, operation).\",\"The architectural elements discovered are laid out on the 4 blueprints: logical, process, development, and physical.\",\"This architecture is then implemented, tested, measured, and this analysis may detect some flaws or potential enhancement.\",\"Lessons learned are captured.开始：\",\"根据风险和关键程度选择少量场景进行迭代。可以对场景进行综合，以抽象出一些用户需求。\",\"架构草图已经到位。然后将这些场景脚本化，以定义 Rubin 和 Goldberg6所指出的主要抽象（类、机制、进程、子系统）-- 分解成对象以及对应操作的序列。\",\"所发现的架构元素排列在逻辑、过程、开发和物理4个蓝图上。\",\"实现、测试、测量这个架构，这个分析过程可能会发现一些错误或者潜在的改善。\",\"吸取经验教训。\",\"Loop: The next iteration can then start by:\",\"reassessing the risks,\",\"extending the palette of scenarios to consider\",\"selecting a few additional scenarios that will allow risk mitigation or greater architecture coverage\",\"Then:\",\"Try to script those scenarios in the preliminary architecture\",\"discover additional architectural elements, or sometimes significant architectural changes that need to occur to accommodate these scenarios\",\"update the 4 main blueprints: logical, process, development, physical\",\"revise the existing scenarios based on the changes\",\"upgrade the implementation (the architectural prototype) to support the new extended set of scenario.\",\"Test, Measure under load, in real target environment if possible.\",\"All five blueprints are then reviewed to detect potential for simplification, reuse, commonality.\",\"Design guidelines and rationale are updated.\",\"Capture the lessons learned.End loop循环 下一个迭代可以这样开始：\",\"再次评估风险\",\"扩大要考虑的场景选项\",\"选择一些额外的场景，以降低风险或者扩大架构覆盖范围\",\"然后：\",\"尝试在初步的架构中编写这些场景的脚本\",\"发现额外的架构元素，或者有时需要进行重大的架构调整以适应这些场景\",\"更新4个主要的蓝图：逻辑、过程、开发、物理\",\"基于改变修订现有的场景\",\"升级实现（架构原型）以支持新的扩展场景集\",\"如果条件允许，在真实的目标环境下，进行带负载的测试、测量。\",\"检视所有五个蓝图，以发现简化、提升可复用性、通用性的可能。\",\"更新设计指南和逻辑依据。\",\"吸取经验教训。结束循环\",\"The initial architectural prototype evolves to become the real system. Hopefully after 2 or 3 iterations, the architecture itself become stable: no new major abstractions are found, no new subsystems or processes, no new interfaces. The rest of the story is in the realm of software design, where, by the way, development may continue using very similar methods and process. 最初的体系结构原型逐渐发展成为真正的系统。希望在2到3次迭代之后，架构本身变得稳固：没有再发现新的主要抽象，没有新的子系统或者进程，没有新的接口。接下来的事情属于软件设计领域，顺便说一句，软件开发也可以使用相似的方法和过程。 The duration of these iterations varies considerably: with the size of the project to put in place, with the number of people involved and their familiarity with the domain and with the method, and with the degree of unprecedentedness of the system w.r.t this developement organization. Hence the duration of an iteration may be 2-3 weeks for a small project (e.g., 10 KSLOC), or up to 6-9 months for a large command and control system (e.g., 700 KSLOC). 不同项目迭代的周期差别很大：要实施的项目规模、涉及的人员数量、人员对领域和方法的熟悉程度、 因此，对于小型项目（比如：规模为10千行代码），迭代周期可能是2到3周，对于大型命令和控制系统（比如：规模为700千行代码），迭代周期最长可能是6到9个月。\"]},\"108\":{\"h\":\"Documenting the architecture\"},\"109\":{\"h\":\"架构的文档化\",\"t\":[\"The documentation produced during the architectural design is captured in two documents: 架构设计期间产生的资料包含在两个文档中：\",\"A Software Architecture Document, whose organization follows closely the \\\"4+1\\\" views (cf. fig. 13 for a typical outline)软件架构文档，它的组织结构紧密遵循“4+1”视图（典型大纲参见图13）\",\"A Software Design Guidelines, which captures (among other things) the most important design decisions that must be respected to maintain the architectural integrity of the system.软件设计指南，它包含了(在其他事情中)最重要的设计决策，必须遵守这些决策来维护系统架构的完整性。 | Title Page Change History Table of Contents List of Figures\",\"Scope\",\"References\",\"Software Architecture\",\"Architectural Goals & Constraints\",\"Logical Architecture\",\"Process Architecture\",\"Development Architecture\",\"Physical Architecture\",\"Scenarios\",\"Size and Performance\",\"Quality Appendices A. Acronyms and Abbreviations B. Definitions C. Design Principles | | --- |\",\"Figure 13 -- Outline of a Software Architecture Document\",\"| 标题页 变更记录 目录 图表列表\",\"范围\",\"参考文献\",\"软件架构\",\"架构目标和约束\",\"逻辑架构\",\"过程架构\",\"开发架构\",\"物理架构\",\"场景\",\"规模和性能\",\"质量 附录 A. 缩略语 B. 定义 C. 设计原则 | | --- |\",\"图13 软件架构文档大纲\"]},\"110\":{\"h\":\"Conclusion\"},\"111\":{\"h\":\"结论\",\"t\":[\"This \\\"4+1\\\" view model has been used with success on several large projects with or without some local customization and adjustment in terminology4. It acctually allowed the various stakeholders to find what they want to know about the software architecture. Systems engineers approach it from the Physical view, then the Process view. End-user, customers, data specialists from the Logical view. Project managers, software configuration staff see it from the Development view. “4+1”视图模型已经成功使用在几个大型项目中，无论是否在术语4中有一些本地定制和调整。它的确能使不同利益相关者找到他们想了解的软件架构信息。系统工程师使用物理视图，再到过程视图。最终用户、客户、数据专家使用逻辑视图。项目经理、软件配置人员使用开发视图。 Other sets of views have been proposed and discussed, within Rational and elsewhere, for instance by Meszaros (BNR), Hofmeister, Nord and Soni (Siemens), Emery and Hilliard (Mitre)8, but we have found that often these other views proposed could usually be folded into one of the 4 we described. For example a Cost & Schedule view folds into the Development view, a Data view into the Logical view, an Execution view into a combination of the Process and Physical view. 在 Rational 和其它一些地方，比如：Meszaros (BNR)、Hofmeister、Nord and Soni (Siemens)、Emery 和 Hilliard (Mitre)8，有一些其它视图集已经被提出并经过讨论。但是，我们已经发现这些其它的视图集通常可以用我们所表述的4个视图中的一个来描述。比如：成本和计划视图可以用开发视图来描述，数据视图可以用逻辑视图来描述，执行视图可以用过程视图和物理视图共同描述。\",\"View\",\"Logical\",\"Process\",\"Development\",\"Physical\",\"Scenarios\",\"Components\",\"Class\",\"Task\",\"Module,\",\"Subsystem\",\"Node\",\"Step,\",\"Scripts\",\"Connectors\",\"association,\",\"inheritance,\",\"containment\",\"Rendez-vous,\",\"Message,\",\"broadcast,\",\"RPC, etc.\",\"compilation dependency,\",\"\\\"with\\\" clause,\",\"\\\"include\\\"\",\"Communication medium,\",\"LAN, WAN,\",\"bus, etc.\",\"Containers\",\"Class category\",\"Process\",\"Subsystem(library)\",\"Physical subsystem\",\"Web\",\"Stakeholders\",\"End-user\",\"System designer,\",\"integrator\",\"Developer,\",\"manager\",\"System designer\",\"End-user,\",\"developer\",\"Concerns\",\"Functionality\",\"Performance,\",\"availability,\",\"S/W fault-tolerance,\",\"integrity\",\"Organization,\",\"reuse,\",\"portability,\",\"line-of-product\",\"Scalability,\",\"performance,\",\"availability\",\"Understandability\",\"Tool Support\",\"Rose\",\"UNAS/SALE\",\"DADS\",\"Apex, SoDA\",\"UNAS,\",\"Openview DADS\",\"Rose\",\"Table 1 -- Summary of the \\\"4+1\\\" view model\",\"视图\",\"逻辑\",\"过程\",\"开发\",\"物理\",\"场景\",\"组件\",\"类\",\"任务\",\"模块，\",\"子系统\",\"节点\",\"步骤，\",\"脚本\",\"连接器\",\"关联，\",\"继承，\",\"包含\",\"Rendez-vous，\",\"消息，\",\"广播，\",\"RPC，等等\",\"编译依赖,\",\"\\\"with\\\" 子句，\",\"\\\"include\\\"\",\"通信介质，\",\"局域网，广域网，\",\"总线，等等\",\"容器\",\"类的类别\",\"进程\",\"子系统（库）\",\"物理子系统\",\"Web\",\"利益相关人\",\"最终用户\",\"系统设计人员，\",\"集成人员\",\"开发人员，\",\"项目经理\",\"系统设计人员\",\"最终用户\",\"开发人员\",\"关注点\",\"功能\",\"性能，\",\"可用性，\",\"软件容错，\",\"完整性\",\"组织，\",\"可复用性，\",\"可移植性，\",\"产品线\",\"可扩展性\",\"性能，\",\"可用性\",\"可理解性\",\"工具支持\",\"Rose\",\"UNAS/SALE\",\"DADS\",\"Apex, SoDA\",\"UNAS,\",\"Openview DADS\",\"Rose\",\"表1 “4+1”视图模式总结 （译者备注：不能理解为什么逻辑视图的利息相关人没有开发人员？但原文中确实没有）\"]},\"112\":{\"h\":\"Acknowledgments\"},\"113\":{\"h\":\"致谢\",\"t\":[\"The \\\"4+1\\\" view model owes its existence to many colleagues at Rational, at Hughes Aircraft of Canada, at Alcatel, and elsewhere. In particular I would like to thank for their contributions Ch. Thomopson, A. Bell, M. Devlin, G. Booch, W. Royce, J. Marasco, R. Reitman, V. Ohnjec, and E. Schonberg. “4+1”视图模型的存在归功于 Rational、加拿大Hughes Aircraft公司、阿尔卡特和其它地方的很多同事。我要特别感谢以下同事的贡献 Ch. Thomopson、A. Bell、M. Devlin、G. Booch、W. Royce、J. Marasco、R. Reitman、V. Ohnjec 和 E. Schonberg。\"]},\"114\":{\"h\":\"References\"},\"115\":{\"h\":\"参考文献\",\"t\":[\"image.jpg\",\"译者备注： process view 翻译为 过程视图 process 翻译为 进程 reuse 翻译为 可复用性 concurrent view 翻译为 并行的视图 scalability 先是翻译为可伸缩性，经过斟酌修改为可扩展性 use case 先是翻译为用例，后改为用况，因为机械工业出版社2004年10月出版的《RUP导论（原书第三版）》中翻译为“用况”。但考虑到很多文献上都是用例，最后又改回到用例 notation 翻译为 表示法\",\"来自: 翻译：架构蓝图—软件架构的4+1视图模型（中英文对照） - 知乎\"]},\"116\":{\"h\":\"总览\"},\"117\":{\"c\":[\"it\"]},\"118\":{\"h\":\"总览\"},\"119\":{\"c\":[\"it\"]},\"120\":{\"h\":\"总览\"},\"121\":{\"c\":[\"it\"]},\"122\":{\"h\":\"总览\"},\"123\":{\"c\":[\"it\"]},\"124\":{\"h\":\"JVM\",\"t\":[\"JVM 是 Java Virtual Machine（Java 虚拟机）的缩写，JVM 是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java 虚拟机包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域。 JVM 屏蔽了与具体操作系统平台相关的信息，使 Java 程序只需生成在 Java 虚拟机上运行的目标代码（字节码）,就可以在多种平台上不加修改地运行。JVM 在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。\",\"Java 中的所有类，必须被装载到 jvm 中才能运行，这个装载工作是由 jvm 中的类装载器完成的，类装载器所做的工作实质是把类文件从硬盘读取到内存中。所以 JVM 的主要内容如下图\"]},\"125\":{\"h\":\"JVM 的编译\",\"t\":[\"class文件结构\",\".java 文件由 javac 进行代码编译，编译为.class 文件，.class 文件记录者整个源码的相关信息。\"]},\"126\":{\"h\":\"类加载子系统\",\"t\":[\"类加载子系统详解\",\"类加载器子系统负责从文件系统或者网络中加载 Class 文件，class 文件在文件开头有特定的文件标识。ClassLoader 只负责 class 文件的加载，至于它是否可以运行，则由 Execution Engine（执行引擎）决定。\",\"类加载过程如下图\"]},\"127\":{\"h\":\"加载\",\"t\":[\"通过一个类的全限定名获取定义此类的`二进制例）\"]},\"128\":{\"h\":\"类加载器有哪些\"},\"129\":{\"h\":\"tomcat 为什么要自定义类加载器\",\"t\":[\"Tomcat 是如何打破\\\"双亲委派\\\"机制的?\",\"真正实现 web 应用程序之间的类加载器相互隔离 oader 类加载器。它为什么可以隔离每个 web 应用程序呢？原因就是它打破了\\\"双亲委派\\\"的机制，如果收到类加载的请求，它会先尝试自己去加载，如果找不到在交给父加载器去加载，这么做的目的就是为了优先加载 Web 应用程序自己定义的类来实现 web 应用程序相互隔离独立的。\",\"CommonClassLoader(通用类加载器)：主要 se}/lib 定义的目录和 jar 以及${catalina.home}/lib 定义的目录和 jar，可以被 Tomcat 和所有的 Web 应用程序共同使用。\",\"WebAppClassLoader(web 应用的类加载器):心类加载器，每个 Web 应用程序都有一个 WebAppClassLoader，类库仅仅可以被此 Web 应用程序使用，对 Tomcat 和其他 Web 程序都不可见。\"]},\"130\":{\"h\":\"WebAppClassLoader 加载流程\",\"t\":[\"@Override public Class<?> findClass(String name) throws ClassNotFoundException { if (log.isDebugEnabled()) log.debug(\\\" findClass(\\\" + name + \\\")\\\"); checkStateForClassLoading(name); // (1) Permission to define this class when using a SecurityManager if (securityManager != null) { int i = name.lastIndexOf('.'); if (i >= 0) { try { if (log.isTraceEnabled()) log.trace(\\\" securityManager.checkPackageDefinition\\\"); securityManager.checkPackageDefinition(name.substring(0,i)); } catch (Exception se) { if (log.isTraceEnabled()) log.trace(\\\" -->Exception-->ClassNotFoundException\\\", se); throw new ClassNotFoundException(name, se); } } } // Ask our superclass to locate this class, if possible // (throws ClassNotFoundException if it is not found) Class<?> clazz = null; try { if (log.isTraceEnabled()) log.trace(\\\" findClassInternal(\\\" + name + \\\")\\\"); try { if (securityManager != null) { PrivilegedAction<Class<?>> dp = new PrivilegedFindClassByName(name); clazz = AccessController.doPrivileged(dp); } else { // 1、先在应用本地目录下查找类 clazz = findClassInternal(name); } } catch(AccessControlException ace) { log.warn(\\\"WebappClassLoader.findClassInternal(\\\" + name + \\\") security exception: \\\" + ace.getMessage(), ace); throw new ClassNotFoundException(name, ace); } catch (RuntimeException e) { if (log.isTraceEnabled()) log.trace(\\\" -->RuntimeException Rethrown\\\", e); throw e; } if ((clazz == null) && hasExternalRepositories) { try { // 2、如果在本地目录没有找到，委派父加载器去查找 clazz = super.findClass(name); } catch(AccessControlException ace) { log.warn(\\\"WebappClassLoader.findClassInternal(\\\" + name + \\\") security exception: \\\" + ace.getMessage(), ace); throw new ClassNotFoundException(name, ace); } catch (RuntimeException e) { if (log.isTraceEnabled()) log.trace(\\\" -->RuntimeException Rethrown\\\", e); throw e; } } // 3、如果父加载器也没找到，抛出异常 if (clazz == null) { if (log.isDebugEnabled()) log.debug(\\\" --> Returning ClassNotFoundException\\\"); throw new ClassNotFoundException(name); } } catch (ClassNotFoundException e) { if (log.isTraceEnabled()) log.trace(\\\" --> Passing on ClassNotFoundException\\\"); throw e; } // Return the class we have located if (log.isTraceEnabled()) log.debug(\\\" Returning class \\\" + clazz); if (log.isTraceEnabled()) { ClassLoader cl; if (Globals.IS_SECURITY_ENABLED){ cl = AccessController.doPrivileged( new PrivilegedGetClassLoader(clazz)); } else { cl = clazz.getClassLoader(); } log.debug(\\\" Loaded by \\\" + cl.toString()); } return (clazz); } \",\"@Override public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException { synchronized (getClassLoadingLock(name)) { Class<?> clazz = null; // 1、从本地缓存中查找是否加载过此类 clazz = findLoadedClass0(name); if (clazz != null) { if (log.isDebugEnabled()) log.debug(\\\" Returning class from cache\\\"); if (resolve) resolveClass(clazz); return clazz; } // 2、从AppClassLoader中查找是否加载过此类 clazz = findLoadedClass(name); if (clazz != null) { if (log.isDebugEnabled()) log.debug(\\\" Returning class from cache\\\"); if (resolve) resolveClass(clazz); return clazz; } String resourceName = binaryNameToPath(name, false); // 3、尝试用ExtClassLoader 类加载器加载类,防止应用覆盖JRE的核心类 ClassLoader javaseLoader = getJavaseClassLoader(); boolean tryLoadingFromJavaseLoader; try { URL url; if (securityManager != null) { PrivilegedAction<URL> dp = new PrivilegedJavaseGetResource(resourceName); url = AccessController.doPrivileged(dp); } else { url = javaseLoader.getResource(resourceName); } tryLoadingFromJavaseLoader = (url != null); } catch (Throwable t) { tryLoadingFromJavaseLoader = true; } boolean delegateLoad = delegate || filter(name, true); // 4、判断是否设置了delegate属性,如果设置为true那么就按照双亲委派机制加载类 if (delegateLoad) { if (log.isDebugEnabled()) log.debug(\\\" Delegating to parent classloader1 \\\" + parent); try { clazz = Class.forName(name, false, parent); if (clazz != null) { if (log.isDebugEnabled()) log.debug(\\\" Loading class from parent\\\"); if (resolve) resolveClass(clazz); return clazz; } } catch (ClassNotFoundException e) { // Ignore } } // 5、默认是设置delegate是false的,那么就会先用WebAppClassLoader进行加载 if (log.isDebugEnabled()) log.debug(\\\" Searching local repositories\\\"); try { clazz = findClass(name); if (clazz != null) { if (log.isDebugEnabled()) log.debug(\\\" Loading class from local repository\\\"); if (resolve) resolveClass(clazz); return clazz; } } catch (ClassNotFoundException e) { // Ignore } // 6、如果在WebAppClassLoader没找到类，那么就委托给AppClassLoader去加载 if (!delegateLoad) { if (log.isDebugEnabled()) log.debug(\\\" Delegating to parent classloader at end: \\\" + parent); try { clazz = Class.forName(name, false, parent); if (clazz != null) { if (log.isDebugEnabled()) log.debug(\\\" Loading class from parent\\\"); if (resolve) resolveClass(clazz); return clazz; } } catch (ClassNotFoundException e) { // Ignore } } } throw new ClassNotFoundException(name); } \",\"先在本地缓存中查找该类是否已经加载过，如果加载过就返回缓存中的。\",\"如果没有加载过，委托给 AppClassLoader 是否加载过，如果加载过就返回。\",\"如果 AppClassLoader 也没加载过，委托给 ExtClassLoader 去加载，这么做的目的就是：\",\"防止应用自己的类库覆盖了核心类库，因为 WebAppClassLoader 需要打破双亲委托机制，假如应用里自定义了一个叫 java.lang.String 的类，如果先加载这个类，就会覆盖核心类库的 java.lang.String，所以说它会优先尝试用 ExtClassLoader 去加载，因为 ExtClassLoader 加载不到同样也会委托给 BootstrapClassLoader 去加载，也就避免了覆盖了核心类库的问题。\",\"如果 ExtClassLoader 也没有查找到，说明核心类库中没有这个类，那么就在本地应用目录下查找此类并加载。\",\"如果本地应用目录下还有没有这个类，那么肯定不是应用自己定义的类，那么就由 AppClassLoader 去加载。\",\"这里是通过 Class.forName()调用 AppClassLoader 类加载器的，因为 Class.forName()的默认加载器就是 AppClassLoader。\",\"如果上述都没有找到，那么只能抛出 ClassNotFoundException 了。\"]},\"131\":{\"h\":\"链接-Linking\",\"t\":[\"JVM 连接阶段\",\"连接就是将已经读入到内存的类的二进制数据合并到虚拟机的运行时环境中去。\"]},\"132\":{\"h\":\"验证(Verify)：\",\"t\":[\"1.类文件的结构检查: 确保类文件遵从 Java 类文件的固定格式。\",\"2.语义检查:确保类本身符合 Java 语言的语法规定。注意，语义检查的错误在编译器编译阶段就会通不过，但是如果有程序员通过非编译的手段生成了类文件，其中有可能会含有语义错误，此时的语义检查主要是防止这种没有编译而生成的 class 文件引入的错误\",\"3.字节码验证：确保字节码流可以被 Java 虚拟机安全地执行。字节码验证步骤会检查每个操作码是否合法，即是否有着合法的操作数。\",\"4.二级制兼容性的验证：确保相互引用的类之间的协调一致。\"]},\"133\":{\"h\":\"准备(Prepare)：\",\"t\":[\"在准备阶段，Java 虚拟机为类的静态变量分配内存，并设置默认的初始值。\"]},\"134\":{\"h\":\"解析(Resolve)\",\"t\":[\"在解析阶段，Java 虚拟机会把类的二级制数据中的符号引用替换为直接引用。\"]},\"135\":{\"h\":\"初始化-Initialization\",\"t\":[\"加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常最池信息，可能还包括字符串字而量和数字常量(这部分常量信息是 Class 文件中常量池部分的内存映射)\"]},\"136\":{\"h\":\"运行时数据区\",\"t\":[\"JVM 运行时数据区\",\"名称\",\"是否线程共享\",\"描述\",\"本地方法栈\",\"否\",\"与虚拟机的作用是相似的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的，与虚拟机栈相同的是栈的深度是固定的，当线程申请的大于虚拟机栈的深度就会抛出 StackOverFlowError 异常，当然虚拟机栈也可以动态的扩展，如果扩展到无法申请到足够的内存就会抛出 outofMemoryError 异常。\",\"虚拟机栈\",\"否\",\"描述的是 Java 方法执行的内存模型，每个方法在执行的同时都会创建一个线帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每个方法从调用直至执行完成的过程，都对应这一个线帧在虚拟机栈中入栈到出栈的过程。\",\"程序计数器\",\"否\",\"程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。\",\"方法区\",\"是\",\"用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。\",\"堆\",\"是\",\"是 Java 虚拟机中内存最大的一块，是被所有线程共享的，在虚拟机启动时候创建，Java 堆唯一的目的就是存放对象实例，几乎所有的对象实例都在这里分配内存，随着 JIT 编译器的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优化的技术将会导致一些微妙的变化，所有对象都分配在堆上渐渐变得不那么“绝对”了。\"]},\"137\":{\"h\":\"虚拟机栈\",\"t\":[\"描述的是 Java 方法执行的内存模型，每个方法在执行的同时都会创建一个线帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每个方法从调用直至执行完成的过程，都对应这一个线帧在虚拟机栈中入栈到出栈的过程。\"]},\"138\":{\"h\":\"本地方法栈\",\"t\":[\"与虚拟机的作用是相似的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的，与虚拟机栈相同的是栈的深度是固定的，当线程申请的大于虚拟机栈的深度就会抛出 StackOverFlowError 异常，当然虚拟机栈也可以动态的扩展，如果扩展到无法申请到足够的内存就会抛出 outofMemoryError 异常。\"]},\"139\":{\"h\":\"程序计数器\",\"t\":[\"程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。java 中最小的执行单位是线程，因为虚拟机的是多线程的，每个线程是抢夺 cpu 时间片，程序计数器就是存储这些指令去做什么，比如循环，跳转，异常处理等等需要依赖它。每个线程都有属于自己的程序计数器，而且互不影响，独立存储。\"]},\"140\":{\"h\":\"方法区\",\"t\":[\"用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。\",\"内存区域是很重要的系统资源，是硬盘和 CPU 的中间桥梁，承载着操作系统和应用程序的实时运行。JVM 内存布局规定了 Java 在运行过程中内存申请、分配、管理的策略，保证了 JVM 的高效稳定运行。不同的 JVM 对于内存的划分方式和管理机制存在着部分差异，我们现在以使用最为流行的 HotSpot 虚拟机为例讲解。\"]},\"141\":{\"h\":\"堆\",\"t\":[\"是 Java 虚拟机中内存最大的一块，是被所有线程共享的，在虚拟机启动时候创建，Java 堆唯一的目的就是存放对象实例，几乎所有的对象实例都在这里分配内存，随着 JIT 编译器的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优化的技术将会导致一些微妙的变化，所有对象都分配在堆上渐渐变得不那么“绝对”了。Java8及之后堆内存分为：新生区（新生代）+老年区（老年代），新生区分为Eden（伊甸园）区和Survivor（幸存者）区，堆内存的分配：老年代（2/3）+新生代（1/3）， 新生代= Eden(8/10) + From(1/10) + To(1/10)\"]},\"142\":{\"h\":\"执行引擎\",\"t\":[\"JVM 执行引擎的作用及工作过程\"]},\"143\":{\"h\":\"解释器\"},\"144\":{\"h\":\"JIT\",\"t\":[\"[Java 性能] 3. 什么是 JIT\"]},\"145\":{\"h\":\"垃圾回收器\",\"t\":[\"垃圾收集器\"]},\"146\":{\"h\":\"如何判断一个对象是否还存活\",\"t\":[\"引用计数：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。\",\"可达性分析：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。不可达对象。\",\"在Java语言中，GC Roots包括： \",\"虚拟机栈中引用的对象。\",\"方法区中类静态属性实体引用的对象。\",\"方法区中常量引用的对象。\",\"本地方法栈中JNI引用的对象。\"]},\"147\":{\"h\":\"垃圾收集算法\",\"t\":[\"标记-清除算法：算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。之所以说它是最基础的收集算法，是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的。\",\"缺点：一个是效率问题，标记和清除过程的效率都不高；另外一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\",\"复制算法：它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。\",\"缺点：内存缩小为原来的一半，持续复制长生存期的对象则导致效率降低；在对象存活率较高时就要执行较多的复制操作，效率将会变低。更关键的是，如果不想浪费50%的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\",\"优点：每次都是对其中的一块进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。\",\"标记-压缩算法：标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。\",\"分代收集算法： 把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。\"]},\"148\":{\"h\":\"垃圾收集器\",\"t\":[\"Serial收集器：串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）\",\"ParNew收集器：ParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-压缩\",\"Parallel收集器：Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩\",\"Parallel Old 收集器：Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供\",\"CMS收集器：CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。\",\"G1垃圾回收器：G1垃圾回收器将堆内存分割成不同的区域然后并发的对其进行垃圾回收。\",\"新生代GC策略\",\"老年老代GC策略\",\"说明\",\"组合1\",\"Serial\",\"Serial Old\",\"Serial和Serial Old都是单线程进行GC，特点就是GC时暂停所有应用线程。\",\"组合2\",\"Serial\",\"CMS+Serial Old\",\"CMS（Concurrent Mark Sweep）是并发GC，实现GC线程和应用线程并发工作，不需要暂停所有应用线程。另外，当CMS进行GC失败时，会自动使用Serial Old策略进行GC。\",\"组合3\",\"ParNew\",\"CMS\",\"使用 -XX:+UseParNewGC选项来开启。ParNew是Serial的并行版本，可以指定GC线程数，默认GC线程数为CPU的数量。可以使用-XX:ParallelGCThreads选项指定GC的线程数。如果指定了选项 -XX:+UseConcMarkSweepGC选项，则新生代默认使用ParNew GC策略。\",\"组合4\",\"ParNew\",\"Serial Old\",\"使用 -XX:+UseParNewGC选项来开启。新生代使用ParNew GC策略，年老代默认使用Serial Old GC策略。\",\"组合5\",\"Parallel Scavenge\",\"Serial Old\",\"Parallel Scavenge策略主要是关注一个可控的吞吐量：应用程序运行时间 / (应用程序运行时间 + GC时间)，可见这会使得CPU的利用率尽可能的高，适用于后台持久运行的应用程序，而不适用于交互较多的应用程序。\",\"组合6\",\"Parallel Scavenge\",\"Parallel Old\",\"Parallel Old是Serial Old的并行版本\",\"组合7\",\"G1GC\",\"G1GC\",\"-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -XX:GCPauseIntervalMillis=200 -XX:+G1YoungGenSize=512m -XX:SurvivorRatio=6\"]},\"149\":{\"h\":\"优化\"},\"150\":{\"h\":\"获取 jvm 数据\",\"t\":[\"jmap -F -dump:format=b,file=dumpFile.phrof pid \"]},\"151\":{\"h\":\"jvm 数据分析\",\"t\":[\"http://www.fastthread.io\",\"https://spotify.github.io/threaddump-analyzer\",\"http://gceasy.io\",\"http://heaphero.io\"]},\"152\":{\"h\":\"调优\",\"t\":[\"JVM 优化\"]},\"153\":{\"h\":\"优化工具\",\"t\":[\"JVM 优化工具\",\"jps 虚拟机进程状况工具 jsp [options] [hostid]\",\"jstat 虚拟机统计信息监控工具 jstat [ option vmid [interval[s|ms] [count]] ]\",\"jinfo java 配置信息工具 jinfo [option] pid\",\"jmap java 内存映像工具 jmap [option] vmid\",\"jhat 虚拟机堆转储快照分析工具\",\"jstack java 堆栈跟踪工具 jstack [option] vmid\"]},\"154\":{\"h\":\"Java IO\"},\"155\":{\"h\":\"Java基础\"},\"156\":{\"h\":\"面向对象\"},\"157\":{\"h\":\"封装\",\"t\":[\"利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。 优点：\",\"减少耦合 : 可以独立地开发、测试、优化、使用、理解和修改\",\"减轻维护的负担 : 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块\",\"有效地调节性能 : 可以通过剖析确定哪些模块影响了系统的性能\",\"提高软件的可重用性\",\"降低了构建大型系统的风险 : 即使整个系统不可用，但是这些独立的模块却有可能是可用的\"]},\"158\":{\"h\":\"继承\",\"t\":[\"继承实现了 IS-A 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。继承应该遵循里氏替换原则[1]。，子类对象必须能够替换掉所有父类对象。 Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 向上转型 。\"]},\"159\":{\"h\":\"\",\"t\":[\"多态分为编译时多态和运行时多态:\",\"编译时多态主要指方法的重载\",\"运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定\",\"运行时多态有三个条件:\",\"继承\",\"覆盖(重写)\",\"向上转型\"]},\"160\":{\"h\":\"重写和重载\"},\"161\":{\"h\":\"重写\",\"t\":[\"重写（Override）是指子类定义了一个与其父类中具有相同名称、参数列表和返回类型的方法，并且子类方法的实现覆盖了父类方法的实现。 即外壳不变，核心重写！ 重写规则：\",\"参数列表与被重写方法的参数列表必须完全相同。\",\"返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。\",\"访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。\",\"父类的成员方法只能被它的子类重写。\",\"声明为 final 的方法不能被重写。\",\"声明为 static 的方法不能被重写，但是能够被再次声明。\",\"子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。\",\"子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。\",\"重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。\",\"构造方法不能被重写。\",\"如果不能继承一个类，则不能重写该类的方法。\"]},\"162\":{\"h\":\"重载\",\"t\":[\"重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。 每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。 最常用的地方就是构造器的重载。 重载规则：\",\"被重载的方法必须改变参数列表(参数个数或类型不一样)；\",\"被重载的方法可以改变返回类型；\",\"被重载的方法可以改变访问修饰符；\",\"被重载的方法可以声明新的或更广的检查异常；\",\"方法能够在同一个类中或者在一个子类中被重载。\",\"无法以返回值类型作为重载函数的区分标准。\"]},\"163\":{\"h\":\"泛型机制\",\"t\":[\"什么是泛型\",\"泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。\"]},\"164\":{\"h\":\"为什么引入泛型\",\"t\":[\"泛型的引入主要是为了提高代码的复用性和可读性，通过泛型可以将类型参数化，使得代码更加灵活、更加易于理解和维护。\",\"private static int add(int a, int b) { System.out.println(a + \\\"+\\\" + b + \\\"=\\\" + (a + b)); return a + b; } private static float add(float a, float b) { System.out.println(a + \\\"+\\\" + b + \\\"=\\\" + (a + b)); return a + b; } private static double add(double a, double b) { System.out.println(a + \\\"+\\\" + b + \\\"=\\\" + (a + b)); return a + b; } \",\"如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个add方法；通过泛型，我们可以复用为一个方法：\",\"private static <T extends Number> double add(T a, T b) { System.out.println(a + \\\"+\\\" + b + \\\"=\\\" + (a.doubleValue() + b.doubleValue())); return a.doubleValue() + b.doubleValue(); } \"]},\"165\":{\"h\":\"泛型的基本使用\"},\"166\":{\"h\":\"泛型类\",\"t\":[\"单元泛型\",\"class Point<T>{ // 此处可以随便写标识符号，T是type的简称 private T var ; // var的类型由T指定，即：由外部指定 public T getVar(){ // 返回值的类型由外部决定 return var ; } public void setVar(T var){ // 设置的类型也由外部决定 this.var = var ; } } public class GenericsDemo06{ public static void main(String args[]){ Point<String> p = new Point<String>() ; // 里面的var类型为String类型 p.setVar(\\\"it\\\") ; // 设置字符串 System.out.println(p.getVar().length()) ; // 取得字符串的长度 } } \",\"多参数泛型\",\"class Notepad<K,V>{ // 此处指定了两个泛型类型 private K key ; // 此变量的类型由外部决定 private V value ; // 此变量的类型由外部决定 public K getKey(){ return this.key ; } public V getValue(){ return this.value ; } public void setKey(K key){ this.key = key ; } public void setValue(V value){ this.value = value ; } } public class GenericsDemo09{ public static void main(String args[]){ Notepad<String,Integer> t = null ; // 定义两个泛型类型的对象 t = new Notepad<String,Integer>() ; // 里面的key为String，value为Integer t.setKey(\\\"汤姆\\\") ; // 设置第一个内容 t.setValue(20) ; // 设置第二个内容 System.out.print(\\\"姓名；\\\" + t.getKey()) ; // 取得信息 System.out.print(\\\"，年龄；\\\" + t.getValue()) ; // 取得信息 } } \"]},\"167\":{\"h\":\"泛型接口\",\"t\":[\"interface Info<T>{ // 在接口上定义泛型 public T getVar() ; // 定义抽象方法，抽象方法的返回值就是泛型类型 } class InfoImpl<T> implements Info<T>{ // 定义泛型接口的子类 private T var ; // 定义属性 public InfoImpl(T var){ // 通过构造方法设置属性内容 this.setVar(var) ; } public void setVar(T var){ this.var = var ; } public T getVar(){ return this.var ; } } public class GenericsDemo24{ public static void main(String arsg[]){ Info<String> i = null; // 声明接口对象 i = new InfoImpl<String>(\\\"汤姆\\\") ; // 通过子类实例化对象 System.out.println(\\\"内容：\\\" + i.getVar()) ; } } \"]},\"168\":{\"h\":\"泛型方法\",\"t\":[\"泛型方法定义\",\"泛型方法定义\",\"方法调用\",\"泛型方法调用\"]},\"169\":{\"h\":\"泛型的上下限\",\"t\":[\"上限：\",\"class Info<T extends Number>{ // 此处泛型只能是数字类型 private T var ; // 定义泛型变量 public void setVar(T var){ this.var = var ; } public T getVar(){ return this.var ; } public String toString(){ // 直接打印 return this.var.toString() ; } } public class demo1{ public static void main(String args[]){ Info<Integer> i1 = new Info<Integer>() ; // 声明Integer的泛型对象 } } \",\"下限:\",\"class Info<T>{ private T var ; // 定义泛型变量 public void setVar(T var){ this.var = var ; } public T getVar(){ return this.var ; } public String toString(){ // 直接打印 return this.var.toString() ; } } public class GenericsDemo21{ public static void main(String args[]){ Info<String> i1 = new Info<String>() ; // 声明String的泛型对象 Info<Object> i2 = new Info<Object>() ; // 声明Object的泛型对象 i1.setVar(\\\"hello\\\") ; i2.setVar(new Object()) ; fun(i1) ; fun(i2) ; } public static void fun(Info<? super String> temp){ // 只能接收String或Object类型的泛型，String类的父类只有Object类 System.out.print(temp + \\\", \\\") ; } } \",\"<?> 无限制通配符 <? extends E> extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类 <? super E> super 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类 // 使用原则《Effictive Java》 // 为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限 1. 如果参数化类型表示一个 T 的生产者，使用 < ? extends T>; 2. 如果它表示一个 T 的消费者，就使用 < ? super T>； 3. 如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。 \"]},\"170\":{\"h\":\"泛型数组\",\"t\":[\"List<String>[] list11 = new ArrayList<String>[10]; //编译错误，非法创建 List<String>[] list12 = new ArrayList<?>[10]; //编译错误，需要强转类型 List<String>[] list13 = (List<String>[]) new ArrayList<?>[10]; //OK，但是会有警告 List<?>[] list14 = new ArrayList<String>[10]; //编译错误，非法创建 List<?>[] list15 = new ArrayList<?>[10]; //OK List<String>[] list6 = new ArrayList[10]; //OK，但是会有警告 \"]},\"171\":{\"h\":\"深入理解泛型\",\"t\":[\"什么是泛型擦除\",\"Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。\"]},\"172\":{\"h\":\"泛型的擦除原则\",\"t\":[\"消除类型参数声明，即删除<>及其包围的部分。\",\"根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为Object，如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型（即父类）。\",\"为了保证类型安全，必要时插入强制类型转换代码。\",\"自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。\"]},\"173\":{\"h\":\"如何进行擦除\",\"t\":[\"擦除类定义中的类型参数 - 无限制类型擦除\",\"无限制类型擦除\",\"擦除类定义中的类型参数 - 有限制类型擦除\",\"有限制类型擦除\",\"擦除方法定义中的类型参数\",\"擦除方法定义中的类型参数\"]},\"174\":{\"h\":\"如何理解泛型的多态--泛型的桥接方法\"},\"175\":{\"h\":\"如何理解基本类型不能作为泛型类型\",\"t\":[\"因为当类型擦除后，原始类型变为Object，但是Object类型不能存储int值，只能引用Integer的值。\"]},\"176\":{\"h\":\"如何理解泛型类型不能实例化？\",\"t\":[\"因为在 Java 编译期没法确定泛型参数化类型，也就找不到对应的类字节码文件，所以自然就不行了，此外由于T 被擦除为 Object，如果可以 new T() 则就变成了 new Object()，失去了本意。 如果我们确实需要实例化一个泛型，应该如何做呢？可以通过反射实现：\",\"static <T> T newTclass (Class < T > clazz) throws InstantiationException, IllegalAccessException { T obj = clazz.newInstance(); return obj; } \"]},\"177\":{\"h\":\"如何获取泛型的参数类型\",\"t\":[\"可以通过反射进行获取参数的实际类型，编译阶段无法判定类型。\"]},\"178\":{\"h\":\"注解机制\"},\"179\":{\"h\":\"注解基础\",\"t\":[\"注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。 它主要的作用有以下四方面：\",\"生成文档，通过代码里标识的元数据生成javadoc文档。\",\"编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。\",\"编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。\",\"运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。\",\"注解的常见分类：\",\"Java自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。\",\"元注解，元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented，@Retention用于标明注解被保留的阶段，@Target用于标明注解使用的范围，@Inherited用于标明注解可继承，@Documented用于标明是否生成javadoc文档。\",\"自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。\"]},\"180\":{\"h\":\"Java自带的标准注解\",\"t\":[\"Java 1.5开始自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings：\",\"@Override：表示当前的方法定义将覆盖父类中的方法\",\"@Deprecated：表示代码被弃用，如果使用了被@Deprecated注解的代码则编译器将发出警告\",\"@SuppressWarnings：表示关闭编译器警告信息\"]},\"181\":{\"h\":\"元注解\",\"t\":[\"在JDK 1.5中提供了4个标准的元注解：\",\"@Target：描述注解的使用范围（即：被修饰的注解可以用在什么地方）。\",\"@Retention：描述注解保留的时间范围（即：被描述的注解在它所修饰的类中可以被保留到何时）。\",\"@Documented：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。\",\"@Inherited：描述注解是否可以被子类继承。\",\"在JDK 1.8中提供了两个元注解：\",\"@@Repeatable：加上@Repeatable, 指向存储注解Authorities，在使用时候，直接可以重复使用Authority注解。\",\"@Native：使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，常常被代码生成工具使用。\"]},\"182\":{\"h\":\"自定义注解\"},\"183\":{\"h\":\"深入理解注解\"},\"184\":{\"h\":\"Java8提供了哪些新的注解\"},\"185\":{\"h\":\"注解支持继承吗？\"},\"186\":{\"h\":\"注解实现的原理\",\"t\":[\"java注解的本质以及注解的底层实现原理\",\"annotation-processing\"]},\"187\":{\"h\":\"自定义注解和AOP - 通过切面实现解耦\"},\"188\":{\"h\":\"异常机制\"},\"189\":{\"h\":\"异常的层次结构\"},\"190\":{\"h\":\"异常基础\"},\"191\":{\"h\":\"异常实践\"},\"192\":{\"h\":\"深入理解异常\"},\"193\":{\"h\":\"反射机制\"},\"194\":{\"h\":\"反射基础\"},\"195\":{\"h\":\"反射使用\"},\"196\":{\"h\":\"反射机制执行的流程\"},\"197\":{\"h\":\"SPI 机制\"},\"198\":{\"h\":\"SPI 机制介绍\",\"t\":[\"什么是SPI\",\"SPI（Service Provider Interface），是JDK内置的一种 服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql. Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务实现。Java中SPI机制主要思想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是解耦。\",\"SPI整体机制图如下：\",\"SPI整体机制图\",\"当服务的提供者提供了一种接口的实现之后，需要在classpath下的META-INF/services/目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类。当其他的程序需要这个服务的时候，就可以通过查找这个jar包（一般都是以jar包做依赖）的META-INF/services/中的配置文件，配置文件中有接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了。JDK中查找服务的实现的工具类是：java.util. ServiceLoader。\"]},\"199\":{\"h\":\"SPI 机制的使用\"},\"200\":{\"h\":\"SPI 机制的实现原理\",\"t\":[\"子类型（subtype）必须能够替换掉他们的基类型（base type）。 ↩︎\"]},\"201\":{\"h\":\"Java 多线程和并发\"},\"202\":{\"h\":\"为什么需要多线程\",\"t\":[\"CPU、内存、I/O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为:\",\"CPU 增加了缓存，以均衡与内存的速度差异；// 导致 可见性问题\",\"操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；// 导致 原子性问题\",\"编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。// 导致 有序性问题\"]},\"203\":{\"h\":\"为什么会出现并发问题\"},\"204\":{\"h\":\"可见性: CPU缓存引起\",\"t\":[\"假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。\",\"此时线程2执行 j = i，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.\",\"这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。\"]},\"205\":{\"h\":\"原子性: 分时复用引起\",\"t\":[\"i += 1需要三条 CPU 指令\",\"将变量 i 从内存读取到 CPU寄存器；\",\"在CPU寄存器中执行 i + 1 操作；\",\"将最后的结果i写入内存（缓存机制导致可能写入的是 CPU 缓存而不是内存）。\",\"由于CPU分时复用（线程切换）的存在，线程1执行了第一条指令后，就切换到线程2执行，假如线程2执行了这三条指令后，再切换会线程1执行后续两条指令，将造成最后写到内存中的i值是2而不是3。\"]},\"206\":{\"h\":\"有序性: 重排序引起\",\"t\":[\"在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：\",\"编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。\",\"指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。\",\"内存系统的重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。\",\"从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：\",\"image.png\",\"上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 java 编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel 称之为 memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。\"]},\"207\":{\"h\":\"JAVA是怎么解决并发问题的\",\"t\":[\"Java 内存模型规范了 JVM 如何提供按需禁用缓存和编译优化的方法。具体来说，这些方法包括：\",\"volatile、synchronized 和 final 三个关键字\",\"Happens-Before 规则\"]},\"208\":{\"h\":\"volatile\"},\"209\":{\"h\":\"synchronized\"},\"210\":{\"h\":\"final\"},\"211\":{\"h\":\"Happens-Before\",\"t\":[\"单一线程原则: 在一个线程内，在程序前面的操作先行发生于后面的操作\",\"管程锁定规则: 一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。\",\"volatile 变量规则: 对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。\",\"线程启动规则: Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。\",\"线程加入规则: Thread 对象的结束先行发生于 join() 方法返回。\",\"线程中断规则: 对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。\",\"对象终结规则: 一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize() 方法的开始。\",\"传递性: 如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。\"]},\"212\":{\"h\":\"原子性\",\"t\":[\"Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。\"]},\"213\":{\"h\":\"可见性\",\"t\":[\"Java提供了volatile关键字来保证可见性。 当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。 而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。 通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。\"]},\"214\":{\"h\":\"有序性\",\"t\":[\"在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。当然JMM是通过Happens-Before 规则来保证有序性的。\"]},\"215\":{\"h\":\"线程安全分类\"},\"216\":{\"h\":\"不可变\",\"t\":[\"不可变(Immutable)的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。\"]},\"217\":{\"h\":\"绝对线程安全\",\"t\":[\"不管运行时环境如何，调用者都不需要任何额外的同步措施。\"]},\"218\":{\"h\":\"相对线程安全\",\"t\":[\"相对线程安全需要保证对这个对象单独的操作是线程安全的，在调用的时候不需要做额外的保障措施。但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。\"]},\"219\":{\"h\":\"线程兼容\",\"t\":[\"线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。Java API 中大部分的类都是属于线程兼容的，如与前面的 Vector 和 HashTable 相对应的集合类 ArrayList 和 HashMap 等。\"]},\"220\":{\"h\":\"线程对立\",\"t\":[\"线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。由于 Java 语言天生就具备多线程特性，线程对立这种排斥多线程的代码是很少出现的，而且通常都是有害的，应当尽量避免。\"]},\"221\":{\"h\":\"线程安全的实现\"},\"222\":{\"h\":\"互斥同步\",\"t\":[\"互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。 互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题。无论共享数据是否真的会出现竞争，它都要进行加锁(这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁)、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。\"]},\"223\":{\"h\":\"非阻塞同步\"},\"224\":{\"h\":\"\",\"t\":[\"随着硬件指令集的发展，我们可以使用基于冲突检测的乐观并发策略: 先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施(不断地重试，直到成功为止)。这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。 乐观锁需要操作和冲突检测这两个步骤具备原子性，这里就不能再使用互斥同步来保证了，只能靠硬件来完成。硬件支持的原子性操作最典型的是: 比较并交换(Compare-and-Swap，CAS)。CAS 指令需要有 3 个操作数，分别是内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B。\"]},\"225\":{\"h\":\"\",\"t\":[\"J. U. C 包里面的整数原子类 AtomicInteger，其中的 compareAndSet() 和 getAndIncrement() 等方法都使用了 Unsafe 类的 CAS 操作。\"]},\"226\":{\"h\":\"\",\"t\":[\"如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。 J. U. C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。\"]},\"227\":{\"h\":\"无同步方案\",\"t\":[\"要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。\"]},\"228\":{\"h\":\"\",\"t\":[\"多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。\"]},\"229\":{\"h\":\"线程本地存储(Thread Local Storage)\",\"t\":[\"如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。 符合这种特点的应用并不少见，大部分使用消费队列的架构模式(如“生产者-消费者”模式)都会将产品的消费过程尽量在一个线程中消费完。其中最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”(Thread-per-Request)的处理方式，这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。 可以使用 java.lang. ThreadLocal 类来实现线程本地存储功能。\"]},\"230\":{\"h\":\"\",\"t\":[\"这种代码也叫做纯代码(Pure Code)，可以在代码执行的任何时刻中断它，转而去执行另外一段代码(包括递归调用它本身)，而在控制权返回后，原来的程序不会出现任何错误。 可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。\"]},\"231\":{\"h\":\"线程状态\",\"t\":[\"image.png\"]},\"232\":{\"h\":\"新建(New)\",\"t\":[\"创建后尚未启动。\"]},\"233\":{\"h\":\"可运行(Runnable)\",\"t\":[\"可能正在运行，也可能正在等待 CPU 时间片。 包含了操作系统线程状态中的 Running 和 Ready。\"]},\"234\":{\"h\":\"阻塞(Blocking)\",\"t\":[\"等待获取一个排它锁，如果其线程释放了锁就会结束此状态。\"]},\"235\":{\"h\":\"无限期等待(Waiting)\",\"t\":[\"等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。\",\"进入方法\",\"退出方法\",\"没有设置 Timeout 参数的 Object.wait() 方法\",\"Object.notify() / Object.notifyAll()\",\"没有设置 Timeout 参数的 Thread.join() 方法\",\"被调用的线程执行完毕\",\"LockSupport.park() 方法\",\"-\"]},\"236\":{\"h\":\"限期等待(Timed Waiting)\",\"t\":[\"无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。 调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。 调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。 睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。 阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。\",\"进入方法\",\"退出方法\",\"Thread.sleep() 方法\",\"时间结束\",\"设置了 Timeout 参数的 Object.wait() 方法\",\"时间结束 / Object.notify() / Object.notifyAll()\",\"设置了 Timeout 参数的 Thread.join() 方法\",\"时间结束 / 被调用的线程执行完毕\",\"LockSupport.parkNanos() 方法\",\"-\",\"LockSupport.parkUntil() 方法\",\"-\"]},\"237\":{\"h\":\"死亡(Terminated)\",\"t\":[\"可以是线程结束任务之后自己结束，或者产生了异常而结束。\"]},\"238\":{\"h\":\"线程使用方式\",\"t\":[\"有三种使用线程的方法:\",\"实现 Runnable 接口；\",\"实现 Callable 接口；\",\"继承 Thread 类。\",\"实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。可以说任务是通过线程驱动从而执行的。\"]},\"239\":{\"h\":\"实现接口 VS 继承 Thread\",\"t\":[\"实现接口会更好一些，因为:\",\"Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；\",\"类可能只要求可执行就行，继承整个 Thread 类开销过大。\"]},\"240\":{\"h\":\"基础线程机制\"},\"241\":{\"h\":\"Executor\",\"t\":[\"Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。 主要有三种 Executor:\",\"CachedThreadPool: 一个任务创建一个线程；\",\"FixedThreadPool: 所有任务只能使用固定大小的线程；\",\"SingleThreadExecutor: 相当于大小为 1 的 FixedThreadPool。\"]},\"242\":{\"h\":\"Daemon\",\"t\":[\"守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。 当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。 main() 属于非守护线程。 使用 setDaemon() 方法将一个线程设置为守护线程。\"]},\"243\":{\"h\":\"sleep()\",\"t\":[\"Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。 sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。\"]},\"244\":{\"h\":\"yield()\",\"t\":[\"对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。\"]},\"245\":{\"h\":\"线程中断\",\"t\":[\"一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。\"]},\"246\":{\"h\":\"InterruptedException\",\"t\":[\"通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。\"]},\"247\":{\"h\":\"interrupted()\",\"t\":[\"如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 InterruptedException 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。 但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程。\"]},\"248\":{\"h\":\"Executor 的中断操作\",\"t\":[\"调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。\"]},\"249\":{\"h\":\"线程互斥同步\",\"t\":[\"Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。\"]},\"250\":{\"h\":\"线程间的协作\",\"t\":[\"当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。\"]},\"251\":{\"h\":\"join()\",\"t\":[\"在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。\"]},\"252\":{\"h\":\"wait() notify() notifyAll()\",\"t\":[\"调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。 它们都属于 Object 的一部分，而不属于 Thread。 只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateExeception。 使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。\"]},\"253\":{\"h\":\"wait() 和 sleep() 的区别\",\"t\":[\"wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；\",\"wait() 会释放锁，sleep() 不会。\"]},\"254\":{\"h\":\"await() signal() signalAll()\",\"t\":[\"java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。\"]},\"255\":{\"h\":\"Java 锁\"},\"256\":{\"h\":\"乐观锁 VS 悲观锁\",\"t\":[\"悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。\",\"乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。\",\"根据从上面的概念描述我们可以发现：\",\"悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。\",\"乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。\"]},\"257\":{\"h\":\"自旋锁 VS 适应性自旋锁\",\"t\":[\"自旋锁：在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。\",\"自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX: PreBlockSpin来更改）没有成功获得锁，就应当挂起线程\"]},\"258\":{\"h\":\"无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁\",\"t\":[\"偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。\",\"image.png\"]},\"259\":{\"h\":\"公平锁 VS 非公平锁\",\"t\":[\"公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。\",\"非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。\"]},\"260\":{\"h\":\"可重入锁 VS 非可重入锁\",\"t\":[\"可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。\"]},\"261\":{\"h\":\"独享锁(排他锁) VS 共享锁\",\"t\":[\"独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。\",\"共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。\"]},\"262\":{\"h\":\"final 详解\"},\"263\":{\"h\":\"final基础使用\"},\"264\":{\"h\":\"修饰类\",\"t\":[\"当某个类的整体定义为final时，就表明了你不能打算继承该类，而且也不允许别人这么做。即这个类是不能有子类的。 注意：final类中的所有方法都隐式为final，因为无法覆盖他们，所以在final类中给任何方法添加final关键字是没有任何意义的。\"]},\"265\":{\"h\":\"修饰方法\",\"t\":[\"private 方法是隐式的final：Base和Son都有方法test(), 但是这并不是一种覆盖，因为private所修饰的方法是隐式的final，也就是无法被继承，所以更不用说是覆盖了，在Son中的test()方法不过是属于Son的新成员罢了，Son进行向上转型得到father，但是father.test()是不可执行的，因为Base中的test方法是private的，无法被访问到。\",\"final方法是可以被重载的\"]},\"266\":{\"h\":\"修饰参数\"},\"267\":{\"h\":\"修饰变量\"},\"268\":{\"h\":\"final域重排序规则\"},\"269\":{\"h\":\"final域为基本类型\"},\"270\":{\"h\":\"写final域重排序规则\",\"t\":[\"写final域的重排序规则禁止对final域的写重排序到构造函数之外，这个规则的实现主要包含了两个方面：\",\"JMM禁止编译器把final域的写重排序到构造函数之外；\",\"编译器会在final域写之后，构造函数return之前，插入一个storestore屏障。这个屏障可以禁止处理器把final域的写重排序到构造函数之外。\"]},\"271\":{\"h\":\"读final域重排序规则\",\"t\":[\"在一个线程中，初次读对象引用和初次读该对象包含的final域，JMM会禁止这两个操作的重排序。(注意，这个规则仅仅是针对处理器)，处理器会在读final域操作的前面插入一个LoadLoad屏障。实际上，读对象的引用和读该对象的final域存在间接依赖性，一般处理器不会重排序这两个操作。但是有一些处理器会重排序，因此，这条禁止重排序规则就是针对这些处理器而设定的。\"]},\"272\":{\"h\":\"final域为引用类型\"},\"273\":{\"h\":\"对final修饰的对象的成员域写操作\",\"t\":[\"针对引用数据类型，final域写针对编译器和处理器重排序增加了这样的约束：在构造函数内对一个final修饰的对象的成员域的写入，与随后在构造函数之外把这个被构造的对象的引用赋给一个引用变量，这两个操作是不能被重排序的。注意这里的是“增加”也就说前面对final基本数据类型的重排序规则在这里还是使用。\"]},\"274\":{\"h\":\"对final修饰的对象的成员域读操作\",\"t\":[\"MM可以确保线程C至少能看到写线程A对final引用的对象的成员域的写入，即能看下arrays[0] = 1，而写线程B对数组元素的写入可能看到可能看不到。JMM不保证线程B的写入对线程C可见，线程B和线程C之间存在数据竞争，此时的结果是不可预知的。如果可见的，可使用锁或者volatile。\"]},\"275\":{\"h\":\"关于final重排序的总结\",\"t\":[\"按照final修饰的数据类型分类：\",\"基本数据类型: \",\"final域写：禁止final域写与构造方法重排序，即禁止final域写重排序到构造方法之外，从而保证该对象对所有线程可见时，该对象的final域全部已经初始化过。\",\"final域读：禁止初次读对象的引用与读该对象包含的final域的重排序。\",\"引用数据类型： \",\"额外增加约束：禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序\"]},\"276\":{\"h\":\"final的实现原理\",\"t\":[\"上面我们提到过，写final域会要求编译器在final域写之后，构造函数返回前插入一个StoreStore屏障。读final域的重排序规则会要求编译器在读final域的操作前插入一个LoadLoad屏障。 很有意思的是，如果以X86处理为例，X86不会对写-写重排序，所以StoreStore屏障可以省略。由于不会对有间接依赖性的操作重排序，所以在X86处理器中，读final域需要的LoadLoad屏障也会被省略掉。也就是说，以X86为例的话，对final域的读/写的内存屏障都会被省略！具体是否插入还是得看是什么处理器\"]},\"277\":{\"h\":\"volatile 详解\"},\"278\":{\"h\":\"volatile的作用详解\"},\"279\":{\"h\":\"防重排序\",\"t\":[\"实例化一个对象其实可以分为三个步骤：\",\"分配内存空间。\",\"初始化对象。\",\"将内存空间的地址赋值给对应的引用。\",\"但是由于操作系统可以对指令进行重排序，所以上面的过程也可能会变成如下过程：\",\"分配内存空间。\",\"将内存空间的地址赋值给对应的引用。\",\"初始化对象\",\"如果是这个流程，多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此，为了防止这个过程的重排序，我们需要将变量设置为volatile类型的变量。\"]},\"280\":{\"h\":\"实现可见性\",\"t\":[\"可见性问题主要指一个线程修改了共享变量值，而另一个线程却看不到。引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区——线程工作内存。volatile关键字能有效的解决这个问题。\"]},\"281\":{\"h\":\"保证原子性: 单次读/写\",\"t\":[\"volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性\"]},\"282\":{\"h\":\"问题1： i++为什么不能保证原子性?\",\"t\":[\"i++其实是一个复合操作，包括三步骤：\",\"读取i的值。\",\"对i加1。\",\"将i的值写回内存。 volatile是无法保证这三个操作是具有原子性的，我们可以通过AtomicInteger或者Synchronized来保证+1操作的原子性。 注：上面几段代码中多处执行了Thread.sleep()方法，目的是为了增加并发问题的产生几率，无其他作用。\"]},\"283\":{\"h\":\"问题2： 共享的long和double变量的为什么要用volatile?\",\"t\":[\"因为long和double两种数据类型的操作可分为高32位和低32位两部分，因此普通的long或double类型读/写可能不是原子的。因此，鼓励大家将共享的long和double变量设置为volatile类型，这样能保证任何情况下对long和double的单次读/写操作都具有原子性。\"]},\"284\":{\"h\":\"volatile 的实现原理\"},\"285\":{\"h\":\"volatile 可见性实现\",\"t\":[\"volatile 变量的内存可见性是基于内存屏障(Memory Barrier)实现:\",\"内存屏障，又称内存栅栏，是一个 CPU 指令。\",\"在程序运行时，为了提高执行性能，编译器和处理器会对指令进行重排序，JMM 为了保证在不同的编译器和 CPU 上有相同的结果，通过插入特定类型的内存屏障来禁止+ 特定类型的编译器重排序和处理器重排序，插入一条内存屏障会告诉编译器和 CPU：不管什么指令都不能和这条 Memory Barrier 指令重排序。\"]},\"286\":{\"h\":\"volatile 有序性实现\"},\"287\":{\"h\":\"happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。\"},\"288\":{\"h\":\"volatile 禁止重排序\",\"t\":[\"为了性能优化，JMM 在不改变正确语义的前提下，会允许编译器和处理器对指令序列进行重排序。JMM 提供了内存屏障阻止这种重排序。 Java 编译器会在生成指令系列时在适当的位置会插入内存屏障指令来禁止特定类型的处理器重排序。 JMM 会针对编译器制定 volatile 重排序规则表。 \\\" NO \\\" 表示禁止重排序。 为了实现 volatile 内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。 对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM 采取了保守的策略。\",\"在每个 volatile 写操作的前面插入一个 StoreStore 屏障。\",\"在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。\",\"在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。\",\"在每个 volatile 读操作的后面插入一个 LoadStore 屏障。\",\"volatile 写是在前面和后面分别插入内存屏障，而 volatile 读操作是在后面插入两个内存屏障。\",\"内存屏障\",\"说明\",\"StoreStore 屏障\",\"禁止上面的普通写和下面的 volatile 写重排序。\",\"StoreLoad 屏障\",\"防止上面的 volatile 写与下面可能有的 volatile 读/写重排序。\",\"LoadLoad 屏障\",\"禁止下面所有的普通读操作和上面的 volatile 读重排序。\",\"LoadStore 屏障\",\"禁止下面所有的普通写操作和上面的 volatile 读重排序。\",\"image.png\",\"image.png\"]},\"289\":{\"h\":\"synchronized 详解\"},\"290\":{\"h\":\"JUC\"},\"291\":{\"h\":\"JUC 原子类\"},\"292\":{\"h\":\"JUC 锁\"},\"293\":{\"h\":\"JUC 集合\"},\"294\":{\"h\":\"JUC 线程池\"},\"295\":{\"h\":\"JUC 工具类\"},\"296\":{\"h\":\"ThreadLocal\"},\"297\":{\"h\":\"Transmittable-Thread-Local\"},\"298\":{\"h\":\"Java集合框架\",\"t\":[\"Java 集合框架是每一个入门开发者必会的内容，而且在较长的时间内容，不管是使用还是面试频度否非常的高，所以本人认为完全的、深入的学习是十分有必要的。本人结合源码和网络上的相关文章进行了总结。\"]},\"299\":{\"h\":\"Collection\",\"t\":[\"Collection 是 List 和 Set的父类，它抽象了单列数据集合的基本方法。它包含了以下的方法：\",\"int size():获取单列数据集合中存储数据的数量\",\"isEmpty():当前单列数据集合是否为空\",\"contains(Object o): 当前单列数据合计是否存在该数据对象，当前对象需要实现 equals 和 hashCode 方法，防止不同的对象校验的 hashCode 一致\",\"toArray(): 单列数据集合转数组\",\"toArray(T[]) :单列数据结合转数组，数组类型为参数类型\",\"add(E e): 单列数据集合添加数据\",\"remove(E e): 删除单列数据集合中的该数据\",\"containsAll(Collection<?> c): 校验当前数据集合是否在该单列数据中，若都存在则返回 true\",\"addAll(Collection<?> c): 向当前单列数据集合中添加该数据结合\",\"removeAll(Collection<?> c): 当前单列数据集合中移出指定的数据集合\",\"removeIf(Predicate<? super E> filter): 移出通过 filter 筛选的数据集合\",\"retainAll(Collection<?> c): 从该集合中删除未包含在指定集合中的所有元素\",\"clear(): 从此集合中移除所有元素(可选操作)。该方法返回后，集合将为空。\",\"equals(Object o):\",\"hashCode():\",\"spliterator():\",\"stream():\",\"parallelStream():\"]},\"300\":{\"h\":\"实现类比较\",\"t\":[\"实现类名称\",\"实现原理\",\"优点\",\"缺点\",\"ArrayList\",\"数组\",\"索引查询快\",\"变更效率低\",\"LinkedList\",\"链表\",\"变更效率高\",\"索引查询慢\",\"Vector\",\"ArrayList 一致\",\"加锁，防止并发问题\",\"由于加锁问题，导致操作效率较低\",\"Stack\",\"继承了 Vector\",\"相比于 Vector 功能更加强大，封装了部分方法\",\"和 Vector 一致\"]},\"301\":{\"h\":\"ArrayList\",\"t\":[\"ArrayList 是 Collection 实现子类，它实现了 Collection 的所有功能且添加了部分自己独有的一些功能，让其使用更加方便和简单。内部的实现原理是通过数组进行缓存元素数据，通过 size 属性缓存数据的长度。\"]},\"302\":{\"h\":\"构造方法\",\"t\":[\"ArrayList 有三个构造方法，无参、初始容量、初始元素。\",\"无参：会给属性 this.elementData赋值为DEFAULTCAPACITY_EMPTY_ELEMENTDATA 。\",\"初始容量：若设置容量大于 0，会给属性 this.elementData赋值为new Object[initialCapacity]；若设置容量等于 0 ，会给属性 this.elementData赋值为EMPTY_ELEMENTDATA；若设置容量小于 0，则抛出异常。\",\"初始元素：若初始元素数量等于 0， 则会给属性 this.elementData赋值为EMPTY_ELEMENTDATA；若初始元素数量大于 0，则会把元素赋值给this.elementData。\"]},\"303\":{\"h\":\"判断\",\"t\":[\"判断集合中是否存在该元素是通过遍历集合的属性elementData的数据，通过equals判断数据是否相等，所以需要该数据对象实现对应的方法。\"]},\"304\":{\"h\":\"新增\",\"t\":[\"添加元素时先让modCount 加一（后续移出时会使用）。如果当前插入的位置等于元素数量即当前集合数据已满，则需要进行扩容，扩容代码如下:\",\" private int newCapacity(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity >> 1); if (newCapacity - minCapacity <= 0) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) return Math.max(DEFAULT_CAPACITY, minCapacity); if (minCapacity < 0) // overflow throw new OutOfMemoryError(); return minCapacity; } return (newCapacity - MAX_ARRAY_SIZE <= 0) ? newCapacity : hugeCapacity(minCapacity); } private static int hugeCapacity(int minCapacity) { if (minCapacity < 0) // overflow throw new OutOfMemoryError(); return (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; } \",\"minCapacity: 是当前容量+1\",\"newCapacity: 是 oldCapacity + （0.5*oldCapacity）\",\"第一次扩容时，若是无参的构造方法，则会进行默认为容量是 10；含有参数的构造方法，第一次则按照 1.5 倍扩容（初始化容量为 0 时，则第一次扩容容量会变更为 1）\",\"后续扩容，则需要判断扩容 1.5 倍之后是否超出 int 的最大值，若是会超过则取 Integer.MAX_VALUE\"]},\"305\":{\"h\":\"删除\",\"t\":[\"单个删除时:查询元素在集合的下标索引，然后通过System.arraycopy进行数组的 copy 和创建以此实现数据的删除\",\"批量删除时: 会缓存modCount 在删除的过程中会校验缓存的modCount是否和当前的一致，若是不一致则会抛出ConcurrentModificationException异常，提示在并发修改\"]},\"306\":{\"h\":\"扩展方法\"},\"307\":{\"h\":\"LinkedList\",\"t\":[\"LinkedList 也是实现Collection 的子类，它内部的数据接口是采用链表的方式进行存储，数据长度也是通过属性进行获取的。\"]},\"308\":{\"h\":\"构造方法\",\"t\":[\"该类的构造方法并未进行特殊的处理，无参的构造方法什么都为进行初始化，通过集合进行初始化的，则直接调用的addAll。\"]},\"309\":{\"h\":\"判断\",\"t\":[\"这里判断对象是否存在也是进行数据遍历，进行比较数据对象是否存在。\"]},\"310\":{\"h\":\"新增\",\"t\":[\"刚创建时，属性first 和 last 都是空的，第一次添加是会给 first 和 last 赋值，后续创建则直接在先缓存 last 然后 last等于新元素，缓存的last关联新元素，从而先新元素的添加。\"]},\"311\":{\"h\":\"删除\",\"t\":[\"删除则是查询到对应的节点后，直接让前一个节点关联后一节点，从而实现该节点的删除。\"]},\"312\":{\"h\":\"扩展方法\"},\"313\":{\"h\":\"Vector\",\"t\":[\"Vector 类似于 ArrayList 都是基于数组的存储结构，只不过加入了自己特性的一些东西，例如扩容规则、线程安全。\"]},\"314\":{\"h\":\"构造方法\",\"t\":[\"构造方法可以传入初始容量和扩容自增的数量。默认的初始容量是 10，自增的属性值设置为 0。\"]},\"315\":{\"h\":\"判断\",\"t\":[\"基本和ArrayList 一致，只不过在判断时加锁进而防止并发问题。\"]},\"316\":{\"h\":\"新增\",\"t\":[\"新增操作和ArrayList一致，只不过在操作的时候添加了锁，进行防止并发操作\"]},\"317\":{\"h\":\"删除\"},\"318\":{\"h\":\"扩展方法\"},\"319\":{\"h\":\"Stack\"},\"320\":{\"h\":\"HashSet\"},\"321\":{\"h\":\"TreeSet\"},\"322\":{\"h\":\"CopyOnWriteArrayList\"},\"323\":{\"h\":\"CopyOnWriteArraySet\"},\"324\":{\"h\":\"ConcurrentSkipListSet\"},\"325\":{\"h\":\"Map\",\"t\":[\"Map 抽象了键值对数据集合的通用方法，它包含以下方法：\",\"int size()：查看元素数目\",\"isEmpty()：元素个数是否是0\",\"containsKey(Object key)：是否存在这个 key\",\"containsValue(Object value)： 是否存在个 value\",\"get(Object key)： 通过 key 获取对象的 value\",\"put(K key, V value)： 添加 key-value 元素\",\"remove(Object key)： 移出 key 对应的 value\",\"putAll(Map<? extends K, ? extends V> m)：添加集合中的所有元素\",\"clear()： 清空元素\",\"keySet()： 获取元素的 key 的不重复集合\",\"values()：获得元素中的所有 value\",\"entrySet()：获取所有的 key-value 对象\",\"getOrDefault(Object key, V defaultValue)：获取 key 对应的 value，若不存在在返回 defaultValue\",\"putIfAbsent(K key, V value): 若是不存在 key 对应的 value 则进行添加\",\"remove(Object key, Object value)：删除 key 对应的值且等于 value 的\",\"replace(K key, V oldValue, V newValue)： 若存在 key 的值为 oldValue 的元素，则重新赋值 key 的值为 newValue\",\"replace(K key, V value)：若存在 key 就添加 key 对应的值为 value\",\"computeIfAbsent(K key,Function<? super K, ? extends V> mappingFunction)：若不存在 key 对应的值，则通过 mappingFunction 获取，且添加到集合中\",\"computeIfPresent(K key,BiFunction<? super K, ? super V, ? extends V> remappingFunction)：若是存在key 对应的 value 则传入 key，value 到 mappingFUnction 获取新的 newValue，若 newValue 为空则会清除 key，若不为空，则修改集合中key 对应的值，且返回newValue\"]},\"326\":{\"h\":\"HashMap\",\"t\":[\"HashMap 通过设置一些属性，进行控制某些行为，例如：初始容量、扩容时下次数量、多少元素转化为树，以下是 HashMap 的属性：\",\"DEFAULT_INITIAL_CAPACITY = 1 << 4; 初始容量为 16\",\"MAXIMUM_CAPACITY = 1 << 30; int 的最大值为 2 的 31-1，但是只能移动1 所以最大值为 2 的 30 次方\",\"DEFAULT_LOAD_FACTOR = 0.75f; 默认的负载因子 0.75\",\"TREEIFY_THRESHOLD = 8; 链表树化的最小元素数量，即链表元素个数大于 8 时，链表进行树化\",\"UNTREEIFY_THRESHOLD = 6; 树退化成链表的最大元素数量，当树的元素数量小于 6 的时候，树退化为链表\",\"MIN_TREEIFY_CAPACITY = 64; 集合树化的最小元素个数，当集合元素数目大于 64 的时候才可能树化,优先级大于 TREEIFY_THRESHOLD ，可以存在链表长度大于 8 ，只有当容量大于 64 才会树化\",\"Node<K,V>[] table; 集合元素数据\",\"Set<Map.Entry<K,V>> entrySet; 缓存的数据\",\"int size; 元素数目\",\"int modCount; 防止迭代器遍历的时候修改\",\"int threshold; 下一次扩容的容量\",\"float loadFactor; 负载因子\"]},\"327\":{\"h\":\"HashMap的扩缩容\",\"t\":[\"当进行新增时，会先去取 key 的哈希值，(key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16)，进行 put 时，会先进行判断 table 是否存在数据，如果没有则调用 resize() 进行初始化或扩容，若 该元素在 table 中不存在哈希冲突则放置到对应的下标上，若存在哈希冲突则需要判断 table 该下标的数据是否是树，若是树则进行添加子节点，若不是树，则链接在链表后，判断若当前链表的数量大于默认树化的数目，则执行 treeifyBin(tab, hash),进行树化处理\",\"为什么要这么计算哈希值\"]},\"328\":{\"h\":\"TreeMap\"},\"329\":{\"h\":\"WeakHashMap\"},\"330\":{\"h\":\"Hashtable\"},\"331\":{\"h\":\"ConcurrentHashMap\"},\"332\":{\"h\":\"ConcurrentSkipListMap\"},\"333\":{\"h\":\"Queue\"},\"334\":{\"h\":\"ArrayBlockingQueue\"},\"335\":{\"h\":\"LinkedBlockingQueue\"},\"336\":{\"h\":\"LinkedBlockingDeque\"},\"337\":{\"h\":\"ConcurrentLinkedQueue\"},\"338\":{\"h\":\"ConcurrentLinkedDeque\"},\"339\":{\"h\":\"JDK 动态代理和 CGLIB 代理\"},\"340\":{\"h\":\"什么是代理\",\"t\":[\"代理模式（Proxy Pattern）给某一个对象提供一个代理，并由代理对象控制原对象的引用。代理对象在客户端和目标对象之间起到中介作用。即使用时通过中介使用，具体到对象原对象的操作则是需要代理对象处理的。\"]},\"341\":{\"h\":\"JDK 动态代理\",\"t\":[\"自Java 1.3以后，Java提供了动态代理技术，允许开发者在运行期创建接口的代理实例，后来这项技术被用到了Spring的很多地方。JDK动态代理主要涉及java.lang.reflect包下边的两个类：Proxy和InvocationHandler。其中，InvocationHandler是一个接口，可以通过实现该接口定义横切逻辑（如：我们在方法执行前后打印的日志，本文只是为了演示，实际的应用一般不会只是简单的打印日志的），并通过反射机制调用目标类的代码，动态地将横切逻辑和业务逻辑编织在一起。\"]},\"342\":{\"h\":\"实例\",\"t\":[\"代理的接口\",\"public interface Parent { void sayHell(String s); } \",\"代理的对象类\",\"public class Children implements Parent{ @Override public void sayHell(String s) { System.out.println(\\\"children\\\" + s); } } \",\"创建代理类\",\"public class ProxyHandler implements InvocationHandler { private Object o; public ProxyHandler(Object o) { this.o = o; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\\\"开始事务\\\"); method.invoke(o, args); System.out.println(\\\"结束事务\\\"); return null; } } \",\"测试类\",\"public class ProxyTest { public static void main(String[] args) { ProxyHandler handler = new ProxyHandler(new Children()); Parent parent = (Parent) Proxy.newProxyInstance( Children.class.getClassLoader(), new Class[]{Parent.class}, handler); parent.sayHell(\\\"hello\\\"); } } \",\"结果\",\"开始事务 childrenhello 结束事务 \"]},\"343\":{\"h\":\"JDK动态代理步骤\",\"t\":[\"拿到被代理对象的引用，并且通过反射获取到它的所有的接口。\",\"通过JDK Proxy类重新生成一个新的类，同时新的类要实现被代理类所实现的所有的接口。\",\"动态生成 Java 代码，把新加的业务逻辑方法由一定的逻辑代码去调用。\",\"编译新生成的 Java 代码.class。\",\"将新生成的Class文件重新加载到 JVM 中运行。\",\"所以说JDK动态代理的核心是通过重写被代理对象所实现的接口中的方法来重新生成代理类来实现的，那么假如被代理对象没有实现接口呢？那么这时候就需要CGLIB动态代理了。\"]},\"344\":{\"h\":\"CGLIB 代理\",\"t\":[\"CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB通过继承方式实现代理，在子类中采用方法拦截的技术拦截所有父类方法的调用并顺势织入横切逻辑。\"]},\"345\":{\"h\":\"实例\",\"t\":[\"代理的类\",\"public class Hello { public void sayHell(String s) { System.out.println(\\\"Hello \\\" + s); } } \",\"创建代理类\",\"public class HelloProxy implements MethodInterceptor{ private Enhancer enhancer = new Enhancer(); public <T> T getProxy(Class<T> clazz){ //设置需要创建子类的类 enhancer.setSuperclass(clazz); enhancer.setCallback(this); //通过字节码技术动态创建子类实例 return (T) enhancer.create(); } @Override public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { System.out.println(\\\"开始事务\\\"); proxy.invokeSuper(obj,args); System.out.println(\\\"结束事务\\\"); return null; } } \",\"测试类\",\"public class HelloProxyTest { public static void main(String[] args) { HelloProxy helloProxy = new HelloProxy(); Hello hello = (Hello) helloProxy.getProxy(Hello.class); hello.sayHell(\\\"hello\\\"); } } \",\"结果\",\"开始事务 Hello hello 结束事务 \"]},\"346\":{\"h\":\"对比\"},\"347\":{\"h\":\"实现原理\",\"t\":[\"JDK动态代理具体实现原理：\",\"核心是通过重写被代理对象所实现的接口中的方法来重新生成代理类来实现的\",\"CGLib动态代理：\",\"利用ASM开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。\"]},\"348\":{\"h\":\"面向\",\"t\":[\"JDK动态代理是面向接口的。\",\"CGLib动态代理是通过字节码底层继承要代理类来实现，因此如果被代理类被final关键字所修饰，会失败。\"]},\"349\":{\"h\":\"使用注意：\",\"t\":[\"如果要被代理的对象是个实现类，那么Spring会使用JDK动态代理来完成操作（Spirng默认采用JDK动态代理实现机制）；\",\"如果要被代理的对象不是个实现类那么，Spring会强制使用CGLib来实现动态代理。\"]},\"350\":{\"h\":\"各自局限：\",\"t\":[\"JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理。\",\"cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。\"]},\"351\":{\"h\":\"性能对比\",\"t\":[\"关于两者之间的性能的话，网上有人对于不通版本的jdk进行测试，经过多次试验，测试结果大致是这样的，在1.6和1.7的时候，JDK动态代理的速度要比CGLib动态代理的速度要慢，但是并没有教科书上的10倍差距，在JDK1.8的时候，JDK动态代理的速度已经比CGLib动态代理的速度快很多了，但是JDK动态代理和CGLIB动态代理的适用场景还是不一样的哈！\"]},\"352\":{\"h\":\"String源码\"},\"353\":{\"h\":\"1. 属性\",\"t\":[\"/** The value is used for character storage. */ private final char value[]; /** Cache the hash code for the string */ private int hash; // Default to 0 /** use serialVersionUID from JDK 1.0.2 for interoperability */ private static final long serialVersionUID = -6849794470754667710L; \",\"使用 final 修饰的 value。只能初始化一次，如果大量拼接，不可使用该类型\",\"使用字符组进行缓存数据\"]},\"354\":{\"h\":\"2. 构造方法\"},\"355\":{\"h\":\"public String()\",\"t\":[\"/** * Initializes a newly created {@code String} object so that it represents * an empty character sequence. Note that use of this constructor is * unnecessary since Strings are immutable. */ public String() { this.value = \\\"\\\".value; } \",\"通过设置\\\"\\\".value，实现创建对象.\",\"hash 值默认为 0。\"]},\"356\":{\"h\":\"public String(String original)\",\"t\":[\"/** * Initializes a newly created {@code String} object so that it represents * the same sequence of characters as the argument; in other words, the * newly created string is a copy of the argument string. Unless an * explicit copy of {@code original} is needed, use of this constructor is * unnecessary since Strings are immutable. * * @param original * A {@code String} */ public String(String original) { this.value = original.value; this.hash = original.hash; } \",\"通过传入的字符串，设置对象，并且设置对应的 hash\"]},\"357\":{\"h\":\"public String(char value[])\",\"t\":[\"/** * Allocates a new {@code String} so that it represents the sequence of * characters currently contained in the character array argument. The * contents of the character array are copied; subsequent modification of * the character array does not affect the newly created string. * * @param value * The initial value of the string */ public String(char value[]) { this.value = Arrays.copyOf(value, value.length); } \",\"通过传入的字符组进行复制，从而创建对象。\"]},\"358\":{\"h\":\"public String(byte bytes[])\",\"t\":[\" /** * Constructs a new {@code String} by decoding the specified array of bytes * using the platform's default charset. The length of the new {@code * String} is a function of the charset, and hence may not be equal to the * length of the byte array. * * <p> The behavior of this constructor when the given bytes are not valid * in the default charset is unspecified. The {@link * java.nio.charset.CharsetDecoder} class should be used when more control * over the decoding process is required. * * @param bytes * The bytes to be decoded into characters * * @since JDK1.1 */ public String(byte bytes[]) { this(bytes, 0, bytes.length); } \",\"通过字节组进行创建对象，调用该对象的其他方法，传入字节组，开始和结束的位置进行创建\"]},\"359\":{\"h\":\"public String(StringBuffer buffer)\",\"t\":[\"/** * Allocates a new string that contains the sequence of characters * currently contained in the string buffer argument. The contents of the * string buffer are copied; subsequent modification of the string buffer * does not affect the newly created string. * * @param buffer * A {@code StringBuffer} */ public String(StringBuffer buffer) { synchronized(buffer) { this.value = Arrays.copyOf(buffer.getValue(), buffer.length()); } } \",\"通过 StringBuffer 进行构建对象，通过 StringBufer.getValue()返回字符组，配合字符组长度创建对象\",\"StringBuffer 通过 synchronized 进行出现线程数据共享，由此可见 StringBuffer 是线程安全的\"]},\"360\":{\"h\":\"public String(StringBuilder builder)\",\"t\":[\"/** * Allocates a new string that contains the sequence of characters * currently contained in the string builder argument. The contents of the * string builder are copied; subsequent modification of the string builder * does not affect the newly created string. * * <p> This constructor is provided to ease migration to {@code * StringBuilder}. Obtaining a string from a string builder via the {@code * toString} method is likely to run faster and is generally preferred. * * @param builder * A {@code StringBuilder} * * @since 1.5 */ public String(StringBuilder builder) { this.value = Arrays.copyOf(builder.getValue(), builder.length()); } \",\"和上个方法对比，可看出 StringBuilder 线程不安全。\"]},\"361\":{\"h\":\"3. 常用方法\"},\"362\":{\"h\":\"字符串的长度 length()\",\"t\":[\" /** * Returns the length of this string. * The length is equal to the number of <a href=\\\"Character.html#unicode\\\">Unicode * code units</a> in the string. * * @return the length of the sequence of characters represented by this * object. */ public int length() { return value.length; } \",\"通过字符组的长度从而获得字符串的长度\"]},\"363\":{\"h\":\"是否为空 isEmpty()\",\"t\":[\" /** * Returns {@code true} if, and only if, {@link #length()} is {@code 0}. * * @return {@code true} if {@link #length()} is {@code 0}, otherwise * {@code false} * * @since 1.6 */ public boolean isEmpty() { return value.length == 0; } \",\"检测是否为空时未检测对象是否为 null，所以使用该方法时需要考虑是否为 null\"]},\"364\":{\"h\":\"获得字符串的第几个字符 charAt(int index)\",\"t\":[\"/** * Returns the {@code char} value at the * specified index. An index ranges from {@code 0} to * {@code length() - 1}. The first {@code char} value of the sequence * is at index {@code 0}, the next at index {@code 1}, * and so on, as for array indexing. * * <p>If the {@code char} value specified by the index is a * <a href=\\\"Character.html#unicode\\\">surrogate</a>, the surrogate * value is returned. * * @param index the index of the {@code char} value. * @return the {@code char} value at the specified index of this string. * The first {@code char} value is at index {@code 0}. * @exception IndexOutOfBoundsException if the {@code index} * argument is negative or not less than the length of this * string. */ public char charAt(int index) { if ((index < 0) || (index >= value.length)) { throw new StringIndexOutOfBoundsException(index); } return value[index]; } \",\"通过传入的字符串的位置进行获取，如果不在返回内会抛出StringIndexOutOfBoundsException异常。\"]},\"365\":{\"h\":\"比较内容是否相等 equals(Object object)\",\"t\":[\"/** * Compares this string to the specified object. The result is {@code * true} if and only if the argument is not {@code null} and is a {@code * String} object that represents the same sequence of characters as this * object. * * @param anObject * The object to compare this {@code String} against * * @return {@code true} if the given object represents a {@code String} * equivalent to this string, {@code false} otherwise * * @see #compareTo(String) * @see #equalsIgnoreCase(String) */ public boolean equals(Object anObject) { if (this == anObject) { return true; } if (anObject instanceof String) { String anotherString = (String)anObject; int n = value.length; if (n == anotherString.value.length) { char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) { if (v1[i] != v2[i]) return false; i++; } return true; } } return false; } \",\"基本的数据类型相等的判断只需要==就可以判断，但是封装类型，需要通过 equals 进行判断。\",\"如果需要对自定义对象进行判断是否相等，需要重写对象的equals方法，从而实现自定义比较方法。如果不重写，则默认比较内存地址。\"]},\"366\":{\"h\":\"忽略大小写比较是否相等 equalsIgnoreCase(String anotherString)\",\"t\":[\"/** * Compares this {@code String} to another {@code String}, ignoring case * considerations. Two strings are considered equal ignoring case if they * are of the same length and corresponding characters in the two strings * are equal ignoring case. * * <p> Two characters {@code c1} and {@code c2} are considered the same * ignoring case if at least one of the following is true: * <ul> * <li> The two characters are the same (as compared by the * {@code ==} operator) * <li> Applying the method {@link * java.lang.Character#toUpperCase(char)} to each character * produces the same result * <li> Applying the method {@link * java.lang.Character#toLowerCase(char)} to each character * produces the same result * </ul> * * @param anotherString * The {@code String} to compare this {@code String} against * * @return {@code true} if the argument is not {@code null} and it * represents an equivalent {@code String} ignoring case; {@code * false} otherwise * * @see #equals(Object) */ public boolean equalsIgnoreCase(String anotherString) { return (this == anotherString) ? true : (anotherString != null) && (anotherString.value.length == value.length) && regionMatches(true, 0, anotherString, 0, value.length); } \",\"进行判断对象的内存地址是否相同--->地址相同，说明同一个对象，自己比较自己肯定 true\",\"然后判断是否为空，长度是否相同，然后再循环比较每个字符忽略大小写比较\"]},\"367\":{\"h\":\"比较字符串的大小 compareTo(String anotherString)\",\"t\":[\" /** * Compares two strings lexicographically. * The comparison is based on the Unicode value of each character in * the strings. The character sequence represented by this * {@code String} object is compared lexicographically to the * character sequence represented by the argument string. The result is * a negative integer if this {@code String} object * lexicographically precedes the argument string. The result is a * positive integer if this {@code String} object lexicographically * follows the argument string. The result is zero if the strings * are equal; {@code compareTo} returns {@code 0} exactly when * the {@link #equals(Object)} method would return {@code true}. * <p> * This is the definition of lexicographic ordering. If two strings are * different, then either they have different characters at some index * that is a valid index for both strings, or their lengths are different, * or both. If they have different characters at one or more index * positions, let <i>k</i> be the smallest such index; then the string * whose character at position <i>k</i> has the smaller value, as * determined by using the &lt; operator, lexicographically precedes the * other string. In this case, {@code compareTo} returns the * difference of the two character values at position {@code k} in * the two string -- that is, the value: * <blockquote> <pre> * this.charAt(k)-anotherString.charAt(k) * </pre></blockquote> * If there is no index position at which they differ, then the shorter * string lexicographically precedes the longer string. In this case, * {@code compareTo} returns the difference of the lengths of the * strings -- that is, the value: * <blockquote> <pre> * this.length()-anotherString.length() * </pre></blockquote> * * @param anotherString the {@code String} to be compared. * @return the value {@code 0} if the argument string is equal to * this string; a value less than {@code 0} if this string * is lexicographically less than the string argument; and a * value greater than {@code 0} if this string is * lexicographically greater than the string argument. */ public int compareTo(String anotherString) { int len1 = value.length; int len2 = anotherString.value.length; int lim = Math.min(len1, len2); char v1[] = value; char v2[] = anotherString.value; int k = 0; while (k < lim) { char c1 = v1[k]; char c2 = v2[k]; if (c1 != c2) { return c1 - c2; } k++; } return len1 - len2; } \",\"找出长度最短的字符串长度\",\"循环比较，如果有不相等的则返回插值\",\"一直想等则返回长度差值\"]},\"368\":{\"h\":\"判断字符串是否从某个字符串开始的 startsWith(String prefix, int toffset)\",\"t\":[\"/** * Tests if the substring of this string beginning at the * specified index starts with the specified prefix. * * @param prefix the prefix. * @param toffset where to begin looking in this string. * @return {@code true} if the character sequence represented by the * argument is a prefix of the substring of this object starting * at index {@code toffset}; {@code false} otherwise. * The result is {@code false} if {@code toffset} is * negative or greater than the length of this * {@code String} object; otherwise the result is the same * as the result of the expression * <pre> * this.substring(toffset).startsWith(prefix) * </pre> */ public boolean startsWith(String prefix, int toffset) { char ta[] = value; int to = toffset; char pa[] = prefix.value; int po = 0; int pc = prefix.value.length; // Note: toffset might be near -1>>>1. if ((toffset < 0) || (toffset > value.length - pc)) { return false; } while (--pc >= 0) { if (ta[to++] != pa[po++]) { return false; } } return true; } \",\"获取对象的字符组、开始位置、传入的字符组，计算得出结束位置\",\"判断开始位置和结束位置是否超出\",\"循环比较是否相等\"]},\"369\":{\"h\":\"4. 常见问题\"},\"370\":{\"h\":\"Java 基础面试题\"},\"371\":{\"h\":\"1. Java 语言有哪些特点\",\"t\":[\"简单易学、有丰富的类库\",\"面向对象（Java 最重要的特性，让程序耦合度更低，内聚性更高）\",\"与平台无关性（JVM 是 Java 跨平台的根本）\",\"可靠安全\",\"支持多线程\"]},\"372\":{\"h\":\"2. 面向对象和面向过程的区别\",\"t\":[\"面向过程：是分析解决问题的步骤，然后用按说把这些步骤一步一步的实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发\",\"面向对象：是吧构成问题的事务分解成对象，而建立对象的目的也不完全是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。但是性能上来说，比面向过程要低。\"]},\"373\":{\"h\":\"3. 八种基本数据类型的大小、以及他们的封装类\",\"t\":[\"byte 1 字节 默认值 0 封装类 Byte\",\"short 2 字节 默认值 0 封装类型 Short\",\"char 2 字节 默认值 null（\\\\u000） 封装类型 Character\",\"int 4 字节 默认值 0 封装类型 Integer\",\"float 4 字节 默认值 0.0f 封装类型 Float\",\"long 8 字节 默认值 0L 封装类型 Long\",\"double 8 字节 默认值 0.0d 封装类型 Double\",\"boolean 默认值 false 封装类型 Boolean \",\"JVM 虚拟机中没有提供 boolean 值专用的字节码指令，编译后是用 int 数据类型代替的，而 boolean 数组则会被编译成 byte 数组。所以 boolean 单独使用时是 4 个字节，数组中是 1 个字节。\",\"注意： 除了八种基础类型外都是封装类型\"]},\"374\":{\"h\":\"4. instanceof\",\"t\":[\"双目运算符，obj instanceof Class，判断 obj 是否是 Class （或其子类）的对象，若是返回 true\",\"注意： 编译器会检查 obj 是否能够转换为右面的 class 类型，若是不能确定则看运行时，obj 不可使基础类型\"]},\"375\":{\"h\":\"5. 自动装箱和拆箱\",\"t\":[\"装箱：就是自动把基础类型自动转换为封装类型\",\"拆箱：就是自动把封装类型转化为基础类型\",\"注意： Integer 内部存在存在有缓存，缓存的数据大小为[-128,127]\"]},\"376\":{\"h\":\"6. 重载和重写\",\"t\":[\"重写： 子类把父类中的方法进行重写，要求方法名、参数列表、返回类型都相同，访问修饰权限不小于父类\",\"重载：方法名称一致，参数列表不一致，返回类型无要求\"]},\"377\":{\"h\":\"7. == 和 equals\",\"t\":[\"== 比较的地址，用于比较是否是同一个对象\",\"equals 比较的是地址中的数据是否相等\"]},\"378\":{\"h\":\"8. hashCode 作用\",\"t\":[\"hashCode：返回的是对象根据内存地址算出的一个值，提升直接通过 equals 进行判断数据是否一致的效率\",\"在集合中会使用到对象的 hashCode，以此来提升性能\"]},\"379\":{\"h\":\"9. String、StringBuffer、StringBuilder 区别\",\"t\":[\"String：内部是 final 修饰的字符数组，当 String 进行拼接时相当于新建字符数组进行替换，效率较低\",\"StringBuffer、StringBuilder： 内部都是可变数组，进行频繁的字符串操作性能较高\",\"StringBuffer： 对方法添加了同步锁或者调用的方法添加了同步锁，所以线程安全的\",\"StringBuilder：线程不安全\"]},\"380\":{\"h\":\"10. ArrayList 和 LinkedList 的区别\",\"t\":[\"ArrayList： 内部基于数组进行存储的，所以通过索引查询的效率是 O(1)，删除数据是开销较大，需要进行数组的处理。\",\"LinkedList： 内部是基于链表进行存储的，所以查询的效率较低，但是删除的效率较高。\"]},\"381\":{\"h\":\"11. HashMap 和 HashTable 的区别\",\"t\":[\"HashMap \",\"继承自 AbstractMap 类，实现了 Map、Cloneable、Serializable 接口\",\"kv 都支持 null，但实际 key 为 null 只会存在一个\",\"线程不安全\",\"HashTable \",\"继承自 Dictionary 类，实现了 Map、Cloneable、Serializable 接口\",\"kv 都不能为 null\",\"线程安全\"]},\"382\":{\"h\":\"12. Collection 包和 Collections 包的区别\",\"t\":[\"Collection：是集合的上级接口包\",\"Collections： 是集合的工具包\"]},\"383\":{\"h\":\"13. Java 的四种引用\",\"t\":[\"强引用 \",\"String s = new String(\\\"1);\",\"软引用 \",\"SoftReference wrf = new SoftReference(new String(\\\"1\\\")); new String 是软引用\",\"弱引用 \",\"WeakReference wrf = new WeakReference(str): WeakReference 的 key 是弱引用\",\"虚引用 \",\"PhantomReference prf = new PhantomReference(new String(\\\"1\\\"),new ReferenceQueue<>())\"]},\"384\":{\"h\":\"14.泛型常用特点\",\"t\":[\"不必因为类型不一致而创建不同类\"]},\"385\":{\"h\":\"15. Java 创建对象的方式\",\"t\":[\"new 创建对象\",\"反射 newInstance\",\"clone 克隆\",\"通过序列化\"]},\"386\":{\"h\":\"16. 有没有可能两个对象不等，但是 hashCode 相等？\",\"t\":[\"可能得，会存在哈希冲突\",\"解决方法 \",\"拉链法：例如 hashMap，若 hashCode 一致，则通过链表进行链接，获取的时候先通过 hashCode 查找，若存在多个则通过 equals 比较\",\"开放定址法：一旦发生冲突，就去寻找下一个散列，只要散列足够大，空的散列地��总能找到，并记录存入\",\"再哈希： 又叫双哈希，当第一个 哈希函数结果冲突就在用第二个、第三个，直到无冲突\"]},\"387\":{\"h\":\"17. 深拷贝和浅拷贝\",\"t\":[\"浅拷贝：只复制当前对象，当前对象的属性还是引用之前对象的值\",\"深拷贝：不仅仅复制当前对象，当前对象的属性也进行复制\"]},\"388\":{\"h\":\"18. final 有哪些用法\",\"t\":[\"修饰的类不可被继承\",\"被修饰的方法不可被重写\",\"被修饰的变量不可被变更，但若是封装对象这可以改变引用地址内的内容\",\"被修饰的方法 JVM 会尝试将其内联，以提高效率\",\"被修饰的常量，在编译阶段会存入常量池中\",\"遵守两个重排序规则 \",\"在构造函数内对一个 final 域的写入，与随后把这个被构造对象的引用赋值给一个变量，这两个操作之间不能重排序\",\"初次读一个包含 final 域的对象的引用，与随后初次读这个 final 域，这两个操作之间不能重排序。\",\"对于 final 域，编译器会在写入时插入一个 StoreStore 屏障，当读取 final 域时会插入 LoadLoad 屏障，这些屏障可以防止编译器和处理器在处理 final 域时进行过度的指令重排序。\",\"happens-before 规则 \",\"单一线程原则：在一个线程内，在程序前面的操作先行发生于后面的操作。\",\"管程锁定规则：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。\",\"volatile 变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。\",\"线程启动规则：Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。\",\"线程加入规则：Thread 对象的结束先行发生于 join() 方法返回\",\"线程中断规则：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。\",\"对象终结规则：一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize() 方法的开始。\",\"传递性：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C\"]},\"389\":{\"h\":\"19.static 的用法\",\"t\":[\"静态常量\",\"静态方法\",\"静态代码快\",\"import staic 静态导包\"]},\"390\":{\"h\":\"20. 3*0.1 == 0.3 返回值是什么？\",\"t\":[\"false，因为浮点数不能完全的精确的表示出来\"]},\"391\":{\"h\":\"21. a=a+b 和 a+=b 有什么区别\",\"t\":[\"+= 会隐式自动转换\",\"byte a = 127;byte b = 127;b= a+b; 会报错，类型转换为 intb+=a;不会报错\"]},\"392\":{\"h\":\"22. try catch finally,try 里面有 return，finally 还会执行吗？\",\"t\":[\"会，在 return 前会执行 finally，如果 finally 有 return 则会直接 return\"]},\"393\":{\"h\":\"23. Exception 和 Error 包结构\",\"t\":[\"可以抛出的异常有三种 \",\"RuntimeException：运行时异常\",\"CheckException: 检查时异常\",\"Error：错误\"]},\"394\":{\"h\":\"24. OOM 你遇到过哪些情况，SOF 你遇到过那些情况\",\"t\":[\"OOM\",\"SOF\"]},\"395\":{\"h\":\"25. 简述线程、程序、进程的基本概念。以及他们之间的关系\",\"t\":[\"线程：线程和进程类似，但是线程是一个比进程更小的执行单位，一个进程在其执行的过程中可以产生多个小城。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程或是在各个线程之间切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量进程。\",\"程序：含有指令和数据的文件，被存在磁盘或其他的数据存储设备中，也就是说程序是静态的代码\",\"进程：程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序及时一个进程从创建、运行至消亡的过程，简单来说，一个进程就是一个执行的程序，它在计算机中一个指令接着一个指令的执行着没同事，每一个程序还占用某些系统资源如 CPU 时间、内存空间、文件、输入输出设备的使用权等等。\"]},\"396\":{\"h\":\"26. 某些字段不行序列化怎么办？\",\"t\":[\"使用 transient 关键字，阻止实例化中那些用此关键字修饰的变量序列化，相反 transient 修饰的变量值在被反序列化是也不会被持久化和回复。transient 只能修饰变量，不能修饰类和方法\"]},\"397\":{\"h\":\"27. java 中的 IO 流\",\"t\":[\"按照流向 \",\"输入\",\"输出\",\"按照操作单元 \",\"字节流\",\"字符流\",\"按照角色 \",\"节点流\",\"处理流\"]},\"398\":{\"h\":\"28. IO 和 NIO 的区别\",\"t\":[\"有相同的作用和目的，但是实现方式不同\",\"NIO 效率要比 IO 高很多\",\"JAVA API 中提供了两套的 NIO，一套是针对标准的输入输出，另一套就是网络编程 NIO\"]},\"399\":{\"h\":\"29. java 反射的作用与原理\",\"t\":[\"定义\",\"反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法，只要给定类的名称，就可以通过反射机制获得类的所有信息\",\"哪里用到\",\"框架中经常使用\",\"JDBC 的 Class.forName(\\\"com.mysql.jdbc.Driver.class\\\");\",\"反射的实现方式\",\"获取 class 对象的四种方式 \",\"Class.forName(\\\"\\\")\",\"类名.class\",\"对象.getClass()\",\"基础类型的包装类，可以调用包装类的 Type 属性来获得改包装的 Class 对象\",\"反射能够获取的信息\",\"class：表示正在运行对象的类\",\"Field： 提供有关类和接口的属性信息，以及对他的动态访问权限\",\"Constructor： 构造方法\",\"Method： 方法\",\"优点\",\"能够运行时动态获取类的实例，提高灵活性\",\"与动态编译结合\",\"缺点\",\"使用反射性能较低，需要解析字节码，将内存的对象进行解析。 \",\"通过 setAccessible(true) 关闭 JDK 的安全检查来提升反射速度\",\"多次创建一个类的实例时，有缓存会更多\",\"ReflectASM 工具类，通过字节码生成的方式加快反射速度\",\"相对不安全，破换了封装性\"]},\"400\":{\"h\":\"30. List、Set、Map 什么区别\",\"t\":[\"List：是单元素集合且有序可重复\",\"Set：是单元素集合且无序不可重复\",\"Map：键值对存储，key 不能重复，value 可以重复\"]},\"401\":{\"h\":\"31. Object 有哪些方法\",\"t\":[\"clone：克隆方法，实现对象的浅复制，只有实现了 Cloneable 接口才可以调用该方法，否则抛出 CloneNotSupportedException 异常，深度拷贝也需要实现 Cloneable，同时其成员变量为引用类型也要实现 Cloneable，然后重写 clone 方法\",\"finalize： 和垃圾收集器有关系，判断一个对象是都可以被回收的最后一步就是判断是否重写了此方法\",\"equals\",\"hashCode\",\"wait\",\"notify\",\"notifyAll\"]},\"402\":{\"h\":\"32. ArrayList 和 LinkedList\"},\"403\":{\"h\":\"33. 存在数组了为什么还要 ArrayList\",\"t\":[\"数组不可以自动扩容\"]},\"404\":{\"h\":\"34. 什么是 fail-fast\",\"t\":[\"集合的一种错误机制，集合在操作的时候 modCount 会自增，在进行迭代其遍历时会缓存当前的 modCount，然后每次迭代都会进行比较，要是不一致则说明存在别的线程在操作，从而抛出 ConcurrentModificationException 异常\"]},\"405\":{\"h\":\"35. HashTable 和 HashMap\"},\"406\":{\"h\":\"36. HashMap 中的 key 可以使用任何类作为 key 吗？\",\"t\":[\"若类重写了 equals，它也应该重写 hashCode 方法\",\"类的所有实例需要遵守 equals 和 hashCode 相关的规则\",\"如果一个类没有使用 equals，你也不应该在 hashCode 中使用它\"]},\"407\":{\"h\":\"37. HashMap 的长度为什么是 2 的 n 次方\"},\"408\":{\"h\":\"38. HashMap 和 ConcurrentHashMap 的异同？\"},\"409\":{\"h\":\"39. 红黑树\"},\"410\":{\"h\":\"40. 怎么处理异常\"},\"411\":{\"h\":\"MySQL\"},\"412\":{\"h\":\"安装与配置\"},\"413\":{\"h\":\"Windows 安装\"},\"414\":{\"h\":\"Ubuntu 安装\"},\"415\":{\"h\":\"Centos 安装\"},\"416\":{\"h\":\"安装包安装\"},\"417\":{\"h\":\"Docker 安装\",\"t\":[\"docker pull mysql:5.7 docker run --restart=unless-stopped -d -p 3306:3306 --name common-mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7 --lower_case_table_names=1 \"]},\"418\":{\"h\":\"基础语法\"},\"419\":{\"h\":\"函数\"},\"420\":{\"h\":\"字符串函数\",\"t\":[\"cancat : 当拼接的字段有 null 的时候，结果都为 null\",\"left(str,x) : 返回从 0 开始的 x 个字符，当 x 为 null，返回 null\"]},\"421\":{\"h\":\"数值函数\"},\"422\":{\"h\":\"时间和日期函数\",\"t\":[\"CURDATE() : 返回当前日期，只包含年月日 2020-04-27\",\"CURTIME() : 返回当前日期，只包含时分秒 12：12：12\",\"NOW() : 返回当前时间，年-月-日 时：分：秒\",\" > \"]},\"423\":{\"h\":\"流程函数\"},\"424\":{\"h\":\"其他函数\"},\"425\":{\"h\":\"MySQL 50 题\"},\"426\":{\"h\":\"学生表\",\"t\":[\"create table Student(SId varchar(10),Sname varchar(10),Sage datetime,Ssex varchar(10)); insert into Student values('01' , '赵雷' , '1990-01-01' , '男'); insert into Student values('02' , '钱电' , '1990-12-21' , '男'); insert into Student values('03' , '孙风' , '1990-12-20' , '男'); insert into Student values('04' , '李云' , '1990-12-06' , '男'); insert into Student values('05' , '周梅' , '1991-12-01' , '女'); insert into Student values('06' , '吴兰' , '1992-01-01' , '女'); insert into Student values('07' , '郑竹' , '1989-01-01' , '女'); insert into Student values('09' , '张三' , '2017-12-20' , '女'); insert into Student values('10' , '李四' , '2017-12-25' , '女'); insert into Student values('11' , '李四' , '2012-06-06' , '女'); insert into Student values('12' , '赵六' , '2013-06-13' , '女'); insert into Student values('13' , '孙七' , '2014-06-01' , '女'); \"]},\"427\":{\"h\":\"科目表\",\"t\":[\"create table Course(CId varchar(10),Cname nvarchar(10),TId varchar(10)); insert into Course values('01' , '语文' , '02'); insert into Course values('02' , '数学' , '01'); insert into Course values('03' , '英语' , '03'); \"]},\"428\":{\"h\":\"教师表\",\"t\":[\"create table Teacher(TId varchar(10),Tname varchar(10)); insert into Teacher values('01' , '张三'); insert into Teacher values('02' , '李四'); insert into Teacher values('03' , '王五'); \"]},\"429\":{\"h\":\"成绩表\",\"t\":[\"create table SC(SId varchar(10),CId varchar(10),score decimal(18,1)); insert into SC values('01' , '01' , 80); insert into SC values('01' , '02' , 90); insert into SC values('01' , '03' , 99); insert into SC values('02' , '01' , 70); insert into SC values('02' , '02' , 60); insert into SC values('02' , '03' , 80); insert into SC values('03' , '01' , 80); insert into SC values('03' , '02' , 80); insert into SC values('03' , '03' , 80); insert into SC values('04' , '01' , 50); insert into SC values('04' , '02' , 30); insert into SC values('04' , '03' , 20); insert into SC values('05' , '01' , 76); insert into SC values('05' , '02' , 87); insert into SC values('06' , '01' , 31); insert into SC values('06' , '03' , 34); insert into SC values('07' , '02' , 89); insert into SC values('07' , '03' , 98); \"]},\"430\":{\"h\":\"题目\",\"t\":[\"查询\\\" 01 \\\"课程比\\\" 02 \\\"课程成绩高的学生的信息及课程分数\",\"SELECT s.SId, s.Sname, temp1.class1, temp1.class2 FROM ### 构建出子查询的数据 ( SELECT SId1, class1, class2 FROM ( SELECT SId SId1, score class1 FROM SC WHERE CId = '01' ) t1, ( SELECT SId SId2, score class2 FROM SC WHERE CId = '02' ) t2 WHERE t1.SId1 = t2.SId2 AND t1.class1 > t2.class2 ) temp1 LEFT JOIN Student s ON s.SId = temp1.SId1 \",\"1.1 查询同时存在\\\" 01 \\\"课程和\\\" 02 \\\"课程的情况\",\"SELECT s.SId, s.Sname, temp1.class1, temp1.class2 FROM ( SELECT SId1, class1, class2 FROM ( SELECT SId SId1, score class1 FROM SC WHERE CId = '01' ) t1, ( SELECT SId SId2, score class2 FROM SC WHERE CId = '02' ) t2 WHERE t1.SId1 = t2.SId2 ) temp1 LEFT JOIN Student s ON s.SId = temp1.SId1 \",\"1.2 查询存在\\\" 01 \\\"课程但可能不存在\\\" 02 \\\"课程的情况(不存在时显示为 null )\",\"SELECT s.SId, s.Sname, temp1.class1, temp1.class2 FROM ( SELECT SId1, class1, class2 FROM ( SELECT SId SId1, score class1 FROM SC WHERE CId = '01' ) t1 left join ( SELECT SId SId2, score class2 FROM SC WHERE CId = '02' ) t2 on t1.SId1 = t2.SId2 ) temp1 LEFT JOIN Student s ON s.SId = temp1.SId1 \",\"1.3 查询不存在\\\" 01 \\\"课程但存在\\\" 02 \\\"课程的情况\",\"SELECT s.SId, s.Sname, temp1.class1, temp1.class2 FROM ( SELECT SId2, class1, class2 FROM ( SELECT SId SId1, score class1 FROM SC WHERE CId = '01' ) t1 RIGHT JOIN ( SELECT SId SId2, score class2 FROM SC WHERE CId = '02' ) t2 ON t1.SId1 = t2.SId2 ) temp1 LEFT JOIN Student s ON s.SId = temp1.SId2 WHERE temp1.class1 IS NULL \",\"查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩\",\"SELECT s.SId, s.Sname, t1.avg FROM ( SELECT SId sid, SUM( score ) / count( 1 ) avg FROM SC GROUP BY SId ) t1 LEFT JOIN Student s ON t1.sid = s.SId WHERE t1.avg >= 60; \",\"查询在 SC 表存在成绩的学生信息\",\"SELECT * FROM Student WHERE SId IN ( SELECT SId FROM SC GROUP BY SId ); \",\"查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )\",\"SELECT s.SId, s.Sname, t1.sum, t1.num FROM ( SELECT SId sid, SUM( score ) sum, count( 1 ) num FROM SC GROUP BY SId ) t1 RIGHT JOIN Student s ON t1.sid = s.SId; \",\"4.1 查有成绩的学生信息\",\"SELECT * FROM Student WHERE SId IN ( SELECT SId FROM SC GROUP BY SId ); \",\"查询「李」姓老师的数量\",\"SELECT count( 1 ) FROM teacher WHERE Tname LIKE '李%'; \",\"查询学过「张三」老师授课的同学的信息\",\"SELECT * FROM student WHERE SId IN ( SELECT DISTINCT SId FROM sc WHERE CId IN ( SELECT DISTINCT CId FROM Course WHERE TId IN ( SELECT DISTINCT TId FROM teacher WHERE Tname = '张三' ) ) ); \",\"查询没有学全所有课程的同学的信息\",\"SELECT * FROM ( SELECT t.*, count( CId ) num FROM student t LEFT JOIN sc sc ON t.SId = sc.SId GROUP BY t.SId ) temp, ( SELECT count( CId ) count FROM course ) co WHERE temp.num < co.count \",\"查询至少有一门课与学号为\\\" 01 \\\"的同学所学相同的同学的信息\",\"SELECT * FROM Student WHERE SId IN ( SELECT DISTINCT SID FROM sc WHERE CId IN ( SELECT CId FROM sc WHERE SId = '01' ) ) \",\"查询和\\\" 01 \\\"号的同学学习的课程 完全相同的其他同学的信息\",\"SELECT * FROM Student WHERE SId IN ( SELECT SId FROM ( SELECT *, count( 1 ) num FROM ( SELECT * FROM sc WHERE SId NOT IN ( SELECT SId FROM sc WHERE CId NOT IN ( SELECT CId FROM sc WHERE SId = '01' ) ) ) t1 GROUP BY SId ) tt1 WHERE num = ( SELECT count( 1 ) FROM sc WHERE SId = '01' ) AND SId != '01' ) \",\"查询没学过\\\"张三\\\"老师讲授的任一门课程的学生姓名\",\"SELECT * FROM student WHERE SId NOT IN ( SELECT SId FROM sc WHERE CId IN ( SELECT CId FROM course WHERE TId IN ( SELECT TId FROM teacher WHERE Tname = \\\"张三\\\" ) ) ) \",\"查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩\",\"SELECT st.* ,avg FROM ( SELECT SId, sum( score ) / count( 1 ) avg FROM sc WHERE SId IN ( SELECT SId FROM ( SELECT *, count( 1 ) num FROM sc WHERE score < 60 GROUP BY SId ) t1 WHERE num >= 2 ) GROUP BY SId ) tt1 LEFT JOIN student st ON tt1.SId = st.SId \",\"检索\\\" 01 \\\"课程分数小于 60，按分数降序排列的学生信息\",\"SELECT * FROM student WHERE SId IN ( SELECT SId FROM sc WHERE score < 60 AND CId = '01' ORDER BY score DESC ) \",\"按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\",\"SELECT t1.*, avg FROM sc t1 LEFT JOIN ( SELECT SId, sum( score ) / count( 1 ) avg FROM sc GROUP BY SId ) t2 ON t1.sId = t1.SId ORDER BY avg DESC \",\"14.查询各科成绩最高分、最低分和平均分：\",\"以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率\",\"及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列\",\"select sc.CId , max(sc.score)as 最高分, min(sc.score)as 最低分, AVG(sc.score)as 平均分, count(*)as 选修人数, sum(case when sc.score>=60 then 1 else 0 end )/count(*)as 及格率, sum(case when sc.score>=70 and sc.score<80 then 1 else 0 end )/count(*)as 中等率, sum(case when sc.score>=80 and sc.score<90 then 1 else 0 end )/count(*)as 优良率, sum(case when sc.score>=90 then 1 else 0 end )/count(*)as 优秀率 from sc GROUP BY sc.CId ORDER BY count(*)DESC, sc.CId ASC \",\"按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺\",\"SELECT ( @sn := @sn + 1 ) sn, CId, SId, score FROM sc, ( SELECT @sn := 0 ) b ORDER BY CId, score DESC \",\"15.1 按各科成绩进行排序，并显示排名， Score 重复时合并名次\",\"SELECT sc.SId, sc.CId, sc.score, tp.ranks FROM test.sc LEFT JOIN (SELECT SId, CId, (SELECT COUNT(DISTINCT sc2.score) + 1 FROM test.sc sc2 WHERE sc1.CId = sc2.CId AND sc2.score > sc1.score) ranks FROM test.sc sc1) tp ON sc.SId = tp.SId AND sc.CId = tp.CId ORDER BY sc.CId , ranks \",\"询学生的总成绩，并进行排名，总分重复时保留名次空缺\",\"select t1.*,@currank:= @currank+1 as rank from (select sc.SId, sum(score) from sc GROUP BY sc.SId ORDER BY sum(score) desc) as t1,(select @currank:=0) as t \",\"16.1 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺\",\"SET @crank = 0; SELECT q.sid, total, @crank := @crank + 1 AS rank FROM ( SELECT sc.sid, sum( sc.score ) AS total FROM sc GROUP BY sc.sid ORDER BY total DESC ) q; \",\"统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比\",\"SELECT c.CId 课程编号, c.Cname 课程名称, COUNT(CASE WHEN sc.score >= 85 THEN 1 ELSE NULL END) AS '[100,85]人数', ROUND(COUNT(CASE WHEN sc.score >= 85 THEN 1 ELSE NULL END) * 1.0 / COUNT(sc.score), 2) AS '[100,85]占比', COUNT(CASE WHEN sc.score >= 70 AND sc.score < 85 THEN 1 ELSE NULL END) AS '(85,70]人数', ROUND(COUNT(CASE WHEN sc.score >= 70 AND sc.score < 85 THEN 1 ELSE NULL END) * 1.0 / COUNT(sc.score), 2) AS '(85,70]占比', COUNT(CASE WHEN sc.score >= 60 AND sc.score < 70 THEN 1 ELSE NULL END) AS '(70,60]人数', ROUND(COUNT(CASE WHEN sc.score >= 60 AND sc.score < 70 THEN 1 ELSE NULL END) * 1.0 / COUNT(sc.score), 2) AS '(70,60]占比', COUNT(CASE WHEN sc.score < 60 THEN 1 ELSE NULL END) AS '(60,0]人数', ROUND(COUNT(CASE WHEN sc.score < 60 THEN 1 ELSE NULL END) * 1.0 / COUNT(sc.score), 2) AS '(60,0]占比' FROM Course c LEFT JOIN sc ON c.CId = sc.CId GROUP BY c.CId \",\"查询各科成绩前三名的记录\",\"select * from sc where (select count(*) from sc as a where sc.CId =a.CId and sc.score <a.score )<3 ORDER BY CId asc,sc.score desc \",\"查询每门课程被选修的学生数\",\"SELECT * FROM ( SELECT CId, count( 1 ) count FROM SC GROUP BY CId ) t1 RIGHT JOIN Course c ON t1.CId = c.CId \",\"查询出只选修两门课程的学生学号和姓名\",\"SELECT SId, Sname FROM Student WHERE SId IN ( SELECT SId FROM ( SELECT SId, count( 1 ) count FROM SC GROUP BY SId ) t1 WHERE t1.count = 2 ) \",\"查询男生、女生人数\",\"SELECT Ssex, count( 1 ) FROM Student GROUP BY Ssex \",\"查询名字中含有「风」字的学生信息\",\"SELECT * FROM Student WHERE Sname LIKE '%风%' \",\"查询同名同性学生名单，并统计同名人数\",\"SELECT s1.Sname, count( 1 ) FROM Student s1, Student s2 WHERE s1.Sname = s2.Sname AND s1.Ssex = s2.Ssex AND s1.SId != s2.SId GROUP BY s1.Sname \",\"查询 1990 年出生的学生名单\",\"SELECT * FROM student WHERE DATE_FORMAT( Sage, '%Y' ) = '1990' \",\"查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列\",\"SELECT c.CId CId, Cname, avg( score ) FROM course c LEFT JOIN sc sc ON c.CId = sc.CId GROUP BY Cname ORDER BY CId \",\"查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩\",\"SELECT * FROM ( SELECT SId, avg FROM ( SELECT SId, AVG( score ) avg FROM SC GROUP BY SId ) t1 WHERE t1.avg >= 80 ) tt1 LEFT JOIN student s ON tt1.SId = s.SId \",\"查询课程名称为「数学」，且分数低于 60 的学生姓名和分数\",\"SELECT * FROM ( SELECT SId, Score FROM sc WHERE score < 60 AND CId IN ( SELECT CId FROM course WHERE Cname = '数学' ) ) t1 LEFT JOIN student s ON t1.SId = s.SId \",\"查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）\",\"SELECT s.SId, s.Sname, sc.CId, sc.score FROM student s LEFT JOIN sc sc ON sc.SId = s.SId; \",\"查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数\",\"SELECT * FROM ( SELECT * FROM sc WHERE score > 70 ) t1 LEFT JOIN student s ON t1.SId = s.SId LEFT JOIN course c ON t1.CId = c.CId \",\"查询不及格的课程\",\"SELECT * FROM sc sc LEFT JOIN course c ON sc.CId = c.CId WHERE score < 60 GROUP BY sc.CId \",\"查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名\",\"SELECT * FROM student WHERE SId IN ( SELECT SId FROM sc WHERE CId = 01 AND score > 80 ) \",\"求每门课程的学生人数\",\"SELECT *, count( 1 ) FROM course c LEFT JOIN sc sc ON c.CId = sc.CId GROUP BY sc.CId; \",\"成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩\",\"SELECT * FROM ( SELECT SId, score FROM SC WHERE CId IN ( SELECT CId FROM Course WHERE TId IN ( SELECT TId FROM Teacher WHERE Tname = \\\"张三\\\" ) ) ORDER BY score DESC LIMIT 1 ) t1 LEFT JOIN Student s ON t1.Sid = s.SId \",\"成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩\",\"SELECT * FROM ( SELECT SId, score FROM SC WHERE score = ( SELECT score FROM SC WHERE CId IN ( SELECT CId FROM Course WHERE TId IN ( SELECT TId FROM Teacher WHERE Tname = \\\"张三\\\" ) ) ORDER BY score DESC LIMIT 1 ) ) t1 LEFT JOIN Student s ON t1.Sid = s.SId \",\"查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩\",\"SELECT sc1.SId, sc1.CId, sc1.score FROM sc sc1 JOIN sc sc2 ON sc1.SId = sc2.SId AND sc1.score = sc2.score AND sc1.CId != sc2.CId GROUP BY sc1.CId , sc1.SId; \",\"查询每门功成绩最好的前两名\",\"SELECT a.CId, a.SId, a.score FROM sc a LEFT JOIN sc b ON a.CId = b.CId AND a.score < b.score GROUP BY a.CId , a.SId HAVING COUNT(a.CId) < 2 ORDER BY CId , score DESC \",\"统计每门课程的学生选修人数（超过 5 人的课程才统计）。\",\"SELECT * FROM ( SELECT CId, count( 1 ) count FROM SC GROUP BY CId ) t1 WHERE t1.count > 5 \",\"检索至少选修两门课程的学生学号\",\"SELECT SId FROM ( SELECT SId, count( 1 ) count FROM SC GROUP BY SId ) t1 WHERE t1.count >2 \",\"查询选修了全部课程的学生信息\",\"SELECT * FROM student WHERE SId IN ( SELECT SId FROM ( SELECT SId, count( 1 ) count FROM SC GROUP BY SId ) t1 WHERE count = ( SELECT count( 1 ) FROM course ) ) \",\"查询各学生的年龄，只按年份来算\",\"SELECT *, DATE_FORMAT( now( ), '%Y' ) - DATE_FORMAT( Sage, '%Y' ) FROM student \",\"按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一\",\"SELECT *, DATE_FORMAT( now( ), '%Y' ) - DATE_FORMAT( Sage, '%Y' ) - ( DATE_FORMAT( now( ), '%m%d' ) < DATE_FORMAT( Sage, '%m%d' ) ) FROM student \",\"查询本周过生日的学生\",\"SELECT * FROM student WHERE WEEKOFYEAR(Sage) = WEEKOFYEAR(CURDATE()); \",\"查询下周过生日的学生\",\"SELECT * FROM student WHERE WEEKOFYEAR(Sage) - WEEKOFYEAR(CURDATE()) = 1; \",\"查询本月过生日的学生\",\"SELECT * FROM student WHERE MONTH(Sage) = MONTH(CURDATE()); \",\"查询下月过生日的学生\",\"SELECT * FROM student WHERE MONTH(Sage) = MONTH(CURDATE())+1; \"]},\"431\":{\"h\":\"存储引擎\",\"t\":[\"MYSQL5.0 存储引擎有 MyISAM、InnoDB、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED 等，其中 InnoDB 和 BDB 是提供事务安全表，其他的引擎都是非事务安全表。\",\"show engines \\\\G 可查看当前数据库支持的引擎\",\"alter tables tableName engine = innodb 修改存储引擎为 InnoDB\"]},\"432\":{\"h\":\"储存引擎的对比\"},\"433\":{\"h\":\"MyISAM 存储引擎\",\"t\":[\"MYSQL 默认引擎，不支持事务和外键，但是访问速度快\",\"会在相应的文件夹下生成三个文件，文件名和表明相同，扩展名分别是\",\".frm(存储定义表)\",\".MYD(MYData 存储数据)\",\".MYI(MYIndex 存储索引)\",\"数据和索引文件可放置再不同的目录，平均分配 IO，获得更快的速度。\",\"需要在创建表的时候指定 data dirctory 和 index directory, 路径为绝对路径，并且具有访问权限\",\"存储格式\",\"静态（固定长度）表\",\"动态表\",\"压缩表\",\"静态表：默认存储格式，这样每个记录都是固定长度的，这种存储方式的优点是存储非常迅速，容易缓存，出现故障容易恢复；缺点是占用的空间通常比动态表多。静态表的数据在存储的时候会按照列的宽度定义补足空格，但是在应用访问的时候并不会得到这些空格，这些空格在返回给应用之前已经去掉。\",\"动态表： 动态表中包含变长字段，记录不是固定长度的，这样存储的优点是占用的空间相对较少，但是频繁地更新删除记录会产生碎片，需要定期执行 OPTIMIZE TABLE 语句或 myisamchk -r 命令来改善性能，并且出现故障的时候恢复相对比较困难\",\"压缩表由 myisampack 工具创建，占据非常小的磁盘空间。因为每个记录是被单独压缩的\"]},\"434\":{\"h\":\"InnoDB 存储引擎\",\"t\":[\"自动增长列\",\"可通过 alter table tableName auto_increment = n 设置自动增长的间隔\",\"可使用 last_insert_id() 查询当前线程的最后插入记录的值\",\"自动增长列必须是索引，如果是组合索引，必须是组合索引的第一个，但是对于 MyISAM 表，自动增长列可以是组合索引的其他列，这样插入记录后，自动增长列是按照组合索引的前面几列进行排序后递增的\",\"外键约束\",\"支持外键的存储引擎只有 InnoDB，外键对应的父表必须有对应的索引，子表创建外键的时候会自动创建索引\",\"在创建索引的时候， 可以指定在删除、 更新父表时， 对子表进行的相应操作， 包 RESTRICT、CASCADE、SET NULL 和 NO ACTION。其中 RESTRICT 和 NO ACTION 相同，是指限制在子表有关联记录的情况下父表不能更新； CASCADE 表示父表在更新或者删除时，更新或者删除子表对应记录；SET NULL 则表示父表在更新或者删除的时候，子表的对应字段被 SET NULL。选择后两种方式的时候要谨慎，可能会因为错误的操作导致数据的丢失\",\"存储方式\",\"InnoDB 存储表和索引有以下两种方式：\",\"使用共享表空间存储，这种方式创建的表的表结构保存在.frm 文件中，数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path 定义的表空间中，可以是多个文件\",\"使用多表空间存储，这种方式创建的表的表结构仍然保存在.frm 文件中，但是每个表的数据和索引单独保存在.ibd 中。如果是个分区表，则每个分区对应单独的.ibd 文件，文件名是“表名+分区名” ，可以在创建分区的时候指定每个分区的数据文件的位置，以此来将表的 IO 均匀分布在多个磁盘上\",\"要使用多表空间的存储方式，需要设置参数 innodb_file_per_table，并重新启动服务后才可以生效，多表空间的参数生效后，只对新建的表生效。\",\"多表空间的数据文件没有大小限制，不需要设置初始大小，也不需要设置文件的最大限制、扩展大小等参数\",\"对于使用多表空间特性的表，可以比较方便地进行单表备份和恢复操作，但是直接复制.ibd 文件是不行的，因为没有共享表空间的数据字典信息，直接复制的.ibd 文件和.frm 文件恢复时是不能被正确识别的，但可以通过以下命令：\",\"ALTER TABLE tbl_name DISCARD TABLESPACE;\",\"ALTER TABLE tbl_name IMPORT TABLESPACE;\"]},\"435\":{\"h\":\"MEMORY 存储引擎\",\"t\":[\"存储再内存中,虽然速度很快,但是一旦服务器重启,表数据就会丢失.\",\"默认支持 HASH 索引\",\"只有一个磁盘文件,格式为.frm\",\"启动 MYSQL 服务时,使用--init-file 选项,把 INSERT INTO ... SELECT 或 LOAD DATA INFILE 这样的语句放入这个文件中，就可以在服务启动时从持久稳固的数据源装载表\",\"表的大小受 max_heap_table_size 系统变量的约束，这个系统变量的初始值是 16MB.此外，在定义 MEMORY 表的时候，可以通过 MAX_ROWS 子句指定表的最大行数\"]},\"436\":{\"h\":\"MERGE 存储引擎\",\"t\":[\"MERGE 存储引擎是一组 MyISAM 表的组合，这些 MyISAM 表必须结构完全相同，MERGE 表本身并没有数据，对 MERGE 类型的表可以进行查询、更新、删除的操作，这些操作实际上是对内部的实际的 MyISAM 表进行的。\",\"MERGE 类型表的插入操作，是通过\",\"INSERT_METHOD 子句定义插入的表，可以有 3 个不同的值，使用 FIRST 或 LAST 值使得插入操作被相应地作用在第一或最后一个表上，不定义这个子句或者定义为 NO，表示不能对这个 MERGE 表执行插入操作。\",\"MERGE 表在磁盘上保留两个文件，文件名以表的名字开始，一个.frm 文件存储表定义，另一个.MRG 文件包含组合表的信息，包括 MERGE 表由哪些表组成、插入新的数据时的依据。可以通过修改.MRG 文件来修改 MERGE 表，但是修改后要通过 FLUSH TABLES 刷新\"]},\"437\":{\"h\":\"存储引擎的选择\",\"t\":[\"存储引擎\",\"情况优选\",\"MyISAM\",\"默认的 MySQL 插件式存储引擎。如果应用是以读操作和插入操作为主，只有很少的更新和删操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常适合的。MyISAM 是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一\",\"InnoDB\",\"用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包括很多的更新、删除操作，那么 InnoDB 存储引擎应该是比较合适的选择。InnoDB 存储引擎除了有效地降低由于删除和更新导致的锁定，还可以确保事务的完整提交（Commit）和回滚（Rollback），对于类似计费系统或者财务系统等对数据准确性要求比较高的系统\",\"MEMORY\",\"将所有数据保存在 RAM 中，在需要快速定位记录和其他类似数据的环境下，可提供极快的访问。MEMORY 的缺陷是对表的大小有限制，太大的表无法 CACHE 在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY 表通常用于更新不太频繁的小表，用以快速得到访问结果\",\"MERGE\",\"用于将一系列等同的 MyISAM 表以逻辑方式组合在一起，并作为一个对象引用它们。MERGE 表的优点在于可以突破对单个 MyISAM 表大小的限制，并且通过将不同的表分布在多个磁盘上，可以有效地改善 MERGE 表的访问效率。这对于诸如数据仓储等 VLDB 环境十分适合\"]},\"438\":{\"h\":\"触发器\",\"t\":[\"触发器：在执行一些操作时会触发执行的。\"]},\"439\":{\"h\":\"触发器创建\",\"t\":[\"CREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt \",\"trigger_time : 触发时间，可以是 BEFORE 或者 AFTER\",\"trigger_event ： 触发事件，可以是 INSERT、UPDATE 或者 DELETE\",\"例：\",\"CREATE TRIGGER upd_film_bef BEFORE update ON film FOR EACH ROW BEGIN INSERT INTO tri_demo (note) VALUES ('before update'); END; $$ \"]},\"440\":{\"h\":\"删除触发器\",\"t\":[\"DROP TRIGGER [schema_name.]trigger_name \"]},\"441\":{\"h\":\"查看触发器\",\"t\":[\"show triggers \\\\G \"]},\"442\":{\"h\":\"使用规则\",\"t\":[\"触发器执行的语句有以下两个限制：\",\"触发程序不能调用将数据返回客户端的存储程序，也不能使用采用 CALL 语句的动态 SQL 语句，但是允许存储程序通过参数将数据返回触发程序。也就是存储过程或者函数通过 OUT 或者 INOUT 类型的参数将数据返回触发器是可以的，但是不能调用直接返回数据的过程。\",\"不能在触发器中使用以显式或隐式方式开始或结束事务的语句，如 START TRANSACTION、COMMIT 或 ROLLBACK\"]},\"443\":{\"h\":\"存储过程和函数\",\"t\":[\"存储过程和函数是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的\",\"存储过程和函数的区别在于函数必须有返回值，而存储过程没有，存储过程的参数可以使用 IN、OUT、INOUT 类型，而函数的参数只能是 IN 类型的。如果有函数从其他类型的数据库迁移到 MySQL，那么就可能因此需要将函数改造成存储过程\"]},\"444\":{\"h\":\"函数\",\"t\":[\"CREATE DEFINER=`root`@`localhost` FUNCTION `function_update_sc`(`id` int) RETURNS int(11) BEGIN #Routine body goes here... update teacher set Tname = '100' where TId = id; RETURN 0; END \"]},\"445\":{\"h\":\"存储过程\",\"t\":[\"CREATE DEFINER=`root`@`localhost` FUNCTION `function_update_sc`(`id` int) RETURNS int(11) BEGIN #Routine body goes here... update teacher set Tname = '100' where TId = id; RETURN 0; END \"]},\"446\":{\"h\":\"索引\",\"t\":[\"MySQL 列类型都可以被索引，对相关列使用索引是提高 SELECT 操作性能的最佳途径\",\"根据存储引擎可以定义每个表的最大索引数和最大索引长度，每种存储引擎（如 MyISAM、InnoDB、BDB、MEMORY 等）对每个表至少支持 16 个索引，总索引长度至少为 256 字节\",\"MyISAM 和 InnoDB 存储引擎的表默认创建的都是 BTREE 索引\",\"MySQL 目前还不支持函数索引，但是支持前缀索引，即对索引字段的前 N 个字符创建索引\",\"前缀索引的长度跟存储引擎相关，对于 MyISAM 存储引擎的表，索引的前缀长度可以达到 1000 字节长，而对于 InnoDB 存储引擎的表，索引的前缀长度最长是 767 字节\",\"请注意前缀的限制应以字节为单位进行测量，而 CREATE TABLE 语句中的前缀长度解释为字符数。在为使用多字节字符集的列指定前缀长度时一定要加以考虑\",\"MySQL 中还支持全文本（FULLTEXT）索引，该索引可以用于全文搜索。但是当前最新版本中（5.0）只有 MyISAM 存储引擎支持 FULLTEXT 索引，并且只限于 CHAR、VARCHAR 和 TEXT 列。索引总是对整个列进行的，不支持局部（前缀）索引\"]},\"447\":{\"h\":\"创建索引\",\"t\":[\"索引类型\",\"普通索引：最基本的索引，没有任何限制，用于加速查询\",\"唯一索引：索引列的值必须唯一，但允许有空值，如果是组合索引，列组合必须是唯一的\",\"主键索引：是一种特殊的索引，一个表只能有一个主键，不允许有空值，一般在创建表的时候创建\",\"组合索引：指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用组合索引时遵循最左前缀集合。\",\"全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。fulltext 索引配合 match against 操作使用，而不是一般的 where 语句加 like，它可以在 create table，alter table ，create index 使用，不过目前只有 char、varchar，text 列上可以创建全文索引。\",\"创建表的时候可以同时创建\",\"CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name [USING index_type] ON tbl_name (index_col_name,...) index_col_name: col_name [(length)] [ASC | DESC] \",\"增加索引\",\"create [UNIQUE|FULLTEXT|SPATIAL] index cityname on city (city(10)); \"]},\"448\":{\"h\":\"索引测试\"},\"449\":{\"h\":\"设计索引的原则\",\"t\":[\"创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效地使用索引\",\"搜索的索引列，不一定是所要选择的列。换句话说，最适合索引的列是出现在 WHERE 子句中的列，或连接子句中指定的列，而不是出现在 SELECT 关键字后的选择列表中的列\",\"使用惟一索引。考虑某列中值的分布。索引的列的基数越大，索引的效果越好。例如，存放出生日期的列具有不同值，很容易区分各行。而用来记录性别的列，只含有“ M”和“F”，则对此列进行索引没有多大用处，因为不管搜索哪个值，都会得出大约一半的行\",\"使用短索引。如果对字符串列进行索引，应该指定一个前缀长度，只要有可能就应该这样做。\",\"利用最左前缀。在创建一个 n 列的索引时，实际是创建了 MySQL 可利用的 n 个索引。多列索引可起几个索引的作用，因为可利用索引中最左边的列集来匹配行。这样的列集称为最左前缀\",\"不要过度索引。每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能\",\"对于 InnoDB 存储引擎的表，记录默认会按照一定的顺序保存，如果有明确定义的主键，则按照主键顺序保存。如果没有主键，但是有唯一索引，那么就是按照唯一索引的顺序保存。如果既没有主键又没有唯一索引，那么表中会自动生成一个内部列，按照这个列的顺序保存。按照主键或者内部列进行的访问是最快的，所以 InnoDB 表尽量自己指定主键，当表中同时有几个列都是唯一的，都可以作为主键的时候，要选择最常作为访问条件的列作为主键，提高查询的效率。另外，还需要注意，InnoDB 表的普通索引都会保存主键的键值，所以主键要尽可能选择较短的数据类型\"]},\"450\":{\"h\":\"BTREE 索引与 HASH 索引\",\"t\":[\"HASH 索引有一些重要的特征需要在使用的时候特别注意\",\"只用于使用=或<=>操作符的等式比较\",\"优化器不能使用 HASH 索引来加速 ORDER BY 操作\",\"MySQL 不能确定在两个值之间大约有多少行。如果将一个 MyISAM 表改为 HASH 索引的 MEMORY 表，会影响一些查询的执行效率\",\"只能使用整个关键字来搜索一行\",\"BTREE 索引\",\"当使用>、<、>=、<=、BETWEEN、!=或者<>，或者 LIKE 'pattern'（其中'pattern'不以通配符开始）操作符时，都可以使用相关列上的索引\"]},\"451\":{\"h\":\"锁\"},\"452\":{\"h\":\"类型\",\"t\":[\"类型\",\"优点\",\"缺点\",\"适用场景\",\"表级锁\",\"开销小，加锁快，不会出现死锁\",\"锁定粒度大，发生锁冲突的概率高，并发度最低\",\"适用于以查询为主，只有少量按索引条件更新数据的应用\",\"行级锁\",\"锁定粒度小，发生锁冲突的概率最低，并发度也高\",\"开销大，加锁慢，会出现死锁\",\"适合有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用\",\"页面锁\",\"开销和加锁时间介于表级锁和行级锁之间\",\"会出现死锁，锁定粒度位于表级锁和行级锁之间，并发度一般\"]},\"453\":{\"h\":\"MyISAM 表锁\",\"t\":[\"通过show status like 'table%'进行查看表级锁争用情况，Table_locak_waited的值越高，争用越严重\",\"表级锁的两种模式：表共享读锁和表独占写锁。\",\"当前线程获得读锁，其他线程仍然可以读，但是不可以写。若当前线程获得写锁，其他用户不能读锁和写锁，只有持有写锁的线程可以更新操作。\",\"MyISAM 只能访问显示加锁的表，不能范围未加锁的表\",\"MyISAM 可以设置存储引擎并发插入将 concurrent_insert 设置成 2（不管表中有没有删除行），都可以在后面添加数据，只不过需要定时的去执行 OPTIMIZE TABLE 语句来整理空间碎片。\",\"MyISAM 的锁调度：如果一个队列，先获得读锁，但是后一个队列需要写锁，也会先进行写锁，把读锁放到后面，因为 MySQL 认为写操作一般比读操作重要，所以需要设置一些参数进行修改锁的调度 - 通过指定启动参数 low-priority-updates，使 MyISAM 引擎默认给予读请求以优先的权利 - 通过执行命令 SET LOW_PRIORITY_UPDATES=1，使该连接发出的更新请求优先级降低 - 通过指定 INSERT、UPDATE、DELETE 语句的 LOW_PRIORITY 属性，降低该语句的优先级 - 给系统参数 max_write_lock_count 设置一个合适的值，当一个表的读锁达到这个值后，MySQL 就暂时将写请求的优先级降低，给读进程一定获得锁的机会\"]},\"454\":{\"h\":\"InnoDB 锁\",\"t\":[\"InnoDB 锁和 MyISAM 有以下的不同点： - 支持事务 - 采用的行级锁\",\"事务的四个属性（ACID）： - 原子性（A）：事务是一个原子操作，要么全成功，要么全失败 - 一致性（C）：在事务开始和完成时，数据都必须保持一致状态。 - 隔离性（I） ：保证事务不受外部并发操作影响的“独立”环境执行 - 持久性（D）：完成事务后，数据修改是永久性的。\",\"并发事务处理带来的问题： - 更新丢失：当两个事务同时修改一行，由于其他事物不知道别的事务是否在修改，导致最后的更新覆盖了其他事物所做的更新。可通过写锁进行解决，在更新的时候让别的事务无法更新 - 脏读：一个事务正在修改数据，在提交前另一个事务读取了数据，导致数据不是最终的数据。 - 不可重复读：一个事务在读书某数据一段时候后，再次读取数据，却发现读出的数据已经发生改变。 - 幻读：一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事物插入了满足其查询条件的新数据。\",\"事务隔离级别： - 更新丢失问题：需要在应用端添加锁，来防止更新丢失 - 脏读、不可重复读、幻读：都是数据库读一致性问题，采用数据库的事务隔离机制实现 - 在读数据之前加锁 - 通过一定机制生成一致性数据快照，从而实现读一致性 - \",\"行锁模式及加锁方法 - 共享锁：允许一个事务去读一行，阻止其他事务获取相同数据集的排他锁 - 排他锁：允许获得排他锁的事务更新数据，阻止其他事务获取相同数据集的共享读锁和排他写锁 - 为了允许表锁和行锁的共存，实现多粒度锁机制，InnoDB 还有两种内部使用的意向锁，都为表锁 - 意向共享锁：事务打算给数据行加航共享锁，事务在给一个数据加共享锁前必须先获得该表的意向共享锁 - 意向排他锁：事务打算给数据加行排他锁，必须先获取该表的意向排他锁\"]},\"455\":{\"h\":\"优化\"},\"456\":{\"h\":\"优化 SQL 的一般步骤\",\"t\":[\"当遇到需要优化的 SQL 时，按照步骤进行优化从而能更快的找到问题的所在。\",\"1.通过命令了解各种 SQL 的执行频率\",\"客户端连接之后，通过 show [session|global]status 可查看命令的执行次数，默认 session\",\"session:当前连接\",\"global: 自数据库启动\",\"show status 'Com_%'; > \",\"Com_xxx 表示每个 xxx 语句执行的次数\",\"Com_select : 执行 select 操作的次数，一次查询只累加 1\",\"Com_insert : 执行 insert 操作的次数，对于批量插入的 insert 操作，只累加一次\",\"Com_update : 执行 update 的操作次数\",\"Com_delete : 执行 delete 操作的次数\",\"innodb_rows_read : select 查询返回的行数\",\"innodb_rows_inserted : 执行 insert 操作的行数\",\"2.定位执行效率较低的 SQL 语句\",\"通过慢查询日志定位查询慢的 sql 语句，使用--log-slow-queries[=file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 妙的 SQL 语句的日志文件\",\"通过show processlist命令查看当前 MySQL 在进行的线程，包括线程的状态，是否锁表等，可以实时查看 SQL 的执行情况\",\"3.通过 EXPLAIN 分析低效 SQL 的执行计划\",\"可以通过 EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。\",\"比如想计算 2006 年所有公司的销售额，需要关联 sales 表和 company 表，并且对 moneys 字段做求和（sum）操作\",\"explain select sum(moneys) from sales a,company b where a.company_id = b.id and a.year= 2006\\\\G;\",\"select_type：表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等。\",\"table：输出结果集的表。\",\"type：表示表的连接类型，性能由好到差的连接类型为 system（表中仅有一行，即常量表）、const（单表中最多有一个匹配行，例如 primary key 或者 unique index）、eq_ref（对于前面的每一行，在此表中只查询一条记录，简单来说，就是多表连接中使用 primary key 或者 unique index）、 ref （与 eq_ref 类似， 区别在于不是使用 primarykey 或者 unique index，而是使用普通的索引）、ref_or_null（与 ref 类似，区别在于条件中包含对 NULL 的查询） 、index_merge(索引合并优化)、unique_subquery（in 的后面是一个查询主键字段的子查询）、 index_subquery （与 unique_subquery 类似，区别在于 in 的后面是查询非唯一索引字段的子查询）、 range （单表中的范围查询）、index（对于前面的每一行，都通过查询索引来得到数据）、all（对于前面的每一行,都通过全表扫描来得到数据）\",\"possible_keys：表示查询时，可能使用的索引\",\"key：表示实际使用的索引\",\"key_len：索引字段的长度\",\"rows：扫描行的数量\",\"Extra：执行情况的说明和描述\",\"4.确定问题并采取相应的优化措施\",\"以上基本就可以确认问题出现的原因。此时用户可以根据情况采取相应的措施，进行优化提高执行的效率\"]},\"457\":{\"h\":\"索引问题\",\"t\":[\"索引是数据库优化中最常用也是最重要的手段之一， 通过索引通常可以帮助用户解决大多数的 SQL 性能问题\",\"1.索引的存储分类\",\"2.如何使用\",\"3.索引使用情况\"]},\"458\":{\"h\":\"简单的优化方法\",\"t\":[\"1.定期分析表和检查表\",\"2.定期优化表\"]},\"459\":{\"h\":\"常用 SQL 的优化\",\"t\":[\"1.大批量插入数据\",\"2.优化 INSERT 语句\",\"3.优化 GROUP BY 语句\",\"4.优化 ORDER BY 语句\",\"5.优化嵌套查询\",\"6.如何优化 OR\"]},\"460\":{\"h\":\"Redis\"},\"461\":{\"h\":\"安装\",\"t\":[\"采用 Docker 安装Redis 进行测试和学习，执行以下命令进行安装：docker run -d -p 6379:6379 --name redis redis 。\"]},\"462\":{\"h\":\"基础\",\"t\":[\"数据类型\",\"String\",\"SET key value : 设置 key 的值\",\"GET key : 获取 key 的值\",\"GETRANGE key start end : 获取 keyvalue 的 star 到 end 之间字符串\",\"GETSET key value : 先获取 key 旧的 value，然后设置 key 的 value\",\"GETBIT key offset : 获取 key 的 value 指定的位 bit\",\"MGET key [key2 …] : 获取所有 key 的 value\",\"SETBIT key offset value : 给 key 对应 value 的 offset 位的值为 value\",\"SETEX key seconds value : 将 value 关联到 key ，并设置 seconds 秒过期\",\"SETNX key value : 只有在 key 不存在时设置 key 的值\",\"SETRANGE key offset value : 用 value 覆写 key 对应的值，从 offset 位开始\",\"STRLEN key : 获取 key 对应 value 的长度\",\"MSET key value [key1 value1] : 同时设置多个 key-value\",\"MSETNX key value [key1 value1] : 同时设置多个 key-value，当且仅当 key 都不存在的时候\",\"PSETEX key milliseconds value : 将 value 关联到 key，并设置 milliseconds 毫秒后过期\",\"INCR key : 将 key 的 value（数值）加一\",\"INCRBY key increment : 将 key 的 value 加上 increment\",\"INCRBYFLOAT key increment : 将 key 的 value 加上 浮点 increment\",\"DECR key : 将 key 对应的数值 value 减一\",\"DECRBY key decrement : 将 key 对应的数值 value 减去 decrement\",\"APPEND key value : 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾\",\"Hash\",\"HDEL key field [field2 ] : 删除一个或者多个哈希表字段\",\"HEXISTS key field : 检查存储在哈希表的字段是否存在\",\"HGET key field : 获取哈希表字段的值\",\"HGETALL key : 获取哈希表的所有字段和值\",\"HINCRBY key field increment : 为哈希表字段加 increment\",\"HINCRBYFLOAT key field increment : 为哈希表字段加浮点 increment\",\"HKEYS key : 获取哈希表所有的字段\",\"HLEN key : 获取哈希表的字段数量\",\"HMGET key field [field2 ] : 获取哈希表指定的字段值\",\"HMSET key field value [field1 value1] : 同时设置多个字段值给哈希表\",\"HSET key field value : 设置字段属性值给哈希表\",\"HSETNX key field value : 当哈希表中不存在字段 field 时，给 field 设置 value\",\"HVALS key : 获取哈希表所有的值\",\"HSCAN key cursor [MATCH pattern][count count] : 迭代哈希表中的键值对。\",\"List\",\"BLOPOP key [key1 ] timeout : 移出并获取列表的最后一个元素，如果没有则等待到可以弹出的元素或者等到超时时间\",\"BRPOP key [key1 ] timeout : 移出并获取列表的最后一个元素，如果没有则等待到可以弹出的元素或者等到超时时间\",\"BRPOPLPUSH source destination timeout : 从列表中弹出第一个值，将弹出的元素插入到另外一个列表中并返回它，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。\",\"LINDEX key index : 通过索引的方式获取列表中的元素\",\"LINSERT key BEFORE|AGTER pivot value : 向列表的元素之前|之后插入一个元素\",\"LLEN key : 获取列表长度\",\"LPOP key ： 移出并获取列表的第一个元素\",\"LPUSH key vale1 [value2 ] : 将一个或者多个值插入列表头部，先插入第一个，然后再插入第二个\",\"Set\",\"SADD key member1 [member2] : 向集合添加一个或者多个成员\",\"SCARD key : 获取集合中成员的个数\",\"SDIFF key [key2] : 返回第一个集合和其他集合的差异\",\"SDIFFSTORE destination key1 [key2] : 返回给定集合之家你的差集并存储 destination\",\"SINTER key1 [key2] : 返回给定集合的交集\",\"SINTERSTORE destination key1 [key2] : 返回给定所有集合的交集并存储在 destination 中\",\"SISMEMBER key member : 判断 member 元素是否是集合 key 的成员\",\"SMEMBERS key : 返回集合中的所有成员\",\"SMOVE source destination member : 将 member 元素从 source 集合移动到 destination 集合\",\"SPOP key : 移除并返回集合中的一个随机元素\",\"SRANDMEMBER key [count] : 返回集合中一个或多个随机数\",\"SREM key member1 [member2] : 移除集合中一个或多个成员\",\"SUNION key1 [key2] : 返回所有给定集合的并集\",\"SUNIONSTORE destination key1 [key2] : 所有给定集合的并集存储在 destination 集合中\",\"SSCAN key cursor [MATCH pattern] [COUNT count] : 迭代集合中的元素\",\"Sorted Set\",\"ZADD key score1 member1 [score2 member2] : 向有序集合添加一个或多个成员，或者更新已存在成员的分数\",\"ZCARD key : 获取有序集合的成员数\",\"ZCOUNT key min max : 计算在有序集合中指定区间分数的成员数\",\"ZINCRBY key increment member : 有序集合中对指定成员的分数加上增量 increment\",\"ZINTERSTORE destination numkeys key [key ...] : 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中\",\"ZLEXCOUNT key min max : 在有序集合中计算指定字典区间内成员数量\",\"ZRANGE key start stop [WITHSCORES] : 通过索引区间返回有序集合指定区间内的成员\",\"ZRANGEBYLEX key min max [LIMIT offset count] : 通过字典区间返回有序集合的成员\",\"ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] : 通过分数返回有序集合指定区间内的成员\",\"ZRANK key member : 返回有序集合中指定成员的索引\",\"ZREM key member [member ...] : 移除有序集合中的一个或多个成员\",\"ZREMRANGEBYLEX key min max : 移除有序集合中给定的字典区间的所有成员\",\"ZREMRANGEBYRANK key start stop : 移除有序集合中给定的排名区间的所有成员\",\"ZREMRANGEBYSCORE key min max : 移除有序集合中给定的分数区间的所有成员\",\"ZREVRANGE key start stop [WITHSCORES] : 返回有序集中指定区间内的成员，通过索引，分数从高到低\",\"ZREVRANGEBYSCORE key max min [WITHSCORES] : 返回有序集中指定分数区间内的成员，分数从高到低排序\",\"ZREVRANK key member : 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序\",\"ZSCORE key member : 返回有序集中，成员的分数值\",\"ZUNIONSTORE destination numkeys key [key ...] : 计算给定的一个或多个有序集的并集，并存储在新的 key 中\",\"ZSCAN key cursor [MATCH pattern] [COUNT count] : 迭代有序集合中的元素（包括元素成员和元素分值）\",\"事务\",\"其他\",\"订阅与发布\",\"消息不会进行持久化，如果出现网络问题或者主机宕机等问题，就会出现数据丢失的情况。\",\"Stream\",\"可以进行消息的持久化和消息的主备模式。\",\"GEO\",\"主要用于存储地理位置坐标相关的信息\",\"脚本\",\"可以执行一些 Lua 脚本，例如：分布式锁\"]},\"463\":{\"h\":\"高级\",\"t\":[\"备份和恢复\",\"数据备份用两种方式做持久化：AOF和RDB\",\"RDB\",\"1. RDB是一个非常紧凑的文件，它保存了某个时间点得数据集，非常适用于数据集的备份，比如你可以在每个小时报保存一下过去24小时内的数据，同时每天保存过去30天的数据，这样即使出了问题你也可以根据需求恢复到不同版本的数据集。 \",\"2. RDB是一个紧凑的单一文件，很方便传送到另一个远端数据中心或者亚马逊的S3（可能加密），非常适用于灾难恢复。 \",\"3. RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其他IO操作，所以RDB持久化方式可以最大化redis的性能。 \",\"4. 与AOF相比，在恢复大的数据集的时候，RDB方式会更快一些。 \",\"5. 耗时、耗性能。RDB 需要经常fork子进程来保存数据集到硬盘上，当数据集比较大的时候，fork的过程是非常耗时的，可能会导致Redis在一些毫秒级内不能响应客户端的请求。如果数据集巨大并且CPU性能不是很好的情况下，这种情况会持续1秒，AOF也需要fork，但是你可以调节重写日志文件的频率来提高数据集的耐久度。 \",\"6. 不可控、丢失数据。如果你希望在redis意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么RDB不适合你。虽然你可以配置不同的save时间点(例如每隔5分钟并且对数据集有100个写的操作)，是Redis要完整的保存整个数据集是一个比较繁重的工作，你通常会每隔5分钟或者更久做一次完整的保存，万一在Redis意外宕机，你可能会丢失几分钟的数据。 \",\"AOF\",\"1. 使用AOF 会让你的Redis更加耐久: 你可以使用不同的fsync策略：无fsync，每秒fsync，每次写的时候fsync。使用默认的每秒fsync策略，Redis的性能依然很好(fsync是由后台线程进行处理的，主线程会尽力处理客户端请求)，一旦出现故障，你最多丢失1秒的数据。 \",\"2. AOF文件是一个只进行追加的日志文件，所以不需要写入seek，即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令，你也也可使用redis-check-aof工具修复这些问题。 \",\"3. Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。 \",\"4. AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。 \",\"5. 对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。 \",\"6. 根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。 \",\"集群\",\"主备\",\"优点\",\"解决数据备份问题\",\"做到读写分离，提高服务器性能\",\"缺点\",\"每个客户端连接redis实例的时候都是指定了ip和端口号的，如果所连接的redis实例因为故障下线了，而主从模式也没有提供一定的手段通知客户端另外可连接的客户端地址，因而需要手动更改客户端配置重新连接\",\"主从模式下，如果主节点由于故障下线了，那么从节点因为没有主节点而同步中断，因而需要人工进行故障转移工作\",\"无法实现动态扩容\",\"搭建\",\"主节点：由于从节点需要向主节点同步数据，所以主节点一定要进行持久化\",\"从节点：配置需要添加同步的主节点数据 slaveof 主节点IP 主节点端口\",\"哨兵\",\"优点\",\"Master 状态监测\",\"如果Master 异常，则会进行Master-slave 转换，将其中一个Slave作为Master，将之前的Master作为Slave\",\"Master-Slave切换后，master_redis.conf、slave_redis.conf和sentinel.conf的内容都会发生改变，即master_redis.conf中会多一行slaveof的配置，sentinel.conf的监控目标会随之调换\",\"缺点\",\"如果是从节点下线了，sentinel是不会对其进行故障转移的，连接从节点的客户端也无法获取到新的可用从节点\",\"无法实现动态扩容\",\"Cluster 集\",\"优点：\",\"有效的解决了redis在分布式方面的需求\",\"遇到单机内存，并发和流量瓶颈等问题时，可采用Cluster方案达到负载均衡的目的\",\"可实现动态扩容\",\"P2P模式，无中心化\",\"通过Gossip协议同步节点信息\",\"自动故障转移、Slot迁移中数据可用\",\"缺点\",\"架构比较新，最佳实践较少\",\"为了性能提升，客户端需要缓存路由表信息\",\"节点发现、reshard操作不够自动化\"]},\"464\":{\"h\":\"实践\",\"t\":[\"缓存穿透、缓存击穿、缓存雪崩\",\"缓存穿透：指不经过缓存，直接去数据库获取数据，例如通过 ID 查询时，ID的值为-1，此时次次去数据库获取数据。解决方案，判定好条件，或者也进行数据缓存，直接返回。可以采用布隆过滤器解决此问题\",\"缓存击穿：缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。可以通过分布式锁解决此问题\",\"缓存雪崩：缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是， 缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。\",\"SpringBoot AOP 实现统一缓存处理\",\"SpringBoot 缓存和数据库的数据一致性\",\"延时双删\",\"1. 删除缓存 \",\"2. 更新数据库 \",\"3. 删除缓存 \",\"异步更新\",\"1. 更新数据库 \",\"2. 通过框架监听Mysql的binlog，实现异步删除缓存。\\n\"]},\"465\":{\"h\":\"总体架构设计\",\"t\":[\"Mybatis 整体框架如下：\"]},\"466\":{\"h\":\"接口层\",\"t\":[\"MyBatis 和数据库的交互有两种方式：\",\"使用传统的 MyBatis 提供的 API；\",\"使用 Mapper 接口；\"]},\"467\":{\"h\":\"使用传统的 MyBatis 提供的 API\",\"t\":[\"这是传统的传递 Statement Id 和查询参数给 SqlSession 对象，使用 SqlSession 对象完成和数据库的交互；MyBatis 提供了非常方便和简单的 API，供用户实现对数据库的增删改查数据操作，以及对数据库连接信息和 MyBatis 自身配置信息的维护操作。\"]},\"468\":{\"h\":\"使用 Mapper 接口\",\"t\":[\"MyBatis 将配置文件中的每一个<mapper> 节点抽象为一个 Mapper 接口，而这个接口中声明的方法和跟<mapper> 节点中的<select|update|delete|insert> 节点项对应，即<select|update|delete|insert> 节点的 id 值为 Mapper 接口中的方法名称，parameterType 值表示 Mapper 对应方法的入参类型，而 resultMap 值则对应了 Mapper 接口表示的返回值类型或者返回结果集的元素类型。\",\"根据 MyBatis 的配置规范配置好后，通过 SqlSession.getMapper(XXXMapper.class)方法，MyBatis 会根据相应的接口声明的方法信息，通过动态代理机制生成一个 Mapper 实例，我们使用 Mapper 接口的某一个方法时，MyBatis 会根据这个方法的方法名和参数类型，确定 Statement Id，底层还是通过 SqlSession.select(\\\"statementId\\\",parameterObject);或者 SqlSession.update(\\\"statementId\\\",parameterObject); 等等来实现对数据库的操作， MyBatis 引用 Mapper 接口这种调用方式，纯粹是为了满足面向接口编程的需要。（其实还有一个原因是在于，面向接口的编程，使得用户在接口上可以使用注解来配置 SQL 语句，这样就可以脱离 XML 配置文件，实现“0 配置”）。\"]},\"469\":{\"h\":\"数据处理层\",\"t\":[\"数据处理层可以说是 MyBatis 的核心，从大的方面上讲，它要完成两个功能：\",\"通过传入参数构建动态 SQL 语句；\",\"SQL 语句的执行以及封装查询结果集成List<E>\"]},\"470\":{\"h\":\"通过传入参数构建动态 SQL 语句；\",\"t\":[\"动态语句生成可以说是 MyBatis 框架非常优雅的一个设计，MyBatis 通过传入的参数值，使用 Ognl 来动态地构造 SQL 语句，使得 MyBatis 有很强的灵活性和扩展性。\",\"参数映射指的是对于 java 数据类型和 jdbc 数据类型之间的转换：这里有包括两个过程：查询阶段，我们要将 java 类型的数据，转换成 jdbc 类型的数据，通过 preparedStatement.setXXX() 来设值；另一个就是对 resultset 查询结果集的 jdbcType 数据转换成 java 数据类型。\"]},\"471\":{\"h\":\"SQL 语句的执行以及封装查询结果集成\",\"t\":[\"动态 SQL 语句生成之后，MyBatis 将执行 SQL 语句，并将可能返回的结果集转换成List<E> 列表。MyBatis 在对结果集的处理中，支持结果集关系一对多和多对一的转换，并且有两种支持方式，一种为嵌套查询语句的查询，还有一种是嵌套结果集的查询。\"]},\"472\":{\"h\":\"框架支撑层\",\"t\":[\"事务管理机制\",\"事务管理机制对于 ORM 框架而言是不可缺少的一部分，事务管理机制的质量也是考量一个 ORM 框架是否优秀的一个标准。\",\"连接池管理机制\",\"由于创建一个数据库连接所占用的资源比较大， 对于数据吞吐量大和访问量非常大的应用而言，连接池的设计就显得非常重要。\",\"缓存机制\",\"为了提高数据利用率和减小服务器和数据库的压力，MyBatis 会对于一些查询提供会话级别的数据缓存，会将对某一次查询，放置到 SqlSession 中，在允许的时间间隔内，对于完全相同的查询，MyBatis 会直接将缓存结果返回给用户，而不用再到数据库中查找。\",\"SQL 语句的配置方式\",\"传统的 MyBatis 配置 SQL 语句方式就是使用 XML 文件进行配置的，但是这种方式不能很好地支持面向接口编程的理念，为了支持面向接口的编程，MyBatis 引入了 Mapper 接口的概念，面向接口的引入，对使用注解来配置 SQL 语句成为可能，用户只需要在接口上添加必要的注解即可，不用再去配置 XML 文件了，但是，目前的 MyBatis 只是对注解配置 SQL 语句提供了有限的支持，某些高级功能还是要依赖 XML 配置文件配置 SQL 语句。\"]},\"473\":{\"h\":\"引导层\",\"t\":[\"引导层是配置和启动 MyBatis 配置信息的方式。MyBatis 提供两种方式来引导 MyBatis ：基于 XML 配置文件的方式和基于 Java API 的方式。\"]},\"474\":{\"h\":\"主要构件及其相互关系\",\"t\":[\"主要的核心部件解释如下：\",\"SqlSession 作为 MyBatis 工作的主要顶层 API，表示和数据库交互的会话，完成必要数据库增删改查功能\",\"Executor MyBatis 执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成和查询缓存的维护\",\"StatementHandler 封装了 JDBC Statement 操作，负责对 JDBC statement 的操作，如设置参数、将 Statement 结果集转换成 List 集合。\",\"ParameterHandler 负责对用户传递的参数转换成 JDBC Statement 所需要的参数，\",\"ResultSetHandler 负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合；\",\"TypeHandler 负责 java 数据类型和 jdbc 数据类型之间的映射和转换\",\"MappedStatement MappedStatement 维护了一条<select|update|delete|insert>节点的封装，\",\"SqlSource 负责根据用户传递的 parameterObject，动态地生成 SQL 语句，将信息封装到 BoundSql 对象中，并返回\",\"BoundSql 表示动态生成的 SQL 语句以及相应的参数信息\",\"Configuration MyBatis 所有的配置信息都维持在 Configuration 对象之中。\"]},\"475\":{\"c\":[\"it\"]},\"476\":{\"h\":\"流程简解\"},\"477\":{\"h\":\"流程简解\"},\"478\":{\"h\":\"\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE configuration PUBLIC \\\"-//mybatis.org//DTD Config 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-config.dtd\\\"> <!-- 根标签 --> <configuration> <properties> <property name=\\\"driver\\\" value=\\\"com.mysql.cj.jdbc.Driver\\\"/> <property name=\\\"url\\\" value=\\\"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8&amp;useSSL=false&amp;autoReconnect=true\\\"/> <property name=\\\"username\\\" value=\\\"root\\\"/> <property name=\\\"password\\\" value=\\\"123456\\\"/> </properties> <!-- 环境，可以配置多个，default：指定采用哪个环境 --> <environments default=\\\"test\\\"> <environment id=\\\"test\\\"> <!-- 事务管理器，JDBC类型的事务管理器 --> <transactionManager type=\\\"JDBC\\\"/> <!-- 数据源，池类型的数据源 --> <dataSource type=\\\"POOLED\\\"> <property name=\\\"driver\\\" value=\\\"${driver}\\\"/> <!-- 配置了properties，所以可以直接引用 --> <property name=\\\"url\\\" value=\\\"${url}\\\"/> <property name=\\\"username\\\" value=\\\"${username}\\\"/> <property name=\\\"password\\\" value=\\\"${password}\\\"/> </dataSource> </environment> </environments> <mappers> <mapper resource=\\\"TeacherMapper.xml\\\"/> </mappers> </configuration> \"]},\"479\":{\"h\":\"\",\"t\":[\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <!-- mapper:根标签，namespace：命名空间，随便写，一般保证命名空间唯一 --> <mapper namespace=\\\"TeacherMapper\\\"> <!-- statement，内容：sql语句。id：唯一标识，随便写，在同一个命名空间下保持唯一 resultType：sql语句查询结果集的封装类型,tb_user即为数据库中的表 --> <select id=\\\"selectTest\\\" resultType=\\\"org.apache.ibatis.test.Teacher\\\"> select * from teacher where id = #{id} </select> </mapper> \"]},\"480\":{\"h\":\"\",\"t\":[\"log4j.rootLogger=DEBUG, stdout log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n \"]},\"481\":{\"h\":\"\",\"t\":[\"package org.apache.ibatis.test; public class Teacher { private Long id; private String name; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public String toString() { return \\\"Teacher{\\\" + \\\"id=\\\" + id + \\\", name='\\\" + name + '\\\\'' + '}'; } } \"]},\"482\":{\"h\":\"\",\"t\":[\"package org.apache.ibatis.test; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.InputStream; public class Test { public static void main(String[] args) throws IOException { // 指定全局配置文件 String resource = \\\"mybatis-config.xml\\\"; // 读取配置文件 InputStream inputStream = Resources.getResourceAsStream(resource); // 构建sqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // 获取sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 操作CRUD，第一个参数：指定statement，规则：命名空间+“.”+statementId // 第二个参数：指定传入sql的参数：这里是用户id Teacher test = sqlSession.selectOne(\\\"TeacherMapper.selectTest\\\", 1); System.out.println(test.getName()); } } \"]},\"483\":{\"h\":\"流程\",\"t\":[\"通过 mybatis-config.xml 进行初始化创建出 SqlSessionFactory。其内部是通过创建XMLConfigBuilder对象，然后自己进行解析 XML文件，把文件内容解析封装为Configuration对象，最后由SqlSessionFactory进行封装为SqlSessionFactory对象来完成SqlSessionFactory的创建。\",\"通过sqlSessionFactory开启sqlSession进行执行对应 mapper 方法。\"]},\"484\":{\"c\":[\"it\"]},\"485\":{\"h\":\"包详解\"},\"486\":{\"h\":\"包详解\"},\"487\":{\"h\":\"包\"},\"488\":{\"h\":\"背景知识\",\"t\":[\"工厂模式\"]},\"489\":{\"h\":\"讲解\",\"t\":[\"这里并没有特别需要说的东西，只是基础的事务管理。但是这里很好的实现了transaction和datasource包的隔离，transaction通过datasource抽象出来的接口实现了业务隔离，事务管理器可以通过配置文件选择对应的数据源进行管理。\"]},\"490\":{\"h\":\"包\"},\"491\":{\"h\":\"背景知识\",\"t\":[\"模版模式\",\"易用性\"]},\"492\":{\"h\":\"讲解\"},\"493\":{\"h\":\"模版模式\",\"t\":[\"某些类通用的一些处理方法一致，但是处理对象可能存在不同，此时可以使用模版方法，抽取父类编写通用处理方法，子类只需实现获取对象的方法即可。\",\"public class SQL extends AbstractSQL<SQL> { @Override public SQL getSelf() { return this; } } public abstract class AbstractSQL<T> { private static final String AND = \\\") \\\\nAND (\\\"; private static final String OR = \\\") \\\\nOR (\\\"; private final SQLStatement sql = new SQLStatement(); public abstract T getSelf(); public T UPDATE(String table) { sql().statementType = SQLStatement.StatementType.UPDATE; sql().tables.add(table); return getSelf(); } public T SET(String sets) { sql().sets.add(sets); return getSelf(); } ...... } \",\"以上代码可知：\",\"若用户需要自定SQL 如 ExplainSQL，从而进行性能调优，此时只需要继承 AbstractSQL即可，而无需编写原方法。\"]},\"494\":{\"h\":\"易用性\",\"t\":[\"为了用户使用方便和构建 SQL的直观性，AbstractSQL命名采用了全大写的模式，以此让用户更加易用。\"]},\"495\":{\"h\":\"类\",\"t\":[\" public int insert(String sql, Object... args) throws SQLException { PreparedStatement ps; if (useGeneratedKeySupport) { ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); } else { ps = connection.prepareStatement(sql); } try { setParameters(ps, args); ps.executeUpdate(); if (useGeneratedKeySupport) { List<Map<String, Object>> keys = getResults(ps.getGeneratedKeys()); if (keys.size() == 1) { Map<String, Object> key = keys.get(0); Iterator<Object> i = key.values().iterator(); if (i.hasNext()) { Object genkey = i.next(); if (genkey != null) { try { return Integer.parseInt(genkey.toString()); } catch (NumberFormatException e) { //ignore, no numeric key support } } } } } return NO_GENERATED_KEY; } finally { try { ps.close(); } catch (SQLException e) { //ignore } } } public int update(String sql, Object... args) throws SQLException { PreparedStatement ps = connection.prepareStatement(sql); try { setParameters(ps, args); return ps.executeUpdate(); } finally { try { ps.close(); } catch (SQLException e) { //ignore } } } \",\"此类在Mybatis中没有任何的使用，此类应该只是为了提供给用户，让用户可以自定义执行相关 SQL，分析其方法本质为原始JDBC相关操作流程。\"]},\"496\":{\"h\":\"类\",\"t\":[\" private void executeFullScript(Reader reader) { StringBuilder script = new StringBuilder(); try { BufferedReader lineReader = new BufferedReader(reader); String line; while ((line = lineReader.readLine()) != null) { script.append(line); script.append(LINE_SEPARATOR); } String command = script.toString(); println(command); executeStatement(command); commitConnection(); } catch (Exception e) { String message = \\\"Error executing: \\\" + script + \\\". Cause: \\\" + e; printlnError(message); throw new RuntimeSqlException(message, e); } } private void executeLineByLine(Reader reader) { StringBuilder command = new StringBuilder(); try { BufferedReader lineReader = new BufferedReader(reader); String line; while ((line = lineReader.readLine()) != null) { handleLine(command, line); } commitConnection(); checkForMissingLineTerminator(command); } catch (Exception e) { String message = \\\"Error executing: \\\" + command + \\\". Cause: \\\" + e; printlnError(message); throw new RuntimeSqlException(message, e); } } private void handleLine(StringBuilder command, String line) throws SQLException { String trimmedLine = line.trim(); if (lineIsComment(trimmedLine)) { Matcher matcher = DELIMITER_PATTERN.matcher(trimmedLine); if (matcher.find()) { delimiter = matcher.group(5); } println(trimmedLine); } else if (commandReadyToExecute(trimmedLine)) { command.append(line.substring(0, line.lastIndexOf(delimiter))); command.append(LINE_SEPARATOR); println(command); executeStatement(command.toString()); command.setLength(0); } else if (trimmedLine.length() > 0) { command.append(line); command.append(LINE_SEPARATOR); } } \",\"此类的核心方法如上，可看出其本质和SqlRunner类一致。\"]},\"497\":{\"h\":\"包\",\"t\":[\"根据包结构可看出，Mybatis抽象出DataSourceFactory进行生成对应的DataSource。可以知道DataSourceFactory的设计是采用了工厂模式。\"]},\"498\":{\"h\":\"背景知识\",\"t\":[\"数据库连接池\",\"JNDI\",\"设计模式：工厂模式、模版模式、代理模式\"]},\"499\":{\"h\":\"讲解\"},\"500\":{\"h\":\"数据库连接池\",\"t\":[\"数据库在建立连接的时候需要走 TCP 的三次握手，如果在三次握手之后却只进行了一次查询这就会浪费较多的资源，所以想到了池化思想，对数据库连接进行池化，减少数据库连接的创建和销毁的资源浪费。 数据库连接池的本质就是建立一个集合进行存储创建的连接，当有需要查询的时候从缓存的连接中返回一个，等使用完毕不再进行销毁而是再次放回到缓存中，此时就需要对连接部分方法的重写，但是 Mybatis是通过代理进行处理。代码如下：\",\" @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { String methodName = method.getName(); // 当调用的方法是close 的时候不去进行真正的关闭，而是将连接放回连接池中 if (CLOSE.hashCode() == methodName.hashCode() && CLOSE.equals(methodName)) { dataSource.pushConnection(this); return null; } else { try { if (!Object.class.equals(method.getDeclaringClass())) { // issue #579 toString() should never fail // throw an SQLException instead of a Runtime checkConnection(); } return method.invoke(realConnection, args); } catch (Throwable t) { throw ExceptionUtil.unwrapThrowable(t); } } } \"]},\"501\":{\"h\":\"JNDI\",\"t\":[\"TODO 待了解\"]},\"502\":{\"h\":\"设计模式\",\"t\":[\"即使工厂模式，也是模版模式\",\"代理模式\",\" public PooledConnection(Connection connection, PooledDataSource dataSource) { this.hashCode = connection.hashCode(); this.realConnection = connection; this.dataSource = dataSource; this.createdTimestamp = System.currentTimeMillis(); this.lastUsedTimestamp = System.currentTimeMillis(); this.valid = true; // 创建 connection 的代理对象，进行代理所有的请求 this.proxyConnection = (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(), IFACES, this); } public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { String methodName = method.getName(); // 拦截调用close方法，不去进行真正的关闭，而是将连接放回连接池中 if (CLOSE.hashCode() == methodName.hashCode() && CLOSE.equals(methodName)) { dataSource.pushConnection(this); return null; } else { try { if (!Object.class.equals(method.getDeclaringClass())) { // issue #579 toString() should never fail // throw an SQLException instead of a Runtime checkConnection(); } return method.invoke(realConnection, args); } catch (Throwable t) { throw ExceptionUtil.unwrapThrowable(t); } } } \"]},\"503\":{\"h\":\"包\",\"t\":[\"下图是Mybatis中异常的关系图：\"]},\"504\":{\"h\":\"背景知识\",\"t\":[\"工厂模式\",\"异常的封装\"]},\"505\":{\"h\":\"讲解\"},\"506\":{\"h\":\"工厂模式\",\"t\":[\"public class ExceptionFactory { private ExceptionFactory() { // Prevent Instantiation } public static RuntimeException wrapException(String message, Exception e) { return new PersistenceException(ErrorContext.instance().message(message).cause(e).toString(), e); } } \",\"私有构造函数：导致该工厂无法创建出对应的对象\",\"静态wrapException方法，用于通过异常信息和异常类型进行封装异常为Mybatis中的异常类型。全局通过ExceptionFactory.wrapException()进行生产出对应的异常对象\"]},\"507\":{\"h\":\"异常类型\",\"t\":[\"IbatisException：Mybatis中最高的异常，但是直接继承该类的子类只有PersistenceException，而且该类也添加了@Deprecated说明以后可能去除。\",\"PersistenceException： 译为持久化异常。Mybatis对应是持久化框架，后期可能该异常类型为Mybatis所有异常的父类。\",\"TooManyResultsException：译为多条返回结果异常。用处为selectOne却返回多条记录时所抛出的异常。\",\"TypeException: 译为类型异常。当 Mybatis 中需要类型转化时，若转换失败则会抛出该异常。\",\"CacheException: 译为缓存异常。当Mybatis读取缓存中数据出现问题时则会抛出该异常。\",\"ParsingException: 译为解析异常。当前代码未看到使用。\",\"ScriptingException: 译为脚本异常。\",\"ResultMapException: 译为结果映射异常。在结果转换为对应类型的对象时，若转换失败则会抛出异常。\",\"DataSourceException: 译为数据源异常。在初始化数据源时若出现错误则会抛出该异常。\",\"TransactionException: 译为事务异常。在给connection开启事务时若失败则会抛出该异常。\",\"BuilderException: 译为建造异常。在建造对象失败时会抛出该异常。\",\"SqlSessionException: 译为SqlSession的异常。基本只会在SqlSessionManager中使用，主要是SqlSession使用过程中的异常。\",\"ReflectionException: 译为反射异常。基本只会在反射使用时会抛出该异常。\",\"ExecutorException: 译为执行器异常。会在线程操作数据库的时候抛出该异常。\",\"BatchExecutorException：译为批量执行器异常。会在线程批量操作数据库的时候抛出该异常。\",\"BindingException: 译为绑定异常。主要是 mapper映射的时候会抛出该异常。\",\"LogException: 译为日志异常。目前只在LogFactory构建日志相关的时候才会抛出该异常。\",\"PluginException: 译为插件异常。目前只在Plugin中使用，在获取插件信息时候会抛出该异常。\",\"Mybatis类型主要是根据业务相关包放在一起，所以命名绝大多数都能够直观的看到原因所在。\"]},\"508\":{\"h\":\"和 包\"},\"509\":{\"h\":\"背景知识\"},\"510\":{\"h\":\"讲解\"},\"511\":{\"c\":[\"it\"]},\"512\":{\"h\":\"流程详解\"},\"513\":{\"c\":[\"it\"]},\"514\":{\"h\":\"插件机制\"},\"515\":{\"c\":[\"it\"]},\"516\":{\"h\":\"缓存机制\"},\"517\":{\"c\":[\"it\"]},\"518\":{\"h\":\"源码环境搭建\"},\"519\":{\"h\":\"下载代码\",\"t\":[\"git clone https://github.com/spring-projects/spring-framework.git \"]},\"520\":{\"h\":\"修改配置\",\"t\":[\"注释掉settings.gradle中的include \\\"spring-aspects\\\"\"]},\"521\":{\"h\":\"添加测试包\",\"t\":[\"创建一个新的包spring-example,修改build.gradle文件为一下内容\",\"plugins { id 'java' } group 'org.springframework' version '5.2.17.BUILD-SNAPSHOT' repositories { mavenCentral() } dependencies { compile(project(\\\":spring-beans\\\")) compile(project(\\\":spring-core\\\")) compile(project(\\\":spring-context\\\")) compile(project(\\\":spring-webmvc\\\")) compile(project(\\\":spring-jdbc\\\")) compile(project(\\\":spring-orm\\\")) compile(project(\\\":spring-tx\\\")) compile(project(\\\":spring-web\\\")) compile(project(\\\":spring-context-indexer\\\")) compile(project(\\\":spring-context-support\\\")) compile(project(\\\":spring-expression\\\")) compile(project(\\\":spring-instrument\\\")) compile(project(\\\":spring-jcl\\\")) compile(project(\\\":spring-jms\\\")) compile(project(\\\":spring-messaging\\\")) compile(project(\\\":spring-oxm\\\")) compile(project(\\\":spring-test\\\")) compile(project(\\\":spring-webflux\\\")) compile(project(\\\":spring-websocket\\\")) // compile(project(\\\":spring-aspects\\\")) compile(\\\"org.aspectj:aspectjweaver:1.9.7\\\") compile(project(\\\":spring-aop\\\")) testCompile group: 'junit', name: 'junit', version: '4.12' } test { useJUnitPlatform() } \",\"添加配置文件类，用户加载相关的配置\",\"package config; import bean.CustomBeanDefinitionRegistryPostProcessor; import bean.Person; import bean.TestBeanFactoryPostProcessor; import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor; import org.springframework.context.annotation.*; import bean.User; @Configuration @EnableAspectJAutoProxy public class UserConfig { @Bean public User user() { return new User(\\\"zhang\\\", \\\"ada\\\"); } @Bean public Person person(){ return new Person(user()); } @Bean public TestBeanFactoryPostProcessor testBeanFactoryPostProcessor(){ return new TestBeanFactoryPostProcessor(); } @Bean public BeanDefinitionRegistryPostProcessor customBeanDefinitionRegistryPostProcessor(){ return new CustomBeanDefinitionRegistryPostProcessor(); } @Bean public AspectTest aspectTest(){ return new AspectTest(); } } \",\"创建测试类\",\"package test; import bean.User; import config.UserConfig; import org.springframework.beans.factory.config.BeanDefinition; import org.springframework.context.ApplicationContext; import org.springframework.context.annotation.AnnotationConfigApplicationContext; public class UserTest { public static void main(String[] args) { // 获取容器 AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(UserConfig.class); BeanDefinition user1 = ac.getBeanDefinition(\\\"person\\\"); // 获取 beanUser user = (User) ac.getBean(\\\"user\\\"); System.out.println(user.toString()); } } \"]},\"522\":{\"h\":\"本人代码库\",\"t\":[\"https://gitee.com/jiuxialb/spring-framework.git \"]},\"523\":{\"c\":[\"it\"]},\"524\":{\"h\":\"Spring 整体架构\"},\"525\":{\"h\":\"Spring 整体架构\"},\"526\":{\"c\":[\"it\"]},\"527\":{\"h\":\"Spring 初始化流程\"},\"528\":{\"h\":\"Spring 初始化流程\",\"t\":[\"spring 的初始化本质为 ApplicationContext 对象的构建，这里通过注解进行构建 AnnotationConfigApplicationContext 。构建的主要大的步骤为：\",\"调用无参构造方法\",\"注册类\",\"刷新\",\"整个过程极为重要的为刷新，而且后续也都在讲述 刷新的步骤。\",\"以下是 ApplicationContext 对象构建的流程图：\"]},\"529\":{\"h\":\"什么是 ApplicationContext\",\"t\":[\"Spring 是 IOC 的本质其实是自己进行管理 Bean 对象，然后通过抽象出来的流程根据对应的配置进行注入 Bean 对象，但是如何管理 Bean 对象，那就需要一个容器进行管理。这个容器就是 BeanFactory，但是整个 Spring 系统又存在很多功能，用户就需要使用多个系统对象，所以又提出一个 ApplicationContext 上下文对象，能够通过该对象获得更多的功能。\"]},\"530\":{\"h\":\"无参 ApplicationContext\",\"t\":[\"Spring 中含有多个 ApplicationContext ，不同的 ApplicationContext 表示通过不同的方法构建上下文对象，例如：ClassPathXmlApplicationContext 、FileSystemXmlApplicationContext。一般对应的 读取方法（reader）不一致。此处初始化了 AnnotationConfigApplicationContext 对应的 AnnotatedBeanDefinitionReader。代码如下：\",\" public AnnotationConfigApplicationContext() { this.reader = new AnnotatedBeanDefinitionReader(this); this.scanner = new ClassPathBeanDefinitionScanner(this); } \"]},\"531\":{\"h\":\"注册对应的 class\",\"t\":[\"通过注册的类来进行扫描相关注解实现组件的注册。如下代码可以看出通过 reader 进行注册类信息：\",\" @Override public void register(Class<?>... componentClasses) { // 注册的组件类不能为空 Assert.notEmpty(componentClasses, \\\"At least one component class must be specified\\\"); // this.reader = AnnotatedBeanDefinitionReader this.reader.register(componentClasses); } \"]},\"532\":{\"h\":\"注册对象\",\"t\":[\"通过跟踪 reader.register 方法，可以看到主要是调用 doRegisterBean 方法进行注册的。\",\" private <T> void doRegisterBean(Class<T> beanClass, @Nullable String name, @Nullable Class<? extends Annotation>[] qualifiers, @Nullable Supplier<T> supplier, @Nullable BeanDefinitionCustomizer[] customizers) { // 通过类创建 beanDefinition AnnotatedGenericBeanDefinition abd = new AnnotatedGenericBeanDefinition(beanClass); // conditional 判断是否跳过注册 if (this.conditionEvaluator.shouldSkip(abd.getMetadata())) { return; } // 设置 beanDefinition 的 生产者 abd.setInstanceSupplier(supplier); // 获取 beanDefinition 的 作用域 Scopt singleton ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(abd); abd.setScope(scopeMetadata.getScopeName()); // 若传入 beanName 则用传入的，没传入在用默认的 类名首字母小写 String beanName = (name != null ? name : this.beanNameGenerator.generateBeanName(abd, this.registry)); // 处理通用注解 Lazy Primary DependsOn Role Description，给 beanDefinition 设置对应的数据 AnnotationConfigUtils.processCommonDefinitionAnnotations(abd); // 处理 @Qualifier 注解 if (qualifiers != null) { for (Class<? extends Annotation> qualifier : qualifiers) { if (Primary.class == qualifier) { abd.setPrimary(true); } else if (Lazy.class == qualifier) { abd.setLazyInit(true); } else { abd.addQualifier(new AutowireCandidateQualifier(qualifier)); } } } // 处理自定义的 BeanDefinitionCustomizer if (customizers != null) { for (BeanDefinitionCustomizer customizer : customizers) { customizer.customize(abd); } } // 创建 BeanDefinitionHolder BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(abd, beanName); definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, this.registry); // 注册 beanDefinition BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, this.registry); } \",\"根据以上代码可以看出本质为 获取类的注解和对应的类型信息进行构建出一个 definitionHolder。然后进行注册，而 definitionHolder 含有 BeanDefinition 的属性，这里主要是记录了类的相关信息。\"]},\"533\":{\"h\":\"\",\"t\":[\"该方法主要是进行刷新前的属性设置，清除上一次刷新缓存的数据和初始化一些配置。设置流程如下图： ![[✅Spring-prepareRefresh|500x500]] 代码如下：\",\"protected void prepareRefresh() { // 设置启动时间 this.startupDate = System.currentTimeMillis(); // 更新状态 this.closed.set(false); this.active.set(true); // 检测是否开启 debug if (logger.isDebugEnabled()) { if (logger.isTraceEnabled()) { logger.trace(\\\"Refreshing \\\" + this); } else { logger.debug(\\\"Refreshing \\\" + getDisplayName()); } } // initialize any placeholder property sources in the context environment. initPropertySources(); // Validate that all properties marked as required are resolvable: // see ConfigurablePropertyResolver#setRequiredProperties getEnvironment().validateRequiredProperties(); // Store pre-refresh ApplicationListeners... if (this.earlyApplicationListeners == null) { this.earlyApplicationListeners = new LinkedHashSet<>(this.applicationListeners); } else { // Reset local application listeners to pre-refresh state. this.applicationListeners.clear(); this.applicationListeners.addAll(this.earlyApplicationListeners); } // Allow for the collection of early ApplicationEvents, // to be published once the multicaster is available... this.earlyApplicationEvents = new LinkedHashSet<>(); } \"]},\"534\":{\"h\":\"\",\"t\":[\"该方法的主要是两个操作：\",\"设置 BeanFactory 的 id，标志是一个新的 BeanFactory\",\"获取当前的 BeanFactory\",\" protected ConfigurableListableBeanFactory obtainFreshBeanFactory() { refreshBeanFactory(); return getBeanFactory(); } \"]},\"535\":{\"h\":\"\",\"t\":[\"本人认为此处是进行初始化 BeanFactory，添加了一些默认的配置，相关代码如下：\",\"protected void prepareBeanFactory(ConfigurableListableBeanFactory beanFactory) { // 告诉内部bean工厂使用上下文的类装入器等。 beanFactory.setBeanClassLoader(getClassLoader()); // 设置表达式类#{} beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader())); // 设置属性编辑器 beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment())); // 使用上下文回调来配置bean工厂 beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this)); beanFactory.ignoreDependencyInterface(EnvironmentAware.class); beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class); beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class); beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class); beanFactory.ignoreDependencyInterface(MessageSourceAware.class); beanFactory.ignoreDependencyInterface(ApplicationContextAware.class); //在普通工厂中，BeanFactory接口未注册为可解析类型。MessageSource作为bean注册(并找到用于自动装配) beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory); beanFactory.registerResolvableDependency(ResourceLoader.class, this); beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this); beanFactory.registerResolvableDependency(ApplicationContext.class, this); // Register early post-processor for detecting inner beans as ApplicationListeners. beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this)); // Detect a LoadTimeWeaver and prepare for weaving, if found. if (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) { beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory)); // Set a temporary ClassLoader for type matching. beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader())); } // Register default environment beans. if (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) { beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment()); } if (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) { beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties()); } if (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) { beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment()); } } \"]},\"536\":{\"h\":\"\",\"t\":[\"此处默认是没有实现的，但是 web 相关的 ApplicationContext 是进行了实现，添加了配置，此时是 BeanFactory 初始化完成，之后会执行此操作，此时可以进行 BeanFactory 的某些功能的自定义，例如结合 Tomcat 加载 Servlet。下面代码是 AbstractRefreshableWebApplicationContext ：\",\" protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) { beanFactory.addBeanPostProcessor(new ServletContextAwareProcessor(this.servletContext, this.servletConfig)); beanFactory.ignoreDependencyInterface(ServletContextAware.class); beanFactory.ignoreDependencyInterface(ServletConfigAware.class); WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, this.servletContext); WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, this.servletContext, this.servletConfig); } \"]},\"537\":{\"h\":\"\",\"t\":[\"根据方法名可以看出此处是执行 BeanFactory 的 PostProcessor，对于实现 BeanFactoryPostProcessor 接口的类也就是在这时候进行执行的，此时可以对 BeanFactory 进行一系列的处理。例如：AOP 的织入、@Configuration注解的处理 等。 该方法主要有两步：\",\"执行 BeanFactoryPostProcessor\",\"判断是否需要 AOP\"]},\"538\":{\"h\":\"执行 BeanFactoryPostProcessor\",\"t\":[\"跟进代码可以看出执行 BeanFactoryPostProcessor 的主要方法是 invokeBeanFactoryPostProcessors，流程图如下：\",\"![[✅spring-invokeBeanFactoryPostProcessors|500x500]]\",\"这里主要的功能是执行 BeanFactoryPostProcessor。这里会优先执行配置系统自带的 BeanFactoryPostProcessor 进行初始化部分功能，例如@Configuration 的配置类中的 @Bean 也会在此时进行加载到 BeanDefinition。\",\"默认的 BeanFactoryPostProcessor 有 internalConfigurationAnnotationProcessor、internalEventListenerFactory、internalEventListenerProcessor、internalAutowiredAnnotationProcessor 具体的代码如下：\",\"public static void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors) { // Invoke BeanDefinitionRegistryPostProcessors first, if any. Set<String> processedBeans = new HashSet<>(); // 判断是否是 BeanDefinitionRegistry if (beanFactory instanceof BeanDefinitionRegistry) { BeanDefinitionRegistry registry = (BeanDefinitionRegistry)beanFactory; List<BeanFactoryPostProcessor> regularPostProcessors = new ArrayList<>(); List<BeanDefinitionRegistryPostProcessor> registryProcessors = new ArrayList<>(); for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) { if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) { BeanDefinitionRegistryPostProcessor registryProcessor = (BeanDefinitionRegistryPostProcessor)postProcessor; registryProcessor.postProcessBeanDefinitionRegistry(registry); registryProcessors.add(registryProcessor); } else { regularPostProcessors.add(postProcessor); } } // Do not initialize FactoryBeans here: We need to leave all regular beans // uninitialized to let the bean factory post-processors apply to them! // Separate between BeanDefinitionRegistryPostProcessors that implement // PriorityOrdered, Ordered, and the rest. List<BeanDefinitionRegistryPostProcessor> currentRegistryProcessors = new ArrayList<>(); // First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered. String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) { if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) { currentRegistryProcessors .add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); } } sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry); currentRegistryProcessors.clear(); // Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered. postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) { if (!processedBeans.contains(ppName) && beanFactory.isTypeMatch(ppName, Ordered.class)) { currentRegistryProcessors .add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); } } sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry); currentRegistryProcessors.clear(); // Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear. boolean reiterate = true; while (reiterate) { reiterate = false; postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) { if (!processedBeans.contains(ppName)) { currentRegistryProcessors .add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); reiterate = true; } } sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry); currentRegistryProcessors.clear(); } // Now, invoke the postProcessBeanFactory callback of all processors handled so far. invokeBeanFactoryPostProcessors(registryProcessors, beanFactory); invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory); } else { // Invoke factory processors registered with the context instance. invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory); } // Do not initialize FactoryBeans here: We need to leave all regular beans // uninitialized to let the bean factory post-processors apply to them! String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false); // Separate between BeanFactoryPostProcessors that implement PriorityOrdered, // Ordered, and the rest. List<BeanFactoryPostProcessor> priorityOrderedPostProcessors = new ArrayList<>(); List<String> orderedPostProcessorNames = new ArrayList<>(); List<String> nonOrderedPostProcessorNames = new ArrayList<>(); for (String ppName : postProcessorNames) { if (processedBeans.contains(ppName)) { // skip - already processed in first phase above } else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) { priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class)); } else if (beanFactory.isTypeMatch(ppName, Ordered.class)) { orderedPostProcessorNames.add(ppName); } else { nonOrderedPostProcessorNames.add(ppName); } } // First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered. sortPostProcessors(priorityOrderedPostProcessors, beanFactory); invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory); // Next, invoke the BeanFactoryPostProcessors that implement Ordered. List<BeanFactoryPostProcessor> orderedPostProcessors = new ArrayList<>(orderedPostProcessorNames.size()); for (String postProcessorName : orderedPostProcessorNames) { orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class)); } sortPostProcessors(orderedPostProcessors, beanFactory); invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory); // Finally, invoke all other BeanFactoryPostProcessors. List<BeanFactoryPostProcessor> nonOrderedPostProcessors = new ArrayList<>(nonOrderedPostProcessorNames.size()); for (String postProcessorName : nonOrderedPostProcessorNames) { nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class)); } invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory); // Clear cached merged bean definitions since the post-processors might have // modified the original metadata, e.g. replacing placeholders in values... beanFactory.clearMetadataCache(); } \"]},\"539\":{\"h\":\"是否需要 AOP\",\"t\":[\"通过加入 BeanPostProcessor 实现 AOP 的，代码如下：\",\" if (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) { beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory)); beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader())); } \"]},\"540\":{\"h\":\"\",\"t\":[\"这里代码 BeanFactory 存储的 BeanPostProcessor 是使用的 List，所在这里根据相关注解进行排序添加，后续执行时只需要遍历执行即可。代码具体流程如下： ![[✅spring-registerBeanPostProcessors|500x500]] 相关代码如下：\",\" public static void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext) { String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false); // Register BeanPostProcessorChecker that logs an info message when // a bean is created during BeanPostProcessor instantiation, i.e. when // a bean is not eligible for getting processed by all BeanPostProcessors. int beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + 1 + postProcessorNames.length; beanFactory.addBeanPostProcessor(new BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount)); // Separate between BeanPostProcessors that implement PriorityOrdered, // Ordered, and the rest. List<BeanPostProcessor> priorityOrderedPostProcessors = new ArrayList<>(); List<BeanPostProcessor> internalPostProcessors = new ArrayList<>(); List<String> orderedPostProcessorNames = new ArrayList<>(); List<String> nonOrderedPostProcessorNames = new ArrayList<>(); for (String ppName : postProcessorNames) { if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) { BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); priorityOrderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) { internalPostProcessors.add(pp); } } else if (beanFactory.isTypeMatch(ppName, Ordered.class)) { orderedPostProcessorNames.add(ppName); } else { nonOrderedPostProcessorNames.add(ppName); } } // First, register the BeanPostProcessors that implement PriorityOrdered. sortPostProcessors(priorityOrderedPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors); // Next, register the BeanPostProcessors that implement Ordered. List<BeanPostProcessor> orderedPostProcessors = new ArrayList<>(orderedPostProcessorNames.size()); for (String ppName : orderedPostProcessorNames) { BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); orderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) { internalPostProcessors.add(pp); } } sortPostProcessors(orderedPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, orderedPostProcessors); // Now, register all regular BeanPostProcessors. List<BeanPostProcessor> nonOrderedPostProcessors = new ArrayList<>(nonOrderedPostProcessorNames.size()); for (String ppName : nonOrderedPostProcessorNames) { BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class); nonOrderedPostProcessors.add(pp); if (pp instanceof MergedBeanDefinitionPostProcessor) { internalPostProcessors.add(pp); } } registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors); // Finally, re-register all internal BeanPostProcessors. sortPostProcessors(internalPostProcessors, beanFactory); registerBeanPostProcessors(beanFactory, internalPostProcessors); // Re-register post-processor for detecting inner beans as ApplicationListeners, // moving it to the end of the processor chain (for picking up proxies etc). beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(applicationContext)); } \"]},\"541\":{\"h\":\"\",\"t\":[\"初始化消息源的流程图如下： ![[✅spring-initMessageSource|500x500]] 相关代码如下：\",\" protected void initMessageSource() { ConfigurableListableBeanFactory beanFactory = getBeanFactory(); if (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) { this.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class); // Make MessageSource aware of parent MessageSource. if (this.parent != null && this.messageSource instanceof HierarchicalMessageSource) { HierarchicalMessageSource hms = (HierarchicalMessageSource) this.messageSource; if (hms.getParentMessageSource() == null) { // Only set parent context as parent MessageSource if no parent MessageSource // registered already. hms.setParentMessageSource(getInternalParentMessageSource()); } } if (logger.isTraceEnabled()) { logger.trace(\\\"Using MessageSource [\\\" + this.messageSource + \\\"]\\\"); } } else { // 使用空MessageSource来接受getMessage调用。 DelegatingMessageSource dms = new DelegatingMessageSource(); dms.setParentMessageSource(getInternalParentMessageSource()); this.messageSource = dms; beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource); if (logger.isTraceEnabled()) { logger.trace(\\\"No '\\\" + MESSAGE_SOURCE_BEAN_NAME + \\\"' bean, using [\\\" + this.messageSource + \\\"]\\\"); } } } \"]},\"542\":{\"h\":\"\",\"t\":[\"初始化应用事件的广播流程如下： ![[✅spring-initApplicationEventMulticaster|500x500]] 相关代码如下：\",\" protected void initApplicationEventMulticaster() { ConfigurableListableBeanFactory beanFactory = getBeanFactory(); if (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) { this.applicationEventMulticaster = beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class); if (logger.isTraceEnabled()) { logger.trace(\\\"Using ApplicationEventMulticaster [\\\" + this.applicationEventMulticaster + \\\"]\\\"); } } else { this.applicationEventMulticaster = new SimpleApplicationEventMulticaster(beanFactory); beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster); if (logger.isTraceEnabled()) { logger.trace(\\\"No '\\\" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + \\\"' bean, using \\\" + \\\"[\\\" + this.applicationEventMulticaster.getClass().getSimpleName() + \\\"]\\\"); } } } \"]},\"543\":{\"h\":\"\",\"t\":[\"该方法并为进行相关处理，而是留给了外部处理，例如 springboot 会初始化 web 容器。\"]},\"544\":{\"h\":\"\",\"t\":[\"该方法主要是注册相关的监听器，本质也是通过观察者模式实现。相关代码如下：\",\" protected void registerListeners() { // Register statically specified listeners first. for (ApplicationListener<?> listener : getApplicationListeners()) { getApplicationEventMulticaster().addApplicationListener(listener); } // Do not initialize FactoryBeans here: We need to leave all regular beans // uninitialized to let post-processors apply to them! String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, true, false); for (String listenerBeanName : listenerBeanNames) { getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName); } // Publish early application events now that we finally have a multicaster... Set<ApplicationEvent> earlyEventsToProcess = this.earlyApplicationEvents; this.earlyApplicationEvents = null; if (!CollectionUtils.isEmpty(earlyEventsToProcess)) { for (ApplicationEvent earlyEvent : earlyEventsToProcess) { getApplicationEventMulticaster().multicastEvent(earlyEvent); } } } \"]},\"545\":{\"h\":\"附录\"},\"546\":{\"h\":\"BeanDefinition的默认实现类\",\"t\":[\"public abstract class AbstractBeanDefinition extends BeanMetadataAttributeAccessor implements BeanDefinition, Cloneable { //默认作用域名称的常量：等效于单例 public static final String SCOPE_DEFAULT = \\\"\\\"; //自动装配的一些常量 // autowireMode = 0，默认值，未激活Autowiring。 // bean 标签的 autowire 属性值为 no // 1、在xml中需要手动指定依赖注入对象 配置 property标签或者 constructor-arg标签 // 2、使用 @Autowired 注解，autowireMode 的值也是 0 public static final int AUTOWIRE_NO = AutowireCapableBeanFactory.AUTOWIRE_NO; //autowireMode = 1，根据set方法的的名称作为Bean名称进行依赖查找 //(去掉set，并尝试将首字母变为小写)，并将对象设置到该set方法的参数上 // bean 标签的 autowire 属性值配置为 byName public static final int AUTOWIRE_BY_NAME = AutowireCapableBeanFactory.AUTOWIRE_BY_NAME; //autowireMode = 2，根据set方法参数的类型作为Bean类型进行依赖查找 //并将对象设置到该set方法的参数上 // bean 标签的 autowire 属性值配置为 byType public static final int AUTOWIRE_BY_TYPE = AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE; //autowireMode = 3，构造器注入 // bean 标签的 autowire 属性值配置为 constructor public static final int AUTOWIRE_CONSTRUCTOR = AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR; //表明通过Bean的class的内部来自动装配 Spring3.0被弃用。 // bean 标签的 autowire 属性值配置为 autodetect @Deprecated public static final int AUTOWIRE_AUTODETECT = AutowireCapableBeanFactory.AUTOWIRE_AUTODETECT; //检查依赖是否合法，在本类中，默认不进行依赖检查 //不进行检查 public static final int DEPENDENCY_CHECK_NONE = 0; //对对象引用进行依赖性检查 public static final int DEPENDENCY_CHECK_OBJECTS = 1; //对“简单”属性进行依赖性检查 public static final int DEPENDENCY_CHECK_SIMPLE = 2; //对所有属性进行依赖检查 public static final int DEPENDENCY_CHECK_ALL = 3; //若Bean未指定销毁方法，容器应该尝试推断Bean的销毁方法的名字， //目前，推断的销毁方法的名字一般为close或是shutdown public static final String INFER_METHOD = \\\"(inferred)\\\"; //Bean的class对象或是类的全限定名 @Nullable private volatile Object beanClass; //默认的scope是单例,对应bean属性scope //@Scope @Nullable private String scope = SCOPE_DEFAULT; //是否是抽象，对应bean属性abstract private boolean abstractFlag = false; //是否懒加载，对应bean属性lazy-init,默认不是懒加载 //@Lazy @Nullable private Boolean lazyInit; //自动注入模式，对应bean属性autowire,默认不进行自动装配 private int autowireMode = AUTOWIRE_NO; //是否进行依赖检查,默认不进行依赖检查 private int dependencyCheck = DEPENDENCY_CHECK_NONE; //用来表示一个bean的实例化是否依靠另一个bean的实例化，先加载dependsOn的bean， //对应bean属性depend-on //@DependsOn @Nullable private String[] dependsOn; /** * autowire-candidate属性设置为false，这样容器在查找自动装配对象时， * 将不考虑该bean，即它不会被考虑作为其他bean自动装配的候选者， * 但是该bean本身还是可以使用自动装配来注入其他bean的 */ private boolean autowireCandidate = true; /** * 自动装配时出现多个bean候选者时，将作为首选者，对应bean属性primary，默认不是首选的 * @Primary */ private boolean primary = false; /** * 用于记录Qualifier，对应子元素qualifier <bean><qualifier></qualifier></bean> * 如果容器中有多个相同类型的 bean,这时我们就可以使用qualifier属性来设置加载指定Bean名称的bean * @Qualifier */ private final Map < String, AutowireCandidateQualifier > qualifiers = new LinkedHashMap <>(); //java8的函数式接口，创建bean实例的方式之一 @Nullable private Supplier <? > instanceSupplier; //是否允许访问非public方法和属性, 默认是true private boolean nonPublicAccessAllowed = true; /** * 是否以一种宽松的模式解析构造函数，默认为true， * 如果为false，则在以下情况 * interface ITest{} * class ITestImpl implements ITest{}; * class Main { * Main(ITest i) {} * Main(ITestImpl i) {} * } * 抛出异常，因为Spring无法准确定位哪个构造函数程序设置 */ private boolean lenientConstructorResolution = true; //工厂类名,对应bean属性factory-bean @Nullable private String factoryBeanName; //工厂方法名,对应bean属性factory-method @Nullable private String factoryMethodName; //记录构造函数注入属性，对应bean属性constructor-arg @Nullable private ConstructorArgumentValues constructorArgumentValues; //Bean属性的名称以及对应的值，这里不会存放构造函数相关的参数值，只会存放通过setter注入的值 @Nullable private MutablePropertyValues propertyValues; //方法重写的持有者，记录lookup-method、replaced-method元素 @Lookup private MethodOverrides methodOverrides = new MethodOverrides(); //初始化方法，对应bean属性init-method @Nullable private String initMethodName; //销毁方法，对应bean属性destroy-method @Nullable private String destroyMethodName; //是否执行init-method,默认为true private boolean enforceInitMethod = true; //是否执行destroy-method,默认为true private boolean enforceDestroyMethod = true; //是否是用户定义的而不是应用程序本身定义的，创建AOP时候为true private boolean synthetic = false; //Bean的角色，为用户自定义Bean private int role = BeanDefinition.ROLE_APPLICATION; //Bean的描述信息 @Nullable private String description; //这个bean定义的资源 @Nullable private Resource resource; //... } \"]},\"547\":{\"c\":[\"it\"]},\"548\":{\"h\":\"2024-02-27 复盘\"},\"549\":{\"h\":\"统计\"},\"550\":{\"h\":\"板块轮动\",\"t\":[\"APU2EH\"]},\"551\":{\"h\":\"涨停分析\"},\"552\":{\"h\":\"跌停分析\"},\"553\":{\"h\":\"龙虎榜分析\"},\"554\":{\"h\":\"人气分析\"},\"555\":{\"h\":\"板块分析\"},\"556\":{\"h\":\"预案\"},\"557\":{\"h\":\"2024-03-22 复盘\"},\"558\":{\"h\":\"今日操作\"},\"559\":{\"h\":\"总览\",\"t\":[\"PzGtC3\"]},\"560\":{\"h\":\"卖出\"},\"561\":{\"h\":\"天元智能\",\"t\":[\"krcsiF\"]},\"562\":{\"h\":\"牧原股份\",\"t\":[\"OkHbb7\"]},\"563\":{\"h\":\"买入\"},\"564\":{\"h\":\"万丰奥威\",\"t\":[\"RrzZdE\"]},\"565\":{\"h\":\"克来机电\",\"t\":[\"oyJdiL\"]},\"566\":{\"h\":\"操作总结\"},\"567\":{\"h\":\"卖出\",\"t\":[\"天元智能： 前一天晚上统计了最高板断板时前龙头股基本跌停，而且看盘下杀，为了保证利润，卖出\",\"牧原股份： 前一天晚上了解猪肉主链的相关资讯，都是表明不可持续，且开盘下杀，为了保证利润，卖出\"]},\"568\":{\"h\":\"买入\",\"t\":[\"万丰奥威： 前一天晚上复盘发现低空经济题材应该还可以持续，市值超过百亿且主力资金流入的只有万丰奥威，但偏离五日均线过高，应在五日均线附近买入或日内均线以下买入，这里第二次买点有点急躁，而且超过了仓位管理。\",\"克来机电： 这比操作不应该。前一天晚上统计了最高板断板时前龙头股基本跌停。\"]},\"569\":{\"h\":\"今日情绪\",\"t\":[\" 推荐做二进三\"]},\"570\":{\"h\":\"板块轮动\",\"t\":[\" 飞行汽车和铜缆高速\"]},\"571\":{\"h\":\"个股选择\",\"t\":[\"标的：王子新材、博威合金 追踪：华生科技、沃尔核材\"]},\"572\":{\"h\":\"明日计划\",\"t\":[\"卖出克来 看情况是否卖出万丰奥威 看情况是否买入个股选择的标的\"]},\"573\":{\"h\":\"思考\",\"t\":[\"周一低空经济是否会修复\\n铜缆高速和kimi 延续性如何\"]},\"574\":{\"h\":\"2024-03-25 复盘\"},\"575\":{\"h\":\"今日走势\"},\"576\":{\"h\":\"今日操作\"},\"577\":{\"h\":\"Kimi\",\"t\":[\"kimi持续性差，但是操作还是介入 掌阅科技 ，这属于 \",\"在华策传媒、中广天择开出这个差的情况下，介入掌阅科技不是一个明智的选择\",\"即使想买也要等到标志性情绪回暖，例如 华策传媒、中广天择、掌阅科技在重新涨停时才可以介入其他个股。\"]},\"578\":{\"h\":\"铜缆高速连接\",\"t\":[\"选择的是最高标，未找到评判方法\"]},\"579\":{\"h\":\"昨日个股走势\"},\"580\":{\"h\":\"Kimi\",\"t\":[\"kimi目前有三个标的，其中逻辑较好的有华策传媒、掌阅科技、中广天择；但是在华策传媒、中广天择开盘非常差的情况下掌阅科技也不短下杀，此时在华策传媒和中广天择没有进行日内修复的情况下不宜介入掌阅传媒，或在掌阅传媒涨停的情况下介入他们。\"]},\"581\":{\"h\":\"低空经济\",\"t\":[\"低空经济应该是目前来说比价好的题材。但是由于已持有万丰奥威，所以没有进行仔细复盘。\"]},\"582\":{\"h\":\"今日情绪\",\"t\":[\"5yFzNK\",\"上周五龙头断板，所以周期应该属于 【结束】 阶段。 \",\"交易方案： \",\"2进3\",\"龙头首阴： 可以考虑是首阴收盘介入还是第二天高开的时候介入\"]},\"583\":{\"h\":\"今日连板\",\"t\":[\"二进三适合的只有地产链和食品饮料\"]},\"584\":{\"h\":\"地产链\",\"t\":[\"今日成交量是昨日的一倍\",\"换手率达到20%+\",\"上板最早\",\"未炸板\",\"股性较好\"]},\"585\":{\"h\":\"京投发展\",\"t\":[\"股性较好，前期多次炒作；低位；未过筹码峰；成交量接近翻倍；宁波桑田路、T王；封单：0.3\"]},\"586\":{\"h\":\"亚振家居\",\"t\":[\"股性较好；前期多次炒作；低位；已经过了筹码峰； 成交量翻倍；湖州劳动路、量化；封单5.3\"]},\"587\":{\"h\":\"爱丽家居\",\"t\":[\"股性一般，前期连续跌停；不是低位；已过筹码峰；成交量没有翻倍；赵老哥、宁波桑田路；封单：5.3\"]},\"588\":{\"h\":\"选择\",\"t\":[\"首选亚振家居，次选京投发展\"]},\"589\":{\"h\":\"食品饮料\"},\"590\":{\"h\":\"总结\",\"t\":[\"龙头首阴： 可以考虑是首阴收盘介入还是第二天高开的时候介入\"]},\"591\":{\"h\":\"问题\",\"t\":[\"选择最高标的时候，该如何进行判定今天是否可以介入\",\"未进行板块分析\"]},\"592\":{\"h\":\"2024-03-26 复盘\"},\"593\":{\"h\":\"学习\",\"t\":[\"BwV3Cy\"]},\"594\":{\"h\":\"今日连板\"},\"595\":{\"h\":\"今日操作\"},\"596\":{\"h\":\"地产链\",\"t\":[\"昨天复盘确认方向是地产链，首选亚振家居，次选京投发展；后续看到爱丽家居的封板也很强，所以顺序变更为 亚振家居/爱丽家居、京投发展。开盘的时候亚振家居直接一字板，而爱丽家居虽然也是一字板但是封单较少，所以选择了排单爱丽家居，三个里面有两个涨停，且爱丽家居虽然封单较少但是迅速封住，所以感觉地产链比较强，而且京投发展也迅速翻红，所以干脆也卖点京投发展，扩大地产链的概率。\"]},\"597\":{\"h\":\"今日情绪\",\"t\":[\"5yFzNK\",\"上周五龙头断板，所以周期应该属于 【混沌】 阶段。 \",\"交易方案： \",\"2进3：只有一个通信放弃；食品饮料未进行观察，但是直接一字板\",\"龙头首阴： 可以考虑是首阴收盘介入还是第二天高开的时候介入\"]},\"598\":{\"h\":\"今日大盘\"},\"599\":{\"h\":\"煤炭\"},\"600\":{\"h\":\"短剧游戏\",\"t\":[\"短剧游戏之前是结合kimi大涨，今天尝试修复，但是在某一个股拉升时其他个股并不会带动，所以放弃拉升。\"]},\"601\":{\"h\":\"低空经济尝试修复\",\"t\":[\"尝试修复，但是万丰还在异动监管，所以现在卡异动。明日出异动。昨天并不是一个好的出场点，可以搏明天出异动或者卖点前置今日卖出\"]},\"602\":{\"h\":\"2024-04-21 复盘\"},\"603\":{\"h\":\"概览\"},\"604\":{\"h\":\"大盘情况\"},\"605\":{\"h\":\"晋级情况\",\"t\":[\"bj8LxV\"]},\"606\":{\"h\":\"今日连板情况\",\"t\":[\"nu2K9C\"]},\"607\":{\"h\":\"板块轮动\",\"t\":[\"UaqPKj\"]},\"608\":{\"h\":\"情绪分析图\",\"t\":[\"5zWVKx\"]},\"609\":{\"h\":\"期货情况\"},\"610\":{\"h\":\"美股\"},\"611\":{\"h\":\"分析\"},\"612\":{\"h\":\"大盘\",\"t\":[\" 明天应该是五日均线 3055 到 3074 之间。低开高走？\"]},\"613\":{\"h\":\"板块\"},\"614\":{\"h\":\"低空经济\",\"t\":[\" 因为“国九条”的消息，小盘股大规模跌停，导致短线情绪直接冰点，经过三天的调整，终于迎来了短线情绪的修复，修复后发现低空经济队列较完整，所以低空经济迎来了目前的二波形态。 消息：苏州发布低空经济高质量发展三年实施方案(2024-04-19 14:05) 根据苏州最新消息，所以如果在低空还可以的情况下要介入的除了龙头就是苏州相关的个股。\"]},\"615\":{\"h\":\"个股\",\"t\":[\"股价够低、成交量活跃、连板效应好、人气高\",\"光洋股份\",\"苏交科\",\"永悦科技\"]},\"616\":{\"h\":\"有色金属\",\"t\":[\"沪锡、沪镍涨幅过大，考虑重新做有色板块\",\"三祥新材\",\"盛达资源\",\"博迁新材\",\"洛阳钼业\"]},\"617\":{\"h\":\"2024-04-22 复盘\"},\"618\":{\"h\":\"概览\"},\"619\":{\"h\":\"大盘情况\"},\"620\":{\"h\":\"晋级情况\",\"t\":[\"TKrHLU\"]},\"621\":{\"h\":\"今日连板情况\",\"t\":[\"1wKEW4\"]},\"622\":{\"h\":\"板块轮动\",\"t\":[\"Irk6t0\"]},\"623\":{\"h\":\"情绪分析图\",\"t\":[\"fwIk4I\"]},\"624\":{\"h\":\"分析\"},\"625\":{\"h\":\"大盘\",\"t\":[\" 低开低走 3016~3049.6\"]},\"626\":{\"h\":\"板块\"},\"627\":{\"h\":\"低空经济\"},\"628\":{\"h\":\"军工\",\"t\":[\"M1dL7N\"]},\"629\":{\"h\":\"个股\"},\"630\":{\"h\":\"2024-04-23 复盘\"},\"631\":{\"h\":\"大盘\",\"t\":[\"VyMnG6\",\"上证指数低开低走。\"]},\"632\":{\"h\":\"持仓个股\"},\"633\":{\"h\":\"苏交科\",\"t\":[\"i5AkEI\",\"买入原因\",\"低空经济经历大分歧，但是承接较好，未直接跌停，且有回复分时均线附近\",\"符合苏州发布的低空经济文章\",\"20cm 后续博弈受益大\",\"卖出原因\",\"方新侠逆势加仓万丰，导致万丰预期不佳\",\"中信海直、万丰奥威修复不佳\",\"金盾股份修复领先，但是高位滞涨，并不看好后续。\",\"总结\",\"上涨过大时应及时退出，不是接力不会存在涨停，而且今天环境并不好\",\"昨日未能进入金盾股份、建新股份\"]},\"634\":{\"h\":\"锡业股份\",\"t\":[\" 买入原因\",\"沪锡大涨，个股基本面较相关\",\"卖出原因\",\"开盘沪锡大跌\"]},\"635\":{\"h\":\"博迁新材\",\"t\":[\"ZWylhI\",\"买入原因\",\"沪镍大涨，之前的人气股\",\"卖出原因\",\"沪镍今日大跌\"]},\"636\":{\"h\":\"低空经济\"},\"637\":{\"h\":\"今日异动机会\",\"t\":[\"4wwXzB\"]},\"638\":{\"h\":\"今日涨停复盘\"},\"639\":{\"h\":\"明日\",\"t\":[\"不操作\"]},\"640\":{\"h\":\"反思\",\"t\":[\"仔细复盘，确定每天的涨停个股的题材、原因、形态、个股的基本信息\",\"选择最强的，尽量不要选择跟风的\",\"买卖不要太过随心，要仔细思索\",\"要果断，思索后不要因为太高犹犹豫豫\",\"注意每天消息总结\"]},\"641\":{\"h\":\"2024-04-25 复盘\"},\"642\":{\"h\":\"大盘\",\"t\":[\"Wp0ene\",\"上证指数低开高走。\"]},\"643\":{\"h\":\"个股\",\"t\":[\"3rXnEg\"]},\"644\":{\"h\":\"持仓个股\"},\"645\":{\"h\":\"中衡设计\",\"t\":[\"wzaNjI\",\"买入原因\",\"低空经济开始走强，万丰奥威开盘大涨、中信海直也快速拉升\",\"总结\",\"复盘不完善，当前 20cm 环境较好，应该找 20cm 进行低吸\",\"接力也需要看板块效应、情绪周期和赚钱效应\"]},\"646\":{\"h\":\"低空经济\",\"t\":[\"FxgyFL\",\"4bnx3r\",\"FYehfi\"]},\"647\":{\"h\":\"今日异动机会\",\"t\":[\"CyTwCL\"]},\"648\":{\"h\":\"铜缆高速连接\",\"t\":[\"M4rGw3\",\"37lu5n\",\"bYJIwZ\"]},\"649\":{\"h\":\"通信工程\",\"t\":[\"tytX8v\",\"rgZoE5\",\"luIgr6\"]},\"650\":{\"h\":\"云服务\",\"t\":[\"ZYT5nn\",\"XkPNk5\",\"gWi0eY\"]},\"651\":{\"h\":\"时空大数据\",\"t\":[\"d85HzW\",\"WKDGay\",\"UaNcNg\"]},\"652\":{\"h\":\"CPO 概念\",\"t\":[\"Ku3jn2\",\"6d1jwe\",\"eh9HqQ\"]},\"653\":{\"h\":\"光通信\",\"t\":[\"IVXMpx\",\"NuHId3\",\"OWs3Ph\"]},\"654\":{\"h\":\"毫米波雷达\",\"t\":[\"zuovXa\",\"HHyx06\",\"yX9jWp\"]},\"655\":{\"h\":\"高贝塔值\",\"t\":[\"4x8rwj\",\"s94mh0\",\"gqfyzZ\"]},\"656\":{\"h\":\"华为算力\",\"t\":[\"I4LpPB\",\"xzyxWI\",\"F8vK2A\"]},\"657\":{\"h\":\"今日涨停复盘\",\"t\":[\"tb7O6p\",\"oHL3k0\",\"svMkrm\",\"9AkzgZ\"]},\"658\":{\"h\":\"明日\"},\"659\":{\"h\":\"题材 1\"},\"660\":{\"h\":\"题材 2\"},\"661\":{\"h\":\"反思\",\"t\":[\"仔细复盘，确定每天的涨停个股的题材、原因、形态、个股的基本信息\",\"选择最强的，尽量不要选择跟风的\",\"买卖不要太过随心，要仔细思索\",\"要果断，思索后不要因为太高犹犹豫豫\",\"注意每天消息总结\",\"去除个人情感下的结论，尊重市场表现，根据市场做反馈\",\"要复盘一个月内炒作过的热点，防止热点回流回到之前炒作的导致未能及时反应\",\"个股复盘需要跟深入\",\"即使总结市场反馈，例如 2024-04-24 附近 20cm 反馈较好，优先选择 20cm\",\"下跌趋势不言底，企稳重新上涨再考虑抄底\",\"低吸，价格足够低，不能一波上涨之后还想着低吸\",\"追涨，题材要有确定性，不能刚出的题材就去追涨，要有板块效应再去追涨\",\"题材结束不要自以为是，要以盘面来确定，例如人气股、中军、龙头出现负反馈，确认题材结束再考虑清仓，否则应继续持有，只存在仓位控制\"]},\"662\":{\"h\":\"2024-04-24 复盘\"},\"663\":{\"h\":\"反思\",\"t\":[\"仔细复盘，确定每天的涨停个股的题材、原因、形态、个股的基本信息\",\"选择最强的，尽量不要选择跟风的\",\"买卖不要太过随心，要仔细思索\",\"要果断，思索后不要因为太高犹犹豫豫\",\"注意每天消息总结\",\"去除个人情感下的结论，尊重市场表现，根据市场做反馈\",\"要复盘一个月内炒作过的热点，防止热点回流回到之前炒作的导致未能及时反应\",\"个股复盘需要跟深入\",\"即使总结市场反馈，例如 2024-04-24 附近 20cm 反馈较好，优先选择 20cm\",\"下跌趋势不言底，企稳重新上涨再考虑抄底\",\"低吸，价格足够低，不能一波上涨之后还想着低吸\",\"追涨，题材要有确定性，不能刚出的题材就去追涨，要有板块效应再去追涨\",\"题材结束不要自以为是，要以盘面来确定，例如人气股、中军、龙头出现负反馈，确认题材结束再考虑清仓，否则应继续持有，只存在仓位控制\",\"选股要选择题材正向叠加的\",\"政策热点要及时跟进\"]},\"664\":{\"h\":\"基本数据结构\",\"t\":[\"常见的数据结构，包含有数组、链表、栈、队列、树、散列表、堆、图。\"]},\"665\":{\"h\":\"数组\",\"t\":[\"存储空间是连续。可以通过下表进行快速访问\",\"优点： \",\"按照索引查询速度较快\",\"按照索引遍历速度较快\",\"缺点： \",\"数组固定大小，扩容较麻烦\",\"数组只能存在一种数据结构\",\"增删改查速度较慢\",\"使用场景： \",\"数据量较大，频繁的遍历的。\"]},\"666\":{\"h\":\"链表\",\"t\":[\"存储空间不连续，通过指针进行访问下一个%%%%存储空间\",\"优点： \",\"可以随意添加数据，添加数据较简单\",\"增删改查速度较快，只需要修改指针地址即可\",\"缺点： \",\"含有大量的指针域，占用较多的空间。\",\"遍历或者查找的速度较慢，需要通过指针进行遍历。\",\"使用场景： \",\"数据量小，大量进行增删改查。\"]},\"667\":{\"h\":\"栈\",\"t\":[\"是一种特殊的线性表，只能操作其中个的一段，可以入栈和出栈。特点为先入后出（LIFO）。\"]},\"668\":{\"h\":\"队列\",\"t\":[\"队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出（FIFO）。\",\"使用场景： \",\"因为队列先进先出的特点，在多线程阻塞队列管理中非常适用。\"]},\"669\":{\"h\":\"树\",\"t\":[\"树是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。\",\"具有特点： \",\"每一个节点都有零个或者多个子节点。\",\"没有父节点的节点成为根节点。\",\"每一个非根节点都有一个父节点。\",\"除了根节点以外，每个子节点都可以分为多个不相交的子树。\"]},\"670\":{\"h\":\"二叉树\",\"t\":[\"每个父节点只有两个子节点的树为二叉树。\"]},\"671\":{\"h\":\"平衡二叉树\",\"t\":[\"当按照某个规则（左子节点小于父节点，右子节点大于父节点构建），如果一些有序的数据存储可能会导致退化为链表，大致查询的速度就变得特别慢，所以提出了平衡二叉树，在插入数据的时候会进行平衡，具有一下特性：\",\"一棵空树或它的左右两个子树的高度差的绝对值不超过1\",\"右两个子树都是一棵平衡二叉树\"]},\"672\":{\"h\":\"红黑树\",\"t\":[\"也是一种平衡二叉树，但是要去并没有那么严格，但也具有一下性质： \",\"每个节点非红即黑\",\"根节点是黑的;\",\"每个叶节点（叶节点即树尾端NULL指针或NULL节点）都是黑的;\",\"如果一个节点是红的，那么它的两儿子都是黑的;\",\"对于任意节点而言，其到叶子点树NULL指针的每条路径都包含相同数目的黑节点;\"]},\"673\":{\"h\":\"B 树\",\"t\":[\"是一种多路搜索树（并不是二叉的），具有一下性质： \",\"定义任意非叶子结点最多只有M个儿子；且M>2；\",\"根结点的儿子数为[2, M]；\",\"除根结点以外的非叶子结点的儿子数为[M/2, M]；\",\"每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）\",\"非叶子结点的关键字个数=指向儿子的指针个数-1；\",\"非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] < K[i+1]；\",\"非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；\",\"所有叶子结点位于同一层；\"]},\"674\":{\"h\":\"B+树\",\"t\":[\"相对于 B 树，B+树所有的叶子结点在同一层，但是每个节点间通过链表相互连接，所以可以进行范围行的查询。\"]},\"675\":{\"h\":\"散列表\",\"t\":[\"散列表，也叫哈希表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素。如果同一个关键码有多个 value，则会通过链表进行相互连接\"]},\"676\":{\"h\":\"堆\",\"t\":[\"堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象，具有一下性质： \",\"堆中某个节点的值总是不大于或不小于其父节点的值\",\"堆总是一棵完全二叉树\"]},\"677\":{\"h\":\"图\",\"t\":[\"图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。\"]},\"678\":{\"h\":\"有向图\",\"t\":[\"每个节点之间的线路是有方向，在单向的地方不可逆向导通\"]},\"679\":{\"h\":\"无向图\",\"t\":[\"每个节点之间是无方向，不存在方向，可以相互导通\"]},\"680\":{\"h\":\"Docker\",\"t\":[\"容器化在现在使用非常普遍，对于个人环境搭建和使用是非常方便的，而且对于生产上的部署也日益完善，相信在使用过程中所遇到的问题，能都够在网上获得相应的答案。本人虽然也学习并使用了很长的时间，但是却从未进行完整的整理，没有进行对自己Docker 的相关知识的总结和梳理，本篇文章是本人结合网上文章和个人理解进行总结得到的。\"]},\"681\":{\"h\":\"Docker环境搭建\",\"t\":[\"sudo yum install -y yum-utils sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo sudo yum update -y sudo yum install docker-ce docker-ce-cli containerd.io sudo systemctl start docker sudo systenctl enable docker \"]},\"682\":{\"h\":\"Docker命令使用\"},\"683\":{\"h\":\"启动容器\"},\"684\":{\"h\":\"停止容器\"},\"685\":{\"h\":\"删除容器\"},\"686\":{\"h\":\"查看容器\"},\"687\":{\"h\":\"构建镜像\"},\"688\":{\"h\":\"离线下载镜像\"},\"689\":{\"h\":\"删除镜像\"},\"690\":{\"h\":\"镜像打标签\"},\"691\":{\"h\":\"镜像优化\"},\"692\":{\"h\":\"Docker 原理\",\"t\":[\"容器化本质还是使用了 Linux的一些功能进行实现的，通过namespace 实现内核资源的隔离，通过cgroup来实现物力资源的隔离，实现容器化的资源限制和统计，通过UnionFS来实现文件资源你的隔离。\",\"以下的整个解析将结合一个nginx 容器进行描述，启动命令如下：\",\"docker run -d -p 80:80 --name nginx nginx # docker ps 查看该容器的一些数据 # CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES # c0f373db9d49 nginx \\\"/docker-entrypoint.…\\\" 4 hours ago Up 4 hours 0.0.0.0:80->80/tcp, :::80->80/tcp nginx ps aux | grep c0f373db9d49 # 查看容器在主机上的 pid 49798 #root 49798 0.0 0.1 720556 15496 ? Sl 11:49 0:00 ...... #root 53611 0.0 0.0 12136 1144 pts/2 S+ 15:48 0:00 ...... \"]},\"693\":{\"h\":\"cgroups 控制组\"},\"694\":{\"h\":\"cgroup 介绍\",\"t\":[\"sparkdev: cgroups\",\"cgroup是对不同进程组进行资源控制和统计的技术，可以为每个group 的 CPU、内存、磁盘 IO、网络流量进行限制和统计，主要的应用在资源隔离和管理、资源监控和限制。Linux 中可以通过/sys/fs/cgroup/ 进行查看cgroup的配置。/sys/fs/cgroup/不同的文件代表不同的配置，解释如下:\",\"文件名称\",\"解释\",\"blkio\",\"对块设备的 IO 进行限制。\",\"cpu\",\"限制 CPU 时间片的分配，与 cpuacct 挂载在同一目录。\",\"cpuacct\",\"生成 cgroup 中的任务占用 CPU 资源的报告，与 cpu 挂载在同一目录。\",\"cpuset\",\"给 cgroup 中的任务分配独立的 CPU(多处理器系统) 和内存节点。\",\"devices\",\"允许或禁止 cgroup 中的任务访问设备。\",\"freezer\",\"暂停/恢复 cgroup 中的任务。\",\"hugetlb\",\"限制使用的内存页数量。\",\"memory\",\"对 cgroup 中的任务的可用内存进行限制，并自动生成资源占用报告。\",\"net_cls\",\"使用等级识别符（classid）标记网络数据包，这让 Linux 流量控制器（tc 指令）可以识别来自特定 cgroup 任务的数据包，并进行网络限制。\",\"net_prio\",\"允许基于 cgroup 设置网络流量(netowork traffic)的优先级。\",\"perf_event\",\"允许使用 perf 工具来监控 cgroup。\",\"pids\",\"限制任务的数量。\"]},\"695\":{\"h\":\"docker 如何使用的 cgroup\",\"t\":[\"通过查看/sys/fs/cgroup/ 发现存在docker/c0f373db9d49879e669f79989c81a6b5ec904e660732b4f0e4bebbb311850475 的目录，在容器停止是该目录不存在，当容器启动时自动创建对应的数据，以此可以认为当容器启动时是通过初始化 cgroup 的部分文件实现来使用 cgroup 进行资源隔离的。以下通过部分文件验证其内容就是容器对应的状态的数据：\",\"docker stats #CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS #c0f373db9d49 nginx 0.00% 3.988MiB / 7.586GiB 0.05% 836B / 0B 0B / 0B 5 # 可以看到当前的内存使用是 3.988M cat /sys/fs/cgroup/memory/docker/c0f373db9d49879e669f79989c81a6b5ec904e660732b4f0e4bebbb311850475/memory.usage_in_bytes cat /sys/fs/cgroup/memory/docker/c0f373db9d49879e669f79989c81a6b5ec904e660732b4f0e4bebbb311850475/memory.stat # (第一个值 - 第二个值)/1024/1024 = 4182016/1024/1024 = 3.98828125 约为 3.988M \",\"通过以上内容可以看出在启动容器的时候，会创建部分文件来使用 cgroup ，从而达到资源控制和统计的作用。\"]},\"696\":{\"h\":\"namespace 命名空间\",\"t\":[\"namespace 是 Linux 内核用来隔离内核资源的方式。通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。具体的实现方式是把一个或多个进程的相关资源指定在同一个 namespace 中。\",\"namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响\"]},\"697\":{\"h\":\"unionFS 联合文件系统\"},\"698\":{\"h\":\"Docker 存储\"},\"699\":{\"h\":\"Docker 持久化\"},\"700\":{\"h\":\"Docker 网络\"},\"701\":{\"h\":\"Kuberentes 高可用集群安装\"},\"702\":{\"h\":\"Sealos安装集群\"},\"703\":{\"h\":\"下载Sealos\",\"t\":[\"# 推荐下载最新版，会修复一些BUG,下载并安装sealos, sealos是个golang的二进制工具，直接下载拷贝到bin目录即可, release页面也可下载 wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/latest/sealos && \\\\ chmod +x sealos && mv sealos /usr/bin \"]},\"704\":{\"h\":\"下载Kube安装包\",\"t\":[\"# 下载离线资源包 1.18.0 wget -c https://sealyun.oss-cn-beijing.aliyuncs.com/7b6af025d4884fdd5cd51a674994359c-1.18.0/kube1.18.0.tar.gz # 下载离线资源包 1.16.0 wget https://sealyun.oss-cn-beijing.aliyuncs.com/37374d999dbadb788ef0461844a70151-1.16.0/kube1.16.0.tar.gz # 下载离线资源包 1.15.0 wget -C https://sealyun.oss-cn-beijing.aliyuncs.com/free/kube1.15.0.tar.gz # 下载离线资源包 1.14.1 wget -C https://github.com/sealstore/cloud-kernel/releases/download/offline/kube1.14.1.tar.gz \",\"执行初始化命令\",\"sealos init --user root --passwd root \\\\ --master 192.168.0.2 --master 192.168.0.3 --master 192.168.0.4 \\\\ --node 192.168.0.5 \\\\ --pkg-url /root/kube1.18.0.tar.gz \\\\ --version v1.18.0 \",\"Sealos参数\"]},\"705\":{\"h\":\"添加Master\",\"t\":[\"sealos join --master 192.168.0.6 --master 192.168.0.7 sealos join --master 192.168.0.6-192.168.0.9 # 或者多个连续IP \"]},\"706\":{\"h\":\"删除Master\",\"t\":[\"sealos clean --master 192.168.0.6 --master 192.168.0.7 sealos clean --master 192.168.0.6-192.168.0.9 # 或者多个连续IP \"]},\"707\":{\"h\":\"添加Node\",\"t\":[\"sealos join --node 192.168.0.6 --node 192.168.0.7 sealos join --node 192.168.0.6-192.168.0.9 # 或者多个连续IP \"]},\"708\":{\"h\":\"删除Node\",\"t\":[\"sealos clean --node 192.168.0.6 --node 192.168.0.7 sealos clean --node 192.168.0.6-192.168.0.9 # 或者多个连续IP \"]},\"709\":{\"h\":\"清理集群\",\"t\":[\"sealos clean --all \"]},\"710\":{\"h\":\"安装应用\",\"t\":[\" Sealos安装应用\"]},\"711\":{\"h\":\"参考\",\"t\":[\"快速开始 | sealos | kubernetes安装\"]},\"712\":{\"h\":\"注意\",\"t\":[\"若安装过程中出错，则可执行清楚集群命令或者删除集群的所有主机命令进行重置，同时重启一下Master节点，虚拟IP才可清除。\",\"注意Docker的版本和Kubernetes版本对应，否则可能出现节点添加不上问题（出现过命名空间无法删除问题，重装版本对应的Docker消失）\",\"如果可以，采用root权限安装，否则可能出现权限不足现象\"]},\"713\":{\"h\":\"Rancher安装集群\"},\"714\":{\"h\":\"1.创建集群\",\"t\":[\"添加集群\",\"选择自定义，然后填写创建的配置，点击下一步\",\"添加节点\"]},\"715\":{\"h\":\"2.安装 master\",\"t\":[\"安装 master 节点，需要选择 Control\",\"然后复制执行命令在相应的主机执行命令即可\"]},\"716\":{\"h\":\"3.安装 node\",\"t\":[\"只需要选择 work\",\"然后复制执行命令在相应的主机执行命令即可\"]},\"717\":{\"h\":\"4.笔记本合盖\",\"t\":[\"需要设置合盖不影响，否则盒盖休眠就会影响该节点\"]},\"718\":{\"h\":\"5.主机名\",\"t\":[\"若主机名重复，则可能导致无法做安装节点\",\"若 k8s.master k8s.node 他主机名显示的都为 k8s 导致无法添加\"]},\"719\":{\"h\":\"脚本安装\"},\"720\":{\"h\":\"服务器规划\",\"t\":[\"服务器规划\"]},\"721\":{\"h\":\"修改hostname（所有节点）\",\"t\":[\"vi /etc/hosts\",\"172.22.181.192 k8s-master01 172.22.181.194 k8s-master02 172.22.181.196 k8s-master03 172.22.181.190 k8s-node01 172.22.181.189 k8s-node02 \",\"export APISERVER_NAME=apiserver.lb\",\"export APISERVER_IP=172.22.181.197\",\"export POD_SUBNET=10.100.0.1/16\",\"echo \\\"${APISERVER_IP} ${APISERVER_NAME}\\\" >> /etc/hosts\"]},\"722\":{\"h\":\"安装前检查（所有节点）\",\"t\":[\"任意节点 centos 版本为 7.6 或 7.7\",\"任意节点 CPU 内核数量大于等于 2，且内存大于等于 4G\",\"任意节点 hostname 不是 localhost，且不包含下划线、小数点、大写字母\",\"任意节点都有固定的内网 IP 地址\",\"任意节点上 Kubelet使用的 IP 地址 可互通（无需 NAT 映射即可相互访问），且没有防火墙、安全组隔离\",\"任意节点不会直接使用 docker run 或 docker-compose 运行容器\"]},\"723\":{\"h\":\"）\",\"t\":[\"yum install haproxy\",\"vi /etc/haproxy/haproxy.cfg\",\"修改配置文件，修改结果见附件haproxy.cfg\",\"systemctl restart haproxy && systemctl enable haproxy\"]},\"724\":{\"h\":\"安装 docker / kubelet（所有master、node节点）\",\"t\":[\"上传install_kubelet.sh文件到用户目录（文件见附件）\",\"./install_kubelet.sh\"]},\"725\":{\"h\":\"初始化第一个master节点（K8s-master01）\",\"t\":[\"export POD_SUBNET=10.100.0.1/16\",\"上传init_master.sh文件到用户目录（文件见附件）\",\"./install_ master.sh\",\"执行结果\",\"[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-krosRmSJ-1598678647504)(https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4749b708-6f7b-4294-af6b-42fcf85f6317/image1.png)]\",\"执行红框部分。\",\"复制绿框部分与黄框部分。\",\"查看pod运行状态\",\"watch kubectl get pod -n kube-system -o wide\",\"查看节点初始化结果\",\"kubectl get nodes\",\"请等到所有容器组（9个）全部处于 Running 状态，才进行下一步\"]},\"726\":{\"h\":\"初始化第二、三个master节点（K8s-master02、K8s-master03）\",\"t\":[\"执行绿框复制内容。\",\"检查初始化结果\",\"kubectl get nodes\"]},\"727\":{\"h\":\"初始化 worker节点（K8s-node01、K8s-node02）\",\"t\":[\"执行黄框复制内容。\",\"检查初始化结果\",\"kubectl get nodes\"]},\"728\":{\"h\":\"移除worker节点\",\"t\":[\"kubeadm reset\",\"kubectl delete node k8s-nodexx（节点名称）\"]},\"729\":{\"h\":\"安装Kubernetes Dashboard（K8s-master01）\",\"t\":[\"执行以下命令安装\",\"kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta5/aio/deploy/recommended.yaml\",\"上传auth.yaml到用户目录（文件见附件）\",\"执行以下命令创建ServiceAccount 和 ClusterRoleBinding\",\"kubectl apply -f ./auth.yaml\",\"生成证书\",\"grep 'client-certificate-data' /etc/kubernetes/admin.conf | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.crt\",\"grep 'client-key-data' /etc/kubernetes/admin.conf | head -n 1 | awk '{print $2}' | base64 -d >> kubecfg.key\",\"openssl pkcs12 -export -clcerts -inkey kubecfg.key -in kubecfg.crt -out kubecfg.p12 -name \\\"kubernetes-client\\\"\",\"将kubecfg.p12证书下载到本地\",\"获取token\",\"kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\",\"将证书导入chrome浏览器\",\"访问https://172.22.181.192:6443/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login\",\"输入token登录。\"]},\"730\":{\"h\":\"问题排查\",\"t\":[\"Calico镜像无法拉取，可手工拉取\",\"docker pull calico/kube-controllers:v3.9.2\",\"节点无法正常启动，可查看日志信息进行排查\",\"journalctl -f -u kubelet\"]},\"731\":{\"h\":\"附件\",\"t\":[\"auth.yaml\",\"apiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kubernetes-dashboard --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kubernetes-dashboard \",\"haproxy.cfg\",\"global log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 4000 user haproxy group haproxy daemon # turn on stats unix socket stats socket /var/lib/haproxy/stats defaults mode tcp # 修改默认为四层代理 log global option httplog option dontlognull option http-server-close option forwardfor except 127.0.0.0/8 option redispatch retries 3 timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout http-keep-alive 10s timeout check 10s maxconn 3000 frontend main 172.22.181.197:6443 acl url_static path_beg -i /static /images /javascript /stylesheets acl url_static path_end -i .jpg .gif .png .css .js default_backend k8s-master backend k8s-master mode tcp # 修改为tcp balance roundrobin server k8s-master01 172.22.181.192:6443 check # 三个master主机 server k8s-master02 172.22.181.194:6443 check server k8s-master03 172.22.181.196:6443 check \",\"init_master.sh\",\"#!/bin/bash # 只在 master 节点执行 # 脚本出错时终止执行 set -e if [ ${#POD_SUBNET} -eq 0 ] || [ ${#APISERVER_NAME} -eq 0 ]; then echo -e \\\"\\\\033[31;1m请确保您已经设置了环境变量 POD_SUBNET 和 APISERVER_NAME \\\\033[0m\\\" echo 当前POD_SUBNET=$POD_SUBNET echo 当前APISERVER_NAME=$APISERVER_NAME exit 1 fi # 查看完整配置选项 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2 rm -f ./kubeadm-config.yaml cat <<EOF > ./kubeadm-config.yaml apiVersion: kubeadm.k8s.io/v1beta2 kind: ClusterConfiguration kubernetesVersion: v1.16.2 imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers controlPlaneEndpoint: \\\"${APISERVER_NAME}:6443\\\" networking: serviceSubnet: \\\"10.96.0.0/16\\\" podSubnet: \\\"${POD_SUBNET}\\\" dnsDomain: \\\"cluster.local\\\" EOF # kubeadm init # 根据您服务器网速的情况，您需要等候 3 - 10 分钟 kubeadm init --config=kubeadm-config.yaml --upload-certs # 配置 kubectl rm -rf /root/.kube/ mkdir /root/.kube/ cp -i /etc/kubernetes/admin.conf /root/.kube/config # 安装 calico 网络插件 # 参考文档 https://docs.projectcalico.org/v3.9/getting-started/kubernetes/ rm -f calico-3.9.2.yaml wget https://kuboard.cn/install-script/calico/calico-3.9.2.yaml sed -i \\\"s#192\\\\.168\\\\.0\\\\.0/16#${POD_SUBNET}#\\\" calico-3.9.2.yaml kubectl apply -f calico-3.9.2.yaml \",\"install_kubelet.sh\",\"#!/bin/bash # 在 master 节点和 worker 节点都要执行 # 安装 docker # 参考文档如下 # https://docs.docker.com/install/linux/docker-ce/centos/ # https://docs.docker.com/install/linux/linux-postinstall/ # 卸载旧版本 yum remove -y docker \\\\ docker-client \\\\ docker-client-latest \\\\ docker-common \\\\ docker-latest \\\\ docker-latest-logrotate \\\\ docker-logrotate \\\\ docker-selinux \\\\ docker-engine-selinux \\\\ docker-engine # 设置 yum repository yum install -y yum-utils \\\\ device-mapper-persistent-data \\\\ lvm2 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 安装并启动 docker yum install -y docker-ce-18.09.7 docker-ce-cli-18.09.7 containerd.io systemctl enable docker systemctl start docker # 安装 nfs-utils # 必须先安装 nfs-utils 才能挂载 nfs 网络存储 yum install -y nfs-utils yum install -y wget # 关闭 防火墙 systemctl stop firewalld systemctl disable firewalld # 关闭 SeLinux setenforce 0 sed -i \\\"s/SELINUX=enforcing/SELINUX=disabled/g\\\" /etc/selinux/config # 关闭 swap swapoff -a yes | cp /etc/fstab /etc/fstab_bak cat /etc/fstab_bak |grep -v swap > /etc/fstab # 修改 /etc/sysctl.conf # 如果有配置，则修改 sed -i \\\"s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g\\\" /etc/sysctl.conf sed -i \\\"s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g\\\" /etc/sysctl.conf sed -i \\\"s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g\\\" /etc/sysctl.conf # 可能没有，追加 echo \\\"net.ipv4.ip_forward = 1\\\" >> /etc/sysctl.conf echo \\\"net.bridge.bridge-nf-call-ip6tables = 1\\\" >> /etc/sysctl.conf echo \\\"net.bridge.bridge-nf-call-iptables = 1\\\" >> /etc/sysctl.conf # 执行命令以应用 sysctl -p # 配置K8S的yum源 cat <<EOF > /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF # 卸载旧版本 yum remove -y kubelet kubeadm kubectl # 安装kubelet、kubeadm、kubectl yum install -y kubelet-1.16.2 kubeadm-1.16.2 kubectl-1.16.2 # 修改docker Cgroup Driver为systemd # # 将/usr/lib/systemd/system/docker.service文件中的这一行 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock # # 修改为 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd # 如果不修改，在添加 worker 节点时可能会碰到如下错误 # [WARNING IsDockerSystemdCheck]: detected \\\"cgroupfs\\\" as the Docker cgroup driver. The recommended driver is \\\"systemd\\\". # Please follow the guide at https://kubernetes.io/docs/setup/cri/ sed -i \\\"s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g\\\" /usr/lib/systemd/system/docker.service # 设置 docker 镜像，提高 docker 镜像下载速度和稳定性 # 如果您访问 https://hub.docker.io 速度非常稳定，亦可以跳过这个步骤 curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io # 重启 docker，并启动 kubelet systemctl daemon-reload systemctl restart docker systemctl enable kubelet && systemctl start kubelet docker version \"]},\"732\":{\"h\":\"Unix IO模型\",\"t\":[\"一个输入操作通常包括两个阶段:\",\"等待数据准备好\",\"从内核向进程复制数据\",\"对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。\",\"Unix 有以下五种 IO 模型：\",\"阻塞式 I/O (BIO)\",\"非阻塞式 I/O (NIO)\",\"I/O复用 (select和 poll)\",\"信号驱动式 I/O (SIGIO)\",\"异步 I/O (AIO)\"]},\"733\":{\"h\":\"阻塞式 I/O (BIO)\",\"t\":[\"进程在获取数据时，若内核无准备好数据，则会阻塞进程，等待内核把数据准备好返回给线程，线程才会进行下一步的响应。IO 数据未准备好时会阻塞进程所以叫做阻塞式 IO。\",\"上图流程如下：\",\"应用进程进行系统调用(recvfrom)向内核索要数据\",\"内核若数据报未准备好则进行阻塞至数据报准备完毕\",\"数据报准备完毕则复制到用户空间\",\"返回给应用线程\"]},\"734\":{\"h\":\"非阻塞式 I/O (NIO)\",\"t\":[\"应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询(polling)。\",\"上图流程如下：\",\"应用进程进行系统调用(recvfrom)向内核索要数据\",\"内核若数据报未准备好则直接返回错误标志EWOULDBLOCK\",\"应用程序可一直系统调用(recvfrom)向内核索要数据，知道系统准备好数据\",\"此时应用进程则进行获取数据\"]},\"735\":{\"h\":\"I/O复用 (select和 poll)\",\"t\":[\"并发情况下服务器很可能一瞬间会收到几十上百万的请求，这种情况下应用就需要创建几十上百万的线程去读取数据，同时又因为应用线程是不知道什么时候会有数据读取，为了保证消息能及时读取到，那么这些线程自己必须不断的向内核发送recvfrom 请求来读取数据；\",\"那么问题来了，这么多的线程不断调用recvfrom 请求数据，先不说服务器能不能扛得住这么多线程，就算扛得住那么很明显这种方式是不是太浪费资源了，线程是我们操作系统的宝贵资源，大量的线程用来去读取数据了，那么就意味着能做其它事情的线程就会少。\",\"所以，有人就提出了一个思路，能不能提供一种方式，可以由一个线程监控多个网络请求（我们后面将称为fd文件描述符，linux系统把所有网络请求以一个fd来标识），这样就可以只需要一个或几个线程就可以完成数据状态询问的操作，当有数据准备就绪之后再分配对应的线程去读取数据，这么做就可以节省出大量的线程资源出来，这个就是IO复用模型的思路。\",\"上图流程如下：\",\"应用进程进行系统调用(select)向内核索要数据\",\"内核若数据报未准备则进行阻塞，直到准备完成返回可读\",\"应用程序得到可读后，知道系统准备好数据进行系统调用(recvfrom)向内核索要数据\",\"此时应用进程则进行获取数据\"]},\"736\":{\"h\":\"信号驱动式 I/O (SIGIO)\",\"t\":[\"复用IO模型解决了一个线程可以监控多个fd的问题，但是select是采用轮询的方式来监控多个fd的，通过不断的轮询fd的可读状态来知道是否就可读的数据，而无脑的轮询就显得有点暴力，因为大部分情况下的轮询都是无效的，所以有人就想，能不能不要我总是去问你是否数据准备就绪，能不能我发出请求后等你数据准备好了就通知我，所以就衍生了信号驱动IO模型。\",\"上图流程如下：\",\"应用进程使用 sigaction 系统调用，内核立即返回\",\"内核进行数据准备，若准备完成则向应用进程发送 SIGIO 信号\",\"应用进程收到之后在信号处理程序中调用 recvfrom 将数据从内核复制到应用进程中。\",\"此时应用进程则进行获取数据\"]},\"737\":{\"h\":\"异步 I/O (AIO)\",\"t\":[\"应用只需要向内核发送一个read 请求,告诉内核它要读取数据后即刻返回；内核收到请求后会建立一个信号联系，当数据准备就绪，内核会主动把数据从内核复制到用户空间，等所有操作都完成之后，内核会发起一个通知告诉应用，我们称这种一劳永逸的模式为异步IO模型。\",\"上图流程如下：\",\"进行 aio_read 系统调用会立即返回，应用进程继续执行，不会被阻塞。\",\"内核进行数据准备，若准备完成则向应用进程发送 SIGIO 信号\",\"此时应用进程则进行获取数据\"]},\"738\":{\"h\":\"比较\"},\"739\":{\"h\":\"参考\",\"t\":[\"浅谈5种IO模型——阻塞式IO、非阻塞式IO、信号驱动IO、多路复用IO及异步IO\",\"IO 模型 - Unix IO 模型\"]},\"740\":{\"h\":\"操作系统XV6\"},\"741\":{\"h\":\"1. 介绍和举例\"},\"742\":{\"h\":\"1.1 课程内容简介\",\"t\":[\"课程内容简介 \",\"理解操作系统的设计和实现\",\"2.获得实际动手经验\",\"操作系统的目标 \",\"抽象硬件\",\"多个应用程序之间共用硬件资源\",\"隔离性，不同的活动之间不能相互影响\",\"共享性，不同活动之间要能数据共享\",\"权限管理\",\"可以通过硬件提高应用程序的高性能\",\"支持大量的不同的应用程序\"]},\"743\":{\"h\":\"1.2 操作系统结构\",\"t\":[\"最下层 \",\"CPU、内存、磁盘、网卡等\",\"最上层 \",\"vi、cc、cli、shell\",\"中间层 \",\"fs（文件系统）、AccessControl（权限控制）等\"]},\"744\":{\"h\":\"1.3 挑战和快乐\",\"t\":[\"一些矛盾的要求 \",\"高效又要易用\",\"强大的服务又要简单的接口\",\"既要给应用程序尽可能多的灵活性，又要在某种程度上限制其灵活性\",\"大量的特性和大量的服务，需要大量的思考\",\"需要满足广泛的使用场景\"]},\"745\":{\"h\":\"1.4 课程资源\"},\"746\":{\"h\":\"1.5+ 函数\",\"t\":[\"int read(int fd, char *buf, int n) \",\"将n 个字节读入buf；返回读取的字节数；如果文件结束，返回0\",\"int write(int fd, char *buf, int n) \",\"从buf 写n 个字节到文件描述符fd; 返回n\",\"int exit(int status) \",\"终止当前进程，并将状态报告给wait()函数。无返回\",\"int open(char *file, int flags) \",\"打开一个文件；flags表示read/write；返回一个fd（文件描述符）\",\"shell\",\"int fork() \",\"创建一个进程，返回子进程的PID\",\"int exec(char _file, char _argv[]) \",\"加载一个文件并使用参数执行它; 只有在出错时才返回\",\"int wait(int *status) \",\"等待一个子进程退出; 将退出状态存入*status; 返回子进程PID。\",\"int kill(int pid) \",\"终止对应PID的进程，返回0，或返回-1表示错误\",\"int getpid() \",\"返回当前进程的PID\",\"int sleep(int n) \",\"暂停n个时钟节拍\",\"char *sbrk(int n) \",\"按n 字节增长进程的内存。返回新内存的开始\",\"int close(int fd) \",\"释放打开的文件fd\",\"int dup(int fd) \",\"返回一个新的文件描述符，指向与fd 相同的文件\",\"int pipe(int p[]) \",\"创建一个管道，把read/write文件描述符放在p[0]和p[1]中\",\"int chdir(char *dir) \",\"改变当前的工作目录\",\"int mkdir(char *dir) \",\"创建一个新目录\",\"int mknod(char *file, int, int) \",\"创建一个设备文件\",\"int fstat(int fd, struct stat *st) \",\"将打开文件fd的信息放入*st\",\"int stat(char _file, struct stat _st) \",\"将指定名称的文件信息放入*st\",\"int link(char _file1, char _file2) \",\"为文件file1创建另一个名称(file2)\",\"int unlink(char *file) \",\"删除一个文件\",\"注意 \",\"xv6系统调用（除非另外声明，这些系统调用返回0表示无误，返回-1表示出错）\",\"I/O redirect\"]},\"747\":{\"h\":\"2. 操作系统架构和系统调用\"},\"748\":{\"h\":\"设计模式\",\"t\":[\"快速记忆23种设计模式 - 知乎\"]},\"749\":{\"h\":\"七大原则\"},\"750\":{\"h\":\"开闭原则\",\"t\":[\"一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。\"]},\"751\":{\"h\":\"单一职责原则\",\"t\":[\"一个类应该只有一个发生变化的原因。\"]},\"752\":{\"h\":\"里氏替换原则\",\"t\":[\"所有引用基类的地方必须能透明地使用其子类的对象。\"]},\"753\":{\"h\":\"依赖倒置原则\",\"t\":[\"1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。\",\"2、抽象不应该依赖于细节，细节应该依赖于抽象。\"]},\"754\":{\"h\":\"接口隔离原则\",\"t\":[\"1、客户端不应该依赖它不需要的接口。\",\"2、类间的依赖关系应该建立在最小的接口上。\"]},\"755\":{\"h\":\"迪米特法则\",\"t\":[\"只与你的直接朋友交谈，不跟“陌生人”说话。\"]},\"756\":{\"h\":\"组合/聚合复用原则\",\"t\":[\"尽量使用对象组合/聚合，而不是继承关系达到软件复用的目的。\"]},\"757\":{\"h\":\"创建型\"},\"758\":{\"h\":\"单例模式\"},\"759\":{\"h\":\"饿汉式\",\"t\":[\"全局只会存在该类的唯一一个对象。在加载类的时候就已经开始初始化，而非等到使用的时候才进行初始化，此种方式线程安全，但可能存在资源浪费，即不会使用其对象还是会创建该对象。\",\"静态常量的方式枚举的方式\"]},\"760\":{\"h\":\"懒汉式\",\"t\":[\"只有在使用的时候才会进行创建该对象，但是由于可能存在多线程调用问题，所以需要注意线程安全问题。\",\"1.synchronized锁住创建方法\",\"2.双重校验锁（DCL，即 double-checked locking）\",\"3.静态内部类的方式\"]},\"761\":{\"h\":\"工厂模式\",\"t\":[\"通过工厂类能够进行生成所需对象，而非手动创建。一般会让工厂构造方法为私有，防止创建工厂的对象。只需调用工厂的某方法就可生成对应的对象。\"]},\"762\":{\"h\":\"抽象工厂模式\",\"t\":[\"工厂模式的进阶用法，通过抽象工厂进行生成工厂。\"]},\"763\":{\"h\":\"建造者模式\",\"t\":[\"把对象的组合构造或者某些属性设置进行封装，使之在创建对象的时候直接满足某些场景的数据，而非全由用户手动设置，防止构建出不符合的对象。\"]},\"764\":{\"h\":\"原型模式\",\"t\":[\"根据某些已经存在的对象而无需再次手动创建此对象和赋值操作。\"]},\"765\":{\"h\":\"结构型\",\"t\":[\"关注于对象的组成以及对象之间的依赖关系，描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。\"]},\"766\":{\"h\":\"适配器模式\",\"t\":[\"适配器是作为两个不兼容的接口之间的桥梁。\",\"将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。\",\"适配器模式主要改变所考虑对象的接口。\"]},\"767\":{\"h\":\"桥梁模式\"},\"768\":{\"h\":\"装饰器模式\",\"t\":[\"装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。\",\"这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。\",\"动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。\",\"装饰器模式为了增强功能。\"]},\"769\":{\"h\":\"门面模式\"},\"770\":{\"h\":\"合成模式\"},\"771\":{\"h\":\"享元模式\"},\"772\":{\"h\":\"代理模式\",\"t\":[\"在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。\",\"在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。\",\"为其他对象提供一种代理以控制对这个对象的访问。\",\"代理模式不能改变所代理类的接口。代理模式是为了加以控制。\"]},\"773\":{\"h\":\"注意事项：\",\"t\":[\"1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。\",\"2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。\"]},\"774\":{\"h\":\"行为型\",\"t\":[\"关注于对象的行为问题，是对在不同的对象之间划分责任和算法的抽象化；不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。\"]},\"775\":{\"h\":\"策略模式\"},\"776\":{\"h\":\"模版方法模式\"},\"777\":{\"h\":\"观察者模式\"},\"778\":{\"h\":\"迭代器模式\"},\"779\":{\"h\":\"责任链模式\"},\"780\":{\"h\":\"命令模式\"},\"781\":{\"h\":\"备忘录模式\"},\"782\":{\"h\":\"状态模式\"},\"783\":{\"h\":\"访问者模式\"},\"784\":{\"h\":\"中介者模式\"},\"785\":{\"h\":\"解释器模式\"},\"786\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"787\":{\"h\":\"其他\"},\"788\":{\"h\":\"教程\"},\"789\":{\"h\":\"面试\"},\"790\":{\"h\":\"Nacos\"},\"791\":{\"h\":\"Rocketmq\"},\"792\":{\"h\":\"Tomcat\"},\"793\":{\"h\":\"Xxl Job\"},\"794\":{\"h\":\"Elasticsearch\"},\"795\":{\"h\":\"Mongodb\"},\"796\":{\"h\":\"Mysql\"},\"797\":{\"h\":\"Redis\"},\"798\":{\"h\":\"Mybatis\"},\"799\":{\"h\":\"Spring\"},\"800\":{\"h\":\"日常\"},\"801\":{\"h\":\"每日复盘\"},\"802\":{\"h\":\"股票\"},\"803\":{\"h\":\"排序\"},\"804\":{\"h\":\"搜索\"},\"805\":{\"h\":\"数据结构\"},\"806\":{\"h\":\"算法思想\"},\"807\":{\"h\":\"领域算法\"},\"808\":{\"h\":\"Docker\"},\"809\":{\"h\":\"Istio\"},\"810\":{\"h\":\"Kubernetes\"},\"811\":{\"h\":\"Linux\"},\"812\":{\"h\":\"操作系统\"},\"813\":{\"h\":\"设计模式\"}},\"dirtCount\":0,\"index\":[[\"领域算法\",{\"0\":{\"807\":1}}],[\"面试\",{\"0\":{\"789\":1}}],[\"面向接口的引入\",{\"1\":{\"472\":1}}],[\"面向接口的编程\",{\"1\":{\"468\":1}}],[\"面向过程\",{\"1\":{\"372\":1}}],[\"面向\",{\"0\":{\"348\":1}}],[\"面向对象有封装\",{\"1\":{\"372\":1}}],[\"面向对象和面向过程的区别\",{\"0\":{\"372\":1}}],[\"面向对象\",{\"0\":{\"156\":1},\"1\":{\"371\":1,\"372\":1}}],[\"面向对象设计\",{\"1\":{\"53\":1}}],[\"备忘录模式\",{\"0\":{\"781\":1}}],[\"备份和恢复\",{\"1\":{\"463\":1}}],[\"责任链模式\",{\"0\":{\"779\":1}}],[\"观察者模式\",{\"0\":{\"777\":1}}],[\"享元模式\",{\"0\":{\"771\":1}}],[\"门面模式\",{\"0\":{\"769\":1}}],[\"装饰器模式为了增强功能\",{\"1\":{\"768\":1,\"773\":1}}],[\"装饰器模式相比生成子类更为灵活\",{\"1\":{\"768\":1}}],[\"装饰器模式\",{\"0\":{\"768\":1},\"1\":{\"768\":1}}],[\"装箱\",{\"1\":{\"375\":1}}],[\"桥梁模式\",{\"0\":{\"767\":1}}],[\"桥接方法\",{\"1\":{\"172\":1}}],[\"懒汉式\",{\"0\":{\"760\":1}}],[\"饿汉式\",{\"0\":{\"759\":1}}],[\"聚合\",{\"1\":{\"756\":1}}],[\"聚合复用原则\",{\"0\":{\"756\":1}}],[\"说话\",{\"1\":{\"755\":1}}],[\"说明同一个对象\",{\"1\":{\"366\":1}}],[\"说明\",{\"1\":{\"148\":1,\"288\":1}}],[\"说明核心类库中没有这个类\",{\"1\":{\"130\":1}}],[\"陌生人\",{\"1\":{\"755\":1}}],[\"迪米特法则\",{\"0\":{\"755\":1}}],[\"细节应该依赖于抽象\",{\"1\":{\"753\":1}}],[\"细化\",{\"1\":{\"105\":1}}],[\"依赖倒置原则\",{\"0\":{\"753\":1}}],[\"七大原则\",{\"0\":{\"749\":1}}],[\"快速记忆23种设计模式\",{\"1\":{\"748\":1}}],[\"快速开始\",{\"1\":{\"711\":1}}],[\"释放打开的文件fd\",{\"1\":{\"746\":1}}],[\"打开一个文件\",{\"1\":{\"746\":1}}],[\"打包\",{\"0\":{\"33\":1}}],[\"既要给应用程序尽可能多的灵活性\",{\"1\":{\"744\":1}}],[\"强大的服务又要简单的接口\",{\"1\":{\"744\":1}}],[\"强引用\",{\"1\":{\"383\":1}}],[\"挑战和快乐\",{\"0\":{\"744\":1}}],[\"权限控制\",{\"1\":{\"743\":1}}],[\"权限管理\",{\"1\":{\"742\":1}}],[\"理解操作系统的设计和实现\",{\"1\":{\"742\":1}}],[\"理解和修改\",{\"1\":{\"157\":1}}],[\"浅谈5种io模型\",{\"1\":{\"739\":1}}],[\"浅拷贝\",{\"1\":{\"387\":1}}],[\"告诉内核它要读取数据后即刻返回\",{\"1\":{\"737\":1}}],[\"告诉内部bean工厂使用上下文的类装入器等\",{\"1\":{\"535\":1}}],[\"信号驱动io\",{\"1\":{\"739\":1}}],[\"信号驱动式\",{\"0\":{\"736\":1},\"1\":{\"732\":1}}],[\"信号\",{\"1\":{\"736\":1,\"737\":1}}],[\"知道系统准备好数据进行系统调用\",{\"1\":{\"735\":1}}],[\"知道系统准备好数据\",{\"1\":{\"734\":1}}],[\"知乎\",{\"0\":{\"52\":1},\"1\":{\"115\":1,\"748\":1}}],[\"亦可以跳过这个步骤\",{\"1\":{\"731\":1}}],[\"速度非常稳定\",{\"1\":{\"731\":1}}],[\"卸载旧版本\",{\"1\":{\"731\":2}}],[\"您需要等候\",{\"1\":{\"731\":1}}],[\"状态模式\",{\"0\":{\"782\":1}}],[\"状态\",{\"1\":{\"725\":1}}],[\"状态监测\",{\"1\":{\"463\":1}}],[\"请求\",{\"1\":{\"737\":1}}],[\"请求数据\",{\"1\":{\"735\":1}}],[\"请求来读取数据\",{\"1\":{\"735\":1}}],[\"请等到所有容器组\",{\"1\":{\"725\":1}}],[\"请注意前缀的限制应以字节为单位进行测量\",{\"1\":{\"446\":1}}],[\"请注意\",{\"1\":{\"91\":1,\"97\":1}}],[\"建造者模式\",{\"0\":{\"763\":1}}],[\"建议将图片保存下来直接上传\",{\"1\":{\"725\":1}}],[\"建新股份\",{\"1\":{\"633\":1}}],[\"安全组隔离\",{\"1\":{\"722\":1}}],[\"安装kubelet\",{\"1\":{\"731\":1}}],[\"安装kubernetes\",{\"0\":{\"729\":1}}],[\"安装并启动\",{\"1\":{\"731\":1}}],[\"安装前检查\",{\"0\":{\"722\":1}}],[\"安装应用\",{\"0\":{\"710\":1}}],[\"安装redis\",{\"1\":{\"461\":1}}],[\"安装包安装\",{\"0\":{\"416\":1}}],[\"安装与配置\",{\"0\":{\"412\":1}}],[\"安装docker\",{\"1\":{\"9\":1}}],[\"安装\",{\"0\":{\"9\":1,\"12\":1,\"13\":1,\"15\":1,\"16\":1,\"22\":1,\"23\":1,\"27\":1,\"38\":1,\"413\":1,\"414\":1,\"415\":1,\"417\":1,\"461\":1,\"715\":1,\"716\":1,\"724\":1},\"1\":{\"15\":1,\"715\":1,\"731\":3}}],[\"安装工具\",{\"0\":{\"8\":1}}],[\"地址\",{\"1\":{\"722\":2}}],[\"地产链\",{\"0\":{\"584\":1,\"596\":1}}],[\"小数点\",{\"1\":{\"722\":1}}],[\"小盘股大规模跌停\",{\"1\":{\"614\":1}}],[\"版本为\",{\"1\":{\"722\":1}}],[\"任意节点不会直接使用\",{\"1\":{\"722\":1}}],[\"任意节点上\",{\"1\":{\"722\":1}}],[\"任意节点都有固定的内网\",{\"1\":{\"722\":1}}],[\"任意节点\",{\"1\":{\"722\":3}}],[\"任务的数据包\",{\"1\":{\"694\":1}}],[\"任务提出的原始符号中扩展而来的\",{\"1\":{\"69\":1}}],[\"任务或者轻量级线程来执行\",{\"1\":{\"67\":1}}],[\"任务\",{\"1\":{\"67\":3,\"83\":1,\"97\":1,\"111\":1}}],[\"任务安排\",{\"1\":{\"48\":1}}],[\"任务编写\",{\"1\":{\"44\":1}}],[\"联合文件系统\",{\"0\":{\"697\":1}}],[\"里氏替换原则\",{\"0\":{\"752\":1}}],[\"里的进程\",{\"1\":{\"696\":1}}],[\"里面有\",{\"0\":{\"392\":1}}],[\"里面的key为string\",{\"1\":{\"166\":1}}],[\"里面的var类型为string类型\",{\"1\":{\"166\":1}}],[\"改变当前的工作目录\",{\"1\":{\"746\":1}}],[\"改变一个\",{\"1\":{\"696\":1}}],[\"改用传统的互斥同步可能会比原子类更高效\",{\"1\":{\"226\":1}}],[\"约为\",{\"1\":{\"695\":1}}],[\"约束\",{\"1\":{\"57\":1}}],[\"暂停n个时钟节拍\",{\"1\":{\"746\":1}}],[\"暂停\",{\"1\":{\"694\":1}}],[\"资源的报告\",{\"1\":{\"694\":1}}],[\"资源监控和限制\",{\"1\":{\"694\":1}}],[\"挂载在同一目录\",{\"1\":{\"694\":2}}],[\"挂起期间\",{\"1\":{\"252\":1}}],[\"挂起一个线程\",{\"1\":{\"236\":1}}],[\"限制任务的数量\",{\"1\":{\"694\":1}}],[\"限制使用的内存页数量\",{\"1\":{\"694\":1}}],[\"限制\",{\"1\":{\"694\":1}}],[\"限期等待或者无限期等待状态\",{\"1\":{\"246\":1}}],[\"限期等待\",{\"0\":{\"236\":1}}],[\"磁盘\",{\"1\":{\"694\":1,\"743\":1}}],[\"磁盘空间已满\",{\"1\":{\"463\":1}}],[\"镜像下载速度和稳定性\",{\"1\":{\"731\":1}}],[\"镜像\",{\"1\":{\"731\":1}}],[\"镜像优化\",{\"0\":{\"691\":1}}],[\"镜像打标签\",{\"0\":{\"690\":1}}],[\"镜像测试\",{\"0\":{\"33\":1}}],[\"离线下载镜像\",{\"0\":{\"688\":1}}],[\"能不能我发出请求后等你数据准备好了就通知我\",{\"1\":{\"736\":1}}],[\"能不能不要我总是去问你是否数据准备就绪\",{\"1\":{\"736\":1}}],[\"能不能提供一种方式\",{\"1\":{\"735\":1}}],[\"能都够在网上获得相应的答案\",{\"1\":{\"680\":1}}],[\"能够通过该对象获得更多的功能\",{\"1\":{\"529\":1}}],[\"能够运行时动态获取类的实例\",{\"1\":{\"399\":1}}],[\"能够让两个或以上的线程同时并行执行\",{\"1\":{\"257\":1}}],[\"能够快速搭建高可用\",{\"1\":{\"4\":1}}],[\"能够实现容器化的集群部署\",{\"1\":{\"4\":1}}],[\"能够进行日常项目搭建和脚本的编写\",{\"1\":{\"3\":1}}],[\"能够根据实际场景给出方案\",{\"1\":{\"3\":1}}],[\"边是顶点的有序偶对\",{\"1\":{\"677\":1}}],[\"至少2个关键字\",{\"1\":{\"673\":1}}],[\"至于它是否可以运行\",{\"1\":{\"126\":1}}],[\"至于逻辑蓝图\",{\"1\":{\"91\":1}}],[\"取上整\",{\"1\":{\"673\":1}}],[\"取得信息\",{\"1\":{\"166\":2}}],[\"取得字符串的长度\",{\"1\":{\"166\":1}}],[\"除非另外声明\",{\"1\":{\"746\":1}}],[\"除根结点以外的非叶子结点的儿子数为\",{\"1\":{\"673\":1}}],[\"除了根节点以外\",{\"1\":{\"669\":1}}],[\"除了八种基础类型外都是封装类型\",{\"1\":{\"373\":1}}],[\"除了声明为\",{\"1\":{\"161\":1}}],[\"除了类的信息外\",{\"1\":{\"135\":1}}],[\"除了可以减少架构相关的风险\",{\"1\":{\"105\":1}}],[\"除了oo方法\",{\"1\":{\"59\":1}}],[\"叶节点即树尾端null指针或null节点\",{\"1\":{\"672\":1}}],[\"右两个子树都是一棵平衡二叉树\",{\"1\":{\"671\":1}}],[\"右子节点大于父节点构建\",{\"1\":{\"671\":1}}],[\"左子节点小于父节点\",{\"1\":{\"671\":1}}],[\"遍历或者查找的速度较慢\",{\"1\":{\"666\":1}}],[\"频繁的遍历的\",{\"1\":{\"665\":1}}],[\"增删改查速度较快\",{\"1\":{\"666\":1}}],[\"增删改查速度较慢\",{\"1\":{\"665\":1}}],[\"增加索引\",{\"1\":{\"447\":1}}],[\"增加\",{\"1\":{\"273\":1}}],[\"增加了缓存\",{\"1\":{\"202\":1}}],[\"散列表\",{\"0\":{\"675\":1},\"1\":{\"664\":1,\"675\":1}}],[\"树是一种数据结构\",{\"1\":{\"669\":1}}],[\"树\",{\"0\":{\"669\":1,\"673\":1},\"1\":{\"664\":1,\"669\":1,\"674\":1}}],[\"树退化为链表\",{\"1\":{\"326\":1}}],[\"树退化成链表的最大元素数量\",{\"1\":{\"326\":1}}],[\"队列可以在一端添加元素\",{\"1\":{\"668\":1}}],[\"队列与栈一样\",{\"1\":{\"668\":1}}],[\"队列\",{\"0\":{\"668\":1},\"1\":{\"664\":1}}],[\"队列中的第一个线程才能获得锁\",{\"1\":{\"259\":1}}],[\"栈\",{\"0\":{\"667\":1},\"1\":{\"664\":1}}],[\"栈上分配\",{\"1\":{\"136\":1,\"141\":1}}],[\"政策热点要及时跟进\",{\"1\":{\"663\":1}}],[\"价格足够低\",{\"1\":{\"661\":1,\"663\":1}}],[\"企稳重新上涨再考虑抄底\",{\"1\":{\"661\":1,\"663\":1}}],[\"附件\",{\"0\":{\"731\":1}}],[\"附近\",{\"1\":{\"661\":1,\"663\":1}}],[\"附录\",{\"0\":{\"545\":1},\"1\":{\"109\":1}}],[\"尊重市场表现\",{\"1\":{\"661\":1,\"663\":1}}],[\"毫米波雷达\",{\"0\":{\"654\":1}}],[\"毫秒后过期\",{\"1\":{\"462\":1}}],[\"光通信\",{\"0\":{\"653\":1}}],[\"光洋股份\",{\"1\":{\"615\":1}}],[\"概念\",{\"0\":{\"652\":1}}],[\"概览\",{\"0\":{\"603\":1,\"618\":1}}],[\"云服务\",{\"0\":{\"650\":1}}],[\"云平台主要采用的技术如下\",{\"1\":{\"4\":1}}],[\"云平台搭建\",{\"0\":{\"4\":1}}],[\"思索后不要因为太高犹犹豫豫\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"思考\",{\"0\":{\"573\":1}}],[\"买卖不要太过随心\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"买入原因\",{\"1\":{\"633\":1,\"634\":1,\"635\":1,\"645\":1}}],[\"买入\",{\"0\":{\"563\":1,\"568\":1}}],[\"尽量使用对象组合\",{\"1\":{\"756\":1}}],[\"尽量不要选择跟风的\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"尽可能地隐藏内部的细节\",{\"1\":{\"157\":1}}],[\"形态\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"形式\",{\"1\":{\"57\":1}}],[\"仔细复盘\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"锡业股份\",{\"0\":{\"634\":1}}],[\"金盾股份修复领先\",{\"1\":{\"633\":1}}],[\"符合苏州发布的低空经济文章\",{\"1\":{\"633\":1}}],[\"符合这种特点的应用并不少见\",{\"1\":{\"229\":1}}],[\"军工\",{\"0\":{\"628\":1}}],[\"洛阳钼业\",{\"1\":{\"616\":1}}],[\"博迁新材\",{\"0\":{\"635\":1},\"1\":{\"616\":1}}],[\"博威合金\",{\"1\":{\"571\":1}}],[\"盛达资源\",{\"1\":{\"616\":1}}],[\"三祥新材\",{\"1\":{\"616\":1}}],[\"三个master主机\",{\"1\":{\"731\":1}}],[\"三个master节点\",{\"0\":{\"726\":1}}],[\"三个里面有两个涨停\",{\"1\":{\"596\":1}}],[\"三个关键字\",{\"1\":{\"207\":1}}],[\"考虑重新做有色板块\",{\"1\":{\"616\":1}}],[\"考虑某列中值的分布\",{\"1\":{\"449\":1}}],[\"沪镍今日大跌\",{\"1\":{\"635\":1}}],[\"沪镍大涨\",{\"1\":{\"635\":1}}],[\"沪镍涨幅过大\",{\"1\":{\"616\":1}}],[\"沪锡大涨\",{\"1\":{\"634\":1}}],[\"沪锡\",{\"1\":{\"616\":1}}],[\"永悦科技\",{\"1\":{\"615\":1}}],[\"永远也不会看到它在多个线程之中处于不一致的状态\",{\"1\":{\"216\":1}}],[\"苏交科\",{\"0\":{\"633\":1},\"1\":{\"615\":1}}],[\"苏州发布低空经济高质量发展三年实施方案\",{\"1\":{\"614\":1}}],[\"连板效应好\",{\"1\":{\"615\":1}}],[\"连接池的设计就显得非常重要\",{\"1\":{\"472\":1}}],[\"连接池管理机制\",{\"1\":{\"472\":1}}],[\"连接从节点的客户端也无法获取到新的可用从节点\",{\"1\":{\"463\":1}}],[\"连接就是将已经读入到内存的类的二进制数据合并到虚拟机的运行时环境中去\",{\"1\":{\"131\":1}}],[\"连接阶段\",{\"1\":{\"131\":1}}],[\"连接器\",{\"1\":{\"111\":1}}],[\"连接\",{\"1\":{\"65\":1}}],[\"连接线\",{\"1\":{\"65\":1}}],[\"股票\",{\"0\":{\"802\":1}}],[\"股价够低\",{\"1\":{\"615\":1}}],[\"股性一般\",{\"1\":{\"587\":1}}],[\"股性较好\",{\"1\":{\"584\":1,\"585\":1,\"586\":1}}],[\"终止对应pid的进程\",{\"1\":{\"746\":1}}],[\"终止当前进程\",{\"1\":{\"746\":1}}],[\"终于迎来了短线情绪的修复\",{\"1\":{\"614\":1}}],[\"终端打开一个会话\",{\"1\":{\"93\":1}}],[\"终端根据编号方案分析数字流\",{\"1\":{\"93\":1}}],[\"终端分配资源\",{\"1\":{\"93\":1}}],[\"终端进程\",{\"1\":{\"73\":1}}],[\"终端使用\",{\"1\":{\"65\":1}}],[\"终端\",{\"1\":{\"65\":1}}],[\"终端可能是电话\",{\"1\":{\"65\":1}}],[\"国九条\",{\"1\":{\"614\":1}}],[\"明天应该是五日均线\",{\"1\":{\"612\":1}}],[\"明日\",{\"0\":{\"639\":1,\"658\":1}}],[\"明日出异动\",{\"1\":{\"601\":1}}],[\"明日计划\",{\"0\":{\"572\":1}}],[\"美股\",{\"0\":{\"610\":1}}],[\"期货情况\",{\"0\":{\"609\":1}}],[\"情绪周期和赚钱效应\",{\"1\":{\"645\":1}}],[\"情绪分析图\",{\"0\":{\"608\":1,\"623\":1}}],[\"情况优选\",{\"1\":{\"437\":1}}],[\"晋级情况\",{\"0\":{\"605\":1,\"620\":1}}],[\"今天尝试修复\",{\"1\":{\"600\":1}}],[\"今日涨停复盘\",{\"0\":{\"638\":1,\"657\":1}}],[\"今日异动机会\",{\"0\":{\"637\":1,\"647\":1}}],[\"今日大盘\",{\"0\":{\"598\":1}}],[\"今日成交量是昨日的一倍\",{\"1\":{\"584\":1}}],[\"今日连板情况\",{\"0\":{\"606\":1,\"621\":1}}],[\"今日连板\",{\"0\":{\"583\":1,\"594\":1}}],[\"今日走势\",{\"0\":{\"575\":1}}],[\"今日情绪\",{\"0\":{\"569\":1,\"582\":1,\"597\":1}}],[\"今日操作\",{\"0\":{\"558\":1,\"576\":1,\"595\":1}}],[\"短剧游戏之前是结合kimi大涨\",{\"1\":{\"600\":1}}],[\"短剧游戏\",{\"0\":{\"600\":1}}],[\"煤炭\",{\"0\":{\"599\":1}}],[\"混沌\",{\"1\":{\"597\":1}}],[\"昨日未能进入金盾股份\",{\"1\":{\"633\":1}}],[\"昨日个股走势\",{\"0\":{\"579\":1}}],[\"昨天并不是一个好的出场点\",{\"1\":{\"601\":1}}],[\"昨天复盘确认方向是地产链\",{\"1\":{\"596\":1}}],[\"食品饮料未进行观察\",{\"1\":{\"597\":1}}],[\"食品饮料\",{\"0\":{\"589\":1}}],[\"首选亚振家居\",{\"1\":{\"588\":1,\"596\":1}}],[\"首先标记出所有需要回收的对象\",{\"1\":{\"147\":1}}],[\"已过筹码峰\",{\"1\":{\"587\":1}}],[\"已经过了筹码峰\",{\"1\":{\"586\":1}}],[\"已经存在并且是一个字符串\",{\"1\":{\"462\":1}}],[\"爱丽家居\",{\"0\":{\"587\":1},\"1\":{\"596\":1}}],[\"量化\",{\"1\":{\"586\":1}}],[\"湖州劳动路\",{\"1\":{\"586\":1}}],[\"亚振家居\",{\"0\":{\"586\":1},\"1\":{\"596\":1}}],[\"封单5\",{\"1\":{\"586\":1}}],[\"封单\",{\"1\":{\"585\":1,\"587\":1}}],[\"封装了\",{\"1\":{\"474\":1}}],[\"封装了部分方法\",{\"1\":{\"300\":1}}],[\"封装类型\",{\"1\":{\"373\":7}}],[\"封装类\",{\"1\":{\"373\":1}}],[\"封装\",{\"0\":{\"157\":1}}],[\"封装和继承的原则\",{\"1\":{\"59\":1}}],[\"宁波桑田路\",{\"1\":{\"585\":1,\"587\":1}}],[\"京投发展\",{\"0\":{\"585\":1},\"1\":{\"596\":1}}],[\"换手率达到20\",{\"1\":{\"584\":1}}],[\"换句话说\",{\"1\":{\"449\":1}}],[\"二叉树\",{\"0\":{\"670\":1}}],[\"二进三适合的只有地产链和食品饮料\",{\"1\":{\"583\":1}}],[\"二级制兼容性的验证\",{\"1\":{\"132\":1}}],[\"龙头出现负反馈\",{\"1\":{\"661\":1,\"663\":1}}],[\"龙头首阴\",{\"1\":{\"582\":1,\"590\":1,\"597\":1}}],[\"龙虎榜分析\",{\"0\":{\"553\":1}}],[\"交易方案\",{\"1\":{\"582\":1,\"597\":1}}],[\"交互模型中的\",{\"1\":{\"229\":1}}],[\"阶段\",{\"1\":{\"582\":1,\"597\":1}}],[\"低吸\",{\"1\":{\"661\":1,\"663\":1}}],[\"低开低走\",{\"1\":{\"625\":1}}],[\"低开高走\",{\"1\":{\"612\":1}}],[\"低位\",{\"1\":{\"585\":1,\"586\":1}}],[\"低空经济开始走强\",{\"1\":{\"645\":1}}],[\"低空经济经历大分歧\",{\"1\":{\"633\":1}}],[\"低空经济尝试修复\",{\"0\":{\"601\":1}}],[\"低空经济应该是目前来说比价好的题材\",{\"1\":{\"581\":1}}],[\"低空经济\",{\"0\":{\"581\":1,\"614\":1,\"627\":1,\"636\":1,\"646\":1}}],[\"低速循环任务\",{\"1\":{\"73\":1}}],[\"铜缆高速连接\",{\"0\":{\"578\":1,\"648\":1}}],[\"铜缆高速和kimi\",{\"1\":{\"573\":1}}],[\"华为算力\",{\"0\":{\"656\":1}}],[\"华策传媒\",{\"1\":{\"577\":1}}],[\"华生科技\",{\"1\":{\"571\":1}}],[\"介入掌阅科技不是一个明智的选择\",{\"1\":{\"577\":1}}],[\"介绍和举例\",{\"0\":{\"741\":1}}],[\"介绍\",{\"0\":{\"55\":1,\"694\":1}}],[\"掌阅科技在重新涨停时才可以介入其他个股\",{\"1\":{\"577\":1}}],[\"掌阅科技\",{\"1\":{\"577\":1,\"580\":1}}],[\"掌握\",{\"1\":{\"3\":2}}],[\"延续性如何\",{\"1\":{\"573\":1}}],[\"延时双删\",{\"1\":{\"464\":1}}],[\"周一低空经济是否会修复\",{\"1\":{\"573\":1}}],[\"周梅\",{\"1\":{\"426\":1}}],[\"看情况是否买入个股选择的标的\",{\"1\":{\"572\":1}}],[\"看情况是否卖出万丰奥威\",{\"1\":{\"572\":1}}],[\"看看持有锁的线程是否很快就会释放锁\",{\"1\":{\"257\":1}}],[\"沃尔核材\",{\"1\":{\"571\":1}}],[\"追加\",{\"1\":{\"731\":1}}],[\"追加到该\",{\"1\":{\"462\":1}}],[\"追涨\",{\"1\":{\"661\":1,\"663\":1}}],[\"追踪\",{\"1\":{\"571\":1}}],[\"王子新材\",{\"1\":{\"571\":1}}],[\"王五\",{\"1\":{\"428\":1}}],[\"飞行汽车和铜缆高速\",{\"1\":{\"570\":1}}],[\"飞机被分配到很多不同的进程上\",{\"1\":{\"97\":1}}],[\"飞机的\",{\"1\":{\"97\":1}}],[\"飞机的持久性和分布式方面的处理被推到\",{\"1\":{\"97\":1}}],[\"飞机3\",{\"1\":{\"81\":1}}],[\"市值超过百亿且主力资金流入的只有万丰奥威\",{\"1\":{\"568\":1}}],[\"克来机电\",{\"0\":{\"565\":1},\"1\":{\"568\":1}}],[\"克隆方法\",{\"1\":{\"401\":1}}],[\"克隆\",{\"1\":{\"385\":1}}],[\"万丰奥威开盘大涨\",{\"1\":{\"645\":1}}],[\"万丰奥威修复不佳\",{\"1\":{\"633\":1}}],[\"万丰奥威\",{\"0\":{\"564\":1},\"1\":{\"568\":1}}],[\"万一在redis意外宕机\",{\"1\":{\"463\":1}}],[\"牧原股份\",{\"0\":{\"562\":1},\"1\":{\"567\":1}}],[\"天元智能\",{\"0\":{\"561\":1},\"1\":{\"567\":1}}],[\"卖出原因\",{\"1\":{\"633\":1,\"634\":1,\"635\":1}}],[\"卖出克来\",{\"1\":{\"572\":1}}],[\"卖出\",{\"0\":{\"560\":1,\"567\":1},\"1\":{\"567\":2}}],[\"预案\",{\"0\":{\"556\":1}}],[\"预期的可复用性和通用性的程度\",{\"1\":{\"99\":1}}],[\"预期的代码规模\",{\"1\":{\"99\":1}}],[\"板块\",{\"0\":{\"613\":1,\"626\":1}}],[\"板块分析\",{\"0\":{\"555\":1}}],[\"板块轮动\",{\"0\":{\"550\":1,\"570\":1,\"607\":1,\"622\":1}}],[\"跌停分析\",{\"0\":{\"552\":1}}],[\"涨停分析\",{\"0\":{\"551\":1}}],[\"复用io模型解决了一个线程可以监控多个fd的问题\",{\"1\":{\"736\":1}}],[\"复制绿框部分与黄框部分\",{\"1\":{\"725\":1}}],[\"复制算法\",{\"1\":{\"147\":1}}],[\"复盘不完善\",{\"1\":{\"645\":1}}],[\"复盘\",{\"0\":{\"548\":1,\"557\":1,\"574\":1,\"592\":1,\"602\":1,\"617\":1,\"630\":1,\"641\":1,\"662\":1}}],[\"销毁方法\",{\"1\":{\"546\":1}}],[\"推荐下载最新版\",{\"1\":{\"703\":1}}],[\"推荐做二进三\",{\"1\":{\"569\":1}}],[\"推断的销毁方法的名字一般为close或是shutdown\",{\"1\":{\"546\":1}}],[\"推导最佳过程架构不是一个线性的\",{\"1\":{\"97\":1}}],[\"去除个人情感下的结论\",{\"1\":{\"661\":1,\"663\":1}}],[\"去掉set\",{\"1\":{\"546\":1}}],[\"去加载\",{\"1\":{\"130\":4}}],[\"未直接跌停\",{\"1\":{\"633\":1}}],[\"未进行板块分析\",{\"1\":{\"591\":1}}],[\"未过筹码峰\",{\"1\":{\"585\":1}}],[\"未炸板\",{\"1\":{\"584\":1}}],[\"未找到评判方法\",{\"1\":{\"578\":1}}],[\"未激活autowiring\",{\"1\":{\"546\":1}}],[\"未执行完整的写入命令\",{\"1\":{\"463\":1}}],[\"跟进代码可以看出执行\",{\"1\":{\"538\":1}}],[\"✅spring\",{\"1\":{\"533\":1,\"538\":1,\"540\":1,\"541\":1,\"542\":1}}],[\"源站可能有防盗链机制\",{\"1\":{\"725\":1}}],[\"源码环境搭建\",{\"0\":{\"518\":1}}],[\"源代码到最终实际执行的指令序列\",{\"1\":{\"206\":1}}],[\"源代码\",{\"1\":{\"69\":1}}],[\"译为插件异常\",{\"1\":{\"507\":1}}],[\"译为日志异常\",{\"1\":{\"507\":1}}],[\"译为绑定异常\",{\"1\":{\"507\":1}}],[\"译为批量执行器异常\",{\"1\":{\"507\":1}}],[\"译为执行器异常\",{\"1\":{\"507\":1}}],[\"译为反射异常\",{\"1\":{\"507\":1}}],[\"译为sqlsession的异常\",{\"1\":{\"507\":1}}],[\"译为建造异常\",{\"1\":{\"507\":1}}],[\"译为事务异常\",{\"1\":{\"507\":1}}],[\"译为数据源异常\",{\"1\":{\"507\":1}}],[\"译为结果映射异常\",{\"1\":{\"507\":1}}],[\"译为脚本异常\",{\"1\":{\"507\":1}}],[\"译为解析异常\",{\"1\":{\"507\":1}}],[\"译为缓存异常\",{\"1\":{\"507\":1}}],[\"译为类型异常\",{\"1\":{\"507\":1}}],[\"译为多条返回结果异常\",{\"1\":{\"507\":1}}],[\"译为持久化异常\",{\"1\":{\"507\":1}}],[\"译者备注\",{\"1\":{\"105\":1,\"111\":1,\"115\":1}}],[\"全局只会存在该类的唯一一个对象\",{\"1\":{\"759\":1}}],[\"全局通过exceptionfactory\",{\"1\":{\"506\":1}}],[\"全部处于\",{\"1\":{\"725\":1}}],[\"全文索引\",{\"1\":{\"447\":1}}],[\"私有构造函数\",{\"1\":{\"506\":1}}],[\"私有镜像仓库\",{\"1\":{\"4\":1}}],[\"拦截调用close方法\",{\"1\":{\"502\":1}}],[\"待了解\",{\"1\":{\"501\":1}}],[\"抽取父类编写通用处理方法\",{\"1\":{\"493\":1}}],[\"抽象工厂模式\",{\"0\":{\"762\":1}}],[\"抽象不应该依赖于细节\",{\"1\":{\"753\":1}}],[\"抽象硬件\",{\"1\":{\"742\":1}}],[\"抽象了键值对数据集合的通用方法\",{\"1\":{\"325\":1}}],[\"抽象方法的返回值就是泛型类型\",{\"1\":{\"167\":1}}],[\"讲解\",{\"0\":{\"489\":1,\"492\":1,\"499\":1,\"505\":1,\"510\":1}}],[\"背景知识\",{\"0\":{\"488\":1,\"491\":1,\"498\":1,\"504\":1,\"509\":1}}],[\"唯一标识\",{\"1\":{\"479\":1}}],[\"唯一索引\",{\"1\":{\"447\":1}}],[\"随便写\",{\"1\":{\"479\":2}}],[\"随着硬件指令集的发展\",{\"1\":{\"224\":1}}],[\"随着\",{\"1\":{\"136\":1,\"141\":1}}],[\"命名空间+\",{\"1\":{\"482\":1}}],[\"命名空间\",{\"0\":{\"696\":1},\"1\":{\"479\":1}}],[\"命令模式\",{\"0\":{\"780\":1}}],[\"命令将指定的\",{\"1\":{\"462\":1}}],[\"命令获取\",{\"1\":{\"456\":1}}],[\"命令来改善性能\",{\"1\":{\"433\":1}}],[\"命令进行构建打包\",{\"1\":{\"34\":1}}],[\"命令\",{\"1\":{\"31\":2,\"463\":2}}],[\"池类型的数据源\",{\"1\":{\"478\":1}}],[\"根结点的儿子数为\",{\"1\":{\"673\":1}}],[\"根节点是黑的\",{\"1\":{\"672\":1}}],[\"根标签\",{\"1\":{\"478\":1,\"479\":1}}],[\"根据某些已经存在的对象而无需再次手动创建此对象和赋值操作\",{\"1\":{\"764\":1}}],[\"根据您服务器网速的情况\",{\"1\":{\"731\":1}}],[\"根据市场做反馈\",{\"1\":{\"661\":1,\"663\":1}}],[\"根据苏州最新消息\",{\"1\":{\"614\":1}}],[\"根据set方法参数的类型作为bean类型进行依赖查找\",{\"1\":{\"546\":1}}],[\"根据set方法的的名称作为bean名称进行依赖查找\",{\"1\":{\"546\":1}}],[\"根据方法名可以看出此处是执行\",{\"1\":{\"537\":1}}],[\"根据以上代码可以看出本质为\",{\"1\":{\"532\":1}}],[\"根据包结构可看出\",{\"1\":{\"497\":1}}],[\"根据\",{\"1\":{\"468\":1}}],[\"根据所使用的\",{\"1\":{\"463\":1}}],[\"根据存储引擎可以定义每个表的最大索引数和最大索引长度\",{\"1\":{\"446\":1}}],[\"根据从上面的概念描述我们可以发现\",{\"1\":{\"256\":1}}],[\"根据类型参数的上下界推断并替换所有的类型参数为原生态类型\",{\"1\":{\"172\":1}}],[\"根据风险和关键程度选择少量场景进行迭代\",{\"1\":{\"107\":1}}],[\"根据测试或部署的各种配置\",{\"1\":{\"101\":1}}],[\"根据现有日志进行抽象设计和实现\",{\"1\":{\"48\":1}}],[\"根据现有通知业务进行业务抽象设计和实现\",{\"1\":{\"48\":1}}],[\"根据安装的插件可添加很多功能\",{\"1\":{\"31\":1}}],[\"维护了一条<select|update|delete|insert>节点的封装\",{\"1\":{\"474\":1}}],[\"维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作\",{\"1\":{\"222\":1}}],[\"某些类通用的一些处理方法一致\",{\"1\":{\"493\":1}}],[\"某些高级功能还是要依赖\",{\"1\":{\"472\":1}}],[\"某些字段不行序列化怎么办\",{\"0\":{\"396\":1}}],[\"放置到\",{\"1\":{\"472\":1}}],[\"纯粹是为了满足面向接口编程的需要\",{\"1\":{\"468\":1}}],[\"底层还是通过\",{\"1\":{\"468\":1}}],[\"供用户实现对数据库的增删改查数据操作\",{\"1\":{\"467\":1}}],[\"供应商管理\",{\"1\":{\"49\":1}}],[\"异步\",{\"0\":{\"737\":1},\"1\":{\"732\":1}}],[\"异步更新\",{\"1\":{\"464\":1}}],[\"异常类型\",{\"0\":{\"507\":1}}],[\"异常的封装\",{\"1\":{\"504\":1}}],[\"异常的层次结构\",{\"0\":{\"189\":1}}],[\"异常实践\",{\"0\":{\"191\":1}}],[\"异常基础\",{\"0\":{\"190\":1}}],[\"异常机制\",{\"0\":{\"188\":1}}],[\"异常处理等等需要依赖它\",{\"1\":{\"139\":1}}],[\"异常\",{\"1\":{\"136\":2,\"138\":2,\"401\":1,\"404\":1,\"463\":1}}],[\"造成过大压力\",{\"1\":{\"464\":1}}],[\"造成死锁\",{\"1\":{\"252\":1}}],[\"判定好条件\",{\"1\":{\"464\":1}}],[\"判断是否是\",{\"1\":{\"538\":1}}],[\"判断是否需要\",{\"1\":{\"537\":1}}],[\"判断是否跳过注册\",{\"1\":{\"532\":1}}],[\"判断是否设置了delegate属性\",{\"1\":{\"130\":1}}],[\"判断一个对象是都可以被回收的最后一步就是判断是否重写了此方法\",{\"1\":{\"401\":1}}],[\"判断开始位置和结束位置是否超出\",{\"1\":{\"368\":1}}],[\"判断字符串是否从某个字符串开始的\",{\"0\":{\"368\":1}}],[\"判断若当前链表的数量大于默认树化的数目\",{\"1\":{\"327\":1}}],[\"判断集合中是否存在该元素是通过遍历集合的属性elementdata的数据\",{\"1\":{\"303\":1}}],[\"判断\",{\"0\":{\"303\":1,\"309\":1,\"315\":1},\"1\":{\"374\":1,\"462\":1}}],[\"遇到单机内存\",{\"1\":{\"463\":1}}],[\"转换成\",{\"1\":{\"470\":1}}],[\"转换\",{\"1\":{\"463\":1}}],[\"转而去执行另外一段代码\",{\"1\":{\"230\":1}}],[\"哨兵\",{\"1\":{\"463\":1}}],[\"搭建\",{\"1\":{\"463\":1}}],[\"搭建了新再生交易平台\",{\"1\":{\"49\":1}}],[\"做到读写分离\",{\"1\":{\"463\":1}}],[\"策略模式\",{\"0\":{\"775\":1}}],[\"策略\",{\"1\":{\"463\":1}}],[\"举个例子\",{\"1\":{\"463\":1}}],[\"协议的格式保存\",{\"1\":{\"463\":1}}],[\"现有的\",{\"1\":{\"463\":1}}],[\"现代处理器采用了指令级并行技术\",{\"1\":{\"206\":1}}],[\"丢失数据\",{\"1\":{\"463\":1}}],[\"耗性能\",{\"1\":{\"463\":1}}],[\"耗时\",{\"1\":{\"463\":1}}],[\"父进程不需要再做其他io操作\",{\"1\":{\"463\":1}}],[\"父类的成员方法只能被它的子类重写\",{\"1\":{\"161\":1}}],[\"父类引用指向子类对象称为\",{\"1\":{\"158\":1}}],[\"订阅与发布\",{\"1\":{\"462\":1}}],[\"订单完成问题\",{\"1\":{\"49\":1}}],[\"排序\",{\"0\":{\"803\":1},\"1\":{\"462\":1}}],[\"排他锁\",{\"0\":{\"261\":1},\"1\":{\"454\":1}}],[\"移除worker节点\",{\"0\":{\"728\":1}}],[\"移除\",{\"1\":{\"463\":1}}],[\"移除有序集合中给定的分数区间的所有成员\",{\"1\":{\"462\":1}}],[\"移除有序集合中给定的排名区间的所有成员\",{\"1\":{\"462\":1}}],[\"移除有序集合中给定的字典区间的所有成员\",{\"1\":{\"462\":1}}],[\"移除有序集合中的一个或多个成员\",{\"1\":{\"462\":1}}],[\"移除集合中一个或多个成员\",{\"1\":{\"462\":1}}],[\"移除并返回集合中的一个随机元素\",{\"1\":{\"462\":1}}],[\"移出并获取列表的第一个元素\",{\"1\":{\"462\":1}}],[\"移出并获取列表的最后一个元素\",{\"1\":{\"462\":2}}],[\"移出\",{\"1\":{\"325\":1}}],[\"移出通过\",{\"1\":{\"299\":1}}],[\"浮点\",{\"1\":{\"462\":1}}],[\"位开始\",{\"1\":{\"462\":1}}],[\"位的值为\",{\"1\":{\"462\":1}}],[\"覆写\",{\"1\":{\"462\":1}}],[\"覆盖\",{\"1\":{\"159\":1}}],[\"旧的\",{\"1\":{\"462\":1}}],[\"旧的预期值\",{\"1\":{\"224\":1}}],[\"之前的人气股\",{\"1\":{\"635\":1}}],[\"之间\",{\"1\":{\"612\":1}}],[\"之间字符串\",{\"1\":{\"462\":1}}],[\"之后会执行此操作\",{\"1\":{\"536\":1}}],[\"之所以说它是最基础的收集算法\",{\"1\":{\"147\":1}}],[\"扫描行的数量\",{\"1\":{\"456\":1}}],[\"妙的\",{\"1\":{\"456\":1}}],[\"定期优化表\",{\"1\":{\"458\":1}}],[\"定期分析表和检查表\",{\"1\":{\"458\":1}}],[\"定位执行效率较低的\",{\"1\":{\"456\":1}}],[\"定义任意非叶子结点最多只有m个儿子\",{\"1\":{\"673\":1}}],[\"定义的表空间中\",{\"1\":{\"434\":1}}],[\"定义的目录和\",{\"1\":{\"129\":2}}],[\"定义泛型变量\",{\"1\":{\"169\":2}}],[\"定义泛型接口的子类\",{\"1\":{\"167\":1}}],[\"定义属性\",{\"1\":{\"167\":1}}],[\"定义抽象方法\",{\"1\":{\"167\":1}}],[\"定义两个泛型类型的对象\",{\"1\":{\"166\":1}}],[\"定义\",{\"1\":{\"109\":1,\"399\":1}}],[\"定义处理激励的客户端进程以及仅提供服务但不启动服务的服务端进程\",{\"1\":{\"97\":1}}],[\"定义代理任务\",{\"1\":{\"97\":1}}],[\"定义4到6层子系统\",{\"1\":{\"79\":1}}],[\"定义好的接口\",{\"1\":{\"75\":1}}],[\"意向排他锁\",{\"1\":{\"454\":1}}],[\"意向共享锁\",{\"1\":{\"454\":1}}],[\"幻读\",{\"1\":{\"454\":2}}],[\"却发现其他事物插入了满足其查询条件的新数据\",{\"1\":{\"454\":1}}],[\"却发现读出的数据已经发生改变\",{\"1\":{\"454\":1}}],[\"却没有立即写入到主存当中\",{\"1\":{\"204\":1}}],[\"脏读\",{\"1\":{\"454\":2}}],[\"隔离性\",{\"1\":{\"454\":1,\"742\":1}}],[\"事务管理器可以通过配置文件选择对应的数据源进行管理\",{\"1\":{\"489\":1}}],[\"事务管理器\",{\"1\":{\"478\":1}}],[\"事务管理机制的质量也是考量一个\",{\"1\":{\"472\":1}}],[\"事务管理机制对于\",{\"1\":{\"472\":1}}],[\"事务管理机制\",{\"1\":{\"472\":1}}],[\"事务\",{\"1\":{\"462\":1}}],[\"事务打算给数据加行排他锁\",{\"1\":{\"454\":1}}],[\"事务打算给数据行加航共享锁\",{\"1\":{\"454\":1}}],[\"事务在给一个数据加共享锁前必须先获得该表的意向共享锁\",{\"1\":{\"454\":1}}],[\"事务隔离级别\",{\"1\":{\"454\":1}}],[\"事务是一个原子操作\",{\"1\":{\"454\":1}}],[\"事务的四个属性\",{\"1\":{\"454\":1}}],[\"事件广播\",{\"1\":{\"67\":1}}],[\"给\",{\"1\":{\"462\":2,\"532\":1,\"694\":1}}],[\"给读进程一定获得锁的机会\",{\"1\":{\"453\":1}}],[\"给系统参数\",{\"1\":{\"453\":1}}],[\"给某一个对象提供一个代理\",{\"1\":{\"340\":1}}],[\"降低该语句的优先级\",{\"1\":{\"453\":1}}],[\"降低了构建大型系统的风险\",{\"1\":{\"157\":1}}],[\"认为写操作一般比读操作重要\",{\"1\":{\"453\":1}}],[\"认证方式\",{\"1\":{\"24\":1}}],[\"争用越严重\",{\"1\":{\"453\":1}}],[\"页面锁\",{\"1\":{\"452\":1}}],[\"记录lookup\",{\"1\":{\"546\":1}}],[\"记录构造函数注入属性\",{\"1\":{\"546\":1}}],[\"记录默认会按照一定的顺序保存\",{\"1\":{\"449\":1}}],[\"记录不是固定长度的\",{\"1\":{\"433\":1}}],[\"搜索\",{\"0\":{\"804\":1}}],[\"搜索的索引列\",{\"1\":{\"449\":1}}],[\"搜索所走过的路径称为引用链\",{\"1\":{\"146\":1}}],[\"便于提升索引的使用效率\",{\"1\":{\"449\":1}}],[\"普通索引\",{\"1\":{\"447\":1}}],[\"列表\",{\"1\":{\"471\":1}}],[\"列的索引时\",{\"1\":{\"449\":1}}],[\"列上可以创建全文索引\",{\"1\":{\"447\":1}}],[\"列组合必须是唯一的\",{\"1\":{\"447\":1}}],[\"列\",{\"1\":{\"446\":1}}],[\"列类型都可以被索引\",{\"1\":{\"446\":1}}],[\"`id`\",{\"1\":{\"444\":1,\"445\":1}}],[\"`function\",{\"1\":{\"444\":1,\"445\":1}}],[\"`localhost`\",{\"1\":{\"444\":1,\"445\":1}}],[\"$1\",{\"1\":{\"729\":1}}],[\"$2\",{\"1\":{\"729\":2}}],[\"$\",{\"1\":{\"478\":4,\"721\":2,\"729\":1,\"731\":5}}],[\"$$\",{\"1\":{\"439\":1}}],[\"$tz\",{\"1\":{\"34\":2}}],[\"例\",{\"1\":{\"439\":1}}],[\"例如人气股\",{\"1\":{\"661\":1,\"663\":1}}],[\"例如结合\",{\"1\":{\"536\":1}}],[\"例如通过\",{\"1\":{\"464\":1}}],[\"例如每隔5分钟并且对数据集有100个写的操作\",{\"1\":{\"463\":1}}],[\"例如电源中断\",{\"1\":{\"463\":1}}],[\"例如扩容规则\",{\"1\":{\"313\":1}}],[\"例如报错或者自动重试\",{\"1\":{\"256\":1}}],[\"例如不依赖存储在堆上的数据和公用的系统资源\",{\"1\":{\"230\":1}}],[\"例如使用反射注入实例\",{\"1\":{\"179\":1}}],[\"例如动态生成代码\",{\"1\":{\"179\":1}}],[\"例如\",{\"1\":{\"49\":1,\"65\":1,\"67\":1,\"99\":1,\"158\":1,\"161\":1,\"326\":1,\"386\":1,\"449\":1,\"456\":1,\"462\":1,\"530\":1,\"537\":1,\"538\":1,\"543\":1,\"577\":1,\"661\":1,\"663\":1}}],[\"触发程序不能调用将数据返回客户端的存储程序\",{\"1\":{\"442\":1}}],[\"触发事件\",{\"1\":{\"439\":1}}],[\"触发时间\",{\"1\":{\"439\":1}}],[\"触发器执行的语句有以下两个限制\",{\"1\":{\"442\":1}}],[\"触发器创建\",{\"0\":{\"439\":1}}],[\"触发器\",{\"0\":{\"438\":1},\"1\":{\"438\":1}}],[\"触发构建\",{\"1\":{\"31\":1}}],[\"环境较好\",{\"1\":{\"645\":1}}],[\"环境\",{\"1\":{\"478\":1}}],[\"环境执行\",{\"1\":{\"454\":1}}],[\"环境十分适合\",{\"1\":{\"437\":1}}],[\"环境准备\",{\"0\":{\"5\":1}}],[\"太大的表无法\",{\"1\":{\"437\":1}}],[\"太过于\",{\"1\":{\"105\":1}}],[\"刷新的步骤\",{\"1\":{\"528\":1}}],[\"刷新\",{\"1\":{\"436\":1,\"528\":1}}],[\"格式为\",{\"1\":{\"435\":1}}],[\"索引使用情况\",{\"1\":{\"457\":1}}],[\"索引是数据库优化中最常用也是最重要的手段之一\",{\"1\":{\"457\":1}}],[\"索引问题\",{\"0\":{\"457\":1}}],[\"索引字段的长度\",{\"1\":{\"456\":1}}],[\"索引合并优化\",{\"1\":{\"456\":1}}],[\"索引来加速\",{\"1\":{\"450\":1}}],[\"索引有一些重要的特征需要在使用的时候特别注意\",{\"1\":{\"450\":1}}],[\"索引与\",{\"0\":{\"450\":1}}],[\"索引的存储分类\",{\"1\":{\"457\":1}}],[\"索引的\",{\"1\":{\"450\":1}}],[\"索引的效果越好\",{\"1\":{\"449\":1}}],[\"索引的列的基数越大\",{\"1\":{\"449\":1}}],[\"索引的前缀长度最长是\",{\"1\":{\"446\":1}}],[\"索引的前缀长度可以达到\",{\"1\":{\"446\":1}}],[\"索引测试\",{\"0\":{\"448\":1}}],[\"索引配合\",{\"1\":{\"447\":1}}],[\"索引才会被使用\",{\"1\":{\"447\":1}}],[\"索引列的值必须唯一\",{\"1\":{\"447\":1}}],[\"索引类型\",{\"1\":{\"447\":1}}],[\"索引总是对整个列进行的\",{\"1\":{\"446\":1}}],[\"索引\",{\"0\":{\"446\":1,\"450\":1},\"1\":{\"435\":1,\"446\":4,\"450\":1}}],[\"索引查询慢\",{\"1\":{\"300\":1}}],[\"索引查询快\",{\"1\":{\"300\":1}}],[\"均匀分布在多个磁盘上\",{\"1\":{\"434\":1}}],[\"外链图片转存失败\",{\"1\":{\"725\":1}}],[\"外键对应的父表必须有对应的索引\",{\"1\":{\"434\":1}}],[\"外键约束\",{\"1\":{\"434\":1}}],[\"外部接口\",{\"1\":{\"99\":1}}],[\"占用较多的空间\",{\"1\":{\"666\":1}}],[\"占据非常小的磁盘空间\",{\"1\":{\"433\":1}}],[\"占比\",{\"1\":{\"430\":4}}],[\"固定长度\",{\"1\":{\"433\":1}}],[\"路径为绝对路径\",{\"1\":{\"433\":1}}],[\"路由\",{\"1\":{\"65\":1}}],[\"储存引擎的对比\",{\"0\":{\"432\":1}}],[\"超过\",{\"1\":{\"430\":1}}],[\"超时\",{\"1\":{\"67\":1}}],[\"求每门课程的学生人数\",{\"1\":{\"430\":1}}],[\"求职意向\",{\"1\":{\"3\":1}}],[\"风\",{\"1\":{\"430\":2}}],[\"人气高\",{\"1\":{\"615\":1}}],[\"人气分析\",{\"0\":{\"554\":1}}],[\"人的课程才统计\",{\"1\":{\"430\":1}}],[\"人数\",{\"1\":{\"430\":4}}],[\"人员对领域和方法的熟悉程度\",{\"1\":{\"107\":1}}],[\"人员指导\",{\"1\":{\"48\":1}}],[\"统计\",{\"0\":{\"549\":1}}],[\"统计每门课程的学生选修人数\",{\"1\":{\"430\":1}}],[\"统计各科成绩各分数段人数\",{\"1\":{\"430\":1}}],[\"统一的事件\",{\"1\":{\"65\":1}}],[\"询学生的总成绩\",{\"1\":{\"430\":1}}],[\"平衡二叉树\",{\"0\":{\"671\":1}}],[\"平衡这三者的速度差异\",{\"1\":{\"202\":1}}],[\"平均成绩相同时\",{\"1\":{\"430\":1}}],[\"平均分配\",{\"1\":{\"433\":1}}],[\"平均分\",{\"1\":{\"430\":2}}],[\"完成必要数据库增删改查功能\",{\"1\":{\"474\":1}}],[\"完成事务后\",{\"1\":{\"454\":1}}],[\"完全相同的其他同学的信息\",{\"1\":{\"430\":1}}],[\"完整性\",{\"1\":{\"111\":1}}],[\"号的同学学习的课程\",{\"1\":{\"430\":1}}],[\"老师所授课程的学生中\",{\"1\":{\"430\":2}}],[\"老师讲授的任一门课程的学生姓名\",{\"1\":{\"430\":1}}],[\"老师授课的同学的信息\",{\"1\":{\"430\":1}}],[\"老年老代gc策略\",{\"1\":{\"148\":1}}],[\"老年代串行\",{\"1\":{\"148\":1}}],[\"老年代标记\",{\"1\":{\"148\":3}}],[\"老年代使用串行回收\",{\"1\":{\"148\":1}}],[\"老年代\",{\"1\":{\"141\":2}}],[\"姓老师的数量\",{\"1\":{\"430\":1}}],[\"姓名和平均成绩\",{\"1\":{\"430\":1}}],[\"姓名及其平均成绩\",{\"1\":{\"430\":1}}],[\"姓名\",{\"1\":{\"166\":1}}],[\"没传入在用默认的\",{\"1\":{\"532\":1}}],[\"没选课的情况\",{\"1\":{\"430\":1}}],[\"没成绩的显示为\",{\"1\":{\"430\":1}}],[\"没有进行对自己docker\",{\"1\":{\"680\":1}}],[\"没有父节点的节点成为根节点\",{\"1\":{\"669\":1}}],[\"没有任何限制\",{\"1\":{\"447\":1}}],[\"没有成功获得锁\",{\"1\":{\"257\":1}}],[\"没有设置\",{\"1\":{\"235\":2}}],[\"没有额外空间对它进行分配担保\",{\"1\":{\"147\":1}}],[\"没有新的接口\",{\"1\":{\"107\":1}}],[\"没有新的子系统或者进程\",{\"1\":{\"107\":1}}],[\"没有再发现新的主要抽象\",{\"1\":{\"107\":1}}],[\"选股要选择题材正向叠加的\",{\"1\":{\"663\":1}}],[\"选项启动时\",{\"1\":{\"456\":1}}],[\"选项\",{\"1\":{\"435\":1}}],[\"选修人数\",{\"1\":{\"430\":1}}],[\"选课总数\",{\"1\":{\"430\":1}}],[\"选择最强的\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"选择最高标的时候\",{\"1\":{\"591\":1}}],[\"选择\",{\"0\":{\"588\":1}}],[\"选择的是最高标\",{\"1\":{\"578\":1}}],[\"选择后两种方式的时候要谨慎\",{\"1\":{\"434\":1}}],[\"选择一些额外的场景\",{\"1\":{\"107\":1}}],[\"选择阶段\",{\"1\":{\"93\":1}}],[\"选择创建任务的类型和名称\",{\"1\":{\"31\":1}}],[\"选择自定义\",{\"1\":{\"14\":1,\"714\":1}}],[\"课程资源\",{\"0\":{\"745\":1}}],[\"课程内容简介\",{\"0\":{\"742\":1},\"1\":{\"742\":1}}],[\"课程名称和分数\",{\"1\":{\"430\":1}}],[\"课程名称\",{\"1\":{\"430\":2}}],[\"课程编号\",{\"1\":{\"430\":3}}],[\"课程\",{\"1\":{\"430\":2}}],[\"课程分数小于\",{\"1\":{\"430\":1}}],[\"课程但存在\",{\"1\":{\"430\":1}}],[\"课程但可能不存在\",{\"1\":{\"430\":1}}],[\"课程的情况\",{\"1\":{\"430\":3}}],[\"课程和\",{\"1\":{\"430\":1}}],[\"课程成绩高的学生的信息及课程分数\",{\"1\":{\"430\":1}}],[\"课程比\",{\"1\":{\"430\":1}}],[\"成交量活跃\",{\"1\":{\"615\":1}}],[\"成交量没有翻倍\",{\"1\":{\"587\":1}}],[\"成交量翻倍\",{\"1\":{\"586\":1}}],[\"成交量接近翻倍\",{\"1\":{\"585\":1}}],[\"成员的分数值\",{\"1\":{\"462\":1}}],[\"成绩有重复的情况下\",{\"1\":{\"430\":1}}],[\"成绩最高的学生信息及其成绩\",{\"1\":{\"430\":2}}],[\"成绩不重复\",{\"1\":{\"430\":1}}],[\"成绩表\",{\"0\":{\"429\":1}}],[\"成本和计划视图可以用开发视图来描述\",{\"1\":{\"111\":1}}],[\"教程\",{\"0\":{\"788\":1}}],[\"教师表\",{\"0\":{\"428\":1}}],[\"教育经历\",{\"1\":{\"3\":1}}],[\"英语\",{\"1\":{\"427\":1}}],[\"英文原文链接\",{\"1\":{\"52\":1}}],[\"科目表\",{\"0\":{\"427\":1}}],[\"孙七\",{\"1\":{\"426\":1}}],[\"孙风\",{\"1\":{\"426\":1}}],[\"赵老哥\",{\"1\":{\"587\":1}}],[\"赵六\",{\"1\":{\"426\":1}}],[\"赵雷\",{\"1\":{\"426\":1}}],[\"李\",{\"1\":{\"430\":2}}],[\"李四\",{\"1\":{\"426\":2,\"428\":1}}],[\"李云\",{\"1\":{\"426\":1}}],[\"张三\",{\"1\":{\"426\":1,\"428\":1,\"430\":8}}],[\"张家豪\",{\"1\":{\"3\":1}}],[\"郑竹\",{\"1\":{\"426\":1}}],[\"吴兰\",{\"1\":{\"426\":1}}],[\"女生人数\",{\"1\":{\"430\":1}}],[\"女\",{\"1\":{\"426\":8}}],[\"钱电\",{\"1\":{\"426\":1}}],[\"男\",{\"1\":{\"426\":4}}],[\"题材结束不要自以为是\",{\"1\":{\"661\":1,\"663\":1}}],[\"题材要有确定性\",{\"1\":{\"661\":1,\"663\":1}}],[\"题材\",{\"0\":{\"659\":1,\"660\":1}}],[\"题目\",{\"0\":{\"430\":1}}],[\"题\",{\"0\":{\"425\":1}}],[\"秒过期\",{\"1\":{\"462\":1}}],[\"秒\",{\"1\":{\"422\":1}}],[\"日常\",{\"0\":{\"800\":1}}],[\"日\",{\"1\":{\"422\":1}}],[\"月\",{\"1\":{\"422\":1}}],[\"函数\",{\"0\":{\"419\":1,\"444\":1,\"746\":1},\"1\":{\"746\":1}}],[\"怎么处理异常\",{\"0\":{\"410\":1}}],[\"红黑树\",{\"0\":{\"409\":1,\"672\":1}}],[\"吗\",{\"0\":{\"406\":1}}],[\"存放出生日期的列具有不同值\",{\"1\":{\"449\":1}}],[\"存储\",{\"0\":{\"698\":1}}],[\"存储空间\",{\"1\":{\"666\":1}}],[\"存储空间不连续\",{\"1\":{\"666\":1}}],[\"存储空间是连续\",{\"1\":{\"665\":1}}],[\"存储的\",{\"1\":{\"540\":1}}],[\"存储过程\",{\"0\":{\"445\":1}}],[\"存储过程的参数可以使用\",{\"1\":{\"443\":1}}],[\"存储过程和函数的区别在于函数必须有返回值\",{\"1\":{\"443\":1}}],[\"存储过程和函数是事先经过编译并存储在数据库中的一段\",{\"1\":{\"443\":1}}],[\"存储过程和函数\",{\"0\":{\"443\":1}}],[\"存储再内存中\",{\"1\":{\"435\":1}}],[\"存储表和索引有以下两种方式\",{\"1\":{\"434\":1}}],[\"存储方式\",{\"1\":{\"434\":1}}],[\"存储格式\",{\"1\":{\"433\":1}}],[\"存储索引\",{\"1\":{\"433\":1}}],[\"存储数据\",{\"1\":{\"433\":1}}],[\"存储定义表\",{\"1\":{\"433\":1}}],[\"存储引擎支持\",{\"1\":{\"446\":1}}],[\"存储引擎的表\",{\"1\":{\"446\":2,\"449\":1}}],[\"存储引擎的表默认创建的都是\",{\"1\":{\"446\":1}}],[\"存储引擎的选择\",{\"0\":{\"437\":1}}],[\"存储引擎除了有效地降低由于删除和更新导致的锁定\",{\"1\":{\"437\":1}}],[\"存储引擎应该是比较合适的选择\",{\"1\":{\"437\":1}}],[\"存储引擎是一组\",{\"1\":{\"436\":1}}],[\"存储引擎有\",{\"1\":{\"431\":1}}],[\"存储引擎\",{\"0\":{\"431\":1,\"433\":1,\"434\":1,\"435\":1,\"436\":1},\"1\":{\"437\":1}}],[\"存在学生没成绩\",{\"1\":{\"430\":1}}],[\"存在数组了为什么还要\",{\"0\":{\"403\":1}}],[\"存活的极端情况\",{\"1\":{\"147\":1}}],[\"键值对存储\",{\"1\":{\"400\":1}}],[\"破换了封装性\",{\"1\":{\"399\":1}}],[\"哪里用到\",{\"1\":{\"399\":1}}],[\"哪些工具可以用来描述和管理对应的视图\",{\"1\":{\"57\":1}}],[\"高效又要易用\",{\"1\":{\"744\":1}}],[\"高可用集群安装\",{\"0\":{\"701\":1}}],[\"高贝塔值\",{\"0\":{\"655\":1}}],[\"高级\",{\"0\":{\"463\":1}}],[\"高很多\",{\"1\":{\"398\":1}}],[\"高速循环任务\",{\"1\":{\"73\":1}}],[\"输出结果集的表\",{\"1\":{\"456\":1}}],[\"输出\",{\"1\":{\"397\":1}}],[\"输入token登录\",{\"1\":{\"729\":1}}],[\"输入\",{\"1\":{\"397\":1}}],[\"输入输出设备的使用权等等\",{\"1\":{\"395\":1}}],[\"流量控制器\",{\"1\":{\"694\":1}}],[\"流程图如下\",{\"1\":{\"538\":1}}],[\"流程详解\",{\"0\":{\"512\":1}}],[\"流程\",{\"0\":{\"483\":1}}],[\"流程简解\",{\"0\":{\"476\":1,\"477\":1}}],[\"流程函数\",{\"0\":{\"423\":1}}],[\"流\",{\"0\":{\"397\":1}}],[\"流水线\",{\"0\":{\"34\":1}}],[\"阻止其他事务获取相同数据集的共享读锁和排他写锁\",{\"1\":{\"454\":1}}],[\"阻止其他事务获取相同数据集的排他锁\",{\"1\":{\"454\":1}}],[\"阻止实例化中那些用此关键字修饰的变量序列化\",{\"1\":{\"396\":1}}],[\"阻塞式io\",{\"1\":{\"739\":1}}],[\"阻塞式\",{\"0\":{\"733\":1},\"1\":{\"732\":1}}],[\"阻塞和\",{\"1\":{\"246\":1}}],[\"阻塞和等待的区别在于\",{\"1\":{\"236\":1}}],[\"阻塞是被动的\",{\"1\":{\"236\":1}}],[\"阻塞\",{\"0\":{\"234\":1}}],[\"含有大量的指针域\",{\"1\":{\"666\":1}}],[\"含有\",{\"1\":{\"532\":1}}],[\"含有指令和数据的文件\",{\"1\":{\"395\":1}}],[\"含有参数的构造方法\",{\"1\":{\"304\":1}}],[\"你也也可使用redis\",{\"1\":{\"463\":1}}],[\"你也不应该在\",{\"1\":{\"406\":1}}],[\"你最多丢失1秒的数据\",{\"1\":{\"463\":1}}],[\"你可以使用不同的fsync策略\",{\"1\":{\"463\":1}}],[\"你可能会丢失几分钟的数据\",{\"1\":{\"463\":1}}],[\"你通常会每隔5分钟或者更久做一次完整的保存\",{\"1\":{\"463\":1}}],[\"你遇到过那些情况\",{\"0\":{\"394\":1}}],[\"你遇到过哪些情况\",{\"0\":{\"394\":1}}],[\"你就会发现\",{\"1\":{\"55\":1}}],[\"错误\",{\"1\":{\"393\":1}}],[\"前期连续跌停\",{\"1\":{\"587\":1}}],[\"前期多次炒作\",{\"1\":{\"585\":1,\"586\":1}}],[\"前一天晚上复盘发现低空经济题材应该还可以持续\",{\"1\":{\"568\":1}}],[\"前一天晚上了解猪肉主链的相关资讯\",{\"1\":{\"567\":1}}],[\"前一天晚上统计了最高板断板时前龙头股基本跌停\",{\"1\":{\"567\":1,\"568\":1}}],[\"前缀\",{\"1\":{\"446\":1}}],[\"前缀索引的长度跟存储引擎相关\",{\"1\":{\"446\":1}}],[\"前会执行\",{\"1\":{\"392\":1}}],[\"前提锁对象得是同一个对象或者class\",{\"1\":{\"260\":1}}],[\"静态内部类的方式\",{\"1\":{\"760\":1}}],[\"静态wrapexception方法\",{\"1\":{\"506\":1}}],[\"静态表的数据在存储的时候会按照列的宽度定义补足空格\",{\"1\":{\"433\":1}}],[\"静态表\",{\"1\":{\"433\":1}}],[\"静态\",{\"1\":{\"433\":1}}],[\"静态导包\",{\"1\":{\"389\":1}}],[\"静态代码快\",{\"1\":{\"389\":1}}],[\"静态方法\",{\"1\":{\"389\":1}}],[\"静态常量的方式枚举的方式\",{\"1\":{\"759\":1}}],[\"静态常量\",{\"1\":{\"389\":1}}],[\"静态变量\",{\"1\":{\"136\":1,\"140\":1}}],[\"遵守两个重排序规则\",{\"1\":{\"388\":1}}],[\"深度拷贝也需要实现\",{\"1\":{\"401\":1}}],[\"深拷贝\",{\"1\":{\"387\":1}}],[\"深拷贝和浅拷贝\",{\"0\":{\"387\":1}}],[\"深入的学习是十分有必要的\",{\"1\":{\"298\":1}}],[\"深入理解异常\",{\"0\":{\"192\":1}}],[\"深入理解注解\",{\"0\":{\"183\":1}}],[\"深入理解泛型\",{\"0\":{\"171\":1}}],[\"哈希函数结果冲突就在用第二个\",{\"1\":{\"386\":1}}],[\"又要在某种程度上限制其灵活性\",{\"1\":{\"744\":1}}],[\"又同时去数据库去取数据\",{\"1\":{\"464\":1}}],[\"又叫双哈希\",{\"1\":{\"386\":1}}],[\"又称内存栅栏\",{\"1\":{\"285\":1}}],[\"拉链法\",{\"1\":{\"386\":1}}],[\"拉取镜像\",{\"1\":{\"12\":1}}],[\"虚拟ip才可清除\",{\"1\":{\"712\":1}}],[\"虚拟机中没有提供\",{\"1\":{\"373\":1}}],[\"虚拟机中内存最大的一块\",{\"1\":{\"136\":1,\"141\":1}}],[\"虚拟机堆转储快照分析工具\",{\"1\":{\"153\":1}}],[\"虚拟机统计信息监控工具\",{\"1\":{\"153\":1}}],[\"虚拟机进程状况工具\",{\"1\":{\"153\":1}}],[\"虚拟机会根据当前系统的运行情况收集性能监控信息\",{\"1\":{\"148\":1}}],[\"虚拟机会把类的二级制数据中的符号引用替换为直接引用\",{\"1\":{\"134\":1}}],[\"虚拟机为例讲解\",{\"1\":{\"140\":1}}],[\"虚拟机为类的静态变量分配内存\",{\"1\":{\"133\":1}}],[\"虚拟机栈中引用的对象\",{\"1\":{\"146\":1}}],[\"虚拟机栈\",{\"0\":{\"137\":1},\"1\":{\"136\":1}}],[\"虚拟机安全地执行\",{\"1\":{\"132\":1}}],[\"虚拟机上运行的目标代码\",{\"1\":{\"124\":1}}],[\"虚拟机包括一套字节码指令集\",{\"1\":{\"124\":1}}],[\"虚拟机\",{\"1\":{\"124\":1}}],[\"虚引用\",{\"1\":{\"383\":1}}],[\"弱引用\",{\"1\":{\"383\":1}}],[\"软引用\",{\"1\":{\"383\":1}}],[\"软件容错\",{\"1\":{\"111\":1}}],[\"软件配置人员使用开发视图\",{\"1\":{\"111\":1}}],[\"软件设计指南\",{\"1\":{\"109\":1}}],[\"软件开发也可以使用相似的方法和过程\",{\"1\":{\"107\":1}}],[\"软件开发流程\",{\"1\":{\"53\":1}}],[\"软件到节点的映射需要高度灵活\",{\"1\":{\"83\":1}}],[\"软件在一个计算网络上或处理节点上\",{\"1\":{\"83\":1}}],[\"软件管理\",{\"1\":{\"75\":1}}],[\"软件被分割成程序库或者\",{\"1\":{\"75\":1}}],[\"软件可以被划分成一组独立的\",{\"1\":{\"67\":1}}],[\"软件架构文档大纲\",{\"1\":{\"109\":1}}],[\"软件架构文档\",{\"1\":{\"109\":1}}],[\"软件架构生命周期环境\",{\"1\":{\"69\":1}}],[\"软件架构处理抽象\",{\"1\":{\"57\":1}}],[\"软件架构用来处理软件高层次结构的设计和实现\",{\"1\":{\"57\":1}}],[\"软件架构\",{\"1\":{\"53\":1,\"57\":1,\"109\":1}}],[\"软件架构的4+1视图模型\",{\"0\":{\"52\":1},\"1\":{\"115\":1}}],[\"软件技能\",{\"1\":{\"3\":1}}],[\"效率要比\",{\"1\":{\"398\":1}}],[\"效率较低\",{\"1\":{\"379\":1}}],[\"效率将会变低\",{\"1\":{\"147\":1}}],[\"拆箱\",{\"1\":{\"375\":1}}],[\"双重校验锁\",{\"1\":{\"760\":1}}],[\"双目运算符\",{\"1\":{\"374\":1}}],[\"双亲委派\",{\"1\":{\"129\":2}}],[\"八种基本数据类型的大小\",{\"0\":{\"373\":1}}],[\"易用性\",{\"0\":{\"494\":1},\"1\":{\"491\":1}}],[\"易扩展\",{\"1\":{\"372\":1}}],[\"易复用\",{\"1\":{\"372\":1}}],[\"嵌入式开发等一般采用面向过程开发\",{\"1\":{\"372\":1}}],[\"跨平台的根本\",{\"1\":{\"371\":1}}],[\"循环比较是否相等\",{\"1\":{\"368\":1}}],[\"循环比较\",{\"1\":{\"367\":1}}],[\"循环活动\",{\"1\":{\"67\":1}}],[\"找出长度最短的字符串长度\",{\"1\":{\"367\":1}}],[\"长度是否相同\",{\"1\":{\"366\":1}}],[\"忽略大小写比较是否相等\",{\"0\":{\"366\":1}}],[\"检测是否开启\",{\"1\":{\"533\":1}}],[\"检测是否为空时未检测对象是否为\",{\"1\":{\"363\":1}}],[\"检查初始化结果\",{\"1\":{\"726\":1,\"727\":1}}],[\"检查依赖是否合法\",{\"1\":{\"546\":1}}],[\"检查存储在哈希表的字段是否存在\",{\"1\":{\"462\":1}}],[\"检查时异常\",{\"1\":{\"393\":1}}],[\"检索至少选修两门课程的学生学号\",{\"1\":{\"430\":1}}],[\"检索\",{\"1\":{\"430\":1}}],[\"检视所有五个蓝图\",{\"1\":{\"107\":1}}],[\"经过三天的调整\",{\"1\":{\"614\":1}}],[\"经过多次试验\",{\"1\":{\"351\":1}}],[\"经过斟酌修改为可扩展性\",{\"1\":{\"115\":1}}],[\"网卡等\",{\"1\":{\"743\":1}}],[\"网上有人对于不通版本的jdk进行测试\",{\"1\":{\"351\":1}}],[\"网络存储\",{\"1\":{\"731\":1}}],[\"网络插件\",{\"1\":{\"731\":1}}],[\"网络流量进行限制和统计\",{\"1\":{\"694\":1}}],[\"网络\",{\"0\":{\"700\":1},\"1\":{\"67\":1,\"83\":1}}],[\"网络货运平台\",{\"1\":{\"49\":1}}],[\"核心是通过重写被代理对象所实现的接口中的方法来重新生成代理类来实现的\",{\"1\":{\"347\":1}}],[\"核心重写\",{\"1\":{\"161\":1}}],[\"把对象的组合构造或者某些属性设置进行封装\",{\"1\":{\"763\":1}}],[\"把read\",{\"1\":{\"746\":1}}],[\"把它叫做\",{\"1\":{\"669\":1}}],[\"把文件内容解析封装为configuration对象\",{\"1\":{\"483\":1}}],[\"把读锁放到后面\",{\"1\":{\"453\":1}}],[\"把\",{\"1\":{\"435\":1}}],[\"把新加的业务逻辑方法由一定的逻辑代码去调用\",{\"1\":{\"343\":1}}],[\"把java堆分为新生代和老年代\",{\"1\":{\"147\":1}}],[\"拿到被代理对象的引用\",{\"1\":{\"343\":1}}],[\"允许向一个现有的对象添加新的功能\",{\"1\":{\"768\":1}}],[\"允许使用\",{\"1\":{\"694\":1}}],[\"允许基于\",{\"1\":{\"694\":1}}],[\"允许或禁止\",{\"1\":{\"694\":1}}],[\"允许获得排他锁的事务更新数据\",{\"1\":{\"454\":1}}],[\"允许一个事务去读一行\",{\"1\":{\"454\":1}}],[\"允许开发者在运行期创建接口的代理实例\",{\"1\":{\"341\":1}}],[\"允许图形化地描绘过程架构\",{\"1\":{\"69\":1}}],[\"^execstart=\",{\"1\":{\"731\":1}}],[\"^net\",{\"1\":{\"731\":3}}],[\"^\",{\"1\":{\"327\":1}}],[\"负责根据用户传递的\",{\"1\":{\"474\":1}}],[\"负责将\",{\"1\":{\"474\":1}}],[\"负责对用户传递的参数转换成\",{\"1\":{\"474\":1}}],[\"负责对\",{\"1\":{\"474\":1}}],[\"负责\",{\"1\":{\"474\":2}}],[\"负责交易系统的需求分析\",{\"1\":{\"44\":1}}],[\"负担要比进程小得多\",{\"1\":{\"395\":1}}],[\"负载因子\",{\"1\":{\"326\":1}}],[\"次选京投发展\",{\"1\":{\"588\":1,\"596\":1}}],[\"次方\",{\"0\":{\"407\":1},\"1\":{\"326\":1}}],[\"次要任务通过集合和共享内存来通信\",{\"1\":{\"67\":1}}],[\"赋值\",{\"1\":{\"310\":1}}],[\"刚创建时\",{\"1\":{\"310\":1}}],[\"批量删除时\",{\"1\":{\"305\":1}}],[\"查有成绩的学生信息\",{\"1\":{\"430\":1}}],[\"查询结果集的\",{\"1\":{\"470\":1}}],[\"查询结果按人数降序排列\",{\"1\":{\"430\":1}}],[\"查询阶段\",{\"1\":{\"470\":1}}],[\"查询时\",{\"1\":{\"464\":1}}],[\"查询返回的行数\",{\"1\":{\"456\":1}}],[\"查询当前线程的最后插入记录的值\",{\"1\":{\"434\":1}}],[\"查询下月过生日的学生\",{\"1\":{\"430\":1}}],[\"查询下周过生日的学生\",{\"1\":{\"430\":1}}],[\"查询本月过生日的学生\",{\"1\":{\"430\":1}}],[\"查询本周过生日的学生\",{\"1\":{\"430\":1}}],[\"查询各学生的年龄\",{\"1\":{\"430\":1}}],[\"查询各科成绩前三名的记录\",{\"1\":{\"430\":1}}],[\"查询各科成绩最高分\",{\"1\":{\"430\":1}}],[\"查询每门功成绩最好的前两名\",{\"1\":{\"430\":1}}],[\"查询每门课程的平均成绩\",{\"1\":{\"430\":1}}],[\"查询每门课程被选修的学生数\",{\"1\":{\"430\":1}}],[\"查询选修了全部课程的学生信息\",{\"1\":{\"430\":1}}],[\"查询选修\",{\"1\":{\"430\":2}}],[\"查询课程编号为\",{\"1\":{\"430\":1}}],[\"查询课程名称为\",{\"1\":{\"430\":1}}],[\"查询不同课程成绩相同的学生的学生编号\",{\"1\":{\"430\":1}}],[\"查询不及格的课程\",{\"1\":{\"430\":1}}],[\"查询不存在\",{\"1\":{\"430\":1}}],[\"查询任何一门课程成绩在\",{\"1\":{\"430\":1}}],[\"查询所有学生的课程及分数情况\",{\"1\":{\"430\":1}}],[\"查询所有同学的学生编号\",{\"1\":{\"430\":1}}],[\"查询同名同性学生名单\",{\"1\":{\"430\":1}}],[\"查询同时存在\",{\"1\":{\"430\":1}}],[\"查询名字中含有\",{\"1\":{\"430\":1}}],[\"查询男生\",{\"1\":{\"430\":1}}],[\"查询出只选修两门课程的学生学号和姓名\",{\"1\":{\"430\":1}}],[\"查询学生的总成绩\",{\"1\":{\"430\":1}}],[\"查询学过\",{\"1\":{\"430\":1}}],[\"查询两门及其以上不及格课程的同学的学号\",{\"1\":{\"430\":1}}],[\"查询没学过\",{\"1\":{\"430\":1}}],[\"查询没有学全所有课程的同学的信息\",{\"1\":{\"430\":1}}],[\"查询和\",{\"1\":{\"430\":1}}],[\"查询至少有一门课与学号为\",{\"1\":{\"430\":1}}],[\"查询在\",{\"1\":{\"430\":1}}],[\"查询平均成绩大于等于\",{\"1\":{\"430\":2}}],[\"查询存在\",{\"1\":{\"430\":1}}],[\"查询\",{\"1\":{\"430\":3}}],[\"查询元素在集合的下标索引\",{\"1\":{\"305\":1}}],[\"查找\",{\"1\":{\"386\":1}}],[\"查看完整配置选项\",{\"1\":{\"731\":1}}],[\"查看pod运行状态\",{\"1\":{\"725\":1}}],[\"查看该容器的一些数据\",{\"1\":{\"692\":1}}],[\"查看容器在主机上的\",{\"1\":{\"692\":1}}],[\"查看容器\",{\"0\":{\"686\":1}}],[\"查看触发器\",{\"0\":{\"441\":1}}],[\"查看元素数目\",{\"1\":{\"325\":1}}],[\"查看指定的命名空间和服务名称\",{\"1\":{\"36\":1}}],[\"查看\",{\"0\":{\"36\":1}}],[\"查看打包过程\",{\"0\":{\"35\":1}}],[\"查看节点初始化结果\",{\"1\":{\"725\":1}}],[\"查看节点\",{\"1\":{\"22\":1}}],[\"删除一个文件\",{\"1\":{\"746\":1}}],[\"删除一个或者多个哈希表字段\",{\"1\":{\"462\":1}}],[\"删除node\",{\"0\":{\"708\":1}}],[\"删除master\",{\"0\":{\"706\":1}}],[\"删除镜像\",{\"0\":{\"689\":1}}],[\"删除容器\",{\"0\":{\"685\":1}}],[\"删除缓存\",{\"1\":{\"464\":2}}],[\"删除触发器\",{\"0\":{\"440\":1}}],[\"删除操作\",{\"1\":{\"437\":1}}],[\"删除的操作\",{\"1\":{\"436\":1}}],[\"删除数据是开销较大\",{\"1\":{\"380\":1}}],[\"删除则是查询到对应的节点后\",{\"1\":{\"311\":1}}],[\"删除\",{\"0\":{\"305\":1,\"311\":1,\"317\":1},\"1\":{\"325\":1}}],[\"删除单列数据集合中的该数据\",{\"1\":{\"299\":1}}],[\"倍之后是否超出\",{\"1\":{\"304\":1}}],[\"倍扩容\",{\"1\":{\"304\":1}}],[\"时空大数据\",{\"0\":{\"651\":1}}],[\"时\",{\"1\":{\"304\":1,\"326\":1,\"327\":1,\"422\":1,\"456\":1,\"462\":1}}],[\"时间和日期函数\",{\"0\":{\"422\":1}}],[\"时间\",{\"1\":{\"395\":1}}],[\"时间结束\",{\"1\":{\"236\":3}}],[\"时间片的分配\",{\"1\":{\"694\":1}}],[\"时间片\",{\"1\":{\"139\":1,\"233\":1,\"235\":1}}],[\"扩大地产链的概率\",{\"1\":{\"596\":1}}],[\"扩大要考虑的场景选项\",{\"1\":{\"107\":1}}],[\"扩展大小等参数\",{\"1\":{\"434\":1}}],[\"扩展名分别是\",{\"1\":{\"433\":1}}],[\"扩展方法\",{\"0\":{\"306\":1,\"312\":1,\"318\":1}}],[\"扩容较麻烦\",{\"1\":{\"665\":1}}],[\"扩容时下次数量\",{\"1\":{\"326\":1}}],[\"扩容代码如下\",{\"1\":{\"304\":1}}],[\"属性进行依赖性检查\",{\"1\":{\"546\":1}}],[\"属性值配置为\",{\"1\":{\"546\":4}}],[\"属性值为\",{\"1\":{\"546\":1}}],[\"属性来获得改包装的\",{\"1\":{\"399\":1}}],[\"属性\",{\"0\":{\"353\":1},\"1\":{\"453\":1}}],[\"属性first\",{\"1\":{\"310\":1}}],[\"属性缓存数据的长度\",{\"1\":{\"301\":1}}],[\"属于非守护线程\",{\"1\":{\"242\":1}}],[\"属于线程私有的\",{\"1\":{\"228\":1}}],[\"属于处理器重排序\",{\"1\":{\"206\":1}}],[\"属于编译器重排序\",{\"1\":{\"206\":1}}],[\"让用户可以自定义执行相关\",{\"1\":{\"495\":1}}],[\"让程序耦合度更低\",{\"1\":{\"371\":1}}],[\"让其使用更加方便和简单\",{\"1\":{\"301\":1}}],[\"让新再生交易平台更加通用和适配\",{\"1\":{\"42\":1}}],[\"链表进行树化\",{\"1\":{\"326\":1}}],[\"链表树化的最小元素数量\",{\"1\":{\"326\":1}}],[\"链表\",{\"0\":{\"666\":1},\"1\":{\"300\":1,\"664\":1}}],[\"链接\",{\"0\":{\"131\":1}}],[\"筛选的数据集合\",{\"1\":{\"299\":1}}],[\"向内核索要数据\",{\"1\":{\"733\":1,\"734\":2,\"735\":2}}],[\"向有序集合添加一个或多个成员\",{\"1\":{\"462\":1}}],[\"向集合添加一个或者多个成员\",{\"1\":{\"462\":1}}],[\"向列表的元素之前|之后插入一个元素\",{\"1\":{\"462\":1}}],[\"向当前单列数据集合中添加该数据结合\",{\"1\":{\"299\":1}}],[\"向上转型\",{\"1\":{\"158\":1,\"159\":1}}],[\"校验当前数据集合是否在该单列数据中\",{\"1\":{\"299\":1}}],[\"屏障\",{\"1\":{\"288\":8,\"388\":2}}],[\"屏蔽了与具体操作系统平台相关的信息\",{\"1\":{\"124\":1}}],[\"于任意后续对这个\",{\"0\":{\"287\":1}}],[\"于是趁可再生资源大厂提供需求和设计\",{\"1\":{\"42\":1}}],[\"域时进行过度的指令重排序\",{\"1\":{\"388\":1}}],[\"域时会插入\",{\"1\":{\"388\":1}}],[\"域\",{\"1\":{\"388\":2}}],[\"域的对象的引用\",{\"1\":{\"388\":1}}],[\"域的读\",{\"0\":{\"287\":1}}],[\"域的写入\",{\"1\":{\"388\":1}}],[\"域的写\",{\"0\":{\"287\":1}}],[\"域名\",{\"1\":{\"24\":1}}],[\"鼓励大家将共享的long和double变量设置为volatile类型\",{\"1\":{\"283\":1}}],[\"共享性\",{\"1\":{\"742\":1}}],[\"共享的long和double变量的为什么要用volatile\",{\"0\":{\"283\":1}}],[\"共享锁是指该锁可被多个线程所持有\",{\"1\":{\"261\":1}}],[\"共享锁\",{\"0\":{\"261\":1},\"1\":{\"454\":1}}],[\"引导层是配置和启动\",{\"1\":{\"473\":1}}],[\"引导层\",{\"0\":{\"473\":1}}],[\"引入了\",{\"1\":{\"472\":1}}],[\"引起数据库压力过大甚至down机\",{\"1\":{\"464\":1}}],[\"引起数据库压力瞬间增大\",{\"1\":{\"464\":1}}],[\"引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区\",{\"1\":{\"280\":1}}],[\"引擎默认给予读请求以优先的权利\",{\"1\":{\"453\":1}}],[\"引用数据类型\",{\"1\":{\"275\":1}}],[\"引用\",{\"1\":{\"158\":1,\"468\":1}}],[\"引用释放时计数减1\",{\"1\":{\"146\":1}}],[\"引用计数\",{\"1\":{\"146\":1}}],[\"防火墙\",{\"1\":{\"731\":1}}],[\"防止构建出不符合的对象\",{\"1\":{\"763\":1}}],[\"防止创建工厂的对象\",{\"1\":{\"761\":1}}],[\"防止热点回流回到之前炒作的导致未能及时反应\",{\"1\":{\"661\":1,\"663\":1}}],[\"防止迭代器遍历的时候修改\",{\"1\":{\"326\":1}}],[\"防止并发问题\",{\"1\":{\"300\":1}}],[\"防止不同的对象校验的\",{\"1\":{\"299\":1}}],[\"防止上面的\",{\"1\":{\"288\":1}}],[\"防止应用自己的类库覆盖了核心类库\",{\"1\":{\"130\":1}}],[\"防止应用覆盖jre的核心类\",{\"1\":{\"130\":1}}],[\"防重排序\",{\"0\":{\"279\":1}}],[\"额外增加约束\",{\"1\":{\"275\":1}}],[\"禁止下面所有的普通写操作和上面的\",{\"1\":{\"288\":1}}],[\"禁止下面所有的普通读操作和上面的\",{\"1\":{\"288\":1}}],[\"禁止上面的普通写和下面的\",{\"1\":{\"288\":1}}],[\"禁止重排序\",{\"0\":{\"288\":1}}],[\"禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量\",{\"1\":{\"275\":1}}],[\"禁止初次读对象的引用与读该对象包含的final域的重排序\",{\"1\":{\"275\":1}}],[\"禁止final域写与构造方法重排序\",{\"1\":{\"275\":1}}],[\"禁止开机启动\",{\"1\":{\"6\":1}}],[\"按n\",{\"1\":{\"746\":1}}],[\"按课程编号升序排列\",{\"1\":{\"430\":1}}],[\"按课程号升序排列\",{\"1\":{\"430\":1}}],[\"按各科成绩进行排序\",{\"1\":{\"430\":2}}],[\"按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩\",{\"1\":{\"430\":1}}],[\"按分数降序排列的学生信息\",{\"1\":{\"430\":1}}],[\"按照索引遍历速度较快\",{\"1\":{\"665\":1}}],[\"按照索引查询速度较快\",{\"1\":{\"665\":1}}],[\"按照步骤进行优化从而能更快的找到问题的所在\",{\"1\":{\"456\":1}}],[\"按照主键或者内部列进行的访问是最快的\",{\"1\":{\"449\":1}}],[\"按照这个列的顺序保存\",{\"1\":{\"449\":1}}],[\"按照出生日期来算\",{\"1\":{\"430\":1}}],[\"按照角色\",{\"1\":{\"397\":1}}],[\"按照操作单元\",{\"1\":{\"397\":1}}],[\"按照流向\",{\"1\":{\"397\":1}}],[\"按照final修饰的数据类型分类\",{\"1\":{\"275\":1}}],[\"按顺序分配内存即可\",{\"1\":{\"147\":1}}],[\"针对引用数据类型\",{\"1\":{\"273\":1}}],[\"读取方法\",{\"1\":{\"530\":1}}],[\"读取配置文件\",{\"1\":{\"482\":1}}],[\"读取i的值\",{\"1\":{\"282\":1}}],[\"读重排序\",{\"1\":{\"288\":2}}],[\"读\",{\"1\":{\"288\":1}}],[\"读操作是在后面插入两个内存屏障\",{\"1\":{\"288\":1}}],[\"读操作的后面插入一个\",{\"1\":{\"288\":2}}],[\"读final域需要的loadload屏障也会被省略掉\",{\"1\":{\"276\":1}}],[\"读final域的重排序规则会要求编译器在读final域的操作前插入一个loadload屏障\",{\"1\":{\"276\":1}}],[\"读final域重排序规则\",{\"0\":{\"271\":1}}],[\"读对象的引用和读该对象的final域存在间接依赖性\",{\"1\":{\"271\":1}}],[\"初次读一个包含\",{\"1\":{\"388\":1}}],[\"初次读对象引用和初次读该对象包含的final域\",{\"1\":{\"271\":1}}],[\"初始元素\",{\"1\":{\"302\":2}}],[\"初始容量为\",{\"1\":{\"326\":1}}],[\"初始容量\",{\"1\":{\"302\":2,\"326\":1}}],[\"初始化第二\",{\"0\":{\"726\":1}}],[\"初始化第一个master节点\",{\"0\":{\"725\":1}}],[\"初始化方法\",{\"1\":{\"546\":1}}],[\"初始化应用事件的广播流程如下\",{\"1\":{\"542\":1}}],[\"初始化消息源的流程图如下\",{\"1\":{\"541\":1}}],[\"初始化完成\",{\"1\":{\"536\":1}}],[\"初始化流程\",{\"0\":{\"527\":1,\"528\":1}}],[\"初始化容量为\",{\"1\":{\"304\":1}}],[\"初始化对象\",{\"1\":{\"279\":2}}],[\"初始化\",{\"0\":{\"135\":1,\"727\":1}}],[\"写n\",{\"1\":{\"746\":1}}],[\"写的过程中宕机等等\",{\"1\":{\"463\":1}}],[\"写的内存屏障都会被省略\",{\"1\":{\"276\":1}}],[\"写一个包含所有执行时间超过\",{\"1\":{\"456\":1}}],[\"写与下面可能有的\",{\"1\":{\"288\":1}}],[\"写是在前面和后面分别插入内存屏障\",{\"1\":{\"288\":1}}],[\"写操作的后面插入一个\",{\"1\":{\"288\":1}}],[\"写操作的前面插入一个\",{\"1\":{\"288\":1}}],[\"写操作都具有原子性\",{\"1\":{\"283\":1}}],[\"写操作具有原子性\",{\"1\":{\"281\":1}}],[\"写可能不是原子的\",{\"1\":{\"283\":1}}],[\"写\",{\"0\":{\"281\":1}}],[\"写重排序\",{\"1\":{\"276\":1,\"288\":2}}],[\"写final域会要求编译器在final域写之后\",{\"1\":{\"276\":1}}],[\"写final域的重排序规则禁止对final域的写重排序到构造函数之外\",{\"1\":{\"270\":1}}],[\"写final域重排序规则\",{\"0\":{\"270\":1}}],[\"写缓冲区\",{\"1\":{\"206\":1}}],[\"修复后发现低空经济队列较完整\",{\"1\":{\"614\":1}}],[\"修饰的变量值在被反序列化是也不会被持久化和回复\",{\"1\":{\"396\":1}}],[\"修饰的类不可被继承\",{\"1\":{\"388\":1}}],[\"修饰的字符数组\",{\"1\":{\"379\":1}}],[\"修饰的\",{\"1\":{\"353\":1}}],[\"修饰变量\",{\"0\":{\"267\":1}}],[\"修饰参数\",{\"0\":{\"266\":1}}],[\"修饰方法\",{\"0\":{\"265\":1}}],[\"修饰类\",{\"0\":{\"264\":1}}],[\"修改为\",{\"1\":{\"731\":1}}],[\"修改为tcp\",{\"1\":{\"731\":1}}],[\"修改docker\",{\"1\":{\"731\":1}}],[\"修改\",{\"1\":{\"731\":1}}],[\"修改默认为四层代理\",{\"1\":{\"731\":1}}],[\"修改结果见附件haproxy\",{\"1\":{\"723\":1}}],[\"修改hostname\",{\"0\":{\"721\":1}}],[\"修改harbor的配置文件\",{\"1\":{\"24\":1}}],[\"修改build\",{\"1\":{\"521\":1}}],[\"修改配置文件\",{\"1\":{\"723\":1}}],[\"修改配置\",{\"0\":{\"520\":1}}],[\"修改存储引擎为\",{\"1\":{\"431\":1}}],[\"修改如下\",{\"1\":{\"26\":1}}],[\"详解\",{\"0\":{\"262\":1,\"277\":1,\"289\":1}}],[\"获得实际动手经验\",{\"1\":{\"742\":1}}],[\"获得更快的速度\",{\"1\":{\"433\":1}}],[\"获得字符串的第几个字符\",{\"0\":{\"364\":1}}],[\"获得元素中的所有\",{\"1\":{\"325\":1}}],[\"获得共享锁的线程只能读数据\",{\"1\":{\"261\":1}}],[\"获得排它锁的线程即能读数据又能修改数据\",{\"1\":{\"261\":1}}],[\"获取token\",{\"1\":{\"729\":1}}],[\"获取当前的\",{\"1\":{\"534\":1}}],[\"获取类的注解和对应的类型信息进行构建出一个\",{\"1\":{\"532\":1}}],[\"获取容器\",{\"1\":{\"521\":1}}],[\"获取sqlsession\",{\"1\":{\"482\":1}}],[\"获取有序集合的成员数\",{\"1\":{\"462\":1}}],[\"获取集合中成员的个数\",{\"1\":{\"462\":1}}],[\"获取列表长度\",{\"1\":{\"462\":1}}],[\"获取哈希表所有的值\",{\"1\":{\"462\":1}}],[\"获取哈希表所有的字段\",{\"1\":{\"462\":1}}],[\"获取哈希表指定的字段值\",{\"1\":{\"462\":1}}],[\"获取哈希表的字段数量\",{\"1\":{\"462\":1}}],[\"获取哈希表的所有字段和值\",{\"1\":{\"462\":1}}],[\"获取哈希表字段的值\",{\"1\":{\"462\":1}}],[\"获取所有\",{\"1\":{\"462\":1}}],[\"获取所有的\",{\"1\":{\"325\":1}}],[\"获取的时候先通过\",{\"1\":{\"386\":1}}],[\"获取新的\",{\"1\":{\"325\":1}}],[\"获取元素的\",{\"1\":{\"325\":1}}],[\"获取对象的字符组\",{\"1\":{\"368\":1}}],[\"获取对象的\",{\"1\":{\"325\":1}}],[\"获取单列数据集合中存储数据的数量\",{\"1\":{\"299\":1}}],[\"获取不到才会到等待队列的队尾等待\",{\"1\":{\"259\":1}}],[\"获取\",{\"0\":{\"150\":1},\"1\":{\"325\":2,\"399\":1,\"462\":4,\"521\":1,\"532\":1}}],[\"获取工具\",{\"1\":{\"105\":1}}],[\"独享锁也叫排他锁\",{\"1\":{\"261\":1}}],[\"独享锁\",{\"0\":{\"261\":1}}],[\"独立\",{\"1\":{\"454\":1}}],[\"独立存储\",{\"1\":{\"139\":1}}],[\"独立的逻辑网络可以被用于支持分离连机和脱机操作系统\",{\"1\":{\"67\":1}}],[\"独立负责某大客户所有需求\",{\"1\":{\"48\":1}}],[\"公平锁的优点是等待锁的线程不会饿死\",{\"1\":{\"259\":1}}],[\"公平锁是指多个线程按照申请锁的顺序来获取锁\",{\"1\":{\"259\":1}}],[\"公平锁\",{\"0\":{\"259\":1}}],[\"公司开发的空中交通控制系统\",{\"1\":{\"81\":1}}],[\"公司出品的一种面向对象的统一建模语言的可视化建模工具\",{\"1\":{\"61\":1}}],[\"公司为了解决上述问题\",{\"1\":{\"49\":1}}],[\"公司已有的新再生网交易平台\",{\"1\":{\"49\":1}}],[\"避免线程阻塞和唤醒而影响性能\",{\"1\":{\"258\":1}}],[\"避免执行cas操作\",{\"1\":{\"258\":1}}],[\"避免过早地具体化每个站点和每个处理器的类和机制\",{\"1\":{\"63\":1}}],[\"轻量级锁\",{\"0\":{\"258\":1}}],[\"偏向锁通过对比mark\",{\"1\":{\"258\":1}}],[\"偏向锁\",{\"0\":{\"258\":1}}],[\"稍等一下\",{\"1\":{\"257\":1}}],[\"适配器是作为两个不兼容的接口之间的桥梁\",{\"1\":{\"766\":1}}],[\"适配器模式主要改变所考虑对象的接口\",{\"1\":{\"766\":1,\"773\":1}}],[\"适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作\",{\"1\":{\"766\":1}}],[\"适配器模式\",{\"0\":{\"766\":1}}],[\"适合有大量按索引条件并发更新少量不同数据\",{\"1\":{\"452\":1}}],[\"适用于以查询为主\",{\"1\":{\"452\":1}}],[\"适用于后台持久运行的应用程序\",{\"1\":{\"148\":1}}],[\"适用场景\",{\"1\":{\"452\":1}}],[\"适应性自旋锁\",{\"0\":{\"257\":1}}],[\"悲观锁适合写操作多的场景\",{\"1\":{\"256\":1}}],[\"悲观锁认为自己在使用数据的时候一定有别的线程来修改数据\",{\"1\":{\"256\":1}}],[\"悲观锁\",{\"0\":{\"256\":1}}],[\"乐观锁适合读操作多的场景\",{\"1\":{\"256\":1}}],[\"乐观锁在java中是通过使用无锁编程来实现\",{\"1\":{\"256\":1}}],[\"乐观锁认为自己在使用数据时不会有别的线程修改数据\",{\"1\":{\"256\":1}}],[\"乐观锁\",{\"0\":{\"256\":1}}],[\"乐观锁需要操作和冲突检测这两个步骤具备原子性\",{\"1\":{\"224\":1}}],[\"锁和\",{\"1\":{\"454\":1}}],[\"锁定粒度位于表级锁和行级锁之间\",{\"1\":{\"452\":1}}],[\"锁定粒度小\",{\"1\":{\"452\":1}}],[\"锁定粒度大\",{\"1\":{\"452\":1}}],[\"锁\",{\"0\":{\"255\":1,\"292\":1,\"451\":1,\"454\":1}}],[\"锁阻塞\",{\"1\":{\"246\":1}}],[\"守护线程是程序运行时在后台提供服务的线程\",{\"1\":{\"242\":1}}],[\"死亡\",{\"0\":{\"237\":1}}],[\"睡眠和挂起是用来描述行为\",{\"1\":{\"236\":1}}],[\"退出方法\",{\"1\":{\"235\":1,\"236\":1}}],[\"模版方法模式\",{\"0\":{\"776\":1}}],[\"模版模式\",{\"0\":{\"493\":1},\"1\":{\"491\":1,\"498\":1}}],[\"模型\",{\"1\":{\"732\":1,\"739\":2}}],[\"模式\",{\"1\":{\"229\":1}}],[\"模块和函数应该对扩展开放\",{\"1\":{\"750\":1}}],[\"模块\",{\"1\":{\"111\":1}}],[\"问题排查\",{\"0\":{\"730\":1}}],[\"问题2\",{\"0\":{\"283\":1}}],[\"问题1\",{\"0\":{\"282\":1}}],[\"问题\",{\"0\":{\"591\":1},\"1\":{\"226\":1}}],[\"问题不会影响程序并发的正确性\",{\"1\":{\"226\":1}}],[\"值则对应了\",{\"1\":{\"468\":1}}],[\"值表示\",{\"1\":{\"468\":1}}],[\"值为\",{\"1\":{\"468\":1}}],[\"值使得插入操作被相应地作用在第一或最后一个表上\",{\"1\":{\"436\":1}}],[\"值专用的字节码指令\",{\"1\":{\"373\":1}}],[\"值默认为\",{\"1\":{\"355\":1}}],[\"值\",{\"1\":{\"226\":1}}],[\"才进行下一步\",{\"1\":{\"725\":1}}],[\"才会树化\",{\"1\":{\"326\":1}}],[\"才将\",{\"1\":{\"224\":1}}],[\"才能挂载\",{\"1\":{\"731\":1}}],[\"才能描述出完整的开发架构\",{\"1\":{\"75\":1}}],[\"才能编写\",{\"1\":{\"37\":1}}],[\"个有限节点组成一个具有层次关系的集合\",{\"1\":{\"669\":1}}],[\"个股复盘需要跟深入\",{\"1\":{\"661\":1,\"663\":1}}],[\"个股的基本信息\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"个股基本面较相关\",{\"1\":{\"634\":1}}],[\"个股\",{\"0\":{\"615\":1,\"629\":1,\"643\":1}}],[\"个股选择\",{\"0\":{\"571\":1}}],[\"个索引\",{\"1\":{\"446\":1,\"449\":1}}],[\"个不同的值\",{\"1\":{\"436\":1}}],[\"个字符创建索引\",{\"1\":{\"446\":1}}],[\"个字符\",{\"1\":{\"420\":1}}],[\"个字节到文件描述符fd\",{\"1\":{\"746\":1}}],[\"个字节读入buf\",{\"1\":{\"746\":1}}],[\"个字节\",{\"1\":{\"373\":2}}],[\"个操作数\",{\"1\":{\"224\":1}}],[\"个人职责\",{\"0\":{\"44\":1,\"48\":1}}],[\"个人加速器可更换\",{\"1\":{\"11\":1}}],[\"个人简历\",{\"0\":{\"3\":1}}],[\"比面向过程要低\",{\"1\":{\"372\":1}}],[\"比较\",{\"0\":{\"738\":1},\"1\":{\"386\":1}}],[\"比较的是地址中的数据是否相等\",{\"1\":{\"377\":1}}],[\"比较的地址\",{\"1\":{\"377\":1}}],[\"比较字符串的大小\",{\"0\":{\"367\":1}}],[\"比较内容是否相等\",{\"0\":{\"365\":1}}],[\"比较并交换\",{\"1\":{\"224\":1}}],[\"比如你可以在每个小时报保存一下过去24小时内的数据\",{\"1\":{\"463\":1}}],[\"比如想计算\",{\"1\":{\"456\":1}}],[\"比如java\",{\"1\":{\"198\":1}}],[\"比如循环\",{\"1\":{\"139\":1}}],[\"比如\",{\"1\":{\"71\":1,\"75\":1,\"83\":1,\"97\":3,\"99\":2,\"103\":1,\"107\":2,\"111\":2}}],[\"比如性能和可用性\",{\"1\":{\"67\":1}}],[\"比如可靠性\",{\"1\":{\"57\":1}}],[\"硬件支持的原子性操作最典型的是\",{\"1\":{\"224\":1}}],[\"互斥同步属于一种悲观的并发策略\",{\"1\":{\"222\":1}}],[\"互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题\",{\"1\":{\"222\":1}}],[\"互斥同步\",{\"0\":{\"222\":1}}],[\"绝大多数时候指的是这一种情况\",{\"1\":{\"219\":1}}],[\"绝对线程安全\",{\"0\":{\"217\":1}}],[\"绝对\",{\"1\":{\"136\":1,\"141\":1}}],[\"相信在使用过程中所遇到的问题\",{\"1\":{\"680\":1}}],[\"相关的\",{\"1\":{\"536\":1}}],[\"相关的规则\",{\"1\":{\"406\":1}}],[\"相关代码如下\",{\"1\":{\"535\":1,\"540\":1,\"541\":1,\"542\":1,\"544\":1}}],[\"相同的文件\",{\"1\":{\"746\":1}}],[\"相同\",{\"1\":{\"434\":1}}],[\"相反\",{\"1\":{\"396\":1}}],[\"相等\",{\"0\":{\"386\":1}}],[\"相比于\",{\"1\":{\"254\":1,\"300\":1}}],[\"相当于大小为\",{\"1\":{\"241\":1}}],[\"相当于是让线程顺序执行同步代码\",{\"1\":{\"214\":1}}],[\"相对于\",{\"1\":{\"674\":1}}],[\"相对不安全\",{\"1\":{\"399\":1}}],[\"相对应的集合类\",{\"1\":{\"219\":1}}],[\"相对线程安全需要保证对这个对象单独的操作是线程安全的\",{\"1\":{\"218\":1}}],[\"相对线程安全\",{\"0\":{\"218\":1}}],[\"相应的脚本内容如下\",{\"1\":{\"93\":1}}],[\"很多数据都查不到从而查数据库\",{\"1\":{\"464\":1}}],[\"很方便传送到另一个远端数据中心或者亚马逊的s3\",{\"1\":{\"463\":1}}],[\"很容易区分各行\",{\"1\":{\"449\":1}}],[\"很有意思的是\",{\"1\":{\"276\":1}}],[\"很显然\",{\"1\":{\"214\":1}}],[\"很少更新\",{\"1\":{\"97\":1}}],[\"什么区别\",{\"0\":{\"400\":1}}],[\"什么时候被写入主存是不确定的\",{\"1\":{\"213\":1}}],[\"什么是代理\",{\"0\":{\"340\":1}}],[\"什么是spi\",{\"1\":{\"198\":1}}],[\"什么是泛型擦除\",{\"1\":{\"171\":1}}],[\"什么是泛型\",{\"1\":{\"163\":1}}],[\"什么是\",{\"0\":{\"404\":1,\"529\":1},\"1\":{\"144\":1}}],[\"传统的\",{\"1\":{\"472\":1}}],[\"传入的字符组\",{\"1\":{\"368\":1}}],[\"传入字节组\",{\"1\":{\"358\":1}}],[\"传递性\",{\"1\":{\"211\":1,\"388\":1}}],[\"传输服务\",{\"1\":{\"65\":1}}],[\"变更效率高\",{\"1\":{\"300\":1}}],[\"变更效率低\",{\"1\":{\"300\":1}}],[\"变更记录\",{\"1\":{\"109\":1}}],[\"变量的内存可见性是基于内存屏障\",{\"1\":{\"285\":1}}],[\"变量的写操作先行发生于后面对这个变量的读操作\",{\"1\":{\"211\":1,\"388\":1}}],[\"变量规则\",{\"0\":{\"287\":1},\"1\":{\"211\":1,\"388\":1}}],[\"规则中有一条是\",{\"0\":{\"287\":1}}],[\"规则来保证有序性的\",{\"1\":{\"214\":1}}],[\"规则\",{\"1\":{\"207\":1,\"388\":1,\"482\":1}}],[\"规模和性能\",{\"1\":{\"109\":1}}],[\"规模为700千行代码\",{\"1\":{\"107\":1}}],[\"规模为10千行代码\",{\"1\":{\"107\":1}}],[\"具有一下性质\",{\"1\":{\"673\":1,\"676\":1}}],[\"具有一下特性\",{\"1\":{\"671\":1}}],[\"具有特点\",{\"1\":{\"669\":1}}],[\"具有挑战性的架构\",{\"1\":{\"57\":1}}],[\"具体的实现方式是把一个或多个进程的相关资源指定在同一个\",{\"1\":{\"696\":1}}],[\"具体的代码如下\",{\"1\":{\"538\":1}}],[\"具体到对象原对象的操作则是需要代理对象处理的\",{\"1\":{\"340\":1}}],[\"具体是否插入还是得看是什么处理器\",{\"1\":{\"276\":1}}],[\"具体原理在下一节讲述\",{\"1\":{\"214\":1}}],[\"具体来说\",{\"1\":{\"207\":1}}],[\"称之为\",{\"1\":{\"206\":1}}],[\"插件机制\",{\"0\":{\"514\":1}}],[\"插件式存储引擎\",{\"1\":{\"437\":1}}],[\"插件工具\",{\"0\":{\"30\":1}}],[\"插入新的数据时的依据\",{\"1\":{\"436\":1}}],[\"插入一条内存屏障会告诉编译器和\",{\"1\":{\"285\":1}}],[\"插入一个storestore屏障\",{\"1\":{\"270\":1}}],[\"插入特定类型的内存屏障\",{\"1\":{\"206\":1}}],[\"缓存机制\",{\"0\":{\"516\":1},\"1\":{\"472\":1}}],[\"缓存机制导致可能写入的是\",{\"1\":{\"205\":1}}],[\"缓存和数据库的数据一致性\",{\"1\":{\"464\":1}}],[\"缓存雪崩是不同数据都过期了\",{\"1\":{\"464\":1}}],[\"缓存雪崩是指缓存中数据大批量到过期时间\",{\"1\":{\"464\":1}}],[\"缓存雪崩\",{\"1\":{\"464\":2}}],[\"缓存击穿指并发查同一条数据\",{\"1\":{\"464\":1}}],[\"缓存击穿是指缓存中没有但数据库中有的数据\",{\"1\":{\"464\":1}}],[\"缓存击穿\",{\"1\":{\"464\":2}}],[\"缓存穿透\",{\"1\":{\"464\":2}}],[\"缓存的数据大小为\",{\"1\":{\"375\":1}}],[\"缓存的数据\",{\"1\":{\"326\":1}}],[\"缓存的last关联新元素\",{\"1\":{\"310\":1}}],[\"缓存而不是内存\",{\"1\":{\"205\":1}}],[\"缓冲\",{\"1\":{\"67\":1}}],[\"指向与fd\",{\"1\":{\"746\":1}}],[\"指向关键字属于\",{\"1\":{\"673\":1}}],[\"指向关键字大于k\",{\"1\":{\"673\":1}}],[\"指向关键字小于k\",{\"1\":{\"673\":1}}],[\"指向存储注解authorities\",{\"1\":{\"181\":1}}],[\"指定传入sql的参数\",{\"1\":{\"482\":1}}],[\"指定statement\",{\"1\":{\"482\":1}}],[\"指定全局配置文件\",{\"1\":{\"482\":1}}],[\"指定采用哪个环境\",{\"1\":{\"478\":1}}],[\"指定的位\",{\"1\":{\"462\":1}}],[\"指不经过缓存\",{\"1\":{\"464\":1}}],[\"指多个字段上创建的索引\",{\"1\":{\"447\":1}}],[\"指令重排序\",{\"1\":{\"285\":1}}],[\"指令需要有\",{\"1\":{\"224\":1}}],[\"指令级并行的重排序\",{\"1\":{\"206\":1}}],[\"指令\",{\"1\":{\"205\":1,\"206\":1,\"285\":1,\"694\":1}}],[\"假如线程2执行了这三条指令后\",{\"1\":{\"205\":1}}],[\"假如应用里自定义了一个叫\",{\"1\":{\"130\":1}}],[\"假若执行线程1的是cpu1\",{\"1\":{\"204\":1}}],[\"↩︎\",{\"1\":{\"200\":1}}],[\"反馈较好\",{\"1\":{\"661\":1,\"663\":1}}],[\"反思\",{\"0\":{\"640\":1,\"661\":1,\"663\":1}}],[\"反之\",{\"1\":{\"257\":1}}],[\"反之则可以\",{\"1\":{\"161\":1}}],[\"反射能够获取的信息\",{\"1\":{\"399\":1}}],[\"反射的实现方式\",{\"1\":{\"399\":1}}],[\"反射的作用与原理\",{\"0\":{\"399\":1}}],[\"反射\",{\"1\":{\"385\":1}}],[\"反射使用\",{\"0\":{\"195\":1}}],[\"反射基础\",{\"0\":{\"194\":1}}],[\"反射机制是在运行时\",{\"1\":{\"399\":1}}],[\"反射机制执行的流程\",{\"0\":{\"196\":1}}],[\"反射机制\",{\"0\":{\"193\":1}}],[\"常用\",{\"0\":{\"459\":1}}],[\"常用方法\",{\"0\":{\"361\":1}}],[\"常见的数据结构\",{\"1\":{\"664\":1}}],[\"常见的取值有\",{\"1\":{\"456\":1}}],[\"常见问题\",{\"0\":{\"369\":1}}],[\"常常用\",{\"1\":{\"236\":2}}],[\"常常被代码生成工具使用\",{\"1\":{\"181\":1}}],[\"常量\",{\"1\":{\"136\":1,\"140\":1}}],[\"元注解是用于定义注解的注解\",{\"1\":{\"179\":1}}],[\"元注解\",{\"0\":{\"181\":1},\"1\":{\"179\":1}}],[\"元素从\",{\"1\":{\"462\":1}}],[\"元素是否是集合\",{\"1\":{\"462\":1}}],[\"元素数目\",{\"1\":{\"326\":1}}],[\"元素个数是否是0\",{\"1\":{\"325\":1}}],[\"元素\",{\"1\":{\"57\":1,\"325\":1}}],[\"生成证书\",{\"1\":{\"729\":1}}],[\"生成\",{\"1\":{\"694\":1}}],[\"生成文档\",{\"1\":{\"179\":1}}],[\"生产者\",{\"1\":{\"229\":1,\"532\":1}}],[\"生产者有上限\",{\"1\":{\"169\":1}}],[\"生产者或者消费者\",{\"1\":{\"169\":1}}],[\"生产管理\",{\"1\":{\"49\":1}}],[\"局部变量等进行注解\",{\"1\":{\"179\":1}}],[\"局域网\",{\"1\":{\"111\":1}}],[\"字的学生信息\",{\"1\":{\"430\":1}}],[\"字符串函数\",{\"0\":{\"420\":1}}],[\"字符串的长度\",{\"0\":{\"362\":1}}],[\"字符流\",{\"1\":{\"397\":1}}],[\"字节增长进程的内存\",{\"1\":{\"746\":1}}],[\"字节长\",{\"1\":{\"446\":1}}],[\"字节流\",{\"1\":{\"397\":1}}],[\"字节\",{\"1\":{\"373\":7,\"446\":2}}],[\"字节码验证步骤会检查每个操作码是否合法\",{\"1\":{\"132\":1}}],[\"字节码验证\",{\"1\":{\"132\":1}}],[\"字节码\",{\"1\":{\"124\":1}}],[\"字段做求和\",{\"1\":{\"456\":1}}],[\"字段\",{\"1\":{\"179\":1}}],[\"注册\",{\"1\":{\"532\":1}}],[\"注册对象\",{\"0\":{\"532\":1}}],[\"注册对应的\",{\"0\":{\"531\":1}}],[\"注册的组件类不能为空\",{\"1\":{\"531\":1}}],[\"注册类\",{\"1\":{\"528\":1}}],[\"注释掉settings\",{\"1\":{\"520\":1}}],[\"注\",{\"1\":{\"282\":1}}],[\"注解\",{\"1\":{\"532\":1,\"546\":1}}],[\"注解实现的原理\",{\"0\":{\"186\":1}}],[\"注解支持继承吗\",{\"0\":{\"185\":1}}],[\"注解修饰成员变量\",{\"1\":{\"181\":1}}],[\"注解的常见分类\",{\"1\":{\"179\":1}}],[\"注解是jdk1\",{\"1\":{\"179\":1}}],[\"注解基础\",{\"0\":{\"179\":1}}],[\"注解机制\",{\"0\":{\"178\":1}}],[\"注意事项\",{\"0\":{\"773\":1}}],[\"注意docker的版本和kubernetes版本对应\",{\"1\":{\"712\":1}}],[\"注意每天消息总结\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"注意这里的是\",{\"1\":{\"273\":1}}],[\"注意此时内存当中i的值还是0\",{\"1\":{\"204\":1}}],[\"注意\",{\"0\":{\"26\":1,\"712\":1},\"1\":{\"132\":1,\"264\":1,\"271\":1,\"373\":1,\"374\":1,\"375\":1,\"746\":1}}],[\"应在五日均线附近买入或日内均线以下买入\",{\"1\":{\"568\":1}}],[\"应该找\",{\"1\":{\"645\":1}}],[\"应该指定一个前缀长度\",{\"1\":{\"449\":1}}],[\"应该如何做呢\",{\"1\":{\"176\":1}}],[\"应当尽量避免\",{\"1\":{\"220\":1}}],[\"应用只需要向内核发送一个read\",{\"1\":{\"737\":1}}],[\"应用进程继续执行\",{\"1\":{\"737\":1}}],[\"应用进程收到之后在信号处理程序中调用\",{\"1\":{\"736\":1}}],[\"应用进程使用\",{\"1\":{\"736\":1}}],[\"应用进程可以继续执行\",{\"1\":{\"734\":1}}],[\"应用进程执行系统调用之后\",{\"1\":{\"734\":1}}],[\"应用进程进行系统调用\",{\"1\":{\"733\":1,\"734\":1,\"735\":1}}],[\"应用的类加载器\",{\"1\":{\"129\":1}}],[\"应用程序得到可读后\",{\"1\":{\"735\":1}}],[\"应用程序可一直系统调用\",{\"1\":{\"734\":1}}],[\"应用程序运行时间\",{\"1\":{\"148\":2}}],[\"应用程序使用\",{\"1\":{\"129\":1}}],[\"应用程序都有一个\",{\"1\":{\"129\":1}}],[\"应用程序共同使用\",{\"1\":{\"129\":1}}],[\"应用程序相互隔离独立的\",{\"1\":{\"129\":1}}],[\"应用程序自己定义的类来实现\",{\"1\":{\"129\":1}}],[\"应用程序呢\",{\"1\":{\"129\":1}}],[\"应用程序之间的类加载器相互隔离\",{\"1\":{\"129\":1}}],[\"应用容器引擎\",{\"1\":{\"4\":1}}],[\"失去了本意\",{\"1\":{\"176\":1}}],[\"擦除方法定义中的类型参数\",{\"1\":{\"173\":2}}],[\"擦除类定义中的类型参数\",{\"1\":{\"173\":2}}],[\"自身配置信息的维护操作\",{\"1\":{\"467\":1}}],[\"自数据库启动\",{\"1\":{\"456\":1}}],[\"自动注入模式\",{\"1\":{\"546\":1}}],[\"自动装配时出现多个bean候选者时\",{\"1\":{\"546\":1}}],[\"自动装配的一些常量\",{\"1\":{\"546\":1}}],[\"自动装箱和拆箱\",{\"0\":{\"375\":1}}],[\"自动故障转移\",{\"1\":{\"463\":1}}],[\"自动地在后台对\",{\"1\":{\"463\":1}}],[\"自动增长列是按照组合索引的前面几列进行排序后递增的\",{\"1\":{\"434\":1}}],[\"自动增长列可以是组合索引的其他列\",{\"1\":{\"434\":1}}],[\"自动增长列必须是索引\",{\"1\":{\"434\":1}}],[\"自动增长列\",{\"1\":{\"434\":1}}],[\"自动产生\",{\"1\":{\"172\":1}}],[\"自己比较自己肯定\",{\"1\":{\"366\":1}}],[\"自java\",{\"1\":{\"341\":1}}],[\"自增的属性值设置为\",{\"1\":{\"314\":1}}],[\"自旋等待的时间必须要有一定的限度\",{\"1\":{\"257\":1}}],[\"自旋等待的效果就会非常好\",{\"1\":{\"257\":1}}],[\"自旋等待虽然避免了线程切换的开销\",{\"1\":{\"257\":1}}],[\"自旋锁本身是有缺点的\",{\"1\":{\"257\":1}}],[\"自旋锁\",{\"0\":{\"257\":1},\"1\":{\"257\":1}}],[\"自然就保证了有序性\",{\"1\":{\"214\":1}}],[\"自定义注解和aop\",{\"0\":{\"187\":1}}],[\"自定义注解\",{\"0\":{\"182\":1},\"1\":{\"179\":1}}],[\"自主性\",{\"1\":{\"97\":1}}],[\"必要时插入强制类型转换代码\",{\"1\":{\"172\":1}}],[\"必须先安装\",{\"1\":{\"731\":1}}],[\"必须先获取该表的意向排他锁\",{\"1\":{\"454\":1}}],[\"必须是组合索引的第一个\",{\"1\":{\"434\":1}}],[\"必须能够替换掉他们的基类型\",{\"1\":{\"200\":1}}],[\"必须被装载到\",{\"1\":{\"124\":1}}],[\"必须被映射到不同的节点上\",{\"1\":{\"83\":1}}],[\"必须遵守这些决策来维护系统架构的完整性\",{\"1\":{\"109\":1}}],[\"尖括号中的内容\",{\"1\":{\"171\":1}}],[\"伪泛型\",{\"1\":{\"171\":1}}],[\"消费者\",{\"1\":{\"229\":1}}],[\"消费者有下限\",{\"1\":{\"169\":1}}],[\"消除类型参数声明\",{\"1\":{\"172\":1}}],[\"消息不会进行持久化\",{\"1\":{\"462\":1}}],[\"消息\",{\"1\":{\"111\":1,\"614\":1}}],[\"直到准备完成返回可读\",{\"1\":{\"735\":1}}],[\"直到无冲突\",{\"1\":{\"386\":1}}],[\"直到目标线程结束\",{\"1\":{\"251\":1}}],[\"直到成功为止\",{\"1\":{\"224\":1}}],[\"直到将进程降低到合理的数量\",{\"1\":{\"97\":1}}],[\"直接下载拷贝到bin目录即可\",{\"1\":{\"703\":1}}],[\"直接进行访问的数据结构\",{\"1\":{\"675\":1}}],[\"直接返回\",{\"1\":{\"464\":1}}],[\"直接去数据库获取数据\",{\"1\":{\"464\":1}}],[\"直接复制的\",{\"1\":{\"434\":1}}],[\"直接让前一个节点关联后一节点\",{\"1\":{\"311\":1}}],[\"直接可以重复使用authority注解\",{\"1\":{\"181\":1}}],[\"直接打印\",{\"1\":{\"169\":2}}],[\"声明object的泛型对象\",{\"1\":{\"169\":1}}],[\"声明string的泛型对象\",{\"1\":{\"169\":1}}],[\"声明integer的泛型对象\",{\"1\":{\"169\":1}}],[\"声明接口对象\",{\"1\":{\"167\":1}}],[\"声明为\",{\"1\":{\"161\":2}}],[\"汤姆\",{\"1\":{\"166\":1,\"167\":1}}],[\"返回一个新的文件描述符\",{\"1\":{\"746\":1}}],[\"返回一个fd\",{\"1\":{\"746\":1}}],[\"返回新内存的开始\",{\"1\":{\"746\":1}}],[\"返回子进程pid\",{\"1\":{\"746\":1}}],[\"返回子进程的pid\",{\"1\":{\"746\":1}}],[\"返回n\",{\"1\":{\"746\":1}}],[\"返回0\",{\"1\":{\"746\":2}}],[\"返回读取的字节数\",{\"1\":{\"746\":1}}],[\"返回给应用线程\",{\"1\":{\"733\":1}}],[\"返回给定所有集合的交集并存储在\",{\"1\":{\"462\":1}}],[\"返回给定集合的交集\",{\"1\":{\"462\":1}}],[\"返回给定集合之家你的差集并存储\",{\"1\":{\"462\":1}}],[\"返回的\",{\"1\":{\"474\":1}}],[\"返回的是对象根据内存地址算出的一个值\",{\"1\":{\"378\":1}}],[\"返回有序集中\",{\"1\":{\"462\":1}}],[\"返回有序集中指定分数区间内的成员\",{\"1\":{\"462\":1}}],[\"返回有序集中指定区间内的成员\",{\"1\":{\"462\":1}}],[\"返回有序集合中指定成员的排名\",{\"1\":{\"462\":1}}],[\"返回有序集合中指定成员的索引\",{\"1\":{\"462\":1}}],[\"返回所有给定集合的并集\",{\"1\":{\"462\":1}}],[\"返回集合中一个或多个随机数\",{\"1\":{\"462\":1}}],[\"返回集合中的所有成员\",{\"1\":{\"462\":1}}],[\"返回第一个集合和其他集合的差异\",{\"1\":{\"462\":1}}],[\"返回当前进程的pid\",{\"1\":{\"746\":1}}],[\"返回当前时间\",{\"1\":{\"422\":1}}],[\"返回当前日期\",{\"1\":{\"422\":2}}],[\"返回\",{\"1\":{\"420\":1,\"746\":1}}],[\"返回从\",{\"1\":{\"420\":1}}],[\"返回值是什么\",{\"0\":{\"390\":1}}],[\"返回值的类型由外部决定\",{\"1\":{\"166\":1}}],[\"返回字符组\",{\"1\":{\"359\":1}}],[\"返回类型无要求\",{\"1\":{\"376\":1}}],[\"返回类型都相同\",{\"1\":{\"376\":1}}],[\"返回类型可以相同也可以不同\",{\"1\":{\"162\":1}}],[\"返回类型与被重写方法的返回类型可以不相同\",{\"1\":{\"161\":1}}],[\"单例模式\",{\"0\":{\"758\":1}}],[\"单一职责原则\",{\"0\":{\"751\":1}}],[\"单一线程原则\",{\"1\":{\"211\":1,\"388\":1}}],[\"单表中的范围查询\",{\"1\":{\"456\":1}}],[\"单表中最多有一个匹配行\",{\"1\":{\"456\":1}}],[\"单独使用时是\",{\"1\":{\"373\":1}}],[\"单个删除时\",{\"1\":{\"305\":1}}],[\"单列数据集合添加数据\",{\"1\":{\"299\":1}}],[\"单列数据集合转数组\",{\"1\":{\"299\":1}}],[\"单列数据结合转数组\",{\"1\":{\"299\":1}}],[\"单次读\",{\"0\":{\"281\":1}}],[\"单位为毫秒\",{\"1\":{\"243\":1}}],[\"单元泛型\",{\"1\":{\"166\":1}}],[\"单服务器和多客户端\",{\"1\":{\"71\":1}}],[\"接力也需要看板块效应\",{\"1\":{\"645\":1}}],[\"接下来的工作全部由子进程来做\",{\"1\":{\"463\":1}}],[\"接下来的事情属于软件设计领域\",{\"1\":{\"107\":1}}],[\"接口隔离原则\",{\"0\":{\"754\":1}}],[\"接口这种调用方式\",{\"1\":{\"468\":1}}],[\"接口的类也就是在这时候进行执行的\",{\"1\":{\"537\":1}}],[\"接口的类只能当做一个可以在线程中运行的任务\",{\"1\":{\"238\":1}}],[\"接口的概念\",{\"1\":{\"472\":1}}],[\"接口的某一个方法时\",{\"1\":{\"468\":1}}],[\"接口表示的返回值类型或者返回结果集的元素类型\",{\"1\":{\"468\":1}}],[\"接口中的方法名称\",{\"1\":{\"468\":1}}],[\"接口层\",{\"0\":{\"466\":1}}],[\"接口才可以调用该方法\",{\"1\":{\"401\":1}}],[\"接口\",{\"0\":{\"468\":1},\"1\":{\"179\":1,\"238\":2,\"381\":2,\"466\":1,\"468\":1}}],[\"接口和方法中\",{\"1\":{\"163\":1}}],[\"泛型常用特点\",{\"0\":{\"384\":1}}],[\"泛型数组\",{\"0\":{\"170\":1}}],[\"泛型类\",{\"0\":{\"166\":1}}],[\"泛型的桥接方法\",{\"0\":{\"174\":1}}],[\"泛型的擦除原则\",{\"0\":{\"172\":1}}],[\"泛型的上下限\",{\"0\":{\"169\":1}}],[\"泛型的基本使用\",{\"0\":{\"165\":1}}],[\"泛型的引入主要是为了提高代码的复用性和可读性\",{\"1\":{\"164\":1}}],[\"泛型的本质是为了参数化类型\",{\"1\":{\"163\":1}}],[\"泛型方法调用\",{\"1\":{\"168\":1}}],[\"泛型方法定义\",{\"1\":{\"168\":2}}],[\"泛型方法\",{\"0\":{\"168\":1},\"1\":{\"163\":1}}],[\"泛型接口\",{\"0\":{\"167\":1},\"1\":{\"163\":1}}],[\"泛型机制\",{\"0\":{\"163\":1}}],[\"都不存在的时候\",{\"1\":{\"462\":1}}],[\"都不能为\",{\"1\":{\"381\":1}}],[\"都通过全表扫描来得到数据\",{\"1\":{\"456\":1}}],[\"都通过查询索引来得到数据\",{\"1\":{\"456\":1}}],[\"都为表锁\",{\"1\":{\"454\":1}}],[\"都可以在后面添加数据\",{\"1\":{\"453\":1}}],[\"都可以使用相关列上的索引\",{\"1\":{\"450\":1}}],[\"都可以作为主键的时候\",{\"1\":{\"449\":1}}],[\"都会得出大约一半的行\",{\"1\":{\"449\":1}}],[\"都会将产品的消费过程尽量在一个线程中消费完\",{\"1\":{\"229\":1}}],[\"都能够调用它的任意一个方法\",{\"1\":{\"399\":1}}],[\"都能够知道这个类的所有属性和方法\",{\"1\":{\"399\":1}}],[\"都支持\",{\"1\":{\"381\":1}}],[\"都是黑的\",{\"1\":{\"672\":1}}],[\"都是表明不可持续\",{\"1\":{\"567\":1}}],[\"都是数据库读一致性问题\",{\"1\":{\"454\":1}}],[\"都是基于数组的存储结构\",{\"1\":{\"313\":1}}],[\"都是空的\",{\"1\":{\"310\":1}}],[\"都无法在多线程环境中并发使用的代码\",{\"1\":{\"220\":1}}],[\"都替换为具体的类型\",{\"1\":{\"171\":1}}],[\"都必须有一个独一无二的参数类型列表\",{\"1\":{\"162\":1}}],[\"都对应这一个线帧在虚拟机栈中入栈到出栈的过程\",{\"1\":{\"136\":1,\"137\":1}}],[\"及所占百分比\",{\"1\":{\"430\":1}}],[\"及格为>=60\",{\"1\":{\"430\":1}}],[\"及格率\",{\"1\":{\"430\":2}}],[\"及更高版本可以不同\",{\"1\":{\"161\":1}}],[\"及更早版本返回类型要一样\",{\"1\":{\"161\":1}}],[\"及其对象\",{\"1\":{\"97\":1}}],[\"非阻塞式io\",{\"1\":{\"739\":1}}],[\"非阻塞式\",{\"0\":{\"734\":1},\"1\":{\"732\":1}}],[\"非阻塞同步\",{\"0\":{\"223\":1}}],[\"非叶子结点的指针\",{\"1\":{\"673\":1}}],[\"非叶子结点的关键字\",{\"1\":{\"673\":1}}],[\"非叶子结点的关键字个数=指向儿子的指针个数\",{\"1\":{\"673\":1}}],[\"非常适用于灾难恢复\",{\"1\":{\"463\":1}}],[\"非常适用于数据集的备份\",{\"1\":{\"463\":1}}],[\"非可重入锁\",{\"0\":{\"260\":1}}],[\"非公平锁的优点是可以减少唤起线程的开销\",{\"1\":{\"259\":1}}],[\"非公平锁是多个线程加锁时直接尝试获取锁\",{\"1\":{\"259\":1}}],[\"非公平锁\",{\"0\":{\"259\":1}}],[\"非法创建\",{\"1\":{\"170\":2}}],[\"非\",{\"1\":{\"158\":1}}],[\"提高\",{\"1\":{\"731\":1}}],[\"提高服务器性能\",{\"1\":{\"463\":1}}],[\"提高查询的效率\",{\"1\":{\"449\":1}}],[\"提高灵活性\",{\"1\":{\"399\":1}}],[\"提高软件的可重用性\",{\"1\":{\"157\":1}}],[\"提供两种方式来引导\",{\"1\":{\"473\":1}}],[\"提供的\",{\"0\":{\"467\":1},\"1\":{\"466\":1}}],[\"提供有关类和接口的属性信息\",{\"1\":{\"399\":1}}],[\"提供了额外的功能\",{\"1\":{\"768\":1}}],[\"提供了非常方便和简单的\",{\"1\":{\"467\":1}}],[\"提供了内存屏障阻止这种重排序\",{\"1\":{\"288\":1}}],[\"提供了两种锁机制来控制多个线程对共享资源的互斥访问\",{\"1\":{\"249\":1}}],[\"提示在并发修改\",{\"1\":{\"305\":1}}],[\"提升直接通过\",{\"1\":{\"378\":1}}],[\"提升可复用性\",{\"1\":{\"107\":1}}],[\"提升权限\",{\"0\":{\"28\":1}}],[\"减去\",{\"1\":{\"462\":1}}],[\"减一\",{\"1\":{\"462\":1}}],[\"减少数据库连接的创建和销毁的资源浪费\",{\"1\":{\"500\":1}}],[\"减少数据在数据库和应用服务器之间的传输\",{\"1\":{\"443\":1}}],[\"减少耦合\",{\"1\":{\"157\":1}}],[\"减轻维护的负担\",{\"1\":{\"157\":1}}],[\"利用最左前缀\",{\"1\":{\"449\":1}}],[\"利用asm开源包\",{\"1\":{\"347\":1}}],[\"利用抽象数据类型将数据和基于数据的操作封装在一起\",{\"1\":{\"157\":1}}],[\"利益相关人\",{\"1\":{\"55\":1,\"111\":1}}],[\"调度的核心\",{\"1\":{\"474\":1}}],[\"调优\",{\"0\":{\"152\":1}}],[\"调用无参构造方法\",{\"1\":{\"528\":1}}],[\"调用存储过程和函数可以简化应用开发人员的很多工作\",{\"1\":{\"443\":1}}],[\"调用该对象的其他方法\",{\"1\":{\"358\":1}}],[\"调用者都不需要任何额外的同步措施\",{\"1\":{\"217\":1}}],[\"调用\",{\"1\":{\"130\":1,\"236\":2,\"248\":1,\"252\":1}}],[\"会修复一些bug\",{\"1\":{\"703\":1}}],[\"会创建部分文件来使用\",{\"1\":{\"695\":1}}],[\"会初始化\",{\"1\":{\"543\":1}}],[\"会直接将缓存结果返回给用户\",{\"1\":{\"472\":1}}],[\"会将对某一次查询\",{\"1\":{\"472\":1}}],[\"会将当前线程挂起\",{\"1\":{\"251\":1}}],[\"会对于一些查询提供会话级别的数据缓存\",{\"1\":{\"472\":1}}],[\"会根据这个方法的方法名和参数类型\",{\"1\":{\"468\":1}}],[\"会根据相应的接口声明的方法信息\",{\"1\":{\"468\":1}}],[\"会继续将命令追加到现有的\",{\"1\":{\"463\":1}}],[\"会让你的redis更加耐久\",{\"1\":{\"463\":1}}],[\"会出现死锁\",{\"1\":{\"452\":2}}],[\"会影响一些查询的执行效率\",{\"1\":{\"450\":1}}],[\"会在线程批量操作数据库的时候抛出该异常\",{\"1\":{\"507\":1}}],[\"会在线程操作数据库的时候抛出该异常\",{\"1\":{\"507\":1}}],[\"会在相应的文件夹下生成三个文件\",{\"1\":{\"433\":1}}],[\"会在指令序列中插入内存屏障来禁止特定类型的处理器重排序\",{\"1\":{\"288\":1}}],[\"会自增\",{\"1\":{\"404\":1}}],[\"会自动使用serial\",{\"1\":{\"148\":1}}],[\"会\",{\"1\":{\"392\":1}}],[\"会报错\",{\"1\":{\"391\":1}}],[\"会隐式自动转换\",{\"1\":{\"391\":1}}],[\"会尝试将其内联\",{\"1\":{\"388\":1}}],[\"会存在哈希冲突\",{\"1\":{\"386\":1}}],[\"会失败\",{\"1\":{\"348\":1}}],[\"会先进行判断\",{\"1\":{\"327\":1}}],[\"会先去取\",{\"1\":{\"327\":1}}],[\"会先把i的初始值加载到cpu1的高速缓存中\",{\"1\":{\"204\":1}}],[\"会缓存modcount\",{\"1\":{\"305\":1}}],[\"会给属性\",{\"1\":{\"302\":3}}],[\"会针对编译器制定\",{\"1\":{\"288\":1}}],[\"会允许编译器和处理器对指令序列进行重排序\",{\"1\":{\"288\":1}}],[\"会释放锁\",{\"1\":{\"253\":1}}],[\"会分别经历下面三种重排序\",{\"1\":{\"206\":1}}],[\"会话\",{\"1\":{\"65\":1}}],[\"希望系统停顿时间最短\",{\"1\":{\"148\":1}}],[\"希望在2到3次迭代之后\",{\"1\":{\"107\":1}}],[\"收集器是一种以获取最短回收停顿时间为目标的收集器\",{\"1\":{\"148\":1}}],[\"收集器\",{\"1\":{\"148\":1}}],[\"动态地给一个对象添加一些额外的职责\",{\"1\":{\"768\":1}}],[\"动态地生成\",{\"1\":{\"474\":1}}],[\"动态地将横切逻辑和业务逻辑编织在一起\",{\"1\":{\"341\":1}}],[\"动态\",{\"1\":{\"471\":1}}],[\"动态语句生成可以说是\",{\"1\":{\"470\":1}}],[\"动态表中包含变长字段\",{\"1\":{\"433\":1}}],[\"动态表\",{\"1\":{\"433\":2}}],[\"动态生成\",{\"1\":{\"343\":1}}],[\"动态代理\",{\"0\":{\"341\":1}}],[\"动态代理和\",{\"0\":{\"339\":1}}],[\"动态调整这些参数以提供最合适的停顿时间或最大的吞吐量\",{\"1\":{\"148\":1}}],[\"动态链接\",{\"1\":{\"136\":1,\"137\":1}}],[\"压缩表由\",{\"1\":{\"433\":1}}],[\"压缩表\",{\"1\":{\"433\":1}}],[\"压缩\",{\"1\":{\"148\":3}}],[\"压缩算法\",{\"1\":{\"147\":1}}],[\"串行收集器是最古老\",{\"1\":{\"148\":1}}],[\"整体架构\",{\"0\":{\"524\":1,\"525\":1}}],[\"整体框架如下\",{\"1\":{\"465\":1}}],[\"整体的吞吐效率高\",{\"1\":{\"259\":1}}],[\"整个过程极为重要的为刷新\",{\"1\":{\"528\":1}}],[\"整个重写操作是绝对安全的\",{\"1\":{\"463\":1}}],[\"整个流程存证问题\",{\"1\":{\"49\":1}}],[\"整理\",{\"1\":{\"147\":1,\"148\":1}}],[\"清空元素\",{\"1\":{\"325\":1}}],[\"清理集群\",{\"0\":{\"709\":1}}],[\"清理\",{\"1\":{\"147\":1}}],[\"清除上一次刷新缓存的数据和初始化一些配置\",{\"1\":{\"533\":1}}],[\"清除\",{\"1\":{\"147\":2}}],[\"清除算法\",{\"1\":{\"147\":1}}],[\"优先选择\",{\"1\":{\"661\":1,\"663\":1}}],[\"优先级大于\",{\"1\":{\"326\":1}}],[\"优秀为\",{\"1\":{\"430\":1}}],[\"优秀率\",{\"1\":{\"430\":2}}],[\"优良为\",{\"1\":{\"430\":1}}],[\"优良率\",{\"1\":{\"430\":2}}],[\"优点\",{\"1\":{\"147\":1,\"157\":1,\"300\":1,\"399\":1,\"452\":1,\"463\":3,\"665\":1,\"666\":1}}],[\"优化嵌套查询\",{\"1\":{\"459\":1}}],[\"优化器不能使用\",{\"1\":{\"450\":1}}],[\"优化工具\",{\"0\":{\"153\":1},\"1\":{\"153\":1}}],[\"优化\",{\"0\":{\"149\":1,\"455\":1,\"456\":1},\"1\":{\"105\":1,\"152\":1,\"157\":1,\"459\":3}}],[\"另外可以通过synchronized和lock来保证有序性\",{\"1\":{\"214\":1}}],[\"另外\",{\"1\":{\"148\":1,\"449\":1}}],[\"另外一个是空间问题\",{\"1\":{\"147\":1}}],[\"另一个\",{\"1\":{\"436\":1}}],[\"另一个就是对\",{\"1\":{\"470\":1}}],[\"另一个就是\",{\"1\":{\"73\":1}}],[\"另一套就是网络编程\",{\"1\":{\"398\":1}}],[\"另一方面\",{\"1\":{\"97\":1}}],[\"另一些用于不站点或者不同客户的系统部署\",{\"1\":{\"83\":1}}],[\"缺点是占用的空间通常比动态表多\",{\"1\":{\"433\":1}}],[\"缺点是处于等待队列中的线程可能会饿死\",{\"1\":{\"259\":1}}],[\"缺点是整体吞吐效率相对非公平锁要低\",{\"1\":{\"259\":1}}],[\"缺点\",{\"1\":{\"147\":2,\"300\":1,\"399\":1,\"452\":1,\"463\":3,\"665\":1,\"666\":1}}],[\"两个阶段\",{\"1\":{\"147\":1}}],[\"算法思想\",{\"0\":{\"806\":1}}],[\"算法\",{\"1\":{\"148\":1}}],[\"算法来进行回收\",{\"1\":{\"147\":1}}],[\"算法一样\",{\"1\":{\"147\":1}}],[\"算法分为\",{\"1\":{\"147\":1}}],[\"算法实现订单和回单的匹配\",{\"1\":{\"48\":1}}],[\"计算给定的一个或多个有序集的并集\",{\"1\":{\"462\":1}}],[\"计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合\",{\"1\":{\"462\":1}}],[\"计算在有序集合中指定区间分数的成员数\",{\"1\":{\"462\":1}}],[\"计算得出结束位置\",{\"1\":{\"368\":1}}],[\"计算机体系结构\",{\"1\":{\"202\":1}}],[\"计数为0时可以回收\",{\"1\":{\"146\":1}}],[\"计划\",{\"1\":{\"75\":1}}],[\"垃圾收集的过程中会stop\",{\"1\":{\"148\":1}}],[\"垃圾收集算法\",{\"0\":{\"147\":1}}],[\"垃圾收集器\",{\"0\":{\"148\":1},\"1\":{\"145\":1}}],[\"垃圾回收器\",{\"0\":{\"145\":1}}],[\"区别在于\",{\"1\":{\"456\":1}}],[\"区别在于条件中包含对\",{\"1\":{\"456\":1}}],[\"区别在于不是使用\",{\"1\":{\"456\":1}}],[\"区别\",{\"0\":{\"379\":1}}],[\"区\",{\"1\":{\"141\":1}}],[\"区和survivor\",{\"1\":{\"141\":1}}],[\"幸存者\",{\"1\":{\"141\":1}}],[\"伊甸园\",{\"1\":{\"141\":1}}],[\"保证事务不受外部并发操作影响的\",{\"1\":{\"454\":1}}],[\"保证原子性\",{\"0\":{\"281\":1}}],[\"保证了\",{\"1\":{\"140\":1}}],[\"保存该流水线\",{\"1\":{\"34\":1}}],[\"承载着操作系统和应用程序的实时运行\",{\"1\":{\"140\":1}}],[\"内核会发起一个通知告诉应用\",{\"1\":{\"737\":1}}],[\"内核会主动把数据从内核复制到用户空间\",{\"1\":{\"737\":1}}],[\"内核收到请求后会建立一个信号联系\",{\"1\":{\"737\":1}}],[\"内核进行数据准备\",{\"1\":{\"736\":1,\"737\":1}}],[\"内核立即返回\",{\"1\":{\"736\":1}}],[\"内核若数据报未准备则进行阻塞\",{\"1\":{\"735\":1}}],[\"内核若数据报未准备好则直接返回错误标志ewouldblock\",{\"1\":{\"734\":1}}],[\"内核若数据报未准备好则进行阻塞至数据报准备完毕\",{\"1\":{\"733\":1}}],[\"内核返回一个错误码\",{\"1\":{\"734\":1}}],[\"内核数量大于等于\",{\"1\":{\"722\":1}}],[\"内核用来隔离内核资源的方式\",{\"1\":{\"696\":1}}],[\"内部基于数组进行存储的\",{\"1\":{\"380\":1}}],[\"内部都是可变数组\",{\"1\":{\"379\":1}}],[\"内部是基于链表进行存储的\",{\"1\":{\"380\":1}}],[\"内部是\",{\"1\":{\"379\":1}}],[\"内部存在存在有缓存\",{\"1\":{\"375\":1}}],[\"内部的实现原理是通过数组进行缓存元素数据\",{\"1\":{\"301\":1}}],[\"内聚性更高\",{\"1\":{\"371\":1}}],[\"内存空间\",{\"1\":{\"395\":1}}],[\"内存语义时\",{\"1\":{\"288\":1}}],[\"内存屏障\",{\"1\":{\"285\":1,\"288\":1}}],[\"内存模型规范了\",{\"1\":{\"207\":1}}],[\"内存系统的重排序\",{\"1\":{\"206\":1}}],[\"内存\",{\"1\":{\"202\":1,\"694\":1,\"743\":1}}],[\"内存映像工具\",{\"1\":{\"153\":1}}],[\"内存分配时也就不用考虑内存碎片等复杂情况\",{\"1\":{\"147\":1}}],[\"内存缩小为原来的一半\",{\"1\":{\"147\":1}}],[\"内存布局规定了\",{\"1\":{\"140\":1}}],[\"内存区域是很重要的系统资源\",{\"1\":{\"140\":1}}],[\"内容\",{\"1\":{\"34\":1,\"167\":1,\"479\":1}}],[\"内容如下\",{\"1\":{\"24\":1,\"39\":1,\"40\":1}}],[\"跳转\",{\"1\":{\"139\":1}}],[\"标的\",{\"1\":{\"571\":1}}],[\"标签的\",{\"1\":{\"546\":5}}],[\"标志是一个新的\",{\"1\":{\"534\":1}}],[\"标明要忽略的警告\",{\"1\":{\"179\":1}}],[\"标明某个类或方法过时\",{\"1\":{\"179\":1}}],[\"标记网络数据包\",{\"1\":{\"694\":1}}],[\"标记过程仍然与\",{\"1\":{\"147\":1}}],[\"标记清除之后会产生大量不连续的内存碎片\",{\"1\":{\"147\":1}}],[\"标记和清除过程的效率都不高\",{\"1\":{\"147\":1}}],[\"标记\",{\"1\":{\"147\":6,\"148\":1}}],[\"标量替换优化的技术将会导致一些微妙的变化\",{\"1\":{\"136\":1,\"141\":1}}],[\"标题页\",{\"1\":{\"109\":1}}],[\"几乎所有的对象实例都在这里分配内存\",{\"1\":{\"136\":1,\"141\":1}}],[\"堆总是一棵完全二叉树\",{\"1\":{\"676\":1}}],[\"堆中某个节点的值总是不大于或不小于其父节点的值\",{\"1\":{\"676\":1}}],[\"堆是一种比较特殊的数据结构\",{\"1\":{\"676\":1}}],[\"堆栈跟踪工具\",{\"1\":{\"153\":1}}],[\"堆内存的分配\",{\"1\":{\"141\":1}}],[\"堆唯一的目的就是存放对象实例\",{\"1\":{\"136\":1,\"141\":1}}],[\"堆\",{\"0\":{\"141\":1,\"676\":1},\"1\":{\"136\":1,\"664\":1}}],[\"操作总结\",{\"0\":{\"566\":1}}],[\"操作crud\",{\"1\":{\"482\":1}}],[\"操作的行数\",{\"1\":{\"456\":1}}],[\"操作的次数\",{\"1\":{\"456\":3}}],[\"操作的数据类型被指定为一个参数\",{\"1\":{\"163\":1}}],[\"操作符时\",{\"1\":{\"450\":1}}],[\"操作使用\",{\"1\":{\"447\":1}}],[\"操作性能的最佳途径\",{\"1\":{\"446\":1}}],[\"操作就会误认为它从来没有被改变过\",{\"1\":{\"226\":1}}],[\"操作先行发生于后面对同一个锁的\",{\"1\":{\"211\":1,\"388\":1}}],[\"操作\",{\"1\":{\"205\":1,\"211\":2,\"225\":1,\"388\":2,\"450\":1,\"456\":2,\"474\":1}}],[\"操作数栈\",{\"1\":{\"136\":1,\"137\":1}}],[\"操作系统架构和系统调用\",{\"0\":{\"747\":1}}],[\"操作系统结构\",{\"0\":{\"743\":1}}],[\"操作系统的目标\",{\"1\":{\"742\":1}}],[\"操作系统xv6\",{\"0\":{\"740\":1}}],[\"操作系统增加了进程\",{\"1\":{\"202\":1}}],[\"操作系统\",{\"0\":{\"812\":1},\"1\":{\"81\":1,\"202\":1}}],[\"与aof相比\",{\"1\":{\"463\":1}}],[\"与动态编译结合\",{\"1\":{\"399\":1}}],[\"与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源\",{\"1\":{\"395\":1}}],[\"与随后初次读这个\",{\"1\":{\"388\":1}}],[\"与随后把这个被构造对象的引用赋值给一个变量\",{\"1\":{\"388\":1}}],[\"与随后在构造函数之外把这个被构造的对象的引用赋给一个引用变量\",{\"1\":{\"273\":1}}],[\"与平台无关性\",{\"1\":{\"371\":1}}],[\"与\",{\"1\":{\"202\":1,\"456\":3,\"694\":2}}],[\"与虚拟机栈相同的是栈的深度是固定的\",{\"1\":{\"136\":1,\"138\":1}}],[\"与虚拟机的作用是相似的\",{\"1\":{\"136\":1,\"138\":1}}],[\"与其它对象的行为是\",{\"1\":{\"97\":1}}],[\"否则可能出现权限不足现象\",{\"1\":{\"712\":1}}],[\"否则可能出现节点添加不上问题\",{\"1\":{\"712\":1}}],[\"否则应继续持有\",{\"1\":{\"661\":1,\"663\":1}}],[\"否则抛出\",{\"1\":{\"401\":1}}],[\"否则会在运行时抛出\",{\"1\":{\"252\":1}}],[\"否则不会被分配\",{\"1\":{\"235\":1}}],[\"否则采取补偿措施\",{\"1\":{\"224\":1}}],[\"否则盒盖休眠就会影响该节点\",{\"1\":{\"17\":1,\"717\":1}}],[\"否\",{\"1\":{\"136\":3}}],[\"准备\",{\"0\":{\"133\":1}}],[\"语句以及相应的参数信息\",{\"1\":{\"474\":1}}],[\"语句提供了有限的支持\",{\"1\":{\"472\":1}}],[\"语句成为可能\",{\"1\":{\"472\":1}}],[\"语句方式就是使用\",{\"1\":{\"472\":1}}],[\"语句生成之后\",{\"1\":{\"471\":1}}],[\"语句执行过程中表如何连接和连接的顺序\",{\"1\":{\"456\":1}}],[\"语句执行的次数\",{\"1\":{\"456\":1}}],[\"语句来整理空间碎片\",{\"1\":{\"453\":1}}],[\"语句加\",{\"1\":{\"447\":1}}],[\"语句中的前缀长度解释为字符数\",{\"1\":{\"446\":1}}],[\"语句的生成和查询缓存的维护\",{\"1\":{\"474\":1}}],[\"语句的配置方式\",{\"1\":{\"472\":1}}],[\"语句的执行以及封装查询结果集成\",{\"0\":{\"471\":1}}],[\"语句的执行以及封装查询结果集成list<e>\",{\"1\":{\"469\":1}}],[\"语句的信息\",{\"1\":{\"456\":1}}],[\"语句的日志文件\",{\"1\":{\"456\":1}}],[\"语句的\",{\"1\":{\"453\":1}}],[\"语句的集合\",{\"1\":{\"443\":1}}],[\"语句的动态\",{\"1\":{\"442\":1}}],[\"语句\",{\"0\":{\"470\":1},\"1\":{\"442\":1,\"456\":2,\"459\":3,\"468\":1,\"469\":1,\"470\":1,\"471\":1,\"472\":1,\"474\":1}}],[\"语句或\",{\"1\":{\"433\":1}}],[\"语文\",{\"1\":{\"427\":1}}],[\"语言有哪些特点\",{\"0\":{\"371\":1}}],[\"语言天生就具备多线程特性\",{\"1\":{\"220\":1}}],[\"语言的语法规定\",{\"1\":{\"132\":1}}],[\"语义检查的错误在编译器编译阶段就会通不过\",{\"1\":{\"132\":1}}],[\"语义检查\",{\"1\":{\"132\":1}}],[\"确认题材结束再考虑清仓\",{\"1\":{\"661\":1,\"663\":1}}],[\"确定每天的涨停个股的题材\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"确定\",{\"1\":{\"468\":1}}],[\"确定问题并采取相应的优化措施\",{\"1\":{\"456\":1}}],[\"确定性的流程\",{\"1\":{\"97\":1}}],[\"确保数据不会被别的线程修改\",{\"1\":{\"256\":1}}],[\"确保相互引用的类之间的协调一致\",{\"1\":{\"132\":1}}],[\"确保字节码流可以被\",{\"1\":{\"132\":1}}],[\"确保类本身符合\",{\"1\":{\"132\":1}}],[\"确保类文件遵从\",{\"1\":{\"132\":1}}],[\"验证\",{\"0\":{\"132\":1}}],[\"验证和证实已完成的架构设计\",{\"1\":{\"89\":1}}],[\"了\",{\"1\":{\"130\":1,\"136\":1,\"141\":1}}],[\"委托给\",{\"1\":{\"130\":2}}],[\"委派父加载器去查找\",{\"1\":{\"130\":1}}],[\"尝试修复\",{\"1\":{\"601\":1}}],[\"尝试用extclassloader\",{\"1\":{\"130\":1}}],[\"尝试在初步的架构中编写这些场景的脚本\",{\"1\":{\"107\":1}}],[\"抛出异常\",{\"1\":{\"130\":1,\"546\":1}}],[\"先不说服务器能不能扛得住这么多线程\",{\"1\":{\"735\":1}}],[\"先进先出\",{\"1\":{\"668\":1}}],[\"先进行操作\",{\"1\":{\"224\":1}}],[\"先加载dependson的bean\",{\"1\":{\"546\":1}}],[\"先加锁可以保证写操作时数据正确\",{\"1\":{\"256\":1}}],[\"先插入第一个\",{\"1\":{\"462\":1}}],[\"先获取\",{\"1\":{\"462\":1}}],[\"先获得读锁\",{\"1\":{\"453\":1}}],[\"先行发生于操作\",{\"1\":{\"211\":3,\"388\":3}}],[\"先行发生于它的\",{\"1\":{\"211\":1,\"388\":1}}],[\"先在本地缓存中查找该类是否已经加载过\",{\"1\":{\"130\":1}}],[\"先在应用本地目录下查找类\",{\"1\":{\"130\":1}}],[\"先是翻译为用例\",{\"1\":{\"115\":1}}],[\"先是翻译为可伸缩性\",{\"1\":{\"115\":1}}],[\"+x\",{\"1\":{\"703\":1}}],[\"+statementid\",{\"1\":{\"482\":1}}],[\"+=\",{\"1\":{\"205\":1,\"391\":1}}],[\"+g1younggensize=512m\",{\"1\":{\"148\":1}}],[\"+unlockexperimentalvmoptions\",{\"1\":{\"148\":1}}],[\"+useg1gc\",{\"1\":{\"148\":1}}],[\"+useconcmarksweepgc选项\",{\"1\":{\"148\":1}}],[\"+useparnewgc选项来开启\",{\"1\":{\"148\":2}}],[\"+新生代\",{\"1\":{\"141\":1}}],[\"+老年区\",{\"1\":{\"141\":1}}],[\"+\",{\"1\":{\"130\":14,\"141\":2,\"148\":1,\"164\":28,\"166\":2,\"167\":1,\"169\":1,\"205\":1,\"304\":2,\"342\":1,\"345\":1,\"430\":3,\"481\":6,\"496\":6,\"533\":2,\"540\":2,\"541\":6,\"542\":7,\"584\":1}}],[\"+1\",{\"1\":{\"89\":2,\"430\":1}}],[\"程序的一次执行过程\",{\"1\":{\"395\":1}}],[\"程序\",{\"0\":{\"395\":1},\"1\":{\"395\":1}}],[\"程序也就终止\",{\"1\":{\"242\":1}}],[\"程序计数器就是存储这些指令去做什么\",{\"1\":{\"139\":1}}],[\"程序计数器是一块较小的内存空间\",{\"1\":{\"136\":1,\"139\":1}}],[\"程序计数器\",{\"0\":{\"139\":1},\"1\":{\"136\":1}}],[\"程序都不可见\",{\"1\":{\"129\":1}}],[\"程序只需生成在\",{\"1\":{\"124\":1}}],[\"心类加载器\",{\"1\":{\"129\":1}}],[\"真正实现\",{\"1\":{\"129\":1}}],[\"决定\",{\"1\":{\"126\":1}}],[\"就增加功能来说\",{\"1\":{\"768\":1}}],[\"就像搭积木\",{\"1\":{\"765\":1}}],[\"就像完全没有泛型一样\",{\"1\":{\"171\":1}}],[\"就算扛得住那么很明显这种方式是不是太浪费资源了\",{\"1\":{\"735\":1}}],[\"就表示这两个顶点具有相邻关系\",{\"1\":{\"677\":1}}],[\"就表明了你不能打算继承该类\",{\"1\":{\"264\":1}}],[\"就会从旧\",{\"1\":{\"463\":1}}],[\"就会出现数据丢失的情况\",{\"1\":{\"462\":1}}],[\"就会覆盖核心类库的\",{\"1\":{\"130\":1}}],[\"就暂时将写请求的优先级降低\",{\"1\":{\"453\":1}}],[\"就去寻找下一个散列\",{\"1\":{\"386\":1}}],[\"就是多表连接中使用\",{\"1\":{\"456\":1}}],[\"就是自动把封装类型转化为基础类型\",{\"1\":{\"375\":1}}],[\"就是自动把基础类型自动转换为封装类型\",{\"1\":{\"375\":1}}],[\"就是一种\",{\"1\":{\"158\":1}}],[\"就添加\",{\"1\":{\"325\":1}}],[\"就应当挂起线程\",{\"1\":{\"257\":1}}],[\"就可能需要在调用端使用额外的同步手段来保证调用的正确性\",{\"1\":{\"218\":1}}],[\"就可以将数据集恢复到\",{\"1\":{\"463\":1}}],[\"就可以在服务启动时从持久稳固的数据源装载表\",{\"1\":{\"435\":1}}],[\"就可以在多种平台上不加修改地运行\",{\"1\":{\"124\":1}}],[\"就可以通过反射机制获得类的所有信息\",{\"1\":{\"399\":1}}],[\"就可以通过查找这个jar包\",{\"1\":{\"198\":1}}],[\"就可以使用该服务了\",{\"1\":{\"198\":1}}],[\"就切换到线程2执行\",{\"1\":{\"205\":1}}],[\"就使用\",{\"1\":{\"169\":1}}],[\"就必须使用\",{\"1\":{\"147\":1}}],[\"就需要有额外的空间进行分配担保\",{\"1\":{\"147\":1}}],[\"就将还存活着的对象复制到另外一块上面\",{\"1\":{\"147\":1}}],[\"就读时间\",{\"1\":{\"3\":1}}],[\"原型模式\",{\"0\":{\"764\":1}}],[\"原理\",{\"0\":{\"692\":1}}],[\"原因\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"原因就是它打破了\",{\"1\":{\"129\":1}}],[\"原来值\",{\"1\":{\"462\":1}}],[\"原来的程序不会出现任何错误\",{\"1\":{\"230\":1}}],[\"原子类\",{\"0\":{\"291\":1}}],[\"原子性\",{\"0\":{\"205\":1,\"212\":1},\"1\":{\"454\":1}}],[\"原子性问题\",{\"1\":{\"202\":1}}],[\"原始类型变为object\",{\"1\":{\"175\":1}}],[\"原书第三版\",{\"1\":{\"115\":1}}],[\"原文中\",{\"1\":{\"105\":1}}],[\"原文发表于1995年的\",{\"1\":{\"52\":1}}],[\"后期可能该异常类型为mybatis所有异常的父类\",{\"1\":{\"507\":1}}],[\"后来这项技术被用到了spring的很多地方\",{\"1\":{\"341\":1}}],[\"后来又被改回为\",{\"1\":{\"226\":1}}],[\"后续博弈受益大\",{\"1\":{\"633\":1}}],[\"后续看到爱丽家居的封板也很强\",{\"1\":{\"596\":1}}],[\"后续执行时只需要遍历执行即可\",{\"1\":{\"540\":1}}],[\"后续创建则直接在先缓存\",{\"1\":{\"310\":1}}],[\"后续扩容\",{\"1\":{\"304\":1}}],[\"后续移出时会使用\",{\"1\":{\"304\":1}}],[\"后改为用况\",{\"1\":{\"115\":1}}],[\"后记\",{\"0\":{\"37\":1}}],[\"我要特别感谢以下同事的贡献\",{\"1\":{\"113\":1}}],[\"我们创建具有现有对象的对象\",{\"1\":{\"772\":1}}],[\"我们称这种一劳永逸的模式为异步io模型\",{\"1\":{\"737\":1}}],[\"我们后面将称为fd文件描述符\",{\"1\":{\"735\":1}}],[\"我们要将\",{\"1\":{\"470\":1}}],[\"我们在方法执行前后打印的日志\",{\"1\":{\"341\":1}}],[\"我们需要将变量设置为volatile类型的变量\",{\"1\":{\"279\":1}}],[\"我们需让当前线程进行自旋\",{\"1\":{\"257\":1}}],[\"我们就可以让后面那个请求锁的线程不放弃cpu的执行时间\",{\"1\":{\"257\":1}}],[\"我们就可以把共享数据的可见范围限制在同一个线程之内\",{\"1\":{\"229\":1}}],[\"我们平常说一个类不是线程安全的\",{\"1\":{\"219\":1}}],[\"我们现在以使用最为流行的\",{\"1\":{\"140\":1}}],[\"我们已经发现这些其它的视图集通常可以用我们所表述的4个视图中的一个来描述\",{\"1\":{\"111\":1}}],[\"我们已经使用trw的全球网络架构服务\",{\"1\":{\"69\":1}}],[\"我们这里说是的是用于进化的原型\",{\"1\":{\"105\":1}}],[\"我们更提倡迭代的开发\",{\"1\":{\"105\":1}}],[\"我们仍然对如何证明架构的有效性知之甚少\",{\"1\":{\"105\":1}}],[\"我们认为这种方法对于一个艰巨的\",{\"1\":{\"105\":1}}],[\"我们认为每个对象都是主动的\",{\"1\":{\"97\":1}}],[\"我们会发现它的实现垮了好几层\",{\"1\":{\"99\":1}}],[\"我们会发现并没有一个从类到层的映射关系\",{\"1\":{\"99\":1}}],[\"我们发现项目规模越大\",{\"1\":{\"99\":1}}],[\"我们同时使用两种策略来决定\",{\"1\":{\"97\":1}}],[\"我们为逻辑架构的类定义了一些重要特征\",{\"1\":{\"97\":1}}],[\"我们为每种视图定义了一组要使用的元素\",{\"1\":{\"57\":1}}],[\"我们将在后面对此进行描述\",{\"1\":{\"89\":1}}],[\"我们将依次观察五个视图\",{\"1\":{\"57\":1}}],[\"我们用对象场景图或者对象交互图来描述场景的设计\",{\"1\":{\"89\":1}}],[\"我们用另外的蓝图来表述这些子系统\",{\"1\":{\"81\":1}}],[\"我们希望使用几种不同的物理配置\",{\"1\":{\"83\":1}}],[\"我们建议开发视图采用\",{\"1\":{\"79\":1}}],[\"我们建议的解决方法是使用多个并行的\",{\"1\":{\"55\":1}}],[\"我们又一次使用\",{\"1\":{\"77\":1}}],[\"我们可以通过atomicinteger或者synchronized来保证+1操作的原子性\",{\"1\":{\"282\":1}}],[\"我们可以使用基于冲突检测的乐观并发策略\",{\"1\":{\"224\":1}}],[\"我们可以复用为一个方法\",{\"1\":{\"164\":1}}],[\"我们可以继续处理\",{\"1\":{\"97\":1}}],[\"我们可以得到\",{\"1\":{\"71\":1}}],[\"我们可以区分主要\",{\"1\":{\"67\":1}}],[\"我们遵循的主要设计准则是在整个系统中尽量保持单一的\",{\"1\":{\"63\":1}}],[\"我们使用的过程视图的表示法是从\",{\"1\":{\"69\":1}}],[\"我们使用面向对象的风格\",{\"1\":{\"63\":1}}],[\"我们使用\",{\"1\":{\"59\":1,\"61\":1,\"91\":1,\"468\":1}}],[\"我们使用一种多个\",{\"1\":{\"57\":1}}],[\"我们捕捉有效的形式和模式\",{\"1\":{\"57\":1}}],[\"我们把\",{\"1\":{\"57\":1}}],[\"我们提出的模型由5个主要的视图组成\",{\"1\":{\"57\":1}}],[\"我们都看过很多企图用单个图来表述系统架构设计要点的书籍和文章\",{\"1\":{\"55\":1}}],[\"阿尔卡特和其它地方的很多同事\",{\"1\":{\"113\":1}}],[\"加一\",{\"1\":{\"304\":1,\"462\":1}}],[\"加锁慢\",{\"1\":{\"452\":1}}],[\"加锁快\",{\"1\":{\"452\":1}}],[\"加锁\",{\"1\":{\"300\":1}}],[\"加上\",{\"1\":{\"181\":1,\"462\":2}}],[\"加载一个文件并使用参数执行它\",{\"1\":{\"746\":1}}],[\"加载的类信息存放于一块称为方法区的内存空间\",{\"1\":{\"135\":1}}],[\"加载不到同样也会委托给\",{\"1\":{\"130\":1}}],[\"加载流程\",{\"0\":{\"130\":1}}],[\"加载\",{\"0\":{\"127\":1},\"1\":{\"536\":1}}],[\"加拿大hughes\",{\"1\":{\"113\":1}}],[\"加速\",{\"1\":{\"11\":1}}],[\"致谢\",{\"0\":{\"113\":1}}],[\"表明通过bean的class的内部来自动装配\",{\"1\":{\"546\":1}}],[\"表中仅有一行\",{\"1\":{\"456\":1}}],[\"表和\",{\"1\":{\"456\":1}}],[\"表共享读锁和表独占写锁\",{\"1\":{\"453\":1}}],[\"表锁\",{\"0\":{\"453\":1}}],[\"表级锁的两种模式\",{\"1\":{\"453\":1}}],[\"表级锁\",{\"1\":{\"452\":1}}],[\"表改为\",{\"1\":{\"450\":1}}],[\"表尽量自己指定主键\",{\"1\":{\"449\":1}}],[\"表大小的限制\",{\"1\":{\"437\":1}}],[\"表以逻辑方式组合在一起\",{\"1\":{\"437\":1}}],[\"表通常用于更新不太频繁的小表\",{\"1\":{\"437\":1}}],[\"表由哪些表组成\",{\"1\":{\"436\":1}}],[\"表在磁盘上保留两个文件\",{\"1\":{\"436\":1}}],[\"表执行插入操作\",{\"1\":{\"436\":1}}],[\"表进行的\",{\"1\":{\"436\":1}}],[\"表本身并没有数据\",{\"1\":{\"436\":1}}],[\"表必须结构完全相同\",{\"1\":{\"436\":1}}],[\"表的普通索引都会保存主键的键值\",{\"1\":{\"449\":1}}],[\"表的访问效率\",{\"1\":{\"437\":1}}],[\"表的优点在于可以突破对单个\",{\"1\":{\"437\":1}}],[\"表的组合\",{\"1\":{\"436\":1}}],[\"表的时候\",{\"1\":{\"435\":1}}],[\"表的大小受\",{\"1\":{\"435\":1}}],[\"表数据就会丢失\",{\"1\":{\"435\":1}}],[\"表名+分区名\",{\"1\":{\"434\":1}}],[\"表\",{\"1\":{\"433\":1,\"434\":1,\"436\":1,\"450\":1,\"456\":1}}],[\"表存在成绩的学生信息\",{\"1\":{\"430\":1}}],[\"表示通过不同的方法构建上下文对象\",{\"1\":{\"530\":1}}],[\"表示动态生成的\",{\"1\":{\"474\":1}}],[\"表示和数据库交互的会话\",{\"1\":{\"474\":1}}],[\"表示实际使用的索引\",{\"1\":{\"456\":1}}],[\"表示查询时\",{\"1\":{\"456\":1}}],[\"表示表的连接类型\",{\"1\":{\"456\":1}}],[\"表示\",{\"1\":{\"456\":1}}],[\"表示每个\",{\"1\":{\"456\":1}}],[\"表示不能对这个\",{\"1\":{\"436\":1}}],[\"表示父表在更新或者删除时\",{\"1\":{\"434\":1}}],[\"表示正在运行对象的类\",{\"1\":{\"399\":1}}],[\"表示禁止重排序\",{\"1\":{\"288\":1}}],[\"表示关闭编译器警告信息\",{\"1\":{\"180\":1}}],[\"表示代码被弃用\",{\"1\":{\"180\":1}}],[\"表示当前的方法定义将覆盖父类中的方法\",{\"1\":{\"180\":1}}],[\"表示参数化的类型可能是指定的类型\",{\"1\":{\"169\":1}}],[\"表示参数化的类型可能是所指定的类型\",{\"1\":{\"169\":1}}],[\"表示法\",{\"1\":{\"115\":1}}],[\"表示法的变体\",{\"1\":{\"77\":1}}],[\"表示法聚焦于在架构上有重大意义的元素\",{\"1\":{\"69\":1}}],[\"表示法4衍生而来的\",{\"1\":{\"61\":1}}],[\"表1\",{\"1\":{\"111\":1}}],[\"产品线\",{\"1\":{\"111\":1}}],[\"产品线的5层开发组织\",{\"1\":{\"81\":1}}],[\"集\",{\"1\":{\"463\":1}}],[\"集群\",{\"1\":{\"463\":1}}],[\"集群中是否部署成功\",{\"0\":{\"36\":1}}],[\"集合中\",{\"1\":{\"462\":1}}],[\"集合移动到\",{\"1\":{\"462\":1}}],[\"集合在操作的时候\",{\"1\":{\"404\":1}}],[\"集合的一种错误机制\",{\"1\":{\"404\":1}}],[\"集合元素数据\",{\"1\":{\"326\":1}}],[\"集合树化的最小元素个数\",{\"1\":{\"326\":1}}],[\"集合将为空\",{\"1\":{\"299\":1}}],[\"集合框架是每一个入门开发者必会的内容\",{\"1\":{\"298\":1}}],[\"集合\",{\"0\":{\"293\":1},\"1\":{\"462\":1,\"474\":1}}],[\"集成人员\",{\"1\":{\"111\":1}}],[\"库\",{\"1\":{\"111\":1}}],[\"广域网\",{\"1\":{\"111\":1}}],[\"广播\",{\"1\":{\"111\":1}}],[\"子查询中的第一个\",{\"1\":{\"456\":1}}],[\"子表的对应字段被\",{\"1\":{\"434\":1}}],[\"子表创建外键的时候会自动创建索引\",{\"1\":{\"434\":1}}],[\"子类只需实现获取对象的方法即可\",{\"1\":{\"493\":1}}],[\"子类把父类中的方法进行重写\",{\"1\":{\"376\":1}}],[\"子类型\",{\"1\":{\"200\":1}}],[\"子类和父类不在同一个包中\",{\"1\":{\"161\":1}}],[\"子类和父类在同一个包中\",{\"1\":{\"161\":1}}],[\"子类对象必须能够替换掉所有父类对象\",{\"1\":{\"158\":1}}],[\"子句中的列\",{\"1\":{\"449\":1}}],[\"子句定义插入的表\",{\"1\":{\"436\":1}}],[\"子句指定表的最大行数\",{\"1\":{\"435\":1}}],[\"子句\",{\"1\":{\"111\":1}}],[\"子系统只能依赖与它相同层或更低层的子系统\",{\"1\":{\"79\":1}}],[\"子系统分\",{\"1\":{\"75\":1}}],[\"子系统分解\",{\"1\":{\"75\":1}}],[\"子系统\",{\"1\":{\"75\":2,\"107\":1,\"111\":2}}],[\"脚本出错时终止执行\",{\"1\":{\"731\":1}}],[\"脚本安装\",{\"0\":{\"719\":1}}],[\"脚本\",{\"1\":{\"111\":1,\"462\":2}}],[\"脚本是指对象之间\",{\"1\":{\"89\":1}}],[\"步骤\",{\"1\":{\"111\":1}}],[\"无返回\",{\"1\":{\"746\":1}}],[\"无需\",{\"1\":{\"722\":1}}],[\"无需等待其它线程显式地唤醒\",{\"1\":{\"236\":1}}],[\"无向图\",{\"0\":{\"679\":1}}],[\"无中心化\",{\"1\":{\"463\":1}}],[\"无fsync\",{\"1\":{\"463\":1}}],[\"无参的构造方法什么都为进行初始化\",{\"1\":{\"308\":1}}],[\"无参\",{\"0\":{\"530\":1},\"1\":{\"302\":2}}],[\"无其他作用\",{\"1\":{\"282\":1}}],[\"无锁\",{\"0\":{\"258\":1}}],[\"无限期等待\",{\"0\":{\"235\":1}}],[\"无限制类型擦除\",{\"1\":{\"173\":2}}],[\"无限制通配符\",{\"1\":{\"169\":1}}],[\"无须同步也能保证线程之间不出现数据争用的问题\",{\"1\":{\"229\":1}}],[\"无同步方案\",{\"0\":{\"227\":1}}],[\"无法实现动态扩容\",{\"1\":{\"463\":2}}],[\"无法被访问到\",{\"1\":{\"265\":1}}],[\"无法以返回值类型作为重载函数的区分标准\",{\"1\":{\"162\":1}}],[\"无法解决对象相互循环引用的问题\",{\"1\":{\"146\":1}}],[\"无论共享数据是否真的会出现竞争\",{\"1\":{\"222\":1}}],[\"无论被重写的方法是否抛出异常\",{\"1\":{\"161\":1}}],[\"无论是否在术语4中有一些本地定制和调整\",{\"1\":{\"111\":1}}],[\"无缝地协同工作\",{\"1\":{\"89\":1}}],[\"结构型\",{\"0\":{\"765\":1}}],[\"结果集对象转换成\",{\"1\":{\"474\":1}}],[\"结果集转换成\",{\"1\":{\"474\":1}}],[\"结果按平均成绩降序排列\",{\"1\":{\"430\":1}}],[\"结果都为\",{\"1\":{\"420\":1}}],[\"结果\",{\"1\":{\"342\":1,\"345\":1}}],[\"结束\",{\"1\":{\"582\":1}}],[\"结束事务\",{\"1\":{\"342\":2,\"345\":2}}],[\"结束循环\",{\"1\":{\"107\":1}}],[\"结论\",{\"0\":{\"111\":1}}],[\"缩略语\",{\"1\":{\"109\":1}}],[\"缩写为\",{\"1\":{\"81\":1}}],[\"缩写为sale\",{\"1\":{\"69\":1}}],[\"缩写为unas\",{\"1\":{\"69\":1}}],[\"质量\",{\"1\":{\"109\":1}}],[\"范围\",{\"1\":{\"109\":1}}],[\"目前\",{\"1\":{\"546\":1}}],[\"目前只在plugin中使用\",{\"1\":{\"507\":1}}],[\"目前只在logfactory构建日志相关的时候才会抛出该异常\",{\"1\":{\"507\":1}}],[\"目前的\",{\"1\":{\"472\":1}}],[\"目前还不支持函数索引\",{\"1\":{\"446\":1}}],[\"目前很大一部分的java应用都集中在互联网站或b\",{\"1\":{\"148\":1}}],[\"目的是为了增加并发问题的产生几率\",{\"1\":{\"282\":1}}],[\"目的是化了模块之间非常复杂的依赖网络的开发\",{\"1\":{\"79\":1}}],[\"目录里创建一个以服务接口命名的文件\",{\"1\":{\"198\":1}}],[\"目录\",{\"1\":{\"109\":1}}],[\"典型大纲参见图13\",{\"1\":{\"109\":1}}],[\"涉及的人员数量\",{\"1\":{\"107\":1}}],[\"要以盘面来确定\",{\"1\":{\"661\":1,\"663\":1}}],[\"要有板块效应再去追涨\",{\"1\":{\"661\":1,\"663\":1}}],[\"要复盘一个月内炒作过的热点\",{\"1\":{\"661\":1,\"663\":1}}],[\"要果断\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"要仔细思索\",{\"1\":{\"640\":1,\"661\":1,\"663\":1}}],[\"要么全失败\",{\"1\":{\"454\":1}}],[\"要么全成功\",{\"1\":{\"454\":1}}],[\"要选择最常作为访问条件的列作为主键\",{\"1\":{\"449\":1}}],[\"要使用多表空间的存储方式\",{\"1\":{\"434\":1}}],[\"要求输出课程号和选修人数\",{\"1\":{\"430\":1}}],[\"要求方法名\",{\"1\":{\"376\":1}}],[\"要是不一致则说明存在别的线程在操作\",{\"1\":{\"404\":1}}],[\"要保证线程安全\",{\"1\":{\"227\":1}}],[\"要在表示\",{\"1\":{\"169\":1}}],[\"要实现不同类型的加法\",{\"1\":{\"164\":1}}],[\"要实施的项目规模\",{\"1\":{\"107\":1}}],[\"要解决的问题\",{\"1\":{\"49\":2}}],[\"顺便说一句\",{\"1\":{\"107\":1}}],[\"升级实现\",{\"1\":{\"107\":1}}],[\"基于\",{\"1\":{\"473\":1}}],[\"基于改变修订现有的场景\",{\"1\":{\"107\":1}}],[\"基础\",{\"0\":{\"462\":1}}],[\"基础语法\",{\"0\":{\"418\":1}}],[\"基础类型的包装类\",{\"1\":{\"399\":1}}],[\"基础面试题\",{\"0\":{\"370\":1}}],[\"基础线程机制\",{\"0\":{\"240\":1}}],[\"基本数据结构\",{\"0\":{\"664\":1}}],[\"基本数据类型\",{\"1\":{\"275\":1}}],[\"基本只会在反射使用时会抛出该异常\",{\"1\":{\"507\":1}}],[\"基本只会在sqlsessionmanager中使用\",{\"1\":{\"507\":1}}],[\"基本的数据类型相等的判断只需要==就可以判断\",{\"1\":{\"365\":1}}],[\"基本和arraylist\",{\"1\":{\"315\":1}}],[\"基本信息\",{\"1\":{\"3\":1}}],[\"再次读取数据\",{\"1\":{\"454\":1}}],[\"再次评估风险\",{\"1\":{\"107\":1}}],[\"再哈希\",{\"1\":{\"386\":1}}],[\"再进入该线程的内层方法会自动获取锁\",{\"1\":{\"260\":1}}],[\"再切换会线程1执行后续两条指令\",{\"1\":{\"205\":1}}],[\"再到过程视图\",{\"1\":{\"111\":1}}],[\"再细分为12个步骤\",{\"1\":{\"105\":1}}],[\"下跌趋势不言底\",{\"1\":{\"661\":1,\"663\":1}}],[\"下面代码是\",{\"1\":{\"536\":1}}],[\"下图是mybatis中异常的关系图\",{\"1\":{\"503\":1}}],[\"下一次扩容的容量\",{\"1\":{\"326\":1}}],[\"下一个迭代可以这样开始\",{\"1\":{\"107\":1}}],[\"下限\",{\"1\":{\"169\":1}}],[\"下载离线资源包\",{\"1\":{\"704\":4}}],[\"下载kube安装包\",{\"0\":{\"704\":1}}],[\"下载并安装sealos\",{\"1\":{\"703\":1}}],[\"下载sealos\",{\"0\":{\"703\":1}}],[\"下载代码\",{\"0\":{\"519\":1}}],[\"下载maven\",{\"1\":{\"29\":1}}],[\"下载java\",{\"1\":{\"29\":1}}],[\"下载安装文件\",{\"1\":{\"23\":1}}],[\"下载链接\",{\"1\":{\"19\":3}}],[\"吸取经验教训\",{\"1\":{\"107\":2}}],[\"机制介绍\",{\"0\":{\"198\":1}}],[\"机制的实现原理\",{\"0\":{\"200\":1}}],[\"机制的使用\",{\"0\":{\"199\":1}}],[\"机制的\",{\"1\":{\"129\":1}}],[\"机制\",{\"0\":{\"197\":1},\"1\":{\"107\":1}}],[\"疑为\",{\"1\":{\"105\":1}}],[\"逐步成熟\",{\"1\":{\"105\":1}}],[\"逐层发布的策略\",{\"1\":{\"79\":1}}],[\"培训\",{\"1\":{\"105\":1}}],[\"团队建设\",{\"1\":{\"105\":1}}],[\"团队组织\",{\"1\":{\"99\":1}}],[\"测量这个架构\",{\"1\":{\"107\":1}}],[\"测量\",{\"1\":{\"105\":1,\"107\":1}}],[\"测试结果大致是这样的\",{\"1\":{\"351\":1}}],[\"测试类\",{\"1\":{\"342\":1,\"345\":1}}],[\"测试\",{\"0\":{\"32\":1},\"1\":{\"22\":1,\"105\":1,\"107\":1,\"157\":1}}],[\"线程是我们操作系统的宝贵资源\",{\"1\":{\"735\":1}}],[\"线程才会进行下一步的响应\",{\"1\":{\"733\":1}}],[\"线程也被称为轻量进程\",{\"1\":{\"395\":1}}],[\"线程和进程类似\",{\"1\":{\"395\":1}}],[\"线程不安全\",{\"1\":{\"360\":1,\"379\":1,\"381\":1}}],[\"线程池\",{\"0\":{\"294\":1}}],[\"线程工作内存\",{\"1\":{\"280\":1}}],[\"线程b和线程c之间存在数据竞争\",{\"1\":{\"274\":1}}],[\"线程直接进入队列中排队\",{\"1\":{\"259\":1}}],[\"线程挂起和恢复现场的花费可能会让系统得不偿失\",{\"1\":{\"257\":1}}],[\"线程会释放锁\",{\"1\":{\"252\":1}}],[\"线程在等待时会被挂起\",{\"1\":{\"252\":1}}],[\"线程间的协作\",{\"0\":{\"250\":1}}],[\"线程互斥同步\",{\"0\":{\"249\":1}}],[\"线程中断\",{\"0\":{\"245\":1}}],[\"线程中断规则\",{\"1\":{\"211\":1,\"388\":1}}],[\"线程中抛出的其它异常也同样需要在本地进行处理\",{\"1\":{\"243\":1}}],[\"线程使用方式\",{\"0\":{\"238\":1}}],[\"线程状态\",{\"0\":{\"231\":1}}],[\"线程本地存储\",{\"0\":{\"229\":1}}],[\"线程安全\",{\"1\":{\"313\":1,\"381\":1}}],[\"线程安全的实现\",{\"0\":{\"221\":1}}],[\"线程安全分类\",{\"0\":{\"215\":1}}],[\"线程对立这种排斥多线程的代码是很少出现的\",{\"1\":{\"220\":1}}],[\"线程对立是指无论调用端是否采取了同步措施\",{\"1\":{\"220\":1}}],[\"线程对立\",{\"0\":{\"220\":1}}],[\"线程兼容是指对象本身并不是线程安全的\",{\"1\":{\"219\":1}}],[\"线程兼容\",{\"0\":{\"219\":1}}],[\"线程加入规则\",{\"1\":{\"211\":1,\"388\":1}}],[\"线程启动规则\",{\"1\":{\"211\":1,\"388\":1}}],[\"线程1执行了第一条指令后\",{\"1\":{\"205\":1}}],[\"线程1对变量i修改了之后\",{\"1\":{\"204\":1}}],[\"线程切换\",{\"1\":{\"205\":1}}],[\"线程2没有立即看到线程1修改的值\",{\"1\":{\"204\":1}}],[\"线程\",{\"1\":{\"202\":1,\"395\":1}}],[\"线性\",{\"1\":{\"105\":1}}],[\"线路的\",{\"1\":{\"65\":1}}],[\"且没有防火墙\",{\"1\":{\"722\":1}}],[\"且没有先例的项目来说\",{\"1\":{\"105\":1}}],[\"且不包含下划线\",{\"1\":{\"722\":1}}],[\"且内存大于等于\",{\"1\":{\"722\":1}}],[\"且k\",{\"1\":{\"673\":1}}],[\"且m>2\",{\"1\":{\"673\":1}}],[\"且有回复分时均线附近\",{\"1\":{\"633\":1}}],[\"且爱丽家居虽然封单较少但是迅速封住\",{\"1\":{\"596\":1}}],[\"且开盘下杀\",{\"1\":{\"567\":1}}],[\"且课程成绩在\",{\"1\":{\"430\":1}}],[\"且分数低于\",{\"1\":{\"430\":1}}],[\"且返回newvalue\",{\"1\":{\"325\":1}}],[\"且添加到集合中\",{\"1\":{\"325\":1}}],[\"且更易于理解\",{\"1\":{\"105\":1}}],[\"且允许一种更简单\",{\"1\":{\"79\":1}}],[\"草图\",{\"1\":{\"105\":1}}],[\"那它自然就无须任何同步措施去保证正确性\",{\"1\":{\"227\":1}}],[\"那\",{\"1\":{\"226\":1}}],[\"那操作就成功了\",{\"1\":{\"224\":1}}],[\"那使用通配符就没什么意义了\",{\"1\":{\"169\":1}}],[\"那就需要一个容器进行管理\",{\"1\":{\"529\":1}}],[\"那就看看这些共享数据的代码是否能保证在同一个线程中执行\",{\"1\":{\"229\":1}}],[\"那就肯定会出现问题\",{\"1\":{\"222\":1}}],[\"那就选用复制算法\",{\"1\":{\"147\":1}}],[\"那就没必要分开来描述\",{\"1\":{\"103\":1}}],[\"那么问题来了\",{\"1\":{\"735\":1}}],[\"那么它的两儿子都是黑的\",{\"1\":{\"672\":1}}],[\"那么从节点因为没有主节点而同步中断\",{\"1\":{\"463\":1}}],[\"那么只要停止服务器\",{\"1\":{\"463\":1}}],[\"那么只能抛出\",{\"1\":{\"130\":1}}],[\"那么rdb不适合你\",{\"1\":{\"463\":1}}],[\"那么表中会自动生成一个内部列\",{\"1\":{\"449\":1}}],[\"那么\",{\"1\":{\"437\":1}}],[\"那么选择这个存储引擎是非常适合的\",{\"1\":{\"437\":1}}],[\"那么spring会使用jdk动态代理来完成操作\",{\"1\":{\"349\":1}}],[\"那么这些线程自己必须不断的向内核发送recvfrom\",{\"1\":{\"735\":1}}],[\"那么这时候就需要cglib动态代理了\",{\"1\":{\"343\":1}}],[\"那么这个线程可以无需阻塞直接获取到锁\",{\"1\":{\"259\":1}}],[\"那么假如被代理对象没有实现接口呢\",{\"1\":{\"343\":1}}],[\"那么自旋的线程只会白浪费处理器资源\",{\"1\":{\"257\":1}}],[\"那么自然就不存在原子性问题了\",{\"1\":{\"212\":1}}],[\"那么当前线程就可以不必阻塞而是直接获取同步资源\",{\"1\":{\"257\":1}}],[\"那么其它线程就无法进入对象的同步方法或者同步控制块中\",{\"1\":{\"252\":1}}],[\"那么调用线程的\",{\"1\":{\"247\":1}}],[\"那么操作\",{\"1\":{\"211\":1,\"388\":1}}],[\"那么在cpu1的高速缓存当中i的值变为10了\",{\"1\":{\"204\":1}}],[\"那么在子类中重写该方法就不能声明为\",{\"1\":{\"161\":1}}],[\"那么子类只能够重写父类的声明为\",{\"1\":{\"161\":1}}],[\"那么子类可以重写父类所有方法\",{\"1\":{\"161\":1}}],[\"那么肯定不是应用自己定义的类\",{\"1\":{\"130\":1}}],[\"那么就意味着能做其它事情的线程就会少\",{\"1\":{\"735\":1}}],[\"那么就是按照唯一索引的顺序保存\",{\"1\":{\"449\":1}}],[\"那么就可能因此需要将函数改造成存储过程\",{\"1\":{\"443\":1}}],[\"那么就无法执行\",{\"1\":{\"252\":1}}],[\"那么就需要对线程进行协调\",{\"1\":{\"250\":1}}],[\"那么就会抛出\",{\"1\":{\"246\":1}}],[\"那么就会使得j的值为0\",{\"1\":{\"204\":1}}],[\"那么就会先用webappclassloader进行加载\",{\"1\":{\"130\":1}}],[\"那么就由\",{\"1\":{\"130\":1}}],[\"那么就在本地应用目录下查找此类并加载\",{\"1\":{\"130\":1}}],[\"那么就委托给appclassloader去加载\",{\"1\":{\"130\":1}}],[\"那么必须有某种形式的仲裁来调用它们的操作\",{\"1\":{\"97\":1}}],[\"裁剪模型\",{\"0\":{\"103\":1}}],[\"密切相关的类的集合\",{\"1\":{\"99\":1}}],[\"密码\",{\"1\":{\"27\":1}}],[\"虽然你可以配置不同的save时间点\",{\"1\":{\"463\":1}}],[\"虽然速度很快\",{\"1\":{\"435\":1}}],[\"虽然它们是很复杂的类\",{\"1\":{\"97\":1}}],[\"虽然上述平台能够实现可再生资源的交易\",{\"1\":{\"49\":1}}],[\"总结\",{\"0\":{\"590\":1},\"1\":{\"633\":1,\"645\":1}}],[\"总体架构设计\",{\"0\":{\"465\":1}}],[\"总索引长度至少为\",{\"1\":{\"446\":1}}],[\"总分重复时不保留名次空缺\",{\"1\":{\"430\":1}}],[\"总分重复时保留名次空缺\",{\"1\":{\"430\":1}}],[\"总是认为只要不去做正确的同步措施\",{\"1\":{\"222\":1}}],[\"总是从属于飞机\",{\"1\":{\"97\":1}}],[\"总线\",{\"1\":{\"111\":1}}],[\"总览\",{\"0\":{\"0\":1,\"1\":1,\"50\":1,\"116\":1,\"118\":1,\"120\":1,\"122\":1,\"559\":1}}],[\"上层模块不应该依赖底层模块\",{\"1\":{\"753\":1}}],[\"上图流程如下\",{\"1\":{\"733\":1,\"734\":1,\"735\":1,\"736\":1,\"737\":1}}],[\"上传auth\",{\"1\":{\"729\":1}}],[\"上传init\",{\"1\":{\"725\":1}}],[\"上传install\",{\"1\":{\"724\":1}}],[\"上证指数低开高走\",{\"1\":{\"642\":1}}],[\"上证指数低开低走\",{\"1\":{\"631\":1}}],[\"上涨过大时应及时退出\",{\"1\":{\"633\":1}}],[\"上板最早\",{\"1\":{\"584\":1}}],[\"上周五龙头断板\",{\"1\":{\"582\":1,\"597\":1}}],[\"上下文对象\",{\"1\":{\"529\":1}}],[\"上有相同的结果\",{\"1\":{\"285\":1}}],[\"上面几段代码中多处执行了thread\",{\"1\":{\"282\":1}}],[\"上面我们提到过\",{\"1\":{\"276\":1}}],[\"上调用\",{\"1\":{\"254\":1}}],[\"上述的\",{\"1\":{\"206\":1}}],[\"上限\",{\"1\":{\"169\":1}}],[\"上\",{\"1\":{\"97\":2}}],[\"构造器注入\",{\"1\":{\"546\":1}}],[\"构造方法可以传入初始容量和扩容自增的数量\",{\"1\":{\"314\":1}}],[\"构造方法\",{\"0\":{\"302\":1,\"308\":1,\"314\":1,\"354\":1},\"1\":{\"399\":1}}],[\"构造方法不能被重写\",{\"1\":{\"161\":1}}],[\"构造函数返回前插入一个storestore屏障\",{\"1\":{\"276\":1}}],[\"构造函数return之前\",{\"1\":{\"270\":1}}],[\"构造函数执行结束\",{\"1\":{\"211\":1,\"388\":1}}],[\"构造映射关系的详细方法超出了本文的范围\",{\"1\":{\"97\":1}}],[\"构建镜像\",{\"0\":{\"687\":1}}],[\"构建的主要大的步骤为\",{\"1\":{\"528\":1}}],[\"构建sqlsessionfactory\",{\"1\":{\"482\":1}}],[\"构建出子查询的数据\",{\"1\":{\"430\":1}}],[\"构建设置\",{\"1\":{\"31\":1}}],[\"构建环境\",{\"1\":{\"31\":1,\"34\":1}}],[\"构建触发器\",{\"1\":{\"31\":1}}],[\"妥协\",{\"1\":{\"97\":1}}],[\"代码具体流程如下\",{\"1\":{\"540\":1}}],[\"代码如下\",{\"1\":{\"500\":1,\"530\":1,\"533\":1,\"539\":1}}],[\"代码\",{\"1\":{\"343\":2}}],[\"代理的类\",{\"1\":{\"345\":1}}],[\"代理的对象类\",{\"1\":{\"342\":1}}],[\"代理的接口\",{\"1\":{\"342\":1}}],[\"代理对象在客户端和目标对象之间起到中介作用\",{\"1\":{\"340\":1}}],[\"代理模式是为了加以控制\",{\"1\":{\"772\":1}}],[\"代理模式不能改变所代理类的接口\",{\"1\":{\"772\":1}}],[\"代理模式\",{\"0\":{\"772\":1},\"1\":{\"340\":1,\"498\":1,\"502\":1}}],[\"代理\",{\"0\":{\"339\":1,\"344\":1},\"1\":{\"97\":1}}],[\"代表一组参与会话的终端\",{\"1\":{\"65\":1}}],[\"映射即可相互访问\",{\"1\":{\"722\":1}}],[\"映射到过程视图的一组任务和进程上\",{\"1\":{\"97\":1}}],[\"映射逻辑地址到到物理地址\",{\"1\":{\"65\":1}}],[\"识别必须分配哪些对象\",{\"1\":{\"97\":1}}],[\"识别系统的外部激励\",{\"1\":{\"97\":1}}],[\"响应时间非常关键\",{\"1\":{\"97\":1}}],[\"响应\",{\"1\":{\"97\":1}}],[\"合成模式\",{\"0\":{\"770\":1}}],[\"合理的数量是指可以继续分配和使用物理资源的数量\",{\"1\":{\"97\":1}}],[\"合同管理\",{\"1\":{\"49\":1}}],[\"由此可见\",{\"1\":{\"359\":1}}],[\"由于创建一个数据库连接所占用的资源比较大\",{\"1\":{\"472\":1}}],[\"由于从节点需要向主节点同步数据\",{\"1\":{\"463\":1}}],[\"由于其他事物不知道别的事务是否在修改\",{\"1\":{\"454\":1}}],[\"由于加锁问题\",{\"1\":{\"300\":1}}],[\"由于不会对有间接依赖性的操作重排序\",{\"1\":{\"276\":1}}],[\"由于\",{\"1\":{\"220\":1}}],[\"由于synchronized和lock能够保证任一时刻只有一个线程执行该代码块\",{\"1\":{\"212\":1}}],[\"由于处理器使用缓存和读\",{\"1\":{\"206\":1}}],[\"由于cpu分时复用\",{\"1\":{\"205\":1}}],[\"由于新再生交易平台底层设计的多租户模式导致订单无法实现多客户查看\",{\"1\":{\"42\":1}}],[\"由上面的分析可知\",{\"1\":{\"204\":1}}],[\"由外部指定\",{\"1\":{\"166\":1}}],[\"由外向内\",{\"1\":{\"97\":1}}],[\"由内向外\",{\"1\":{\"97\":1}}],[\"牢记可能的物理目标架构\",{\"1\":{\"97\":1}}],[\"正确的\",{\"1\":{\"97\":1}}],[\"正如我们后面将看到的\",{\"1\":{\"57\":1}}],[\"潜在地提升响应能力\",{\"1\":{\"97\":1}}],[\"因而需要人工进行故障转移工作\",{\"1\":{\"463\":1}}],[\"因而需要手动更改客户端配置重新连接\",{\"1\":{\"463\":1}}],[\"因为大部分情况下的轮询都是无效的\",{\"1\":{\"736\":1}}],[\"因为队列先进先出的特点\",{\"1\":{\"668\":1}}],[\"因为spring无法准确定位哪个构造函数程序设置\",{\"1\":{\"546\":1}}],[\"因为可利用索引中最左边的列集来匹配行\",{\"1\":{\"449\":1}}],[\"因为不管搜索哪个值\",{\"1\":{\"449\":1}}],[\"因为没有共享表空间的数据字典信息\",{\"1\":{\"434\":1}}],[\"因为每个记录是被单独压缩的\",{\"1\":{\"433\":1}}],[\"因为浮点数不能完全的精确的表示出来\",{\"1\":{\"390\":1}}],[\"因为long和double两种数据类型的操作可分为高32位和低32位两部分\",{\"1\":{\"283\":1}}],[\"因为base中的test方法是private的\",{\"1\":{\"265\":1}}],[\"因为private所修饰的方法是隐式的final\",{\"1\":{\"265\":1}}],[\"因为无法覆盖他们\",{\"1\":{\"264\":1}}],[\"因为线程有几率不阻塞直接获得锁\",{\"1\":{\"259\":1}}],[\"因为异常不能跨线程传播回\",{\"1\":{\"243\":1}}],[\"因为局部变量存储在虚拟机栈中\",{\"1\":{\"228\":1}}],[\"因为普通共享变量被修改之后\",{\"1\":{\"213\":1}}],[\"因为在\",{\"1\":{\"176\":1}}],[\"因为当类型擦除后\",{\"1\":{\"175\":1}}],[\"因为你需要的是精确的参数类型\",{\"1\":{\"169\":1}}],[\"因为虚拟机的是多线程的\",{\"1\":{\"139\":1}}],[\"因为\",{\"1\":{\"130\":3,\"239\":1,\"453\":1,\"463\":1,\"614\":1}}],[\"因为机械工业出版社2004年10月出版的\",{\"1\":{\"115\":1}}],[\"因为完整性约束\",{\"1\":{\"97\":1}}],[\"因为需要处理的飞机很多\",{\"1\":{\"97\":1}}],[\"因为这会带来巨大的开销\",{\"1\":{\"97\":1}}],[\"因此进程是动态的\",{\"1\":{\"395\":1}}],[\"因此如果被代理类被final关键字所修饰\",{\"1\":{\"348\":1}}],[\"因此普通的long或double类型读\",{\"1\":{\"283\":1}}],[\"因此在获取数据的时候会先加锁\",{\"1\":{\"256\":1}}],[\"因此更加灵活\",{\"1\":{\"254\":1}}],[\"因此可以在循环体中使用\",{\"1\":{\"247\":1}}],[\"因此可以保证可见性\",{\"1\":{\"213\":1}}],[\"因此必须在本地进行处理\",{\"1\":{\"243\":1}}],[\"因此必须把负载分配到多个cpu上\",{\"1\":{\"97\":1}}],[\"因此继承了\",{\"1\":{\"239\":1}}],[\"因此最后还需要通过\",{\"1\":{\"238\":1}}],[\"因此这种同步操作称为非阻塞同步\",{\"1\":{\"224\":1}}],[\"因此这种同步也称为阻塞同步\",{\"1\":{\"222\":1}}],[\"因此无法保证可见性\",{\"1\":{\"213\":1}}],[\"因此为了兼容之前的版本\",{\"1\":{\"171\":1}}],[\"因此我们得到的结果常常与逻辑视图没有一一对应的关系\",{\"1\":{\"99\":1}}],[\"因此逻辑架构考虑的仅仅是功能方面的需求\",{\"1\":{\"97\":1}}],[\"因此\",{\"1\":{\"83\":1,\"89\":1,\"107\":1,\"158\":1,\"271\":1,\"279\":1,\"283\":1,\"463\":1}}],[\"因此允许多种风格在一个系统中共存\",{\"1\":{\"57\":1}}],[\"凭当前技术难以实现每个对象都用自己的线程\",{\"1\":{\"97\":1}}],[\"然而\",{\"1\":{\"97\":1}}],[\"然后进行注册\",{\"1\":{\"532\":1}}],[\"然后通过抽象出来的流程根据对应的配置进行注入\",{\"1\":{\"529\":1}}],[\"然后通过system\",{\"1\":{\"305\":1}}],[\"然后自己进行解析\",{\"1\":{\"483\":1}}],[\"然后设置\",{\"1\":{\"462\":1}}],[\"然后每次迭代都会进行比较\",{\"1\":{\"404\":1}}],[\"然后重写\",{\"1\":{\"401\":1}}],[\"然后在使用的时候一一调用则可\",{\"1\":{\"372\":1}}],[\"然后在下一个迭代中持续改进\",{\"1\":{\"105\":1}}],[\"然后用按说把这些步骤一步一步的实现\",{\"1\":{\"372\":1}}],[\"然后用一些选定的\",{\"1\":{\"57\":1}}],[\"然后再插入第二个\",{\"1\":{\"462\":1}}],[\"然后再循环比较每个字符忽略大小写比较\",{\"1\":{\"366\":1}}],[\"然后再把已使用过的内存空间一次清理掉\",{\"1\":{\"147\":1}}],[\"然后判断是否为空\",{\"1\":{\"366\":1}}],[\"然后赋值为10\",{\"1\":{\"204\":1}}],[\"然后直接清理掉端边界以外的内存\",{\"1\":{\"147\":1}}],[\"然后将这些场景脚本化\",{\"1\":{\"107\":1}}],[\"然后\",{\"1\":{\"67\":1,\"107\":1,\"310\":1}}],[\"然后复制执行命令在相应的主机执行命令即可\",{\"1\":{\"15\":1,\"16\":1,\"715\":1,\"716\":1}}],[\"然后填写创建的配置\",{\"1\":{\"14\":1,\"714\":1}}],[\"持久化\",{\"0\":{\"699\":1}}],[\"持久性和生命周期从属于其它主动对象的对象也在同一个代理上执行\",{\"1\":{\"97\":1}}],[\"持久性\",{\"1\":{\"97\":1,\"454\":1}}],[\"持仓个股\",{\"0\":{\"632\":1,\"644\":1}}],[\"持续复制长生存期的对象则导致效率降低\",{\"1\":{\"147\":1}}],[\"持续集成工具\",{\"1\":{\"4\":1}}],[\"但可能存在资源浪费\",{\"1\":{\"759\":1}}],[\"但可以通过以下命令\",{\"1\":{\"434\":1}}],[\"但可以通过对象对外提供的接口来访问该对象\",{\"1\":{\"157\":1}}],[\"但也具有一下性质\",{\"1\":{\"672\":1}}],[\"但偏离五日均线过高\",{\"1\":{\"568\":1}}],[\"但只要\",{\"1\":{\"463\":1}}],[\"但允许有空值\",{\"1\":{\"447\":1}}],[\"但若是封装对象这可以改变引用地址内的内容\",{\"1\":{\"388\":1}}],[\"但实际\",{\"1\":{\"381\":1}}],[\"但因为采用的是继承\",{\"1\":{\"350\":1}}],[\"但如果此时锁刚好可用\",{\"1\":{\"259\":1}}],[\"但后续步骤不是直接对可回收对象进行清理\",{\"1\":{\"147\":1}}],[\"但考虑到很多文献上都是用例\",{\"1\":{\"115\":1}}],[\"但原文中确实没有\",{\"1\":{\"111\":1}}],[\"但场景视图在任何情况下都是有用的\",{\"1\":{\"103\":1}}],[\"但它要占用处理器时间\",{\"1\":{\"257\":1}}],[\"但它们于飞机类共享处理进程\",{\"1\":{\"97\":1}}],[\"但它可以对其它对象调用它的操作做仲裁\",{\"1\":{\"97\":1}}],[\"但有一些差异\",{\"1\":{\"97\":1}}],[\"但我们并不关心实现这种效果所需的准确的并发程度\",{\"1\":{\"97\":1}}],[\"但是select是采用轮询的方式来监控多个fd的\",{\"1\":{\"736\":1}}],[\"但是需要不断的执行系统调用来获知\",{\"1\":{\"734\":1}}],[\"但是却从未进行完整的整理\",{\"1\":{\"680\":1}}],[\"但是每个节点间通过链表相互连接\",{\"1\":{\"674\":1}}],[\"但是每个表的数据和索引单独保存在\",{\"1\":{\"434\":1}}],[\"但是要去并没有那么严格\",{\"1\":{\"672\":1}}],[\"但是高位滞涨\",{\"1\":{\"633\":1}}],[\"但是承接较好\",{\"1\":{\"633\":1}}],[\"但是万丰还在异动监管\",{\"1\":{\"601\":1}}],[\"但是由于可能存在多线程调用问题\",{\"1\":{\"760\":1}}],[\"但是由于已持有万丰奥威\",{\"1\":{\"581\":1}}],[\"但是由于操作系统可以对指令进行重排序\",{\"1\":{\"279\":1}}],[\"但是操作还是介入\",{\"1\":{\"577\":1}}],[\"但是该bean本身还是可以使用自动装配来注入其他bean的\",{\"1\":{\"546\":1}}],[\"但是整个\",{\"1\":{\"529\":1}}],[\"但是如何管理\",{\"1\":{\"529\":1}}],[\"但是如果调用的是\",{\"1\":{\"248\":1}}],[\"但是如果有程序员通过非编译的手段生成了类文件\",{\"1\":{\"132\":1}}],[\"但是直接一字板\",{\"1\":{\"597\":1}}],[\"但是直接继承该类的子类只有persistenceexception\",{\"1\":{\"507\":1}}],[\"但是直接复制\",{\"1\":{\"434\":1}}],[\"但是处理对象可能存在不同\",{\"1\":{\"493\":1}}],[\"但是你可以调节重写日志文件的频率来提高数据集的耐久度\",{\"1\":{\"463\":1}}],[\"但是后一个队列需要写锁\",{\"1\":{\"453\":1}}],[\"但是不可以写\",{\"1\":{\"453\":1}}],[\"但是不能调用直接返回数据的过程\",{\"1\":{\"442\":1}}],[\"但是不能中断\",{\"1\":{\"246\":1}}],[\"但是有唯一索引\",{\"1\":{\"449\":1}}],[\"但是有一些处理器会重排序\",{\"1\":{\"271\":1}}],[\"但是当前最新版本中\",{\"1\":{\"446\":1}}],[\"但是支持前缀索引\",{\"1\":{\"446\":1}}],[\"但是允许存储程序通过参数将数据返回触发程序\",{\"1\":{\"442\":1}}],[\"但是修改后要通过\",{\"1\":{\"436\":1}}],[\"但是一旦服务器重启\",{\"1\":{\"435\":1}}],[\"但是对于\",{\"1\":{\"434\":1}}],[\"但是对于一些特定顺序的连续调用\",{\"1\":{\"218\":1}}],[\"但是频繁地更新删除记录会产生碎片\",{\"1\":{\"433\":1}}],[\"但是在某一个股拉升时其他个股并不会带动\",{\"1\":{\"600\":1}}],[\"但是在华策传媒\",{\"1\":{\"580\":1}}],[\"但是在应用访问的时候并不会得到这些空格\",{\"1\":{\"433\":1}}],[\"但是在编译阶段会进行所谓的\",{\"1\":{\"171\":1}}],[\"但是访问速度快\",{\"1\":{\"433\":1}}],[\"但是实现方式不同\",{\"1\":{\"398\":1}}],[\"但是线程是一个比进程更小的执行单位\",{\"1\":{\"395\":1}}],[\"但是删除的效率较高\",{\"1\":{\"380\":1}}],[\"但是性能上来说\",{\"1\":{\"372\":1}}],[\"但是封装类型\",{\"1\":{\"365\":1}}],[\"但是jdk动态代理和cglib动态代理的适用场景还是不一样的哈\",{\"1\":{\"351\":1}}],[\"但是并没有教科书上的10倍差距\",{\"1\":{\"351\":1}}],[\"但是并未解决可再生资源回收过程中的问题\",{\"1\":{\"49\":1}}],[\"但是只能移动1\",{\"1\":{\"326\":1}}],[\"但是father\",{\"1\":{\"265\":1}}],[\"但是这里很好的实现了transaction和datasource包的隔离\",{\"1\":{\"489\":1}}],[\"但是这种方式不能很好地支持面向接口编程的理念\",{\"1\":{\"472\":1}}],[\"但是这并不是一种覆盖\",{\"1\":{\"265\":1}}],[\"但是这些独立的模块却有可能是可用的\",{\"1\":{\"157\":1}}],[\"但是调用\",{\"1\":{\"247\":1}}],[\"但是可以实现多个接口\",{\"1\":{\"239\":1}}],[\"但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用\",{\"1\":{\"219\":1}}],[\"但是object类型不能存储int值\",{\"1\":{\"175\":1}}],[\"但是会有警告\",{\"1\":{\"170\":2}}],[\"但是能够被再次声明\",{\"1\":{\"161\":1}}],[\"但是必须是父类返回值的派生类\",{\"1\":{\"161\":1}}],[\"但是它们解决的是完全不同的问题\",{\"1\":{\"99\":1}}],[\"但是它扮演了两个重要角色\",{\"1\":{\"89\":1}}],[\"但是因为它不需要频繁更新\",{\"1\":{\"97\":1}}],[\"但是我们可以用一个小例子来说明\",{\"1\":{\"97\":1}}],[\"但是我们给出的方法是我们已经成功使用过的\",{\"1\":{\"57\":1}}],[\"但是场景使用过程视图中的连接器来描述对象间的交互\",{\"1\":{\"91\":1}}],[\"但是\",{\"0\":{\"386\":1},\"1\":{\"55\":1,\"111\":1,\"161\":1,\"472\":1,\"500\":1,\"536\":1}}],[\"受保护\",{\"1\":{\"97\":1}}],[\"还需要注意\",{\"1\":{\"449\":1}}],[\"还需要考虑一些额外的约束\",{\"1\":{\"99\":1}}],[\"还可以确保事务的完整提交\",{\"1\":{\"437\":1}}],[\"还可以支撑软件可复用性\",{\"1\":{\"75\":1}}],[\"还包括很多的更新\",{\"1\":{\"437\":1}}],[\"还会执行吗\",{\"0\":{\"392\":1}}],[\"还有一种是嵌套结果集的查询\",{\"1\":{\"471\":1}}],[\"还有两种内部使用的意向锁\",{\"1\":{\"454\":1}}],[\"还有可用性方面的处理也是一样的\",{\"1\":{\"97\":1}}],[\"还有很多其它的方法来推导\",{\"1\":{\"97\":1}}],[\"还是持久存在的\",{\"1\":{\"97\":1}}],[\"还是受保护的\",{\"1\":{\"97\":1}}],[\"各自局限\",{\"0\":{\"350\":1}}],[\"各个视图之间不是完全正交的\",{\"1\":{\"95\":1}}],[\"各种已定义的元素\",{\"1\":{\"83\":1}}],[\"捕获和管理对象场景图\",{\"1\":{\"91\":1}}],[\"捕捉设计的并发和同步特性\",{\"1\":{\"57\":1}}],[\"驱动我们在架构设计中去发现架构元素\",{\"1\":{\"89\":1}}],[\"作用域\",{\"1\":{\"532\":1}}],[\"作用\",{\"0\":{\"378\":1}}],[\"作为系统存在理由的功能\",{\"1\":{\"107\":1}}],[\"作为\",{\"1\":{\"89\":1,\"474\":1}}],[\"作者挣扎着想表达的内容明显比实际图上能表达出来的要多\",{\"1\":{\"55\":1}}],[\"四个视图中的元素通过一小组重要\",{\"1\":{\"89\":1}}],[\"带有进程分配的小型\",{\"1\":{\"87\":2}}],[\"96\",{\"1\":{\"731\":1}}],[\"961099916\",{\"1\":{\"3\":1,\"34\":1}}],[\"9个\",{\"1\":{\"725\":1}}],[\"9akzgz\",{\"1\":{\"657\":1}}],[\"98828125\",{\"1\":{\"695\":1}}],[\"988m\",{\"1\":{\"695\":2}}],[\"988mib\",{\"1\":{\"695\":1}}],[\"98\",{\"1\":{\"429\":1}}],[\"99\",{\"1\":{\"429\":1}}],[\"90\",{\"1\":{\"429\":1,\"430\":1}}],[\"9\",{\"0\":{\"379\":1},\"1\":{\"87\":3,\"107\":1,\"521\":1,\"705\":1,\"706\":1,\"707\":1,\"708\":1,\"730\":1,\"731\":5}}],[\"7b6af025d4884fdd5cd51a674994359c\",{\"1\":{\"704\":1}}],[\"767\",{\"1\":{\"446\":1}}],[\"76\",{\"1\":{\"429\":1}}],[\"70\",{\"1\":{\"429\":1,\"430\":13}}],[\"700\",{\"1\":{\"107\":1}}],[\"7的时候\",{\"1\":{\"351\":1}}],[\"75\",{\"1\":{\"326\":1}}],[\"75f\",{\"1\":{\"326\":1}}],[\"7\",{\"0\":{\"377\":1},\"1\":{\"85\":1,\"87\":1,\"417\":2,\"521\":1,\"695\":1,\"705\":1,\"706\":1,\"707\":1,\"708\":1,\"722\":3,\"731\":2}}],[\"720556\",{\"1\":{\"692\":1}}],[\"72\",{\"1\":{\"81\":1}}],[\"从buf\",{\"1\":{\"746\":1}}],[\"从内核向进程复制数据\",{\"1\":{\"732\":1}}],[\"从内存读取到\",{\"1\":{\"205\":1}}],[\"从大的方面上讲\",{\"1\":{\"469\":1}}],[\"从大到小\",{\"1\":{\"462\":1}}],[\"从节点\",{\"1\":{\"463\":1}}],[\"从列表中弹出第一个值\",{\"1\":{\"462\":1}}],[\"从此集合中移除所有元素\",{\"1\":{\"299\":1}}],[\"从该集合中删除未包含在指定集合中的所有元素\",{\"1\":{\"299\":1}}],[\"从\",{\"1\":{\"206\":1,\"462\":1}}],[\"从gc\",{\"1\":{\"146\":1}}],[\"从appclassloader中查找是否加载过此类\",{\"1\":{\"130\":1}}],[\"从本地缓存中查找是否加载过此类\",{\"1\":{\"130\":1}}],[\"从过程视图到物理视图\",{\"0\":{\"101\":1}}],[\"从物理架构开始\",{\"1\":{\"97\":1}}],[\"从逻辑视图到开发视图\",{\"0\":{\"99\":1}}],[\"从逻辑视图到过程视图\",{\"0\":{\"97\":1}}],[\"从逻辑架构开始\",{\"1\":{\"97\":1}}],[\"从属关系\",{\"1\":{\"97\":1}}],[\"从某种意义上讲\",{\"1\":{\"89\":1}}],[\"从或者不从过程视图映射而来的物理视图\",{\"1\":{\"85\":1}}],[\"从而达到资源控制和统计的作用\",{\"1\":{\"695\":1}}],[\"从而进行性能调优\",{\"1\":{\"493\":1}}],[\"从而抛出\",{\"1\":{\"404\":1}}],[\"从而创建对象\",{\"1\":{\"357\":1}}],[\"从而实现读一致性\",{\"1\":{\"454\":1}}],[\"从而实现自定义比较方法\",{\"1\":{\"365\":1}}],[\"从而实现该节点的删除\",{\"1\":{\"311\":1}}],[\"从而实现同一应用运行在任何地方\",{\"1\":{\"4\":1}}],[\"从而先新元素的添加\",{\"1\":{\"310\":1}}],[\"从而导致不可预料的结果\",{\"1\":{\"279\":1}}],[\"从而保证该对象对所有线程可见时\",{\"1\":{\"275\":1}}],[\"从而保证了原子性\",{\"1\":{\"212\":1}}],[\"从而避免切换线程的开销\",{\"1\":{\"257\":1}}],[\"从而提前结束线程\",{\"1\":{\"247\":1}}],[\"从而提前结束该线程\",{\"1\":{\"246\":1}}],[\"从而获得\",{\"1\":{\"158\":1}}],[\"从而形成了一个\",{\"1\":{\"81\":1}}],[\"从而满足系统主要的功能和性能需求\",{\"1\":{\"57\":1}}],[\"简单\",{\"1\":{\"546\":1}}],[\"简单的优化方法\",{\"0\":{\"458\":1}}],[\"简单表\",{\"1\":{\"456\":1}}],[\"简单来说\",{\"1\":{\"395\":1,\"456\":1}}],[\"简单易学\",{\"1\":{\"371\":1}}],[\"简述线程\",{\"0\":{\"395\":1}}],[\"简称为节点\",{\"1\":{\"83\":1}}],[\"简介\",{\"1\":{\"4\":1}}],[\"性能问题\",{\"1\":{\"457\":1}}],[\"性能由好到差的连接类型为\",{\"1\":{\"456\":1}}],[\"性能较高\",{\"1\":{\"372\":1}}],[\"性能对比\",{\"0\":{\"351\":1}}],[\"性能\",{\"1\":{\"83\":1,\"111\":2,\"144\":1}}],[\"横跨这5层的是72个子系统\",{\"1\":{\"81\":1}}],[\"特点为先入后出\",{\"1\":{\"667\":1}}],[\"特点就是gc时暂停所有应用线程\",{\"1\":{\"148\":1}}],[\"特定类型的编译器重排序和处理器重排序\",{\"1\":{\"285\":1}}],[\"特定领域的软件架构\",{\"1\":{\"81\":1}}],[\"特别是为了显示和外部接口\",{\"1\":{\"97\":1}}],[\"特别是\",{\"1\":{\"61\":1}}],[\"特别是在进行逻辑和过程分解的时候\",{\"1\":{\"57\":1}}],[\"框架是否优秀的一个标准\",{\"1\":{\"472\":1}}],[\"框架而言是不可缺少的一部分\",{\"1\":{\"472\":1}}],[\"框架支撑层\",{\"0\":{\"472\":1}}],[\"框架非常优雅的一个设计\",{\"1\":{\"470\":1}}],[\"框架中经常使用\",{\"1\":{\"399\":1}}],[\"框架上添加了一个选项功能\",{\"1\":{\"81\":1}}],[\"框架\",{\"1\":{\"81\":1}}],[\"第二步就是把数据从内核缓冲区复制到应用进程缓冲区\",{\"1\":{\"732\":1}}],[\"第二个值\",{\"1\":{\"695\":1}}],[\"第二个参数\",{\"1\":{\"482\":1}}],[\"第三个\",{\"1\":{\"386\":1}}],[\"第一步通常涉及等待数据从网络中到达\",{\"1\":{\"732\":1}}],[\"第一个值\",{\"1\":{\"695\":1}}],[\"第一个参数\",{\"1\":{\"482\":1}}],[\"第一个是\",{\"1\":{\"249\":1}}],[\"第一次添加是会给\",{\"1\":{\"310\":1}}],[\"第一次则按照\",{\"1\":{\"304\":1}}],[\"第一次扩容时\",{\"1\":{\"304\":1}}],[\"第5层强依赖于客户和产品\",{\"1\":{\"81\":1}}],[\"第4层在\",{\"1\":{\"81\":1}}],[\"第3层添加了一个\",{\"1\":{\"81\":1}}],[\"第1层和第2层构成了一个独立于领域的\",{\"1\":{\"81\":1}}],[\"设备的速度差异\",{\"1\":{\"202\":1}}],[\"设备的速度是有极大差异的\",{\"1\":{\"202\":1}}],[\"设计模式\",{\"0\":{\"502\":1,\"748\":1,\"813\":1},\"1\":{\"498\":1}}],[\"设计索引的原则\",{\"0\":{\"449\":1}}],[\"设计原则\",{\"1\":{\"109\":1}}],[\"设计规则是\",{\"1\":{\"79\":1}}],[\"设置网络流量\",{\"1\":{\"694\":1}}],[\"设置属性编辑器\",{\"1\":{\"535\":1}}],[\"设置表达式类\",{\"1\":{\"535\":1}}],[\"设置启动时间\",{\"1\":{\"533\":1}}],[\"设置流程如下图\",{\"1\":{\"533\":1}}],[\"设置流水线\",{\"0\":{\"31\":1}}],[\"设置对应的数据\",{\"1\":{\"532\":1}}],[\"设置对象\",{\"1\":{\"356\":1}}],[\"设置字段属性值给哈希表\",{\"1\":{\"462\":1}}],[\"设置字符串\",{\"1\":{\"166\":1}}],[\"设置一个合适的值\",{\"1\":{\"453\":1}}],[\"设置成\",{\"1\":{\"453\":1}}],[\"设置自动增长的间隔\",{\"1\":{\"434\":1}}],[\"设置需要创建子类的类\",{\"1\":{\"345\":1}}],[\"设置了\",{\"1\":{\"236\":2}}],[\"设置第二个内容\",{\"1\":{\"166\":1}}],[\"设置第一个内容\",{\"1\":{\"166\":1}}],[\"设置的类型也由外部决定\",{\"1\":{\"166\":1}}],[\"设置\",{\"0\":{\"34\":1},\"1\":{\"462\":2,\"532\":1,\"534\":1,\"731\":2}}],[\"设置环境\",{\"0\":{\"29\":1}}],[\"设置开机启动\",{\"0\":{\"10\":1}}],[\"6f7b\",{\"1\":{\"725\":1}}],[\"6d1jwe\",{\"1\":{\"652\":1}}],[\"6379\",{\"1\":{\"461\":2}}],[\"60\",{\"1\":{\"429\":1,\"430\":18}}],[\"6849794470754667710l\",{\"1\":{\"353\":1}}],[\"6和1\",{\"1\":{\"351\":1}}],[\"6中才开始提供\",{\"1\":{\"148\":1}}],[\"6\",{\"0\":{\"376\":1},\"1\":{\"79\":2,\"81\":1,\"99\":1,\"107\":1,\"130\":1,\"326\":2,\"363\":1,\"459\":1,\"463\":2,\"625\":1,\"705\":2,\"706\":2,\"707\":2,\"708\":2,\"722\":1}}],[\"6443\",{\"1\":{\"729\":1,\"731\":5}}],[\"64\",{\"1\":{\"22\":1,\"326\":3,\"731\":1}}],[\"绘制模块和子系统层次的开发蓝图\",{\"1\":{\"77\":1}}],[\"仅限于使用在架构上有重大意义的条目\",{\"1\":{\"77\":1}}],[\"甚至团队组织\",{\"1\":{\"75\":1}}],[\"分钟\",{\"1\":{\"731\":1}}],[\"分数从高到低排序\",{\"1\":{\"462\":1}}],[\"分数从高到低\",{\"1\":{\"462\":1}}],[\"分以上的学生的学号和姓名\",{\"1\":{\"430\":1}}],[\"分以上的姓名\",{\"1\":{\"430\":1}}],[\"分的同学的学生编号和学生姓名和平均成绩\",{\"1\":{\"430\":1}}],[\"分\",{\"1\":{\"422\":1}}],[\"分时复用引起\",{\"0\":{\"205\":1}}],[\"分别是内存地址\",{\"1\":{\"224\":1}}],[\"分别用于标明重写某个方法\",{\"1\":{\"179\":1}}],[\"分别被称为泛型类\",{\"1\":{\"163\":1}}],[\"分代收集算法\",{\"1\":{\"147\":1}}],[\"分配内存空间\",{\"1\":{\"279\":2}}],[\"分配\",{\"1\":{\"140\":1}}],[\"分解成对象以及对应操作的序列\",{\"1\":{\"107\":1}}],[\"分析其方法本质为原始jdbc相关操作流程\",{\"1\":{\"495\":1}}],[\"分析低效\",{\"1\":{\"456\":1}}],[\"分析\",{\"0\":{\"611\":1,\"624\":1},\"1\":{\"105\":1}}],[\"分布性\",{\"1\":{\"97\":1}}],[\"分布式锁\",{\"1\":{\"462\":1}}],[\"分布式基础设施\",{\"1\":{\"81\":1}}],[\"分布式\",{\"1\":{\"67\":1}}],[\"分层的风格\",{\"1\":{\"79\":1}}],[\"分组\",{\"1\":{\"75\":1}}],[\"分区\",{\"1\":{\"75\":1}}],[\"导致万丰预期不佳\",{\"1\":{\"633\":1}}],[\"导致短线情绪直接冰点\",{\"1\":{\"614\":1}}],[\"导致该工厂无法创建出对应的对象\",{\"1\":{\"506\":1}}],[\"导致数据不是最终的数据\",{\"1\":{\"454\":1}}],[\"导致最后的更新覆盖了其他事物所做的更新\",{\"1\":{\"454\":1}}],[\"导致操作效率较低\",{\"1\":{\"300\":1}}],[\"导致\",{\"1\":{\"202\":3}}],[\"导致无法添加\",{\"1\":{\"18\":1,\"718\":1}}],[\"导入\",{\"1\":{\"75\":1}}],[\"导出\",{\"1\":{\"75\":1,\"463\":1}}],[\"层\",{\"1\":{\"75\":1}}],[\"使之在创建对象的时候直接满足某些场景的数据\",{\"1\":{\"763\":1}}],[\"使该连接发出的更新请求优先级降低\",{\"1\":{\"453\":1}}],[\"使一个线程睡眠\",{\"1\":{\"236\":1}}],[\"使得处于不同\",{\"1\":{\"696\":1}}],[\"使得\",{\"1\":{\"470\":1}}],[\"使得用户在接口上可以使用注解来配置\",{\"1\":{\"468\":1}}],[\"使得线程等待某个条件满足\",{\"1\":{\"252\":1}}],[\"使得缓存能够得到更加合理地利用\",{\"1\":{\"202\":1}}],[\"使得代码更加灵活\",{\"1\":{\"164\":1}}],[\"使得程序库或者\",{\"1\":{\"75\":1}}],[\"使其构成一个不可分割的独立实体\",{\"1\":{\"157\":1}}],[\"使\",{\"1\":{\"124\":1,\"453\":1}}],[\"使用等级识别符\",{\"1\":{\"694\":1}}],[\"使用场景\",{\"1\":{\"665\":1,\"666\":1,\"668\":1}}],[\"使用空messagesource来接受getmessage调用\",{\"1\":{\"541\":1}}],[\"使用上下文回调来配置bean工厂\",{\"1\":{\"535\":1}}],[\"使用传统的\",{\"0\":{\"467\":1},\"1\":{\"466\":1}}],[\"使用默认的每秒fsync策略\",{\"1\":{\"463\":1}}],[\"使用aof\",{\"1\":{\"463\":1}}],[\"使用短索引\",{\"1\":{\"449\":1}}],[\"使用惟一索引\",{\"1\":{\"449\":1}}],[\"使用组合索引时遵循最左前缀集合\",{\"1\":{\"447\":1}}],[\"使用规则\",{\"0\":{\"442\":1}}],[\"使用多表空间存储\",{\"1\":{\"434\":1}}],[\"使用多线程和\",{\"1\":{\"148\":1}}],[\"使用共享表空间存储\",{\"1\":{\"434\":1}}],[\"使用反射性能较低\",{\"1\":{\"399\":1}}],[\"使用字符组进行缓存数据\",{\"1\":{\"353\":1}}],[\"使用注意\",{\"0\":{\"349\":1}}],[\"使用的规则就是\",{\"1\":{\"169\":1}}],[\"使用原则\",{\"1\":{\"169\":1}}],[\"使用问题的数据完整性和序列化约束来定义一组服务\",{\"1\":{\"97\":1}}],[\"使用备份进程\",{\"1\":{\"97\":1}}],[\"使用额外的进程分摊负载\",{\"1\":{\"97\":1}}],[\"使用以架构为中心\",{\"1\":{\"53\":1}}],[\"使用命令即可登录rancher\",{\"1\":{\"21\":1}}],[\"使用\",{\"0\":{\"21\":1,\"468\":1},\"1\":{\"59\":1,\"71\":1,\"148\":2,\"157\":1,\"169\":1,\"181\":1,\"242\":1,\"252\":1,\"353\":1,\"396\":1,\"435\":1,\"436\":1,\"447\":1,\"456\":1,\"466\":1,\"467\":1,\"470\":1,\"546\":1}}],[\"使用阿里的容器镜像服务进行加速\",{\"1\":{\"11\":1}}],[\"使用阿里加速\",{\"0\":{\"11\":1}}],[\"最上层\",{\"1\":{\"743\":1}}],[\"最下层\",{\"1\":{\"743\":1}}],[\"最佳实践较少\",{\"1\":{\"463\":1}}],[\"最适合索引的列是出现在\",{\"1\":{\"449\":1}}],[\"最基本的索引\",{\"1\":{\"447\":1}}],[\"最低分\",{\"1\":{\"430\":2}}],[\"最低分和平均分\",{\"1\":{\"430\":1}}],[\"最高分\",{\"1\":{\"430\":2}}],[\"最常采用的是cas算法\",{\"1\":{\"256\":1}}],[\"最常用的地方就是构造器的重载\",{\"1\":{\"162\":1}}],[\"最稳定以及效率高的收集器\",{\"1\":{\"148\":1}}],[\"最后由sqlsessionfactory进行封装为sqlsessionfactory对象来完成sqlsessionfactory的创建\",{\"1\":{\"483\":1}}],[\"最后又改回到用例\",{\"1\":{\"115\":1}}],[\"最后一个就是\",{\"1\":{\"73\":1}}],[\"最重要的特性\",{\"1\":{\"371\":1}}],[\"最重要的设计决策\",{\"1\":{\"109\":1}}],[\"最重要的功能\",{\"1\":{\"107\":1}}],[\"最初的体系结构原型逐渐发展成为真正的系统\",{\"1\":{\"107\":1}}],[\"最终用户\",{\"1\":{\"53\":1,\"111\":3}}],[\"控制组\",{\"0\":{\"693\":1}}],[\"控制\",{\"1\":{\"73\":1}}],[\"控制器接收拨号数字\",{\"1\":{\"93\":1}}],[\"控制器检测并验证到joe的电话从挂机状态变为摘机状态\",{\"1\":{\"93\":1}}],[\"控制器进程中的消息传递是通过共享内存实现的\",{\"1\":{\"73\":1}}],[\"控制器对象在组成控制器进程\",{\"1\":{\"73\":1}}],[\"控制器也承担了所有的硬实时约束\",{\"1\":{\"65\":1}}],[\"控制器\",{\"1\":{\"65\":1}}],[\"多路复用io及异步io\",{\"1\":{\"739\":1}}],[\"多处理器系统\",{\"1\":{\"694\":1}}],[\"多列索引可起几个索引的作用\",{\"1\":{\"449\":1}}],[\"多表空间的数据文件没有大小限制\",{\"1\":{\"434\":1}}],[\"多表空间的参数生效后\",{\"1\":{\"434\":1}}],[\"多次创建一个类的实例时\",{\"1\":{\"399\":1}}],[\"多少元素转化为树\",{\"1\":{\"326\":1}}],[\"多线程环境下就可能将一个未初始化的对象引用暴露出来\",{\"1\":{\"279\":1}}],[\"多线程和并发\",{\"0\":{\"201\":1}}],[\"多态的特性\",{\"1\":{\"372\":1}}],[\"多态性\",{\"1\":{\"172\":1}}],[\"多态分为编译时多态和运行时多态\",{\"1\":{\"159\":1}}],[\"多参数泛型\",{\"1\":{\"166\":1}}],[\"多服务器的变体\",{\"1\":{\"71\":1}}],[\"多个应用程序之间共用硬件资源\",{\"1\":{\"742\":1}}],[\"多个线程访问同一个方法的局部变量时\",{\"1\":{\"228\":1}}],[\"多个逻辑网络可以同时存在\",{\"1\":{\"67\":1}}],[\"多个视图分别解决不同利益相关人关注的问题\",{\"1\":{\"53\":1}}],[\"服务时\",{\"1\":{\"435\":1}}],[\"服务端应用都可以使用线程本地存储来解决线程安全问题\",{\"1\":{\"229\":1}}],[\"服务提供发现机制\",{\"1\":{\"198\":1}}],[\"服务暂停\",{\"1\":{\"148\":1}}],[\"服务器规划\",{\"0\":{\"720\":1},\"1\":{\"720\":1}}],[\"服务器\",{\"1\":{\"71\":1}}],[\"服务建立多个终端之间的语音通路\",{\"1\":{\"65\":1}}],[\"管程锁定规则\",{\"1\":{\"211\":1,\"388\":1}}],[\"管道\",{\"1\":{\"71\":1}}],[\"管理多个异步任务的执行\",{\"1\":{\"241\":1}}],[\"管理的策略\",{\"1\":{\"140\":1}}],[\"管理员ui登录的密码\",{\"1\":{\"24\":1}}],[\"管理工具\",{\"1\":{\"4\":1}}],[\"较容易地合入变更\",{\"1\":{\"69\":1}}],[\"包详解\",{\"0\":{\"485\":1,\"486\":1}}],[\"包\",{\"0\":{\"487\":1,\"490\":1,\"497\":1,\"503\":1,\"508\":1},\"1\":{\"434\":1}}],[\"包结构\",{\"0\":{\"393\":1}}],[\"包的区别\",{\"0\":{\"382\":1}}],[\"包和\",{\"0\":{\"382\":1}}],[\"包提供了一个带有标记的原子引用类\",{\"1\":{\"226\":1}}],[\"包里面的整数原子类\",{\"1\":{\"225\":1}}],[\"包含有数组\",{\"1\":{\"664\":1}}],[\"包含了操作系统线程状态中的\",{\"1\":{\"233\":1}}],[\"包含\",{\"1\":{\"111\":1}}],[\"包含几十个架构级重要类的系统\",{\"1\":{\"65\":1}}],[\"包括元素成员和元素分值\",{\"1\":{\"462\":1}}],[\"包括在\",{\"1\":{\"456\":1}}],[\"包括线程的状态\",{\"1\":{\"456\":1}}],[\"包括三步骤\",{\"1\":{\"282\":1}}],[\"包括递归调用它本身\",{\"1\":{\"230\":1}}],[\"包括时间相关的事件\",{\"1\":{\"97\":1}}],[\"包括\",{\"1\":{\"85\":1,\"179\":2,\"180\":1,\"436\":1}}],[\"包括可能的任务间通信路径的规格说明\",{\"1\":{\"69\":1}}],[\"到\",{\"1\":{\"325\":1,\"462\":1,\"612\":1}}],[\"到进程网络中\",{\"1\":{\"69\":1}}],[\"到中央办公室的线路\",{\"1\":{\"65\":1}}],[\"为其他对象提供一种代理以控制对这个对象的访问\",{\"1\":{\"772\":1}}],[\"为文件file1创建另一个名称\",{\"1\":{\"746\":1}}],[\"为用户自定义bean\",{\"1\":{\"546\":1}}],[\"为哈希表字段加浮点\",{\"1\":{\"462\":1}}],[\"为哈希表字段加\",{\"1\":{\"462\":1}}],[\"为空则会清除\",{\"1\":{\"325\":1}}],[\"为此\",{\"1\":{\"288\":1}}],[\"为什么要这么计算哈希值\",{\"1\":{\"327\":1}}],[\"为什么要自定义类加载器\",{\"0\":{\"129\":1}}],[\"为什么会出现并发问题\",{\"0\":{\"203\":1}}],[\"为什么需要多线程\",{\"0\":{\"202\":1}}],[\"为什么引入泛型\",{\"0\":{\"164\":1}}],[\"为我们提供了一种数据驱动的方法来将过程架构映射到物理架构上\",{\"1\":{\"85\":1}}],[\"为\",{\"1\":{\"69\":1,\"381\":1,\"420\":1}}],[\"为了与树形结构加以区别\",{\"1\":{\"677\":1}}],[\"为了用户使用方便和构建\",{\"1\":{\"494\":1}}],[\"为了支持面向接口的编程\",{\"1\":{\"472\":1}}],[\"为了提高数据利用率和减小服务器和数据库的压力\",{\"1\":{\"472\":1}}],[\"为了提高执行性能\",{\"1\":{\"285\":1}}],[\"为了性能提升\",{\"1\":{\"463\":1}}],[\"为了性能优化\",{\"1\":{\"288\":1}}],[\"为了允许表锁和行锁的共存\",{\"1\":{\"454\":1}}],[\"为了实现\",{\"1\":{\"288\":1}}],[\"为了保证消息能及时读取到\",{\"1\":{\"735\":1}}],[\"为了保证利润\",{\"1\":{\"567\":2}}],[\"为了保证在不同的编译器和\",{\"1\":{\"285\":1}}],[\"为了保证类型安全\",{\"1\":{\"172\":1}}],[\"为了防止这个过程的重排序\",{\"1\":{\"279\":1}}],[\"为了这一小段时间去切换线程\",{\"1\":{\"257\":1}}],[\"为了合理利用\",{\"1\":{\"202\":1}}],[\"为了获得最大限度的灵活性\",{\"1\":{\"169\":1}}],[\"为了最终解决大型的\",{\"1\":{\"57\":1}}],[\"为了避免误导\",{\"1\":{\"52\":1}}],[\"空间碎片太多可能会导致\",{\"1\":{\"147\":1}}],[\"空的散列地��总能找到\",{\"1\":{\"386\":1}}],[\"空的\",{\"1\":{\"67\":1}}],[\"空中交通控制系统的蓝图\",{\"1\":{\"65\":1}}],[\"远程处理调用\",{\"1\":{\"67\":1}}],[\"同步资源的锁定时间很短\",{\"1\":{\"257\":1}}],[\"同步和异步的基于消息的通信服务\",{\"1\":{\"67\":1}}],[\"同一类别的类\",{\"1\":{\"99\":1}}],[\"同样地\",{\"1\":{\"69\":1}}],[\"同时又不改变其结构\",{\"1\":{\"768\":1}}],[\"同时又因为应用线程是不知道什么时候会有数据读取\",{\"1\":{\"735\":1}}],[\"同时又有并发查询的应用\",{\"1\":{\"452\":1}}],[\"同时重启一下master节点\",{\"1\":{\"712\":1}}],[\"同时读缓存没读到数据\",{\"1\":{\"464\":1}}],[\"同时每天保存过去30天的数据\",{\"1\":{\"463\":1}}],[\"同时设置多个字段值给哈希表\",{\"1\":{\"462\":1}}],[\"同时设置多个\",{\"1\":{\"462\":2}}],[\"同时其成员变量为引用类型也要实现\",{\"1\":{\"401\":1}}],[\"同时新的类要实现被代理类所实现的所有的接口\",{\"1\":{\"343\":1}}],[\"同时会杀死所有守护线程\",{\"1\":{\"242\":1}}],[\"同时我们也捕捉逻辑依据和约束\",{\"1\":{\"57\":1}}],[\"同时反应了分布式部署的情况\",{\"1\":{\"57\":1}}],[\"而代理模式是为了加以控制\",{\"1\":{\"773\":1}}],[\"而代理模式不能改变所代理类的接口\",{\"1\":{\"773\":1}}],[\"而非全由用户手动设置\",{\"1\":{\"763\":1}}],[\"而非手动创建\",{\"1\":{\"761\":1}}],[\"而非等到使用的时候才进行初始化\",{\"1\":{\"759\":1}}],[\"而无脑的轮询就显得有点暴力\",{\"1\":{\"736\":1}}],[\"而无需编写原方法\",{\"1\":{\"493\":1}}],[\"而无需程序员显式地管理线程的生命周期\",{\"1\":{\"241\":1}}],[\"而另外一些进程也只能看到与它们自己相关的资源\",{\"1\":{\"696\":1}}],[\"而另一个线程却看不到\",{\"1\":{\"280\":1}}],[\"而另一个是\",{\"1\":{\"249\":1}}],[\"而叶朝下的\",{\"1\":{\"669\":1}}],[\"而爱丽家居虽然也是一字板但是封单较少\",{\"1\":{\"596\":1}}],[\"而这个接口中声明的方法和跟<mapper>\",{\"1\":{\"468\":1}}],[\"而查询数据量巨大\",{\"1\":{\"464\":1}}],[\"而主从模式也没有提供一定的手段通知客户端另外可连接的客户端地址\",{\"1\":{\"463\":1}}],[\"而关闭\",{\"1\":{\"463\":1}}],[\"而一旦新\",{\"1\":{\"463\":1}}],[\"而用来记录性别的列\",{\"1\":{\"449\":1}}],[\"而对于\",{\"1\":{\"446\":1}}],[\"而函数的参数只能是\",{\"1\":{\"443\":1}}],[\"而存储过程没有\",{\"1\":{\"443\":1}}],[\"而是留给了外部处理\",{\"1\":{\"543\":1}}],[\"而是将连接放回连接池中\",{\"1\":{\"500\":1,\"502\":1}}],[\"而是使用普通的索引\",{\"1\":{\"456\":1}}],[\"而是为了描述某个事物在解决整个问题的过程中所发生的行为\",{\"1\":{\"372\":1}}],[\"而是让所有存活的对象都向一端移动\",{\"1\":{\"147\":1}}],[\"而建立对象的目的也不完全是为了完成一个个步骤\",{\"1\":{\"372\":1}}],[\"而写线程b对数组元素的写入可能看到可能看不到\",{\"1\":{\"274\":1}}],[\"而轻量级锁是通过用cas操作和自旋来解决加锁问题\",{\"1\":{\"258\":1}}],[\"而为了让当前线程\",{\"1\":{\"257\":1}}],[\"而\",{\"1\":{\"253\":1,\"288\":1,\"373\":1,\"446\":1,\"468\":1,\"532\":1}}],[\"而等待是主动的\",{\"1\":{\"236\":1}}],[\"而阻塞和等待用来描述状态\",{\"1\":{\"236\":1}}],[\"而在控制权返回后\",{\"1\":{\"230\":1}}],[\"而在本地引入的额外的任务\",{\"1\":{\"67\":1}}],[\"而普通的共享变量不能保证可见性\",{\"1\":{\"213\":1}}],[\"而java的spi机制可以为某个接口寻找服务实现\",{\"1\":{\"198\":1}}],[\"而参数不同\",{\"1\":{\"162\":1}}],[\"而不用再到数据库中查找\",{\"1\":{\"472\":1}}],[\"而不能实现接口的类就不能实现jdk的动态代理\",{\"1\":{\"350\":1}}],[\"而不属于\",{\"1\":{\"252\":1}}],[\"而不是继承关系达到软件复用的目的\",{\"1\":{\"756\":1}}],[\"而不是出现在\",{\"1\":{\"449\":1}}],[\"而不是一般的\",{\"1\":{\"447\":1}}],[\"而不是直接与索引中的值相比较\",{\"1\":{\"447\":1}}],[\"而不是忙等待\",{\"1\":{\"251\":1}}],[\"而不是10\",{\"1\":{\"204\":1}}],[\"而不是会被抛弃的探索性原型\",{\"1\":{\"105\":1}}],[\"而不适用于交互较多的应用程序\",{\"1\":{\"148\":1}}],[\"而老年代中因为对象存活率高\",{\"1\":{\"147\":1}}],[\"而本地方法栈是为虚拟机调用\",{\"1\":{\"136\":1,\"138\":1}}],[\"而实际的特定的网关在第5层子系统中\",{\"1\":{\"99\":1}}],[\"而且重点关注它们之间的相互作用\",{\"1\":{\"774\":1}}],[\"而且对于生产上的部署也日益完善\",{\"1\":{\"680\":1}}],[\"而且今天环境并不好\",{\"1\":{\"633\":1}}],[\"而且京投发展也迅速翻红\",{\"1\":{\"596\":1}}],[\"而且超过了仓位管理\",{\"1\":{\"568\":1}}],[\"而且看盘下杀\",{\"1\":{\"567\":1}}],[\"而且后续也都在讲述\",{\"1\":{\"528\":1}}],[\"而且该类也添加了\",{\"1\":{\"507\":1}}],[\"而且在较长的时间内容\",{\"1\":{\"298\":1}}],[\"而且也不允许别人这么做\",{\"1\":{\"264\":1}}],[\"而且也只是建议具有相同优先级的其它线程可以运行\",{\"1\":{\"244\":1}}],[\"而且通常都是有害的\",{\"1\":{\"220\":1}}],[\"而且互不影响\",{\"1\":{\"139\":1}}],[\"而且是可能\",{\"1\":{\"97\":1}}],[\"而且它对其它对象调用它的操作没有控制权\",{\"1\":{\"97\":1}}],[\"而且它对其它对象调用它的操作有完全的控制权\",{\"1\":{\"97\":1}}],[\"而次要任务是因为某些实施原因\",{\"1\":{\"67\":1}}],[\"而次次重新编写可能过于麻烦\",{\"1\":{\"37\":1}}],[\"一些矛盾的要求\",{\"1\":{\"744\":1}}],[\"一些用于开发和测试\",{\"1\":{\"83\":1}}],[\"一棵空树或它的左右两个子树的高度差的绝对值不超过1\",{\"1\":{\"671\":1}}],[\"一种为嵌套查询语句的查询\",{\"1\":{\"471\":1}}],[\"一样快\",{\"1\":{\"463\":1}}],[\"一旦出现故障\",{\"1\":{\"463\":1}}],[\"一旦发生冲突\",{\"1\":{\"386\":1}}],[\"一旦发现就将该终端传递给主控制器任务\",{\"1\":{\"73\":1}}],[\"一次查询只累加\",{\"1\":{\"456\":1}}],[\"一套是针对标准的输入输出\",{\"1\":{\"398\":1}}],[\"一直想等则返回长度差值\",{\"1\":{\"367\":1}}],[\"一致性\",{\"1\":{\"454\":1}}],[\"一致\",{\"1\":{\"299\":1,\"300\":2,\"315\":1,\"386\":1}}],[\"一般会让工厂构造方法为私有\",{\"1\":{\"761\":1}}],[\"一般对应的\",{\"1\":{\"530\":1}}],[\"一般保证命名空间唯一\",{\"1\":{\"479\":1}}],[\"一般是缓存时间到期\",{\"1\":{\"464\":1}}],[\"一般在创建表的时候创建\",{\"1\":{\"447\":1}}],[\"一般处理器不会重排序这两个操作\",{\"1\":{\"271\":1}}],[\"一般都是以jar包做依赖\",{\"1\":{\"198\":1}}],[\"一组寄存器\",{\"1\":{\"124\":1}}],[\"一组相关的类可以被归入一个类组中\",{\"1\":{\"59\":1}}],[\"一个类代表另一个类的功能\",{\"1\":{\"772\":1}}],[\"一个类应该只有一个发生变化的原因\",{\"1\":{\"751\":1}}],[\"一个类通常被实现为一个模块\",{\"1\":{\"99\":1}}],[\"一个软件实体\",{\"1\":{\"750\":1}}],[\"一个输入操作通常包括两个阶段\",{\"1\":{\"732\":1}}],[\"一个事务按相同的查询条件重新读取以前检索过的数据\",{\"1\":{\"454\":1}}],[\"一个事务在读书某数据一段时候后\",{\"1\":{\"454\":1}}],[\"一个事务正在修改数据\",{\"1\":{\"454\":1}}],[\"一个表只能有一个主键\",{\"1\":{\"447\":1}}],[\"一个进程就是一个执行的程序\",{\"1\":{\"395\":1}}],[\"一个进程在其执行的过程中可以产生多个小城\",{\"1\":{\"395\":1}}],[\"一个线程执行完毕之后会自动结束\",{\"1\":{\"245\":1}}],[\"一个任务创建一个线程\",{\"1\":{\"241\":1}}],[\"一个任务是一个单独的\",{\"1\":{\"67\":1}}],[\"一个请求对应一个服务器线程\",{\"1\":{\"229\":1}}],[\"一个对象的初始化完成\",{\"1\":{\"211\":1,\"388\":1}}],[\"一个\",{\"1\":{\"211\":1,\"388\":1,\"436\":1}}],[\"一个垃圾回收堆和一个存储方法域\",{\"1\":{\"124\":1}}],[\"一个栈\",{\"1\":{\"124\":1}}],[\"一个子系统的典型代码行数为5k到20k\",{\"1\":{\"99\":1}}],[\"一个主动类有一个\",{\"1\":{\"97\":1}}],[\"一个视图中的元素可根据确定的设计规则和启发式与其它视图中的元素相连\",{\"1\":{\"95\":1}}],[\"一个是效率问题\",{\"1\":{\"147\":1}}],[\"一个是\",{\"1\":{\"73\":1}}],[\"一部分\",{\"1\":{\"73\":1}}],[\"此种方式线程安全\",{\"1\":{\"759\":1}}],[\"此类的核心方法如上\",{\"1\":{\"496\":1}}],[\"此类应该只是为了提供给用户\",{\"1\":{\"495\":1}}],[\"此类在mybatis中没有任何的使用\",{\"1\":{\"495\":1}}],[\"此时应用进程则进行获取数据\",{\"1\":{\"734\":1,\"735\":1,\"736\":1,\"737\":1}}],[\"此时在华策传媒和中广天择没有进行日内修复的情况下不宜介入掌阅传媒\",{\"1\":{\"580\":1}}],[\"此时可以对\",{\"1\":{\"537\":1}}],[\"此时可以进行\",{\"1\":{\"536\":1}}],[\"此时可以使用模版方法\",{\"1\":{\"493\":1}}],[\"此时是\",{\"1\":{\"536\":1}}],[\"此时就需要对连接部分方法的重写\",{\"1\":{\"500\":1}}],[\"此时只需要继承\",{\"1\":{\"493\":1}}],[\"此时次次去数据库获取数据\",{\"1\":{\"464\":1}}],[\"此时用户可以根据情况采取相应的措施\",{\"1\":{\"456\":1}}],[\"此时的结果是不可预知的\",{\"1\":{\"274\":1}}],[\"此时的语义检查主要是防止这种没有编译而生成的\",{\"1\":{\"132\":1}}],[\"此时调用\",{\"1\":{\"247\":1}}],[\"此时内存中可能还是原来的旧值\",{\"1\":{\"213\":1}}],[\"此时线程2执行\",{\"1\":{\"204\":1}}],[\"此变量的类型由外部决定\",{\"1\":{\"166\":2}}],[\"此处默认是没有实现的\",{\"1\":{\"536\":1}}],[\"此处初始化了\",{\"1\":{\"530\":1}}],[\"此处泛型只能是数字类型\",{\"1\":{\"169\":1}}],[\"此处指定了两个泛型类型\",{\"1\":{\"166\":1}}],[\"此处可以随便写标识符号\",{\"1\":{\"166\":1}}],[\"此处的\",{\"1\":{\"55\":1}}],[\"此方法简单\",{\"1\":{\"146\":1}}],[\"此外由于t\",{\"1\":{\"176\":1}}],[\"此外\",{\"1\":{\"67\":1,\"97\":2,\"435\":1}}],[\"重装版本对应的docker消失\",{\"1\":{\"712\":1}}],[\"重复时合并名次\",{\"1\":{\"430\":1}}],[\"重复时保留名次空缺\",{\"1\":{\"430\":1}}],[\"重量级锁是将除了拥有锁的线程以外的线程都阻塞\",{\"1\":{\"258\":1}}],[\"重量级锁\",{\"0\":{\"258\":1}}],[\"重排序规则表\",{\"1\":{\"288\":1}}],[\"重排序\",{\"1\":{\"275\":1}}],[\"重排序分三种类型\",{\"1\":{\"206\":1}}],[\"重排序引起\",{\"0\":{\"206\":1}}],[\"重载和重写\",{\"0\":{\"376\":1}}],[\"重载规则\",{\"1\":{\"162\":1}}],[\"重载\",{\"0\":{\"162\":1},\"1\":{\"162\":1,\"376\":1}}],[\"重写后的新\",{\"1\":{\"463\":1}}],[\"重写的方法不能抛出新的强制性异常\",{\"1\":{\"161\":1}}],[\"重写的方法能够抛出任何非强制异常\",{\"1\":{\"161\":1}}],[\"重写规则\",{\"1\":{\"161\":1}}],[\"重写和重载\",{\"0\":{\"160\":1}}],[\"重写\",{\"0\":{\"161\":1},\"1\":{\"159\":1,\"161\":1,\"376\":1}}],[\"重新配置\",{\"1\":{\"67\":1}}],[\"重启\",{\"1\":{\"28\":1,\"731\":1}}],[\"恢复\",{\"1\":{\"67\":1,\"694\":1}}],[\"被存在磁盘或其他的数据存储设备中\",{\"1\":{\"395\":1}}],[\"被修饰的常量\",{\"1\":{\"388\":1}}],[\"被修饰的方法\",{\"1\":{\"388\":1}}],[\"被修饰的方法不可被重写\",{\"1\":{\"388\":1}}],[\"被修饰的变量不可被变更\",{\"1\":{\"388\":1}}],[\"被修饰的注解可以用在什么地方\",{\"1\":{\"181\":1}}],[\"被调用的线程执行完毕\",{\"1\":{\"235\":1,\"236\":1}}],[\"被描述的注解在它所修饰的类中可以被保留到何时\",{\"1\":{\"181\":1}}],[\"被擦除为\",{\"1\":{\"176\":1}}],[\"被重载的方法可以声明新的或更广的检查异常\",{\"1\":{\"162\":1}}],[\"被重载的方法可以改变访问修饰符\",{\"1\":{\"162\":1}}],[\"被重载的方法可以改变返回类型\",{\"1\":{\"162\":1}}],[\"被重载的方法必须改变参数列表\",{\"1\":{\"162\":1}}],[\"被分组为子系统\",{\"1\":{\"99\":1}}],[\"被动\",{\"1\":{\"97\":1}}],[\"被动的\",{\"1\":{\"97\":1}}],[\"被之称为\",{\"1\":{\"67\":1}}],[\"被称为\",{\"1\":{\"55\":1}}],[\"容易缓存\",{\"1\":{\"433\":1}}],[\"容错\",{\"1\":{\"83\":1}}],[\"容错问题\",{\"1\":{\"67\":1}}],[\"容器进行描述\",{\"1\":{\"692\":1}}],[\"容器化本质还是使用了\",{\"1\":{\"692\":1}}],[\"容器化在现在使用非常普遍\",{\"1\":{\"680\":1}}],[\"容器化编排工具\",{\"1\":{\"4\":1}}],[\"容器应该尝试推断bean的销毁方法的名字\",{\"1\":{\"546\":1}}],[\"容器\",{\"1\":{\"57\":1,\"111\":1,\"543\":1}}],[\"访问者模式\",{\"0\":{\"783\":1}}],[\"访问https\",{\"1\":{\"729\":1}}],[\"访问修饰权限不小于父类\",{\"1\":{\"376\":1}}],[\"访问权限不能比父类中被重写的方法的访问权限更低\",{\"1\":{\"161\":1}}],[\"访问一些外设\",{\"1\":{\"97\":1}}],[\"访问目录\",{\"1\":{\"65\":1}}],[\"访问协议\",{\"1\":{\"24\":1}}],[\"编译后是用\",{\"1\":{\"373\":1}}],[\"编译新生成的\",{\"1\":{\"343\":1}}],[\"编译器会检查\",{\"1\":{\"374\":1}}],[\"编译器会在写入时插入一个\",{\"1\":{\"388\":1}}],[\"编译器会在生成指令系列时在适当的位置会插入内存屏障指令来禁止特定类型的处理器重排序\",{\"1\":{\"288\":1}}],[\"编译器会在final域写之后\",{\"1\":{\"270\":1}}],[\"编译器和处理器会对指令进行重排序\",{\"1\":{\"285\":1}}],[\"编译器和处理器常常会对指令做重排序\",{\"1\":{\"206\":1}}],[\"编译器在生成字节码时\",{\"1\":{\"288\":1}}],[\"编译器在生成指令序列时\",{\"1\":{\"206\":1}}],[\"编译器在不改变单线程程序语义的前提下\",{\"1\":{\"206\":1}}],[\"编译器优化的重排序\",{\"1\":{\"206\":1}}],[\"编译器的发展和逃逸分析技术的逐渐成熟\",{\"1\":{\"136\":1,\"141\":1}}],[\"编译程序优化指令执行次序\",{\"1\":{\"202\":1}}],[\"编译程序都做出了贡献\",{\"1\":{\"202\":1}}],[\"编译时通过代码里标识的元数据动态处理\",{\"1\":{\"179\":1}}],[\"编译时动态处理\",{\"1\":{\"179\":1}}],[\"编译时多态主要指方法的重载\",{\"1\":{\"159\":1}}],[\"编译检查\",{\"1\":{\"179\":1}}],[\"编译阶段无法判定类型\",{\"1\":{\"177\":1}}],[\"编译期没法确定泛型参数化类型\",{\"1\":{\"176\":1}}],[\"编译错误\",{\"1\":{\"170\":3}}],[\"编译为\",{\"1\":{\"125\":1}}],[\"编译依赖\",{\"1\":{\"111\":1}}],[\"编号方案\",{\"1\":{\"65\":1}}],[\"编写配置文件\",{\"0\":{\"39\":1}}],[\"数值\",{\"1\":{\"462\":1}}],[\"数值函数\",{\"0\":{\"421\":1}}],[\"数学\",{\"1\":{\"427\":1,\"430\":2}}],[\"数组只能存在一种数据结构\",{\"1\":{\"665\":1}}],[\"数组固定大小\",{\"1\":{\"665\":1}}],[\"数组不可以自动扩容\",{\"1\":{\"403\":1}}],[\"数组中是\",{\"1\":{\"373\":1}}],[\"数组则会被编译成\",{\"1\":{\"373\":1}}],[\"数组\",{\"0\":{\"665\":1},\"1\":{\"300\":1,\"373\":1}}],[\"数组类型为参数类型\",{\"1\":{\"299\":1}}],[\"数字等\",{\"1\":{\"65\":1}}],[\"数据结构\",{\"0\":{\"805\":1}}],[\"数据报准备完毕则复制到用户空间\",{\"1\":{\"733\":1}}],[\"数据未准备好时会阻塞进程所以叫做阻塞式\",{\"1\":{\"733\":1}}],[\"数据量小\",{\"1\":{\"666\":1}}],[\"数据量较大\",{\"1\":{\"665\":1}}],[\"数据源\",{\"1\":{\"478\":1}}],[\"数据转换成\",{\"1\":{\"470\":1}}],[\"数据处理层可以说是\",{\"1\":{\"469\":1}}],[\"数据处理层\",{\"0\":{\"469\":1}}],[\"数据备份用两种方式做持久化\",{\"1\":{\"463\":1}}],[\"数据类型之间的映射和转换\",{\"1\":{\"474\":1}}],[\"数据类型之间的转换\",{\"1\":{\"470\":1}}],[\"数据类型和\",{\"1\":{\"470\":1,\"474\":1}}],[\"数据类型\",{\"1\":{\"462\":1,\"470\":1}}],[\"数据类型代替的\",{\"1\":{\"373\":1}}],[\"数据修改是永久性的\",{\"1\":{\"454\":1}}],[\"数据都必须保持一致状态\",{\"1\":{\"454\":1}}],[\"数据库在建立连接的时候需要走\",{\"1\":{\"500\":1}}],[\"数据库连接池的本质就是建立一个集合进行存储创建的连接\",{\"1\":{\"500\":1}}],[\"数据库连接池\",{\"0\":{\"500\":1},\"1\":{\"498\":1}}],[\"数据库异常终止后表中的数据是可以恢复的\",{\"1\":{\"437\":1}}],[\"数据库认证\",{\"1\":{\"24\":1}}],[\"数据操作除了插入和查询以外\",{\"1\":{\"437\":1}}],[\"数据仓储和其他应用环境下最常使用的存储引擎之一\",{\"1\":{\"437\":1}}],[\"数据和索引保存在\",{\"1\":{\"434\":1}}],[\"数据和索引文件可放置再不同的目录\",{\"1\":{\"433\":1}}],[\"数据长度也是通过属性进行获取的\",{\"1\":{\"307\":1}}],[\"数据被保护在抽象数据类型的内部\",{\"1\":{\"157\":1}}],[\"数据分析\",{\"0\":{\"151\":1}}],[\"数据\",{\"0\":{\"150\":1}}],[\"数据视图可以用逻辑视图来描述\",{\"1\":{\"111\":1}}],[\"数据专家使用逻辑视图\",{\"1\":{\"111\":1}}],[\"数据线路\",{\"1\":{\"65\":1}}],[\"停止容器\",{\"0\":{\"684\":1}}],[\"停止\",{\"1\":{\"65\":1}}],[\"停止防火墙\",{\"1\":{\"6\":1}}],[\"不仅仅关注类和对象的结构\",{\"1\":{\"774\":1}}],[\"不仅仅复制当前对象\",{\"1\":{\"387\":1}}],[\"不跟\",{\"1\":{\"755\":1}}],[\"不存在方向\",{\"1\":{\"679\":1}}],[\"不存在时设置\",{\"1\":{\"462\":1}}],[\"不存在时显示为\",{\"1\":{\"430\":1}}],[\"不操作\",{\"1\":{\"639\":1}}],[\"不进行检查\",{\"1\":{\"546\":1}}],[\"不一致\",{\"1\":{\"530\":1}}],[\"不一定是所要选择的列\",{\"1\":{\"449\":1}}],[\"不去进行真正的关闭\",{\"1\":{\"502\":1}}],[\"不用再去配置\",{\"1\":{\"472\":1}}],[\"不过在处理巨大的写入载入时\",{\"1\":{\"463\":1}}],[\"不过目前只有\",{\"1\":{\"447\":1}}],[\"不以通配符开始\",{\"1\":{\"450\":1}}],[\"不要过度索引\",{\"1\":{\"449\":1}}],[\"不允许有空值\",{\"1\":{\"447\":1}}],[\"不定义这个子句或者定义为\",{\"1\":{\"436\":1}}],[\"不支持局部\",{\"1\":{\"446\":1}}],[\"不支持事务和外键\",{\"1\":{\"433\":1}}],[\"不支持多重继承\",{\"1\":{\"239\":1}}],[\"不必因为类型不一致而创建不同类\",{\"1\":{\"384\":1}}],[\"不管表中有没有删除行\",{\"1\":{\"453\":1}}],[\"不管是使用还是面试频度否非常的高\",{\"1\":{\"298\":1}}],[\"不管什么指令都不能和这条\",{\"1\":{\"285\":1}}],[\"不管运行时环境如何\",{\"1\":{\"217\":1}}],[\"不能刚出的题材就去追涨\",{\"1\":{\"661\":1,\"663\":1}}],[\"不能一波上涨之后还想着低吸\",{\"1\":{\"661\":1,\"663\":1}}],[\"不能范围未加锁的表\",{\"1\":{\"453\":1}}],[\"不能确定在两个值之间大约有多少行\",{\"1\":{\"450\":1}}],[\"不能在触发器中使用以显式或隐式方式开始或结束事务的语句\",{\"1\":{\"442\":1}}],[\"不能重复\",{\"1\":{\"400\":1}}],[\"不能修饰类和方法\",{\"1\":{\"396\":1}}],[\"不能修改数据\",{\"1\":{\"261\":1}}],[\"不能加排它锁\",{\"1\":{\"261\":1}}],[\"不能理解为什么逻辑视图的利息相关人没有开发人员\",{\"1\":{\"111\":1}}],[\"不加锁的特点能够使其读操作的性能大幅提升\",{\"1\":{\"256\":1}}],[\"不会被阻塞\",{\"1\":{\"737\":1}}],[\"不会出现死锁\",{\"1\":{\"452\":1}}],[\"不会出现线程安全问题\",{\"1\":{\"228\":1}}],[\"不会报错\",{\"1\":{\"391\":1}}],[\"不会因为之前已经获取过还没释放而阻塞\",{\"1\":{\"260\":1}}],[\"不会\",{\"1\":{\"253\":1}}],[\"不属于程序中不可或缺的部分\",{\"1\":{\"242\":1}}],[\"不是\",{\"1\":{\"722\":1}}],[\"不是接力不会存在涨停\",{\"1\":{\"633\":1}}],[\"不是低位\",{\"1\":{\"587\":1}}],[\"不是真正意义上的线程\",{\"1\":{\"238\":1}}],[\"不是所有的处理器重排序都要禁止\",{\"1\":{\"206\":1}}],[\"不是所有的编译器重排序都要禁止\",{\"1\":{\"206\":1}}],[\"不是所有的软件架构都需要完整的\",{\"1\":{\"103\":1}}],[\"不调用非可重入的方法等\",{\"1\":{\"230\":1}}],[\"不断地重试\",{\"1\":{\"224\":1}}],[\"不需要设置初始大小\",{\"1\":{\"434\":1}}],[\"不需要进行同步操作\",{\"1\":{\"241\":1}}],[\"不需要再采取任何的线程安全保障措施\",{\"1\":{\"216\":1}}],[\"不需要暂停所有应用线程\",{\"1\":{\"148\":1}}],[\"不可控\",{\"1\":{\"463\":1}}],[\"不可重复读\",{\"1\":{\"454\":2}}],[\"不可使基础类型\",{\"1\":{\"374\":1}}],[\"不可使用该类型\",{\"1\":{\"353\":1}}],[\"不可变\",{\"0\":{\"216\":1},\"1\":{\"216\":1}}],[\"不可达对象\",{\"1\":{\"146\":1}}],[\"不可以设置为127\",{\"1\":{\"24\":1}}],[\"不同活动之间要能数据共享\",{\"1\":{\"742\":1}}],[\"不同的活动之间不能相互影响\",{\"1\":{\"742\":1}}],[\"不同的文件代表不同的配置\",{\"1\":{\"694\":1}}],[\"不同的是\",{\"1\":{\"668\":1}}],[\"不同的\",{\"1\":{\"140\":1,\"530\":1}}],[\"不同的线路接口卡支持不同的线路\",{\"1\":{\"65\":1}}],[\"不同项目迭代的周期差别很大\",{\"1\":{\"107\":1}}],[\"功能更为强大的结构\",{\"1\":{\"765\":1}}],[\"功能更加强大\",{\"1\":{\"300\":1}}],[\"功能\",{\"1\":{\"111\":1}}],[\"功能电话线路\",{\"1\":{\"65\":1}}],[\"功能名称\",{\"1\":{\"49\":2}}],[\"专用的pabx到pabx的线路\",{\"1\":{\"65\":1}}],[\"专业\",{\"1\":{\"3\":1}}],[\"显示了\",{\"1\":{\"65\":1}}],[\"条理清晰的对象模型\",{\"1\":{\"63\":1}}],[\"图是由结点的有穷集合v和边的集合e组成\",{\"1\":{\"677\":1}}],[\"图\",{\"0\":{\"677\":1},\"1\":{\"664\":1}}],[\"图表列表\",{\"1\":{\"109\":1}}],[\"图9\",{\"1\":{\"87\":2}}],[\"图9和10是过程视图跟小型pabx和大型pabx两种不同的物理视图的映射关系\",{\"1\":{\"87\":1}}],[\"图8展示了大型pabx的一种可能的硬件配置\",{\"1\":{\"87\":1}}],[\"图7\",{\"1\":{\"87\":1}}],[\"图6代表了加拿大\",{\"1\":{\"81\":1}}],[\"图6\",{\"1\":{\"79\":1}}],[\"图5\",{\"1\":{\"73\":1,\"77\":1}}],[\"图4\",{\"1\":{\"69\":2}}],[\"图3b显示了空中交通控制系统的顶级类图\",{\"1\":{\"65\":1}}],[\"图3a\",{\"1\":{\"65\":2}}],[\"图2\",{\"1\":{\"61\":1}}],[\"图13\",{\"1\":{\"109\":1}}],[\"图12\",{\"1\":{\"97\":1}}],[\"图12显示如何将一些假设的空中交通控制系统中的一小组类是映射到进程\",{\"1\":{\"97\":1}}],[\"图11\",{\"1\":{\"93\":1}}],[\"图11为小型pabx的一个场景片段\",{\"1\":{\"93\":1}}],[\"图1\",{\"1\":{\"57\":1}}],[\"支持大量的不同的应用程序\",{\"1\":{\"742\":1}}],[\"支持结果集关系一对多和多对一的转换\",{\"1\":{\"471\":1}}],[\"支持事务\",{\"1\":{\"454\":1}}],[\"支持外键\",{\"1\":{\"437\":1}}],[\"支持外键的存储引擎只有\",{\"1\":{\"434\":1}}],[\"支持多线程\",{\"1\":{\"371\":1}}],[\"支持系统可扩展性\",{\"1\":{\"97\":1}}],[\"支持三种不同的可执行文件\",{\"1\":{\"87\":1}}],[\"支持设计规则的实施\",{\"1\":{\"77\":1}}],[\"支持上述分层策略\",{\"1\":{\"77\":1}}],[\"支持开发架构的定义和实现\",{\"1\":{\"77\":1}}],[\"支持这种表示法\",{\"1\":{\"69\":1}}],[\"支撑逻辑架构的设计\",{\"1\":{\"61\":1}}],[\"支付\",{\"1\":{\"46\":1}}],[\"类间的依赖关系应该建立在最小的接口上\",{\"1\":{\"754\":1}}],[\"类似\",{\"1\":{\"456\":3}}],[\"类似于\",{\"1\":{\"313\":1}}],[\"类名首字母小写\",{\"1\":{\"532\":1}}],[\"类名\",{\"1\":{\"399\":1}}],[\"类型的集合\",{\"1\":{\"474\":1}}],[\"类型的数据\",{\"1\":{\"470\":2}}],[\"类型的\",{\"1\":{\"443\":1}}],[\"类型的参数将数据返回触发器是可以的\",{\"1\":{\"442\":1}}],[\"类型的表可以进行查询\",{\"1\":{\"436\":1}}],[\"类型表的插入操作\",{\"1\":{\"436\":1}}],[\"类型转换为\",{\"1\":{\"391\":1}}],[\"类型\",{\"0\":{\"452\":1},\"1\":{\"374\":1,\"443\":1,\"452\":1}}],[\"类型擦除\",{\"1\":{\"171\":1}}],[\"类来实现线程之间的协调\",{\"1\":{\"254\":1}}],[\"类来实现线程本地存储功能\",{\"1\":{\"229\":1}}],[\"类库中提供了\",{\"1\":{\"254\":1}}],[\"类库仅仅可以被此\",{\"1\":{\"129\":1}}],[\"类开销过大\",{\"1\":{\"239\":1}}],[\"类可能只要求可执行就行\",{\"1\":{\"239\":1}}],[\"类就无法继承其它类\",{\"1\":{\"239\":1}}],[\"类的所有实例需要遵守\",{\"1\":{\"406\":1}}],[\"类的\",{\"1\":{\"225\":1}}],[\"类的类别\",{\"1\":{\"111\":1}}],[\"类文件的固定格式\",{\"1\":{\"132\":1}}],[\"类文件的结构检查\",{\"1\":{\"132\":1}}],[\"类加载器的\",{\"1\":{\"130\":1}}],[\"类加载器加载类\",{\"1\":{\"130\":1}}],[\"类加载器\",{\"1\":{\"129\":1}}],[\"类加载器有哪些\",{\"0\":{\"128\":1}}],[\"类加载器子系统负责从文件系统或者网络中加载\",{\"1\":{\"126\":1}}],[\"类加载过程如下图\",{\"1\":{\"126\":1}}],[\"类加载子系统详解\",{\"1\":{\"126\":1}}],[\"类加载子系统\",{\"0\":{\"126\":1}}],[\"类装载器所做的工作实质是把类文件从硬盘读取到内存中\",{\"1\":{\"124\":1}}],[\"类\",{\"0\":{\"495\":1,\"496\":1},\"1\":{\"107\":1,\"111\":1,\"179\":1,\"238\":1,\"381\":2}}],[\"类只能被单个代理处理\",{\"1\":{\"97\":1}}],[\"类为飞机的管辖控制而建立了空域的划分\",{\"1\":{\"97\":1}}],[\"类被映射到一组\",{\"1\":{\"97\":1}}],[\"类实用程序\",{\"1\":{\"59\":1}}],[\"类模板聚焦于每个独立的类\",{\"1\":{\"59\":1}}],[\"类图展示了一组类和它们之间的逻辑关系\",{\"1\":{\"59\":1}}],[\"继承自\",{\"1\":{\"381\":2}}],[\"继承了\",{\"1\":{\"300\":1}}],[\"继承整个\",{\"1\":{\"239\":1}}],[\"继承应该遵循里氏替换原则\",{\"1\":{\"158\":1}}],[\"继承实现了\",{\"1\":{\"158\":1}}],[\"继承\",{\"0\":{\"158\":1,\"239\":1},\"1\":{\"59\":1,\"111\":1,\"159\":1,\"238\":1,\"372\":1}}],[\"组织\",{\"1\":{\"105\":1,\"111\":1}}],[\"组合索引\",{\"1\":{\"447\":1}}],[\"组合7\",{\"1\":{\"148\":1}}],[\"组合6\",{\"1\":{\"148\":1}}],[\"组合5\",{\"1\":{\"148\":1}}],[\"组合4\",{\"1\":{\"148\":1}}],[\"组合3\",{\"1\":{\"148\":1}}],[\"组合2\",{\"1\":{\"148\":1}}],[\"组合1\",{\"1\":{\"148\":1}}],[\"组合\",{\"0\":{\"756\":1},\"1\":{\"59\":1}}],[\"组件\",{\"1\":{\"57\":1,\"111\":1}}],[\"关注于对象的行为问题\",{\"1\":{\"774\":1}}],[\"关注于对象的组成以及对象之间的依赖关系\",{\"1\":{\"765\":1}}],[\"关注点\",{\"1\":{\"111\":1}}],[\"关闭\",{\"1\":{\"399\":1,\"731\":3}}],[\"关闭防火墙\",{\"0\":{\"6\":1}}],[\"关键字后的选择列表中的列\",{\"1\":{\"449\":1}}],[\"关键字\",{\"1\":{\"396\":1}}],[\"关键字声明了类型的下界\",{\"1\":{\"169\":1}}],[\"关键字声明了类型的上界\",{\"1\":{\"169\":1}}],[\"关于两者之间的性能的话\",{\"1\":{\"351\":1}}],[\"关于final重排序的总结\",{\"0\":{\"275\":1}}],[\"关系\",{\"1\":{\"158\":2}}],[\"关系的模块和子系统图表示\",{\"1\":{\"75\":1}}],[\"关联到\",{\"1\":{\"462\":2}}],[\"关联\",{\"1\":{\"59\":1,\"111\":1}}],[\"方新侠逆势加仓万丰\",{\"1\":{\"633\":1}}],[\"方法重写的持有者\",{\"1\":{\"546\":1}}],[\"方法进行注册的\",{\"1\":{\"532\":1}}],[\"方法名称一致\",{\"1\":{\"376\":1}}],[\"方法名字相同\",{\"1\":{\"162\":1}}],[\"方法不过是属于son的新成员罢了\",{\"1\":{\"265\":1}}],[\"方法是隐式的final\",{\"1\":{\"265\":1}}],[\"方法唤醒等待的线程\",{\"1\":{\"254\":1}}],[\"方法使线程等待\",{\"1\":{\"254\":1}}],[\"方法使线程进入限期等待或者无限期等待时\",{\"1\":{\"236\":1}}],[\"方法使线程进入限期等待状态时\",{\"1\":{\"236\":1}}],[\"方法来判断线程是否处于中断状态\",{\"1\":{\"247\":1}}],[\"方法会等待线程都执行完毕之后再关闭\",{\"1\":{\"248\":1}}],[\"方法会返回\",{\"1\":{\"247\":1}}],[\"方法会设置线程的中断标记\",{\"1\":{\"247\":1}}],[\"方法会休眠当前正在执行的线程\",{\"1\":{\"243\":1}}],[\"方法就无法使线程提前结束\",{\"1\":{\"247\":1}}],[\"方法执行一个无限循环\",{\"1\":{\"247\":1}}],[\"方法执行的内存模型\",{\"1\":{\"136\":1,\"137\":1}}],[\"方法将一个线程设置为守护线程\",{\"1\":{\"242\":1}}],[\"方法检测到是否有中断发生\",{\"1\":{\"211\":1,\"388\":1}}],[\"方法返回\",{\"1\":{\"211\":1,\"388\":1}}],[\"方法参数\",{\"1\":{\"179\":1}}],[\"方法调用先行发生于此线程的每一个动作\",{\"1\":{\"211\":1,\"388\":1}}],[\"方法调用\",{\"1\":{\"168\":1}}],[\"方法能够在同一个类中或者在一个子类中被重载\",{\"1\":{\"162\":1}}],[\"方法\",{\"1\":{\"161\":1,\"235\":3,\"236\":5,\"248\":2,\"251\":1,\"282\":1,\"299\":1,\"399\":1,\"401\":1,\"406\":1,\"468\":1,\"483\":1,\"532\":1}}],[\"方法区中常量引用的对象\",{\"1\":{\"146\":1}}],[\"方法区中类静态属性实体引用的对象\",{\"1\":{\"146\":1}}],[\"方法区中还会存放运行时常最池信息\",{\"1\":{\"135\":1}}],[\"方法区\",{\"0\":{\"140\":1},\"1\":{\"136\":1}}],[\"方法出口等信息\",{\"1\":{\"136\":1,\"137\":1}}],[\"方法服务的\",{\"1\":{\"136\":1,\"138\":1}}],[\"方法的开始\",{\"1\":{\"211\":1,\"388\":1}}],[\"方法的调用先行发生于被中断线程的代码检测到中断事件的发生\",{\"1\":{\"211\":1,\"388\":1}}],[\"方法的\",{\"1\":{\"136\":1,\"138\":1}}],[\"方法通过类图和模板来表示逻辑架构\",{\"1\":{\"59\":1}}],[\"方框表达的是正在运行的程序吗\",{\"1\":{\"55\":1}}],[\"也叫哈希表\",{\"1\":{\"675\":1}}],[\"也会在此时进行加载到\",{\"1\":{\"538\":1}}],[\"也会先进行写锁\",{\"1\":{\"453\":1}}],[\"也很轻松\",{\"1\":{\"463\":1}}],[\"也不能使用采用\",{\"1\":{\"442\":1}}],[\"也不需要设置文件的最大限制\",{\"1\":{\"434\":1}}],[\"也不是完全独立的\",{\"1\":{\"95\":1}}],[\"也正因为如此\",{\"1\":{\"395\":1}}],[\"也可能正在等待\",{\"1\":{\"233\":1}}],[\"也可以通过参数控制gc的时间不大于多少毫秒或者比例\",{\"1\":{\"148\":1}}],[\"也可以通过逆向工程通过源代码反推开发蓝图\",{\"1\":{\"77\":1}}],[\"也可以主动调用该对象自己的操作\",{\"1\":{\"97\":1}}],[\"也可以支撑成本评估\",{\"1\":{\"75\":1}}],[\"也可以像\",{\"1\":{\"67\":1}}],[\"也可以被用于支持软件仿真和测试版本的共存\",{\"1\":{\"67\":1}}],[\"也可以设置为adminonly\",{\"1\":{\"24\":1}}],[\"也可以设置https\",{\"1\":{\"24\":1}}],[\"也就说前面对final基本数据类型的重排序规则在这里还是使用\",{\"1\":{\"273\":1}}],[\"也就是\",{\"1\":{\"668\":1}}],[\"也就是存储过程或者函数通过\",{\"1\":{\"442\":1}}],[\"也就是无法被继承\",{\"1\":{\"265\":1}}],[\"也就是说它是根朝上\",{\"1\":{\"669\":1}}],[\"也就是说程序是静态的代码\",{\"1\":{\"395\":1}}],[\"也就是说\",{\"1\":{\"276\":1}}],[\"也就是说在泛型使用过程中\",{\"1\":{\"163\":1}}],[\"也就是说可以使用\",{\"1\":{\"158\":1}}],[\"也就找不到对应的类字节码文件\",{\"1\":{\"176\":1}}],[\"也就避免了覆盖了核心类库的问题\",{\"1\":{\"130\":1}}],[\"也没有查找到\",{\"1\":{\"130\":1}}],[\"也没加载过\",{\"1\":{\"130\":1}}],[\"也是一种平衡二叉树\",{\"1\":{\"672\":1}}],[\"也是一种线性表\",{\"1\":{\"668\":1}}],[\"也是模版模式\",{\"1\":{\"502\":1}}],[\"也是实现collection\",{\"1\":{\"307\":1}}],[\"也是架构原型测试的起点\",{\"1\":{\"89\":1}}],[\"也是为了识别跨系统不同部件的通用机制和设计元素\",{\"1\":{\"59\":1}}],[\"它被复制到内核中的某个缓冲区\",{\"1\":{\"732\":1}}],[\"它要完成两个功能\",{\"1\":{\"469\":1}}],[\"它保存了某个时间点得数据集\",{\"1\":{\"463\":1}}],[\"它也应该重写\",{\"1\":{\"406\":1}}],[\"它在计算机中一个指令接着一个指令的执行着没同事\",{\"1\":{\"395\":1}}],[\"它允许我们在运行时对字节码进行修改和动态生成\",{\"1\":{\"344\":1}}],[\"它内部的数据接口是采用链表的方式进行存储\",{\"1\":{\"307\":1}}],[\"它实现了\",{\"1\":{\"301\":1}}],[\"它抽象了单列数据集合的基本方法\",{\"1\":{\"299\":1}}],[\"它不能代替阻塞\",{\"1\":{\"257\":1}}],[\"它都要进行加锁\",{\"1\":{\"222\":1}}],[\"它会去内存中读取新值\",{\"1\":{\"213\":1}}],[\"它会保证修改的值会立即被更新到主存\",{\"1\":{\"213\":1}}],[\"它会先去主存读取i的值并加载到cpu2的缓存当中\",{\"1\":{\"204\":1}}],[\"它会先尝试自己去加载\",{\"1\":{\"129\":1}}],[\"它主要的作用有以下四方面\",{\"1\":{\"179\":1}}],[\"它将可用内存按容量划分为大小相等的两块\",{\"1\":{\"147\":1}}],[\"它可以在\",{\"1\":{\"447\":1}}],[\"它可以通过控制变量值的版本来保证\",{\"1\":{\"226\":1}}],[\"它可以看作是当前线程所执行的字节码的行号指示器\",{\"1\":{\"136\":1,\"139\":1}}],[\"它可以支撑将工作分配到某个团队\",{\"1\":{\"75\":1}}],[\"它为什么可以隔离每个\",{\"1\":{\"129\":1}}],[\"它是由n\",{\"1\":{\"669\":1}}],[\"它是在等待获取一个排它锁\",{\"1\":{\"236\":1}}],[\"它是一个虚构出来的计算机\",{\"1\":{\"124\":1}}],[\"它是打造产品线的基础\",{\"1\":{\"75\":1}}],[\"它的值被改成了\",{\"1\":{\"226\":1}}],[\"它的确能使不同利益相关者找到他们想了解的软件架构信息\",{\"1\":{\"111\":1}}],[\"它的组织结构紧密遵循\",{\"1\":{\"109\":1}}],[\"它慢慢地长成最终的系统\",{\"1\":{\"105\":1}}],[\"它需要多次迭代来获得一个可接受的\",{\"1\":{\"97\":1}}],[\"它自己的unix进程或者ada任务\",{\"1\":{\"97\":1}}],[\"它包含以下方法\",{\"1\":{\"325\":1}}],[\"它包含了以下的方法\",{\"1\":{\"299\":1}}],[\"它包含了\",{\"1\":{\"109\":1}}],[\"它包含了大部分用户接口和外部系统扩展接口\",{\"1\":{\"81\":1}}],[\"它包含8个类别的类\",{\"1\":{\"65\":1}}],[\"它解析状态变化并通过消息和相应的终端通信\",{\"1\":{\"73\":1}}],[\"它解决并发性\",{\"1\":{\"67\":1}}],[\"它以10ms为周期捕获终端的状态是否有显著的变化\",{\"1\":{\"73\":1}}],[\"它以200ms为周期扫描所有非活动状态的终端\",{\"1\":{\"73\":1}}],[\"它以精心选择的形式来组合若干架构元素\",{\"1\":{\"57\":1}}],[\"它使用\",{\"1\":{\"65\":1}}],[\"它们都应该依赖于抽象\",{\"1\":{\"753\":1}}],[\"它们都属于\",{\"1\":{\"252\":1}}],[\"它们指出设计过程可能需要一些回溯机制\",{\"1\":{\"105\":1}}],[\"它们被映射到它们自己的服务上\",{\"1\":{\"97\":1}}],[\"它们处理进程或处理器的故障吗\",{\"1\":{\"97\":1}}],[\"它们可以被作为\",{\"1\":{\"67\":1}}],[\"它们可以共享相同的物理资源\",{\"1\":{\"67\":1}}],[\"它们分布在一组硬件资源上\",{\"1\":{\"67\":1}}],[\"它们强调主要的类操作\",{\"1\":{\"59\":1}}],[\"它们利用抽象\",{\"1\":{\"59\":1}}],[\"对修改关闭\",{\"1\":{\"750\":1}}],[\"对其他\",{\"1\":{\"696\":1}}],[\"对块设备的\",{\"1\":{\"694\":1}}],[\"对所有属性进行依赖检查\",{\"1\":{\"546\":1}}],[\"对对象引用进行依赖性检查\",{\"1\":{\"546\":1}}],[\"对数据库连接进行池化\",{\"1\":{\"500\":1}}],[\"对使用注解来配置\",{\"1\":{\"472\":1}}],[\"对文件进行分析\",{\"1\":{\"463\":1}}],[\"对应子元素qualifier\",{\"1\":{\"546\":1}}],[\"对应bean属性destroy\",{\"1\":{\"546\":1}}],[\"对应bean属性depend\",{\"1\":{\"546\":1}}],[\"对应bean属性init\",{\"1\":{\"546\":1}}],[\"对应bean属性constructor\",{\"1\":{\"546\":1}}],[\"对应bean属性factory\",{\"1\":{\"546\":2}}],[\"对应bean属性primary\",{\"1\":{\"546\":1}}],[\"对应bean属性autowire\",{\"1\":{\"546\":1}}],[\"对应bean属性abstract\",{\"1\":{\"546\":1}}],[\"对应bean属性lazy\",{\"1\":{\"546\":1}}],[\"对应bean属性scope\",{\"1\":{\"546\":1}}],[\"对应方法的入参类型\",{\"1\":{\"468\":1}}],[\"对应\",{\"1\":{\"462\":2}}],[\"对应的数值\",{\"1\":{\"462\":2}}],[\"对应的值\",{\"1\":{\"325\":2,\"462\":1}}],[\"对应的值为\",{\"1\":{\"325\":1}}],[\"对应的值且等于\",{\"1\":{\"325\":1}}],[\"对应的\",{\"1\":{\"325\":4,\"530\":1}}],[\"对应的架构蓝图的表示法是怎样的\",{\"1\":{\"57\":1}}],[\"对每个表至少支持\",{\"1\":{\"446\":1}}],[\"对相关列使用索引是提高\",{\"1\":{\"446\":1}}],[\"对子表进行的相应操作\",{\"1\":{\"434\":1}}],[\"对方法添加了同步锁或者调用的方法添加了同步锁\",{\"1\":{\"379\":1}}],[\"对代理对象类的class文件加载进来\",{\"1\":{\"347\":1}}],[\"对比\",{\"0\":{\"346\":1}}],[\"对i加1\",{\"1\":{\"282\":1}}],[\"对final域的读\",{\"1\":{\"276\":1}}],[\"对final修饰的对象的成员域读操作\",{\"0\":{\"274\":1}}],[\"对final修饰的对象的成员域写操作\",{\"0\":{\"273\":1}}],[\"对静态方法\",{\"1\":{\"244\":1}}],[\"对线程\",{\"1\":{\"211\":1,\"388\":1}}],[\"对一个\",{\"0\":{\"287\":1},\"1\":{\"211\":1,\"388\":1}}],[\"对\",{\"1\":{\"129\":1,\"436\":1,\"546\":1,\"694\":1}}],[\"对活动进行优先级排序\",{\"1\":{\"97\":1}}],[\"对某些类型的外部刺激作出快速响应\",{\"1\":{\"97\":1}}],[\"对于一个套接字上的输入操作\",{\"1\":{\"732\":1}}],[\"对于一个更大的\",{\"1\":{\"65\":1}}],[\"对于个人环境搭建和使用是非常方便的\",{\"1\":{\"680\":1}}],[\"对于实现\",{\"1\":{\"537\":1}}],[\"对于完全相同的查询\",{\"1\":{\"472\":1}}],[\"对于数据吞吐量大和访问量非常大的应用而言\",{\"1\":{\"472\":1}}],[\"对于相同的数据集来说\",{\"1\":{\"463\":1}}],[\"对于前面的每一行\",{\"1\":{\"456\":3}}],[\"对于批量插入的\",{\"1\":{\"456\":1}}],[\"对于提高数据处理的效率是有好处的\",{\"1\":{\"443\":1}}],[\"对于类似计费系统或者财务系统等对数据准确性要求比较高的系统\",{\"1\":{\"437\":1}}],[\"对于使用多表空间特性的表\",{\"1\":{\"434\":1}}],[\"对于任意节点而言\",{\"1\":{\"672\":1}}],[\"对于任意个对象\",{\"1\":{\"399\":1}}],[\"对于任意一个类\",{\"1\":{\"399\":1}}],[\"对于\",{\"1\":{\"388\":1,\"446\":1,\"449\":1}}],[\"对于处理器重排序\",{\"1\":{\"206\":1}}],[\"对于编译器来说\",{\"1\":{\"288\":1}}],[\"对于编译器\",{\"1\":{\"206\":1}}],[\"对于内存的划分方式和管理机制存在着部分差异\",{\"1\":{\"140\":1}}],[\"对于大型命令和控制系统\",{\"1\":{\"107\":1}}],[\"对于大多数情况\",{\"1\":{\"75\":1}}],[\"对于小型项目\",{\"1\":{\"107\":1}}],[\"对于非常小的系统\",{\"1\":{\"103\":1}}],[\"对于子系统的定义\",{\"1\":{\"99\":1}}],[\"对于更复杂的系统\",{\"1\":{\"71\":1}}],[\"对于逻辑视图\",{\"1\":{\"63\":1}}],[\"对象构建的流程图\",{\"1\":{\"528\":1}}],[\"对象之中\",{\"1\":{\"474\":1}}],[\"对象中\",{\"1\":{\"474\":1}}],[\"对象完成和数据库的交互\",{\"1\":{\"467\":1}}],[\"对象终结规则\",{\"1\":{\"211\":1,\"388\":1}}],[\"对象的构建\",{\"1\":{\"528\":1}}],[\"对象的四种方式\",{\"1\":{\"399\":1}}],[\"对象的结束先行发生于\",{\"1\":{\"211\":1,\"388\":1}}],[\"对象的\",{\"1\":{\"211\":1,\"388\":1}}],[\"对象的状态或操作是否可以从物理架构上的很多节点去访问\",{\"1\":{\"97\":1}}],[\"对象的存在或者持久性是否依赖另一个对象\",{\"1\":{\"97\":1}}],[\"对象的职责是维护终端的状态\",{\"1\":{\"65\":1}}],[\"对象的职责是将所有信号解码并注入到线路接口卡上\",{\"1\":{\"65\":1}}],[\"对象是短暂存在的\",{\"1\":{\"97\":1}}],[\"对象是主动的\",{\"1\":{\"97\":1}}],[\"对象不能自主地调用任何操作\",{\"1\":{\"97\":2}}],[\"对象可以主动调用其它对象的操作\",{\"1\":{\"97\":1}}],[\"对象实例用实线表示\",{\"1\":{\"91\":1}}],[\"对象操作实际在哪个控制任务上执行\",{\"1\":{\"67\":1}}],[\"对象来解析拨号信息\",{\"1\":{\"65\":1}}],[\"对象类别\",{\"1\":{\"59\":1}}],[\"对象\",{\"1\":{\"59\":1,\"83\":1,\"158\":1,\"325\":1,\"399\":2,\"467\":1,\"529\":3}}],[\"系统调用会立即返回\",{\"1\":{\"737\":1}}],[\"系统调用\",{\"1\":{\"736\":1}}],[\"系统又存在很多功能\",{\"1\":{\"529\":1}}],[\"系统变量的约束\",{\"1\":{\"435\":1}}],[\"系统运行一个程序及时一个进程从创建\",{\"1\":{\"395\":1}}],[\"系统设计人员\",{\"1\":{\"111\":2}}],[\"系统最关键的功能是以场景\",{\"1\":{\"107\":1}}],[\"系统可用性\",{\"1\":{\"83\":1}}],[\"系统的开发架构由表示系统\",{\"1\":{\"75\":1}}],[\"系统的进程组方法中的另一种表示法和工具集\",{\"1\":{\"71\":1}}],[\"系统完整性\",{\"1\":{\"67\":1}}],[\"系统被分解为一组主要来自问题领域的关键抽象\",{\"1\":{\"59\":1}}],[\"系统应该向用户提供什么服务\",{\"1\":{\"59\":1}}],[\"系统工程师使用物理视图\",{\"1\":{\"111\":1}}],[\"系统工程师\",{\"1\":{\"53\":1}}],[\"以便向外界提供功能接口\",{\"1\":{\"772\":1}}],[\"以下通过部分文件验证其内容就是容器对应的状态的数据\",{\"1\":{\"695\":1}}],[\"以下的整个解析将结合一个nginx\",{\"1\":{\"692\":1}}],[\"以下是\",{\"1\":{\"326\":1,\"528\":1}}],[\"以上代码可知\",{\"1\":{\"493\":1}}],[\"以上基本就可以确认问题出现的原因\",{\"1\":{\"456\":1}}],[\"以如下形式显示\",{\"1\":{\"430\":1}}],[\"以提高效率\",{\"1\":{\"388\":1}}],[\"以此可以认为当容器启动时是通过初始化\",{\"1\":{\"695\":1}}],[\"以此让用户更加易用\",{\"1\":{\"494\":1}}],[\"以此来将表的\",{\"1\":{\"434\":1}}],[\"以此来提升性能\",{\"1\":{\"378\":1}}],[\"以此提高cpu使用率\",{\"1\":{\"97\":1}}],[\"以x86为例的话\",{\"1\":{\"276\":1}}],[\"以分时复用\",{\"1\":{\"202\":1}}],[\"以均衡与内存的速度差异\",{\"1\":{\"202\":1}}],[\"以保证擦除类型后的代码仍然具有泛型的\",{\"1\":{\"172\":1}}],[\"以给用户带来较好的体验\",{\"1\":{\"148\":1}}],[\"以应对被使用的内存中所有对象都100\",{\"1\":{\"147\":1}}],[\"以发现简化\",{\"1\":{\"107\":1}}],[\"以支持新的扩展场景集\",{\"1\":{\"107\":1}}],[\"以降低风险或者扩大架构覆盖范围\",{\"1\":{\"107\":1}}],[\"以定义\",{\"1\":{\"107\":1}}],[\"以抽象出一些用户需求\",{\"1\":{\"107\":1}}],[\"以及对数据库连接信息和\",{\"1\":{\"467\":1}}],[\"以及对他的动态访问权限\",{\"1\":{\"399\":1}}],[\"以及他们之间的关系\",{\"0\":{\"395\":1}}],[\"以及他们的封装类\",{\"0\":{\"373\":1}}],[\"以及$\",{\"1\":{\"129\":1}}],[\"以及严格的分层原则\",{\"1\":{\"99\":1}}],[\"以及其它静态的航空信息是受保护对象\",{\"1\":{\"97\":1}}],[\"以及其他非功能需求\",{\"1\":{\"57\":1}}],[\"以及安全性分析\",{\"1\":{\"75\":1}}],[\"以及工具集或编程语言所带来的约束\",{\"1\":{\"75\":1}}],[\"以及多客户端\",{\"1\":{\"71\":1}}],[\"以及它们的冗余\",{\"1\":{\"69\":1}}],[\"以及逻辑视图中的主要抽象如何对应到过程架构中\",{\"1\":{\"67\":1}}],[\"以数据驱动为主的应用程序可以使用其它形式的逻辑视图\",{\"1\":{\"59\":1}}],[\"以pabx设计作为小例子\",{\"1\":{\"57\":1}}],[\"蓝图\",{\"1\":{\"57\":1}}],[\"每日复盘\",{\"0\":{\"801\":1}}],[\"每秒\",{\"1\":{\"463\":1}}],[\"每秒fsync\",{\"1\":{\"463\":1}}],[\"每一个非根节点都有一个父节点\",{\"1\":{\"669\":1}}],[\"每一个节点都有零个或者多个子节点\",{\"1\":{\"669\":1}}],[\"每一个程序还占用某些系统资源如\",{\"1\":{\"395\":1}}],[\"每一层都为它的上层提供一个小范围的\",{\"1\":{\"75\":1}}],[\"每种存储引擎\",{\"1\":{\"446\":1}}],[\"每种类型都需要重载一个add方法\",{\"1\":{\"164\":1}}],[\"每种视图都用一个\",{\"1\":{\"57\":1}}],[\"每次写的时候fsync\",{\"1\":{\"463\":1}}],[\"每次垃圾收集时都发现有大批对象死去\",{\"1\":{\"147\":1}}],[\"每次都是对其中的一块进行内存回收\",{\"1\":{\"147\":1}}],[\"每次只使用其中的一块\",{\"1\":{\"147\":1}}],[\"每层都有预先定义好的职责\",{\"1\":{\"79\":1}}],[\"每个节点之间是无方向\",{\"1\":{\"679\":1}}],[\"每个节点之间的线路是有方向\",{\"1\":{\"678\":1}}],[\"每个节点非红即黑\",{\"1\":{\"672\":1}}],[\"每个结点存放至少m\",{\"1\":{\"673\":1}}],[\"每个叶节点\",{\"1\":{\"672\":1}}],[\"每个父节点只有两个子节点的树为二叉树\",{\"1\":{\"670\":1}}],[\"每个子节点都可以分为多个不相交的子树\",{\"1\":{\"669\":1}}],[\"每个子系统包含10到50个模块\",{\"1\":{\"81\":1}}],[\"每个客户端连接redis实例的时候都是指定了ip和端口号的\",{\"1\":{\"463\":1}}],[\"每个额外的索引都要占用额外的磁盘空间\",{\"1\":{\"449\":1}}],[\"每个重载的方法\",{\"1\":{\"162\":1}}],[\"每个对象有一个引用计数属性\",{\"1\":{\"146\":1}}],[\"每个线程都有属于自己的程序计数器\",{\"1\":{\"139\":1}}],[\"每个线程是抢夺\",{\"1\":{\"139\":1}}],[\"每个方法从调用直至执行完成的过程\",{\"1\":{\"136\":1,\"137\":1}}],[\"每个方法在执行的同时都会创建一个线帧用于存储局部变量表\",{\"1\":{\"136\":1,\"137\":1}}],[\"每个\",{\"1\":{\"129\":1}}],[\"每个层次解决一个不同的关注点\",{\"1\":{\"67\":1}}],[\"每个视图要解决哪方面的问题\",{\"1\":{\"57\":1}}],[\"每个视图解决一组特定的问题\",{\"1\":{\"55\":1}}],[\"每个蓝图使用它自己特定的表示法\",{\"1\":{\"57\":1}}],[\"即不会使用其对象还是会创建该对象\",{\"1\":{\"759\":1}}],[\"即不使用表连接或者子查询\",{\"1\":{\"456\":1}}],[\"即它不会被考虑作为其他bean自动装配的候选者\",{\"1\":{\"546\":1}}],[\"即<select|update|delete|insert>\",{\"1\":{\"468\":1}}],[\"即master\",{\"1\":{\"463\":1}}],[\"即常量表\",{\"1\":{\"456\":1}}],[\"即外层的查询\",{\"1\":{\"456\":1}}],[\"即外壳不变\",{\"1\":{\"161\":1}}],[\"即对索引字段的前\",{\"1\":{\"446\":1}}],[\"即使总结市场反馈\",{\"1\":{\"661\":1,\"663\":1}}],[\"即使想买也要等到标志性情绪回暖\",{\"1\":{\"577\":1}}],[\"即使工厂模式\",{\"1\":{\"502\":1}}],[\"即使在高负荷之下也是如此\",{\"1\":{\"463\":1}}],[\"即使重写过程中发生停机\",{\"1\":{\"463\":1}}],[\"即使由于某些原因\",{\"1\":{\"463\":1}}],[\"即使用时通过中介使用\",{\"1\":{\"340\":1}}],[\"即使整个系统不可用\",{\"1\":{\"157\":1}}],[\"即链表元素个数大于\",{\"1\":{\"326\":1}}],[\"即禁止final域写重排序到构造方法之外\",{\"1\":{\"275\":1}}],[\"即能看下arrays\",{\"1\":{\"274\":1}}],[\"即这个类是不能有子类的\",{\"1\":{\"264\":1}}],[\"即父类\",{\"1\":{\"172\":1}}],[\"即删除<>及其包围的部分\",{\"1\":{\"172\":1}}],[\"即java在语法上支持泛型\",{\"1\":{\"171\":1}}],[\"即时编译后的代码等数据\",{\"1\":{\"136\":1,\"140\":1}}],[\"即是否有着合法的操作数\",{\"1\":{\"132\":1}}],[\"即\",{\"1\":{\"57\":1,\"65\":3,\"67\":2,\"166\":1,\"181\":2,\"760\":1}}],[\"即已做出的架构决策\",{\"1\":{\"57\":1}}],[\"来设值\",{\"1\":{\"470\":1}}],[\"来动态地构造\",{\"1\":{\"470\":1}}],[\"来防止更新丢失\",{\"1\":{\"454\":1}}],[\"来唤醒挂起的线程\",{\"1\":{\"252\":2}}],[\"来中断该线程\",{\"1\":{\"246\":1}}],[\"来调用\",{\"1\":{\"238\":1}}],[\"来解决这个问题\",{\"1\":{\"226\":1}}],[\"来将多条指令重叠执行\",{\"1\":{\"206\":1}}],[\"来使用\",{\"1\":{\"158\":1}}],[\"来自\",{\"1\":{\"115\":1}}],[\"来控制\",{\"1\":{\"97\":1}}],[\"来构建一组进程和任务\",{\"1\":{\"69\":1}}],[\"来定义通用机制或服务\",{\"1\":{\"59\":1}}],[\"来描述\",{\"1\":{\"57\":1}}],[\"来证实\",{\"1\":{\"57\":1}}],[\"来组织软件架构的描述\",{\"1\":{\"55\":1}}],[\"场景视图与过程视图的关联比较多\",{\"1\":{\"101\":1}}],[\"场景视图与逻辑视图关联比较多\",{\"1\":{\"101\":1}}],[\"场景的例子\",{\"0\":{\"93\":1}}],[\"场景的表示法和逻辑视图的表示法非常相似\",{\"1\":{\"91\":1}}],[\"场景的表示法\",{\"0\":{\"91\":1}}],[\"场景是最重要的需求的抽象\",{\"1\":{\"89\":1}}],[\"场景\",{\"0\":{\"89\":1},\"1\":{\"57\":1,\"89\":2,\"109\":1,\"111\":1}}],[\"场景驱动的方法\",{\"0\":{\"107\":1}}],[\"场景驱动\",{\"1\":{\"53\":1}}],[\"用来包装原有的类\",{\"1\":{\"768\":1}}],[\"用来表示一个bean的实例化是否依靠另一个bean的实例化\",{\"1\":{\"546\":1}}],[\"用处为selectone却返回多条记录时所抛出的异常\",{\"1\":{\"507\":1}}],[\"用\",{\"1\":{\"462\":1}}],[\"用以快速得到访问结果\",{\"1\":{\"437\":1}}],[\"用到的状态量都由参数中传入\",{\"1\":{\"230\":1}}],[\"用这些注解标明后编译器就会进行检查\",{\"1\":{\"179\":1}}],[\"用于记录qualifier\",{\"1\":{\"546\":1}}],[\"用于通过异常信息和异常类型进行封装异常为mybatis中的异常类型\",{\"1\":{\"506\":1}}],[\"用于加速查询\",{\"1\":{\"447\":1}}],[\"用于将一系列等同的\",{\"1\":{\"437\":1}}],[\"用于事务处理应用程序\",{\"1\":{\"437\":1}}],[\"用于比较是否是同一个对象\",{\"1\":{\"377\":1}}],[\"用于对代码进行说明\",{\"1\":{\"179\":1}}],[\"用于存储已被虚拟机加载的类信息\",{\"1\":{\"136\":1,\"140\":1}}],[\"用户就需要使用多个系统对象\",{\"1\":{\"529\":1}}],[\"用户加载相关的配置\",{\"1\":{\"521\":1}}],[\"用户只需要在接口上添加必要的注解即可\",{\"1\":{\"472\":1}}],[\"用户态核心态转换\",{\"1\":{\"222\":1}}],[\"用户无需知道对象内部的细节\",{\"1\":{\"157\":1}}],[\"用户创建项目权限控制\",{\"1\":{\"24\":1}}],[\"用况\",{\"1\":{\"115\":1}}],[\"用对应的脚本来描述场景\",{\"1\":{\"89\":1}}],[\"用例\",{\"1\":{\"57\":1,\"89\":1}}],[\"描述如何将类或者对象结合在一起形成更大的结构\",{\"1\":{\"765\":1}}],[\"描述在使用\",{\"1\":{\"181\":1}}],[\"描述注解是否可以被子类继承\",{\"1\":{\"181\":1}}],[\"描述注解保留的时间范围\",{\"1\":{\"181\":1}}],[\"描述注解的使用范围\",{\"1\":{\"181\":1}}],[\"描述的是\",{\"1\":{\"136\":1,\"137\":1}}],[\"描述\",{\"1\":{\"136\":1}}],[\"描述软件在其开发环境中的静态组织结构\",{\"1\":{\"57\":1}}],[\"描述软件部署到硬件的映射关系\",{\"1\":{\"57\":1}}],[\"描述设计的对象模型\",{\"1\":{\"57\":1}}],[\"物理子系统\",{\"1\":{\"111\":1}}],[\"物理蓝图的例子\",{\"0\":{\"87\":1}}],[\"物理蓝图的表示法\",{\"0\":{\"85\":1},\"1\":{\"85\":1,\"87\":1}}],[\"物理架构考虑系统的非功能需求\",{\"1\":{\"83\":1}}],[\"物理架构\",{\"0\":{\"83\":1},\"1\":{\"109\":1}}],[\"物理\",{\"1\":{\"57\":1,\"107\":1,\"111\":1}}],[\"物流管理\",{\"1\":{\"49\":1}}],[\"过滤器\",{\"1\":{\"71\":1}}],[\"过程视图\",{\"1\":{\"115\":1}}],[\"过程视图和物理视图也是类似的\",{\"1\":{\"99\":1}}],[\"过程视图的风格\",{\"0\":{\"71\":1}}],[\"过程视图的表示法\",{\"0\":{\"69\":1}}],[\"过程蓝图的例子\",{\"0\":{\"73\":1}}],[\"过程蓝图的表示法\",{\"1\":{\"69\":1}}],[\"过程架构可以在几个抽象层次上描述\",{\"1\":{\"67\":1}}],[\"过程架构考虑一些非功能需求\",{\"1\":{\"67\":1}}],[\"过程架构\",{\"0\":{\"67\":1},\"1\":{\"67\":1,\"109\":1}}],[\"过程\",{\"1\":{\"57\":1,\"107\":2,\"111\":1}}],[\"过早的划分软件\",{\"1\":{\"55\":1}}],[\"当数据准备就绪\",{\"1\":{\"737\":1}}],[\"当数据集比较大的时候\",{\"1\":{\"463\":1}}],[\"当所等待分组到达时\",{\"1\":{\"732\":1}}],[\"当所有非守护线程结束时\",{\"1\":{\"242\":1}}],[\"当容器启动时自动创建对应的数据\",{\"1\":{\"695\":1}}],[\"当按照某个规则\",{\"1\":{\"671\":1}}],[\"当mybatis读取缓存中数据出现问题时则会抛出该异常\",{\"1\":{\"507\":1}}],[\"当调用的方法是close\",{\"1\":{\"500\":1}}],[\"当有数据准备就绪之后再分配对应的线程去读取数据\",{\"1\":{\"735\":1}}],[\"当有需要查询的时候从缓存的连接中返回一个\",{\"1\":{\"500\":1}}],[\"当有其他线程需要读取时\",{\"1\":{\"213\":1}}],[\"当哈希表中不存在字段\",{\"1\":{\"462\":1}}],[\"当且仅当\",{\"1\":{\"462\":1}}],[\"当遇到需要优化的\",{\"1\":{\"456\":1}}],[\"当两个事务同时修改一行\",{\"1\":{\"454\":1}}],[\"当使用>\",{\"1\":{\"450\":1}}],[\"当使用面向对象设计方法时\",{\"1\":{\"57\":1}}],[\"当表中同时有几个列都是唯一的\",{\"1\":{\"449\":1}}],[\"当拼接的字段有\",{\"1\":{\"420\":1}}],[\"当读取\",{\"1\":{\"388\":1}}],[\"当第一个\",{\"1\":{\"386\":1}}],[\"当\",{\"1\":{\"379\":1,\"420\":1,\"507\":1}}],[\"当进行新增时\",{\"1\":{\"327\":1}}],[\"当集合元素数目大于\",{\"1\":{\"326\":1}}],[\"当树的元素数量小于\",{\"1\":{\"326\":1}}],[\"当前apiserver\",{\"1\":{\"731\":1}}],[\"当前pod\",{\"1\":{\"731\":1}}],[\"当前\",{\"1\":{\"645\":1}}],[\"当前代码未看到使用\",{\"1\":{\"507\":1}}],[\"当前连接\",{\"1\":{\"456\":1}}],[\"当前线程获得读锁\",{\"1\":{\"453\":1}}],[\"当前线程将自己修改的数据成功写入\",{\"1\":{\"256\":1}}],[\"当前月日\",{\"1\":{\"430\":1}}],[\"当前对象的属性也进行复制\",{\"1\":{\"387\":1}}],[\"当前对象的属性还是引用之前对象的值\",{\"1\":{\"387\":1}}],[\"当前对象需要实现\",{\"1\":{\"299\":1}}],[\"当前单列数据集合中移出指定的数据集合\",{\"1\":{\"299\":1}}],[\"当前单列数据集合是否为空\",{\"1\":{\"299\":1}}],[\"当前单列数据合计是否存在该数据对象\",{\"1\":{\"299\":1}}],[\"当某个类的整体定义为final时\",{\"1\":{\"264\":1}}],[\"当多个线程可以一起工作去解决某个问题时\",{\"1\":{\"250\":1}}],[\"当执行操作时\",{\"1\":{\"224\":1}}],[\"当其他线程的运行使得这个条件满足时\",{\"1\":{\"252\":1}}],[\"当其他线程去读取时\",{\"1\":{\"213\":1}}],[\"当其他的程序需要这个服务的时候\",{\"1\":{\"198\":1}}],[\"当线程1执行\",{\"1\":{\"204\":1}}],[\"当线程申请的大于虚拟机栈的深度就会抛出\",{\"1\":{\"136\":1,\"138\":1}}],[\"当服务的提供者提供了一种接口的实现之后\",{\"1\":{\"198\":1}}],[\"当cms进行gc失败时\",{\"1\":{\"148\":1}}],[\"当这一块的内存用完了\",{\"1\":{\"147\":1}}],[\"当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作\",{\"1\":{\"147\":1}}],[\"当一个表的读锁达到这个值后\",{\"1\":{\"453\":1}}],[\"当一个共享变量被volatile修饰时\",{\"1\":{\"213\":1}}],[\"当一个对象到gc\",{\"1\":{\"146\":1}}],[\"当一些控制线程因等待其它活动\",{\"1\":{\"97\":1}}],[\"当我们定义过程架构时\",{\"1\":{\"97\":1}}],[\"当输入了有效的数字序列后\",{\"1\":{\"93\":1}}],[\"当架构设计完成后\",{\"1\":{\"89\":1}}],[\"当然jmm是通过happens\",{\"1\":{\"214\":1}}],[\"当然虚拟机栈也可以动态的扩展\",{\"1\":{\"136\":1,\"138\":1}}],[\"当然\",{\"1\":{\"75\":1}}],[\"当只考虑在架构上有重大意义的条目时\",{\"1\":{\"61\":1}}],[\"当你仔细查看图中的方框和箭头时\",{\"1\":{\"55\":1}}],[\"逻辑\",{\"1\":{\"107\":1,\"111\":1}}],[\"逻辑蓝图的例子\",{\"0\":{\"65\":1}}],[\"逻辑蓝图的表示法\",{\"1\":{\"61\":1}}],[\"逻辑架构\",{\"0\":{\"59\":1},\"1\":{\"109\":1}}],[\"逻辑视图和开发视图可能几乎是一样的\",{\"1\":{\"103\":1}}],[\"逻辑视图和开发视图是很相似的\",{\"1\":{\"99\":1}}],[\"逻辑视图到过程视图的映射\",{\"1\":{\"97\":1}}],[\"逻辑视图的风格\",{\"0\":{\"63\":1}}],[\"逻辑视图的表示法是从\",{\"1\":{\"61\":1}}],[\"逻辑视图的表示法\",{\"0\":{\"61\":1}}],[\"逻辑视图主要用于功能需求\",{\"1\":{\"59\":1}}],[\"逻辑视图\",{\"1\":{\"57\":1}}],[\"逻辑依据\",{\"1\":{\"57\":1}}],[\"参考文档如下\",{\"1\":{\"731\":1}}],[\"参考文档\",{\"1\":{\"731\":1}}],[\"参考文献\",{\"0\":{\"115\":1},\"1\":{\"109\":1}}],[\"参考\",{\"0\":{\"711\":1,\"739\":1}}],[\"参数映射指的是对于\",{\"1\":{\"470\":1}}],[\"参数的\",{\"1\":{\"235\":2,\"236\":2}}],[\"参数个数或类型不一样\",{\"1\":{\"162\":1}}],[\"参数列表不一致\",{\"1\":{\"376\":1}}],[\"参数列表\",{\"1\":{\"376\":1}}],[\"参数列表与被重写方法的参数列表必须完全相同\",{\"1\":{\"161\":1}}],[\"参数列表和返回类型的方法\",{\"1\":{\"161\":1}}],[\"参见图4\",{\"1\":{\"91\":1}}],[\"参见图2\",{\"1\":{\"91\":1}}],[\"参见图1\",{\"1\":{\"57\":1}}],[\"参与设计存证平台设计和实现\",{\"1\":{\"48\":1}}],[\"参与可再生资源入库单流程的任务编写\",{\"1\":{\"48\":1}}],[\"参与个体户代办的任务编写\",{\"1\":{\"44\":1}}],[\"参与合同服务的迁移和优化\",{\"1\":{\"44\":1}}],[\"参与通知服务的迁移和优化\",{\"1\":{\"44\":1}}],[\"参与物联网服务的任务编写\",{\"1\":{\"44\":1}}],[\"处理自定义的\",{\"1\":{\"532\":1}}],[\"处理\",{\"1\":{\"532\":1}}],[\"处理通用注解\",{\"1\":{\"532\":1}}],[\"处理流\",{\"1\":{\"397\":1}}],[\"处理器会在读final域操作的前面插入一个loadload屏障\",{\"1\":{\"271\":1}}],[\"处理器可以改变语句对应机器指令的执行顺序\",{\"1\":{\"206\":1}}],[\"处理架构可以被看做是一组独立执行的通信程序\",{\"1\":{\"67\":1}}],[\"处理风格和美学\",{\"1\":{\"57\":1}}],[\"处理分解与组合\",{\"1\":{\"57\":1}}],[\"该如何进行判定今天是否可以介入\",{\"1\":{\"591\":1}}],[\"该索引可以用于全文搜索\",{\"1\":{\"446\":1}}],[\"该下标的数据是否是树\",{\"1\":{\"327\":1}}],[\"该元素在\",{\"1\":{\"327\":1}}],[\"该类的构造方法并未进行特殊的处理\",{\"1\":{\"308\":1}}],[\"该方法并为进行相关处理\",{\"1\":{\"543\":1}}],[\"该方法主要是注册相关的监听器\",{\"1\":{\"544\":1}}],[\"该方法主要是进行刷新前的属性设置\",{\"1\":{\"533\":1}}],[\"该方法主要有两步\",{\"1\":{\"537\":1}}],[\"该方法的主要是两个操作\",{\"1\":{\"534\":1}}],[\"该方法返回后\",{\"1\":{\"299\":1}}],[\"该方法只是对线程调度器的一个建议\",{\"1\":{\"244\":1}}],[\"该对象的final域全部已经初始化过\",{\"1\":{\"275\":1}}],[\"该代理任务可以让一个类的多个活动对象复用单个控制线程\",{\"1\":{\"97\":1}}],[\"该公式如下\",{\"1\":{\"57\":1}}],[\"该模型使用多个\",{\"1\":{\"53\":1}}],[\"运用一个公式对此进行了很恰当地表达\",{\"1\":{\"57\":1}}],[\"运行容器\",{\"1\":{\"722\":1}}],[\"运行至消亡的过程\",{\"1\":{\"395\":1}}],[\"运行时异常\",{\"1\":{\"393\":1}}],[\"运行时通过代码里标识的元数据动态处理\",{\"1\":{\"179\":1}}],[\"运行时动态处理\",{\"1\":{\"179\":1}}],[\"运行时多态有三个条件\",{\"1\":{\"159\":1}}],[\"运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定\",{\"1\":{\"159\":1}}],[\"运行时数据区\",{\"0\":{\"136\":1},\"1\":{\"136\":1}}],[\"运行高效\",{\"1\":{\"147\":1}}],[\"运行流程和工具\",{\"1\":{\"105\":1}}],[\"运行流水线\",{\"1\":{\"35\":1}}],[\"运行镜像\",{\"1\":{\"12\":1}}],[\"他的原理是对指定的目标类生成一个子类\",{\"1\":{\"350\":1}}],[\"他们是\",{\"1\":{\"55\":1}}],[\"他主机名显示的都为\",{\"1\":{\"18\":1,\"718\":1}}],[\"中介者模式\",{\"0\":{\"784\":1}}],[\"中间层\",{\"1\":{\"743\":1}}],[\"中可以通过\",{\"1\":{\"694\":1}}],[\"中军\",{\"1\":{\"661\":1,\"663\":1}}],[\"中衡设计\",{\"0\":{\"645\":1}}],[\"中信海直也快速拉升\",{\"1\":{\"645\":1}}],[\"中信海直\",{\"1\":{\"633\":1}}],[\"中广天择开盘非常差的情况下掌阅科技也不短下杀\",{\"1\":{\"580\":1}}],[\"中广天择开出这个差的情况下\",{\"1\":{\"577\":1}}],[\"中广天择\",{\"1\":{\"577\":1,\"580\":1}}],[\"中含有多个\",{\"1\":{\"530\":1}}],[\"中需要类型转化时\",{\"1\":{\"507\":1}}],[\"中还支持全文本\",{\"1\":{\"446\":1}}],[\"中等为\",{\"1\":{\"430\":1}}],[\"中等率\",{\"1\":{\"430\":2}}],[\"中使用它\",{\"1\":{\"406\":1}}],[\"中提供了两套的\",{\"1\":{\"398\":1}}],[\"中运行\",{\"1\":{\"343\":1}}],[\"中不存在哈希冲突则放置到对应的下标上\",{\"1\":{\"327\":1}}],[\"中大部分的类都是属于线程兼容的\",{\"1\":{\"219\":1}}],[\"中最小的执行单位是线程\",{\"1\":{\"139\":1}}],[\"中才能运行\",{\"1\":{\"124\":1}}],[\"中翻译为\",{\"1\":{\"115\":1}}],[\"中的进程没有影响\",{\"1\":{\"696\":1}}],[\"中的系统资源只会影响当前\",{\"1\":{\"696\":1}}],[\"中的任务的可用内存进行限制\",{\"1\":{\"694\":1}}],[\"中的任务\",{\"1\":{\"694\":1}}],[\"中的任务访问设备\",{\"1\":{\"694\":1}}],[\"中的任务分配独立的\",{\"1\":{\"694\":1}}],[\"中的任务占用\",{\"1\":{\"694\":1}}],[\"中的第二个或者后面的查询语句\",{\"1\":{\"456\":1}}],[\"中的配置文件\",{\"1\":{\"198\":1}}],[\"中的类装载器完成的\",{\"1\":{\"124\":1}}],[\"中的所有类\",{\"1\":{\"124\":1}}],[\"中的\",{\"0\":{\"397\":1,\"406\":1},\"1\":{\"105\":1}}],[\"中继线\",{\"1\":{\"65\":1}}],[\"中\",{\"1\":{\"55\":1,\"243\":1,\"434\":1,\"437\":1,\"462\":3,\"472\":1,\"696\":1,\"746\":1,\"772\":1}}],[\"中英文对照\",{\"0\":{\"52\":1},\"1\":{\"115\":1}}],[\"在代理模式中\",{\"1\":{\"772\":1}}],[\"在代理模式\",{\"1\":{\"772\":1}}],[\"在加载类的时候就已经开始初始化\",{\"1\":{\"759\":1}}],[\"在添加\",{\"1\":{\"731\":1}}],[\"在容器停止是该目录不存在\",{\"1\":{\"695\":1}}],[\"在单向的地方不可逆向导通\",{\"1\":{\"678\":1}}],[\"在图结构中常常将结点称为顶点\",{\"1\":{\"677\":1}}],[\"在插入数据的时候会进行平衡\",{\"1\":{\"671\":1}}],[\"在多线程阻塞队列管理中非常适用\",{\"1\":{\"668\":1}}],[\"在另一端取出元素\",{\"1\":{\"668\":1}}],[\"在华策传媒\",{\"1\":{\"577\":1}}],[\"在本类中\",{\"1\":{\"546\":1}}],[\"在xml中需要手动指定依赖注入对象\",{\"1\":{\"546\":1}}],[\"在普通工厂中\",{\"1\":{\"535\":1}}],[\"在获取插件信息时候会抛出该异常\",{\"1\":{\"507\":1}}],[\"在建造对象失败时会抛出该异常\",{\"1\":{\"507\":1}}],[\"在给connection开启事务时若失败则会抛出该异常\",{\"1\":{\"507\":1}}],[\"在初始化数据源时若出现错误则会抛出该异常\",{\"1\":{\"507\":1}}],[\"在结果转换为对应类型的对象时\",{\"1\":{\"507\":1}}],[\"在同一个命名空间下保持唯一\",{\"1\":{\"479\":1}}],[\"在允许的时间间隔内\",{\"1\":{\"472\":1}}],[\"在对结果集的处理中\",{\"1\":{\"471\":1}}],[\"在对象存活率较高时就要执行较多的复制操作\",{\"1\":{\"147\":1}}],[\"在对象间的交互涉及不止一个控制线程时\",{\"1\":{\"101\":1}}],[\"在恢复大的数据集的时候\",{\"1\":{\"463\":1}}],[\"在有序集合中计算指定字典区间内成员数量\",{\"1\":{\"462\":1}}],[\"在此表中只查询一条记录\",{\"1\":{\"456\":1}}],[\"在进行的线程\",{\"1\":{\"456\":1}}],[\"在进行迭代其遍历时会缓存当前的\",{\"1\":{\"404\":1}}],[\"在读数据之前加锁\",{\"1\":{\"454\":1}}],[\"在提交前另一个事务读取了数据\",{\"1\":{\"454\":1}}],[\"在更新的时候让别的事务无法更新\",{\"1\":{\"454\":1}}],[\"在事务开始和完成时\",{\"1\":{\"454\":1}}],[\"在创建新\",{\"1\":{\"463\":1}}],[\"在创建一个\",{\"1\":{\"449\":1}}],[\"在创建索引的时候\",{\"1\":{\"434\":1}}],[\"在为使用多字节字符集的列指定前缀长度时一定要加以考虑\",{\"1\":{\"446\":1}}],[\"在内存中\",{\"1\":{\"437\":1}}],[\"在需要快速定位记录和其他类似数据的环境下\",{\"1\":{\"437\":1}}],[\"在并发条件下要求数据的一致性\",{\"1\":{\"437\":1}}],[\"在定义\",{\"1\":{\"435\":1}}],[\"在构造函数内对一个\",{\"1\":{\"388\":1}}],[\"在构造函数内对一个final修饰的对象的成员域的写入\",{\"1\":{\"273\":1}}],[\"在编译阶段会存入常量池中\",{\"1\":{\"388\":1}}],[\"在集合中会使用到对象的\",{\"1\":{\"378\":1}}],[\"在1\",{\"1\":{\"351\":1}}],[\"在子类中采用方法拦截的技术拦截所有父类方法的调用并顺势织入横切逻辑\",{\"1\":{\"344\":1}}],[\"在删除的过程中会校验缓存的modcount是否和当前的一致\",{\"1\":{\"305\":1}}],[\"在每个\",{\"1\":{\"288\":4}}],[\"在不改变正确语义的前提下\",{\"1\":{\"288\":1}}],[\"在不创建新的类型的情况下\",{\"1\":{\"163\":1}}],[\"在程序运行时\",{\"1\":{\"285\":1}}],[\"在程序前面的操作先行发生于后面的操作\",{\"1\":{\"211\":1,\"388\":1}}],[\"在son中的test\",{\"1\":{\"265\":1}}],[\"在许多场景中\",{\"1\":{\"257\":1}}],[\"在线程中调用另一个线程的\",{\"1\":{\"251\":1}}],[\"在一般情况下\",{\"1\":{\"463\":1}}],[\"在一个线程中\",{\"1\":{\"271\":1}}],[\"在一个线程内\",{\"1\":{\"211\":1,\"388\":1}}],[\"在一定时间之后会被系统自动唤醒\",{\"1\":{\"236\":1}}],[\"在调用的时候不需要做额外的保障措施\",{\"1\":{\"218\":1}}],[\"在执行一些操作时会触发执行的\",{\"1\":{\"438\":1}}],[\"在执行程序时为了提高性能\",{\"1\":{\"206\":1}}],[\"在执行字节码时\",{\"1\":{\"124\":1}}],[\"在cpu寄存器中执行\",{\"1\":{\"205\":1}}],[\"在模块化设计中这个机制尤其重要\",{\"1\":{\"198\":1}}],[\"在使用时候\",{\"1\":{\"181\":1}}],[\"在java里面\",{\"1\":{\"214\":1}}],[\"在java语言中\",{\"1\":{\"146\":1}}],[\"在jdk1\",{\"1\":{\"351\":1}}],[\"在jdk\",{\"1\":{\"181\":2}}],[\"在接口上定义泛型\",{\"1\":{\"167\":1}}],[\"在新生代中\",{\"1\":{\"147\":1}}],[\"在标记完成后统一回收掉所有被标记的对象\",{\"1\":{\"147\":1}}],[\"在运行过程中内存申请\",{\"1\":{\"140\":1}}],[\"在虚拟机启动时候创建\",{\"1\":{\"136\":1,\"141\":1}}],[\"在解析阶段\",{\"1\":{\"134\":1}}],[\"在准备阶段\",{\"1\":{\"133\":1}}],[\"在其他事情中\",{\"1\":{\"109\":1}}],[\"在真实的目标环境下\",{\"1\":{\"107\":1}}],[\"在4个阶段结束时\",{\"1\":{\"105\":1}}],[\"在哪些类被使用这一方面\",{\"1\":{\"101\":1}}],[\"在几个类之间共享\",{\"1\":{\"97\":1}}],[\"在架构的逻辑视图中\",{\"1\":{\"97\":1}}],[\"在这个基础设施之上\",{\"1\":{\"81\":1}}],[\"在这个层次的设计上\",{\"1\":{\"61\":1}}],[\"在最高层次上\",{\"1\":{\"67\":1}}],[\"在选择阶段\",{\"1\":{\"65\":1}}],[\"在\",{\"1\":{\"55\":1,\"101\":1,\"111\":1,\"392\":1,\"731\":1}}],[\"在当前安装目录下\",{\"1\":{\"25\":1}}],[\"客户端不应该依赖它不需要的接口\",{\"1\":{\"754\":1}}],[\"客户端需要缓存路由表信息\",{\"1\":{\"463\":1}}],[\"客户端连接之后\",{\"1\":{\"456\":1}}],[\"客户端\",{\"1\":{\"71\":1}}],[\"客户\",{\"1\":{\"55\":2,\"111\":1}}],[\"像数据工程\",{\"1\":{\"55\":1}}],[\"这么做就可以节省出大量的线程资源出来\",{\"1\":{\"735\":1}}],[\"这么做的目的就是\",{\"1\":{\"130\":1}}],[\"这么做的目的就是为了优先加载\",{\"1\":{\"129\":1}}],[\"这么多的线程不断调用recvfrom\",{\"1\":{\"735\":1}}],[\"这两拨进程根本就感觉不到对方的存在\",{\"1\":{\"696\":1}}],[\"这两个操作之间不能重排序\",{\"1\":{\"388\":2}}],[\"这两个操作是不能被重排序的\",{\"1\":{\"273\":1}}],[\"这两个视图的差距也就越大\",{\"1\":{\"99\":2}}],[\"这让\",{\"1\":{\"694\":1}}],[\"这属于\",{\"1\":{\"577\":1}}],[\"这比操作不应该\",{\"1\":{\"568\":1}}],[\"这时我们就可以使用qualifier属性来设置加载指定bean名称的bean\",{\"1\":{\"546\":1}}],[\"这时由于并发用户特别多\",{\"1\":{\"464\":1}}],[\"这是传统的传递\",{\"1\":{\"467\":1}}],[\"这是因为\",{\"1\":{\"252\":1}}],[\"这对于诸如数据仓储等\",{\"1\":{\"437\":1}}],[\"这条禁止重排序规则就是针对这些处理器而设定的\",{\"1\":{\"271\":1}}],[\"这就是自旋锁\",{\"1\":{\"257\":1}}],[\"这就是可见性问题\",{\"1\":{\"204\":1}}],[\"这使得加载和存储操作看上去可能是在乱序执行\",{\"1\":{\"206\":1}}],[\"这类应用尤其重视服务的响应速度\",{\"1\":{\"148\":1}}],[\"这样容器在查找自动装配对象时\",{\"1\":{\"546\":1}}],[\"这样就可以只需要一个或几个线程就可以完成数据状态询问的操作\",{\"1\":{\"735\":1}}],[\"这样就可以很快找到集合中的对应元素\",{\"1\":{\"675\":1}}],[\"这样就可以脱离\",{\"1\":{\"468\":1}}],[\"这样就可以根据各个年代的特点采用最适当的收集算法\",{\"1\":{\"147\":1}}],[\"这样即使出了问题你也可以根据需求恢复到不同版本的数据集\",{\"1\":{\"463\":1}}],[\"这样的列集称为最左前缀\",{\"1\":{\"449\":1}}],[\"这样的语句放入这个文件中\",{\"1\":{\"435\":1}}],[\"这样的小块\",{\"1\":{\"75\":1}}],[\"这样插入记录后\",{\"1\":{\"434\":1}}],[\"这样存储的优点是占用的空间相对较少\",{\"1\":{\"433\":1}}],[\"这样每个记录都是固定长度的\",{\"1\":{\"433\":1}}],[\"这样能保证任何情况下对long和double的单次读\",{\"1\":{\"283\":1}}],[\"这样\",{\"1\":{\"229\":1}}],[\"这部分常量信息是\",{\"1\":{\"135\":1}}],[\"这里第二次买点有点急躁\",{\"1\":{\"568\":1}}],[\"这里不会存放构造函数相关的参数值\",{\"1\":{\"546\":1}}],[\"这里代码\",{\"1\":{\"540\":1}}],[\"这里会优先执行配置系统自带的\",{\"1\":{\"538\":1}}],[\"这里主要的功能是执行\",{\"1\":{\"538\":1}}],[\"这里主要是记录了类的相关信息\",{\"1\":{\"532\":1}}],[\"这里通过注解进行构建\",{\"1\":{\"528\":1}}],[\"这里并没有特别需要说的东西\",{\"1\":{\"489\":1}}],[\"这里是用户id\",{\"1\":{\"482\":1}}],[\"这里是通过\",{\"1\":{\"130\":1}}],[\"这里有包括两个过程\",{\"1\":{\"470\":1}}],[\"这里判断对象是否存在也是进行数据遍历\",{\"1\":{\"309\":1}}],[\"这里的异步是指多个任务的执行互不干扰\",{\"1\":{\"241\":1}}],[\"这里就不能再使用互斥同步来保证了\",{\"1\":{\"224\":1}}],[\"这里讨论的是概念模型\",{\"1\":{\"222\":1}}],[\"这里支持多种认证方式\",{\"1\":{\"24\":1}}],[\"这既是一个纸面上的工作\",{\"1\":{\"89\":1}}],[\"这三个任务分别是\",{\"1\":{\"73\":1}}],[\"这组硬件资源通过本地网络或者广域网连接起来\",{\"1\":{\"67\":1}}],[\"这个就是io复用模型的思路\",{\"1\":{\"735\":1}}],[\"这个bean定义的资源\",{\"1\":{\"546\":1}}],[\"这个容器就是\",{\"1\":{\"529\":1}}],[\"这个系统变量的初始值是\",{\"1\":{\"435\":1}}],[\"这个规则仅仅是针对处理器\",{\"1\":{\"271\":1}}],[\"这个规则的实现主要包含了两个方面\",{\"1\":{\"270\":1}}],[\"这个屏障可以禁止处理器把final域的写重排序到构造函数之外\",{\"1\":{\"270\":1}}],[\"这个文件里的内容就是这个接口的具体的实现类\",{\"1\":{\"198\":1}}],[\"这个收集器是在jdk\",{\"1\":{\"148\":1}}],[\"这个装载工作是由\",{\"1\":{\"124\":1}}],[\"这个分析过程可能会发现一些错误或者潜在的改善\",{\"1\":{\"107\":1}}],[\"这个方法对项目来说还有其它的优点\",{\"1\":{\"105\":1}}],[\"这个视图相对其它几个视图来说是冗余的\",{\"1\":{\"89\":1}}],[\"这个基础设施是跨产品线通用的\",{\"1\":{\"81\":1}}],[\"这个开发架构相应的逻辑架构如图3b所示\",{\"1\":{\"81\":1}}],[\"这个终端进程受其输入队列中的消息驱动\",{\"1\":{\"73\":1}}],[\"这个类有很多满足不同接口的子类\",{\"1\":{\"65\":1}}],[\"这个问题已经被一些作者提及\",{\"1\":{\"55\":1}}],[\"这种模式创建了一个装饰类\",{\"1\":{\"768\":1}}],[\"这种情况下应用就需要创建几十上百万的线程去读取数据\",{\"1\":{\"735\":1}}],[\"这种情况会持续1秒\",{\"1\":{\"463\":1}}],[\"这种方式称为轮询\",{\"1\":{\"734\":1}}],[\"这种方式创建的表的表结构仍然保存在\",{\"1\":{\"434\":1}}],[\"这种方式创建的表的表结构保存在\",{\"1\":{\"434\":1}}],[\"这种方法允许在不修改源代码的情况下对映射做大量的改动\",{\"1\":{\"85\":1}}],[\"这种存储方式的优点是存储非常迅速\",{\"1\":{\"433\":1}}],[\"这种等待方式\",{\"1\":{\"254\":1}}],[\"这种代码也叫做纯代码\",{\"1\":{\"230\":1}}],[\"这种处理方式的广泛应用使得很多\",{\"1\":{\"229\":1}}],[\"这种乐观的并发策略的许多实现都不需要将线程阻塞\",{\"1\":{\"224\":1}}],[\"这种参数类型可以用在类\",{\"1\":{\"163\":1}}],[\"这种迭代方法也使得需求可以被优化\",{\"1\":{\"105\":1}}],[\"这种集群一直进行下去\",{\"1\":{\"97\":1}}],[\"这种指定和实施过程架构的方法的优点就是\",{\"1\":{\"69\":1}}],[\"这种表示法是非常简单的\",{\"1\":{\"61\":1}}],[\"这种分解不仅仅是为了功能分析\",{\"1\":{\"59\":1}}],[\"这些系统调用返回0表示无误\",{\"1\":{\"746\":1}}],[\"这些写入操作以\",{\"1\":{\"463\":1}}],[\"这些操作实际上是对内部的实际的\",{\"1\":{\"436\":1}}],[\"这些\",{\"1\":{\"436\":1}}],[\"这些空格在返回给应用之前已经去掉\",{\"1\":{\"433\":1}}],[\"这些屏障可以防止编译器和处理器在处理\",{\"1\":{\"388\":1}}],[\"这些方法包括\",{\"1\":{\"207\":1}}],[\"这些方法包括birman等人提出的方法\",{\"1\":{\"97\":1}}],[\"这些重排序都可能会导致多线程程序出现内存可见性问题\",{\"1\":{\"206\":1}}],[\"这些抽象的形式是\",{\"1\":{\"59\":1}}],[\"这些目的包括\",{\"1\":{\"57\":1}}],[\"这些用例或场景构成了第五个视图\",{\"1\":{\"57\":1}}],[\"这些过设计包括\",{\"1\":{\"55\":1}}],[\"有人就提出了一个思路\",{\"1\":{\"735\":1}}],[\"有以下五种\",{\"1\":{\"732\":1}}],[\"有以下的不同点\",{\"1\":{\"454\":1}}],[\"有向图\",{\"0\":{\"678\":1}}],[\"有色金属\",{\"0\":{\"616\":1}}],[\"有很强的灵活性和扩展性\",{\"1\":{\"470\":1}}],[\"有效的解决了redis在分布式方面的需求\",{\"1\":{\"463\":1}}],[\"有效地调节性能\",{\"1\":{\"157\":1}}],[\"有序集成员按分数值递减\",{\"1\":{\"462\":1}}],[\"有序集合中对指定成员的分数加上增量\",{\"1\":{\"462\":1}}],[\"有序性实现\",{\"0\":{\"286\":1}}],[\"有序性\",{\"0\":{\"206\":1,\"214\":1},\"1\":{\"214\":1}}],[\"有序性问题\",{\"1\":{\"202\":1}}],[\"有哪些方法\",{\"0\":{\"401\":1}}],[\"有哪些用法\",{\"0\":{\"388\":1}}],[\"有缓存会更多\",{\"1\":{\"399\":1}}],[\"有相同的作用和目的\",{\"1\":{\"398\":1}}],[\"有\",{\"1\":{\"392\":1,\"538\":1}}],[\"有什么区别\",{\"0\":{\"391\":1}}],[\"有没有可能两个对象不等\",{\"0\":{\"386\":1}}],[\"有丰富的类库\",{\"1\":{\"371\":1}}],[\"有三个构造方法\",{\"1\":{\"302\":1}}],[\"有三种使用线程的方法\",{\"1\":{\"238\":1}}],[\"有限制类型擦除\",{\"1\":{\"173\":2}}],[\"有一些其它视图集已经被提出并经过讨论\",{\"1\":{\"111\":1}}],[\"有时多个类只有一个代理因为它们的操作调用频率较低或者它们必须按顺序执行的\",{\"1\":{\"97\":1}}],[\"有时一个类有多个代理以增加其吞吐量\",{\"1\":{\"97\":1}}],[\"有时软件架构会受到系统设计者过设计的负面影响\",{\"1\":{\"55\":1}}],[\"有多种风格都适合于过程视图\",{\"1\":{\"71\":1}}],[\"有些地方实在无法确定原文的意思\",{\"1\":{\"52\":1}}],[\"架构比较新\",{\"1\":{\"463\":1}}],[\"架构目标和约束\",{\"1\":{\"109\":1}}],[\"架构设计期间产生的资料包含在两个文档中\",{\"1\":{\"109\":1}}],[\"架构的文档化\",{\"0\":{\"109\":1}}],[\"架构的描述\",{\"1\":{\"57\":1}}],[\"架构本身变得稳固\",{\"1\":{\"107\":1}}],[\"架构原型\",{\"1\":{\"107\":1}}],[\"架构草图已经到位\",{\"1\":{\"107\":1}}],[\"架构被原型化\",{\"1\":{\"105\":1}}],[\"架构描述时可以将没什么用的视图省略掉\",{\"1\":{\"103\":1}}],[\"架构涉及的主要类\",{\"1\":{\"65\":1}}],[\"架构师也可以为每种视图选择某种架构风格\",{\"1\":{\"57\":1}}],[\"架构模型\",{\"0\":{\"57\":1}}],[\"架构需要的是单一的风格吗\",{\"1\":{\"55\":1}}],[\"架构蓝图\",{\"0\":{\"52\":1},\"1\":{\"115\":1}}],[\"箭头表达的是编译依赖关系吗\",{\"1\":{\"55\":1}}],[\"或返回\",{\"1\":{\"746\":1}}],[\"或在掌阅传媒涨停的情况下介入他们\",{\"1\":{\"580\":1}}],[\"或连接子句中指定的列\",{\"1\":{\"449\":1}}],[\"或其子类\",{\"1\":{\"374\":1}}],[\"或\",{\"1\":{\"57\":1,\"97\":1,\"147\":1,\"254\":1,\"435\":1,\"436\":1,\"442\":1,\"722\":2}}],[\"或视角的模型来描述软件架构\",{\"1\":{\"57\":1}}],[\"或者多个连续ip\",{\"1\":{\"705\":1,\"706\":1,\"707\":1,\"708\":1}}],[\"或者也进行数据缓存\",{\"1\":{\"464\":1}}],[\"或者更新已存在成员的分数\",{\"1\":{\"462\":1}}],[\"或者等很久才会获得锁\",{\"1\":{\"259\":1}}],[\"或者产生了异常而结束\",{\"1\":{\"237\":1}}],[\"或者是此类型的父类\",{\"1\":{\"169\":1}}],[\"或者是此类型的子类\",{\"1\":{\"169\":1}}],[\"或者构造函数\",{\"1\":{\"162\":1}}],[\"或者比被重写方法声明的更广泛的强制性异常\",{\"1\":{\"161\":1}}],[\"或者有时需要进行重大的架构调整以适应这些场景\",{\"1\":{\"107\":1}}],[\"或者存在必须被消减的重大技术风险的功能\",{\"1\":{\"107\":1}}],[\"或者使用频率最高的功能\",{\"1\":{\"107\":1}}],[\"或者用例\",{\"1\":{\"107\":1}}],[\"或者一个分布式系统中多节点的优势\",{\"1\":{\"97\":1}}],[\"或者数据管理系统这样的现成产品变化的影响\",{\"1\":{\"81\":1}}],[\"或者提升可用性\",{\"1\":{\"67\":1}}],[\"或者\",{\"1\":{\"59\":1,\"252\":2,\"439\":2,\"442\":1,\"450\":1,\"456\":4,\"468\":1}}],[\"或者开发策略和团队组织\",{\"1\":{\"55\":1}}],[\"或者运行时的效率\",{\"1\":{\"55\":1}}],[\"或者过分强调开发的某个方面\",{\"1\":{\"55\":1}}],[\"或者直接在脚本中直接通过\",{\"1\":{\"31\":1}}],[\"或是访问其它某些主动对象\",{\"1\":{\"97\":1}}],[\"或是数据流吗\",{\"1\":{\"55\":1}}],[\"或是控制流吗\",{\"1\":{\"55\":1}}],[\"或是功能的逻辑分组\",{\"1\":{\"55\":1}}],[\"或是物理计算机吗\",{\"1\":{\"55\":1}}],[\"或是源代码块吗\",{\"1\":{\"55\":1}}],[\"视图模式总结\",{\"1\":{\"111\":1}}],[\"视图模型的存在归功于\",{\"1\":{\"113\":1}}],[\"视图模型已经成功使用在几个大型项目中\",{\"1\":{\"111\":1}}],[\"视图模型\",{\"1\":{\"57\":1}}],[\"视图之间的关联\",{\"0\":{\"95\":1}}],[\"视图非常的\",{\"1\":{\"57\":1}}],[\"视图\",{\"1\":{\"53\":1,\"55\":1,\"57\":4,\"103\":1,\"109\":1,\"111\":1}}],[\"迭代器模式\",{\"0\":{\"778\":1}}],[\"迭代有序集合中的元素\",{\"1\":{\"462\":1}}],[\"迭代集合中的元素\",{\"1\":{\"462\":1}}],[\"迭代哈希表中的键值对\",{\"1\":{\"462\":1}}],[\"迭代周期最长可能是6到9个月\",{\"1\":{\"107\":1}}],[\"迭代周期可能是2到3周\",{\"1\":{\"107\":1}}],[\"迭代过程\",{\"0\":{\"105\":1}}],[\"迭代开发流程来设计这些视图\",{\"1\":{\"53\":1}}],[\"迭代划分\",{\"1\":{\"48\":1}}],[\"五个视图被逐一描述\",{\"1\":{\"53\":1}}],[\"等所有操作都完成之后\",{\"1\":{\"737\":1}}],[\"等效于单例\",{\"1\":{\"546\":1}}],[\"等使用完毕不再进行销毁而是再次放回到缓存中\",{\"1\":{\"500\":1}}],[\"等会抛出\",{\"1\":{\"247\":1}}],[\"等方法进入\",{\"1\":{\"236\":1}}],[\"等方法都使用了\",{\"1\":{\"225\":1}}],[\"等待一个子进程退出\",{\"1\":{\"746\":1}}],[\"等待内核把数据准备好返回给线程\",{\"1\":{\"733\":1}}],[\"等待数据准备好\",{\"1\":{\"732\":1}}],[\"等待队列中除第一个线程以外的所有线程都会阻塞\",{\"1\":{\"259\":1}}],[\"等待其它线程显式地唤醒\",{\"1\":{\"235\":1}}],[\"等待获取一个排它锁\",{\"1\":{\"234\":1}}],[\"等\",{\"1\":{\"219\":1,\"431\":1,\"446\":1,\"456\":1,\"537\":1,\"743\":1}}],[\"等人在他们的\",{\"1\":{\"67\":1}}],[\"等等来实现对数据库的操作\",{\"1\":{\"468\":1}}],[\"等等\",{\"1\":{\"53\":1,\"59\":1,\"65\":1,\"67\":2,\"105\":1,\"111\":2}}],[\"等相应工具\",{\"1\":{\"3\":1}}],[\"开闭原则\",{\"0\":{\"750\":1}}],[\"开盘沪锡大跌\",{\"1\":{\"634\":1}}],[\"开盘的时候亚振家居直接一字板\",{\"1\":{\"596\":1}}],[\"开销和加锁时间介于表级锁和行级锁之间\",{\"1\":{\"452\":1}}],[\"开销大\",{\"1\":{\"452\":1}}],[\"开销小\",{\"1\":{\"452\":1}}],[\"开放定址法\",{\"1\":{\"386\":1}}],[\"开始的\",{\"1\":{\"420\":1}}],[\"开始位置\",{\"1\":{\"368\":1}}],[\"开始和结束的位置进行创建\",{\"1\":{\"358\":1}}],[\"开始事务\",{\"1\":{\"342\":2,\"345\":2}}],[\"开始\",{\"1\":{\"65\":1,\"107\":1}}],[\"开始安装\",{\"1\":{\"22\":1}}],[\"开发和物理4个蓝图上\",{\"1\":{\"107\":1}}],[\"开发视图的风格\",{\"0\":{\"79\":1}}],[\"开发视图是需求分配的基础\",{\"1\":{\"75\":1}}],[\"开发环境\",{\"1\":{\"77\":1}}],[\"开发蓝图的表示法\",{\"0\":{\"77\":1},\"1\":{\"77\":1}}],[\"开发架构的例子\",{\"0\":{\"81\":1}}],[\"开发架构考虑了开发的简易性\",{\"1\":{\"75\":1}}],[\"开发架构聚焦于软件模块在实际的开发环境中如何组织\",{\"1\":{\"75\":1}}],[\"开发架构\",{\"0\":{\"75\":1},\"1\":{\"109\":1}}],[\"开发\",{\"1\":{\"57\":1,\"107\":1,\"111\":1}}],[\"开发人员\",{\"1\":{\"53\":1,\"111\":2}}],[\"大写字母\",{\"1\":{\"722\":1}}],[\"大致查询的速度就变得特别慢\",{\"1\":{\"671\":1}}],[\"大量的特性和大量的服务\",{\"1\":{\"744\":1}}],[\"大量的线程用来去读取数据了\",{\"1\":{\"735\":1}}],[\"大量的修饰并没什么作用\",{\"1\":{\"61\":1}}],[\"大量进行增删改查\",{\"1\":{\"666\":1}}],[\"大盘\",{\"0\":{\"612\":1,\"625\":1,\"631\":1,\"642\":1}}],[\"大盘情况\",{\"0\":{\"604\":1,\"619\":1}}],[\"大批量插入数据\",{\"1\":{\"459\":1}}],[\"大部分使用消费队列的架构模式\",{\"1\":{\"229\":1}}],[\"大部分情况下\",{\"1\":{\"226\":1}}],[\"大的类被分解为多个包\",{\"1\":{\"99\":1}}],[\"大型系统的物理蓝图可能会变得非常凌乱\",{\"1\":{\"85\":1}}],[\"大白白\",{\"1\":{\"52\":1}}],[\"大连民族大学\",{\"1\":{\"3\":1}}],[\"翻译为\",{\"1\":{\"115\":5}}],[\"翻译\",{\"0\":{\"52\":1},\"1\":{\"52\":1,\"105\":1,\"115\":1}}],[\"招投标\",{\"1\":{\"49\":1}}],[\"其它p\",{\"1\":{\"673\":1}}],[\"其它线程调用\",{\"1\":{\"254\":1}}],[\"其它线程会调用\",{\"1\":{\"252\":1}}],[\"其到叶子点树null指针的每条路径都包含相同数目的黑节点\",{\"1\":{\"672\":1}}],[\"其内部是通过创建xmlconfigbuilder对象\",{\"1\":{\"483\":1}}],[\"其实还有一个原因是在于\",{\"1\":{\"468\":1}}],[\"其次是要确保表的数据可以恢复\",{\"1\":{\"437\":1}}],[\"其核心思想就是解耦\",{\"1\":{\"198\":1}}],[\"其他\",{\"0\":{\"787\":1},\"1\":{\"462\":1}}],[\"其他用户不能读锁和写锁\",{\"1\":{\"453\":1}}],[\"其他线程仍然可以读\",{\"1\":{\"453\":1}}],[\"其他的引擎都是非事务安全表\",{\"1\":{\"431\":1}}],[\"其他函数\",{\"0\":{\"424\":1}}],[\"其他不同厂商可以针对同一接口做出不同的实现\",{\"1\":{\"198\":1}}],[\"其他功能如下\",{\"1\":{\"49\":1}}],[\"其对应的原生态类型\",{\"1\":{\"171\":1}}],[\"其结果是将类\",{\"1\":{\"97\":1}}],[\"其中p\",{\"1\":{\"673\":1}}],[\"其中逻辑较好的有华策传媒\",{\"1\":{\"580\":1}}],[\"其中\",{\"1\":{\"341\":1,\"431\":1,\"434\":1,\"450\":1,\"677\":1}}],[\"其中最重要的一个应用实例就是经典\",{\"1\":{\"229\":1}}],[\"其中的\",{\"1\":{\"225\":1}}],[\"其中有可能会含有语义错误\",{\"1\":{\"132\":1}}],[\"其中也添加了增添其他功能\",{\"1\":{\"49\":1}}],[\"其中主要有以下功能以此解决上述问题\",{\"1\":{\"49\":1}}],[\"其中一个\",{\"1\":{\"34\":2}}],[\"实践\",{\"0\":{\"464\":1}}],[\"实例\",{\"0\":{\"342\":1,\"345\":1},\"1\":{\"468\":1}}],[\"实例化一个对象其实可以分为三个步骤\",{\"1\":{\"279\":1}}],[\"实现容器化的资源限制和统计\",{\"1\":{\"692\":1}}],[\"实现内核资源的隔离\",{\"1\":{\"692\":1}}],[\"实现异步删除缓存\",{\"1\":{\"464\":1}}],[\"实现统一缓存处理\",{\"1\":{\"464\":1}}],[\"实现多粒度锁机制\",{\"1\":{\"454\":1}}],[\"实现对象的浅复制\",{\"1\":{\"401\":1}}],[\"实现了\",{\"1\":{\"381\":2}}],[\"实现创建对象\",{\"1\":{\"355\":1}}],[\"实现子类\",{\"1\":{\"301\":1}}],[\"实现原理\",{\"0\":{\"347\":1},\"1\":{\"300\":1}}],[\"实现类名称\",{\"1\":{\"300\":1}}],[\"实现类比较\",{\"0\":{\"300\":1}}],[\"实现可见性\",{\"0\":{\"280\":1}}],[\"实现可再生资源回收整个过程的管理\",{\"1\":{\"49\":1}}],[\"实现的\",{\"1\":{\"249\":2}}],[\"实现接口会更好一些\",{\"1\":{\"239\":1}}],[\"实现接口\",{\"0\":{\"239\":1}}],[\"实现gc线程和应用线程并发工作\",{\"1\":{\"148\":1}}],[\"实现简单\",{\"1\":{\"147\":1}}],[\"实现\",{\"1\":{\"107\":1,\"238\":3,\"285\":1,\"468\":1,\"539\":1}}],[\"实现更高的系统可用性\",{\"1\":{\"97\":1}}],[\"实现一个带有虚拟过程负载的\",{\"1\":{\"67\":1}}],[\"实验中描述的那样\",{\"1\":{\"67\":1}}],[\"实际是创建了\",{\"1\":{\"449\":1}}],[\"实际的应用一般不会只是简单的打印日志的\",{\"1\":{\"341\":1}}],[\"实际上\",{\"1\":{\"271\":1}}],[\"实际上虚拟机会优化掉很大一部分不必要的加锁\",{\"1\":{\"222\":1}}],[\"实际上最终还是把字节码解释成具体平台上的机器指令执行\",{\"1\":{\"124\":1}}],[\"实际上该架构是从这些场景中部分演化而来的\",{\"1\":{\"57\":1}}],[\"实际使用时修改下\",{\"1\":{\"24\":1}}],[\"回单管理\",{\"1\":{\"49\":1}}],[\"采取了保守的策略\",{\"1\":{\"288\":1}}],[\"采购计划\",{\"1\":{\"49\":1}}],[\"采集上传\",{\"1\":{\"49\":1}}],[\"采用root权限安装\",{\"1\":{\"712\":1}}],[\"采用数据库的事务隔离机制实现\",{\"1\":{\"454\":1}}],[\"采用的行级锁\",{\"1\":{\"454\":1}}],[\"采用\",{\"1\":{\"48\":1,\"461\":1}}],[\"出现过命名空间无法删除问题\",{\"1\":{\"712\":1}}],[\"出现故障容易恢复\",{\"1\":{\"433\":1}}],[\"出生年月的月日则\",{\"1\":{\"430\":1}}],[\"出入库管理\",{\"1\":{\"49\":1}}],[\"出售\",{\"1\":{\"46\":1}}],[\"解释\",{\"1\":{\"694\":1}}],[\"解释如下\",{\"1\":{\"694\":1}}],[\"解释器模式\",{\"0\":{\"785\":1}}],[\"解释器\",{\"0\":{\"143\":1}}],[\"解析\",{\"0\":{\"134\":1}}],[\"解决方案\",{\"1\":{\"464\":1}}],[\"解决方法\",{\"1\":{\"386\":1}}],[\"解决数据备份问题\",{\"1\":{\"463\":1}}],[\"解决订单真实性和双方法律效应问题\",{\"1\":{\"49\":1}}],[\"解决订单完成问题\",{\"1\":{\"49\":1}}],[\"解决个体工商户税额问题\",{\"1\":{\"49\":1}}],[\"解决支付存证问题\",{\"1\":{\"49\":1}}],[\"解决运输过程存证问题\",{\"1\":{\"49\":1}}],[\"解决可再生资源到成本过程记录问题\",{\"1\":{\"49\":1}}],[\"解决可再生资源供应成本问题\",{\"1\":{\"49\":1}}],[\"解决可再生资源入库问题\",{\"1\":{\"49\":1}}],[\"解决可再生资源出库和到工厂的入库问题\",{\"1\":{\"49\":1}}],[\"解决可再生资源运输问题\",{\"1\":{\"49\":1}}],[\"解压下载的文件\",{\"1\":{\"23\":1}}],[\"业务背景\",{\"0\":{\"49\":1}}],[\"发生锁冲突的概率最低\",{\"1\":{\"452\":1}}],[\"发生锁冲突的概率高\",{\"1\":{\"452\":1}}],[\"发现存在docker\",{\"1\":{\"695\":1}}],[\"发现一个最优布置来最小化插入屏障的总数几乎是不可能的\",{\"1\":{\"288\":1}}],[\"发现额外的架构元素\",{\"1\":{\"107\":1}}],[\"发布策略和配置管理\",{\"1\":{\"99\":1}}],[\"发挥一个节点中多cpu\",{\"1\":{\"97\":1}}],[\"发送消息唤醒相应的终端对象\",{\"1\":{\"93\":1}}],[\"发送重置密码邮件时使用\",{\"1\":{\"24\":1}}],[\"发票管理\",{\"1\":{\"49\":1}}],[\"发票等全流程的平台\",{\"1\":{\"46\":1}}],[\"入库单审核\",{\"1\":{\"49\":1}}],[\"入库\",{\"1\":{\"46\":1}}],[\"配合字符组长度创建对象\",{\"1\":{\"359\":1}}],[\"配送\",{\"1\":{\"46\":1}}],[\"配置k8s的yum源\",{\"1\":{\"731\":1}}],[\"配置了properties\",{\"1\":{\"478\":1}}],[\"配置信息的方式\",{\"1\":{\"473\":1}}],[\"配置信息工具\",{\"1\":{\"153\":1}}],[\"配置文件的方式和基于\",{\"1\":{\"473\":1}}],[\"配置文件配置\",{\"1\":{\"472\":1}}],[\"配置文件\",{\"1\":{\"468\":1}}],[\"配置文件中有接口的具体实现类名\",{\"1\":{\"198\":1}}],[\"配置需要添加同步的主节点数据\",{\"1\":{\"463\":1}}],[\"配置源码管理\",{\"1\":{\"31\":1}}],[\"配置\",{\"0\":{\"24\":1,\"30\":1},\"1\":{\"468\":1,\"472\":1,\"546\":1,\"731\":1}}],[\"配置阿里云源\",{\"1\":{\"22\":1}}],[\"主节点端口\",{\"1\":{\"463\":1}}],[\"主节点ip\",{\"1\":{\"463\":1}}],[\"主节点\",{\"1\":{\"463\":1}}],[\"主从模式下\",{\"1\":{\"463\":1}}],[\"主备\",{\"1\":{\"463\":1}}],[\"主线程会尽力处理客户端请求\",{\"1\":{\"463\":1}}],[\"主查询\",{\"1\":{\"456\":1}}],[\"主键索引\",{\"1\":{\"447\":1}}],[\"主动\",{\"1\":{\"97\":1}}],[\"主控制器任务\",{\"1\":{\"73\":1}}],[\"主要的应用在资源隔离和管理\",{\"1\":{\"694\":1}}],[\"主要的核心部件解释如下\",{\"1\":{\"474\":1}}],[\"主要是\",{\"1\":{\"507\":1}}],[\"主要是sqlsession使用过程中的异常\",{\"1\":{\"507\":1}}],[\"主要是被框架的开发人员使用\",{\"1\":{\"198\":1}}],[\"主要构件及其相互关系\",{\"0\":{\"474\":1}}],[\"主要用于存储地理位置坐标相关的信息\",{\"1\":{\"462\":1}}],[\"主要用来查找文本中的关键字\",{\"1\":{\"447\":1}}],[\"主要有三种\",{\"1\":{\"241\":1}}],[\"主要体现为\",{\"1\":{\"202\":1}}],[\"主要\",{\"1\":{\"129\":1}}],[\"主要任务在同一流程和处理节点中的配置不应该被假设\",{\"1\":{\"67\":1}}],[\"主要任务通信是通过一组事先定义好的任务间通信机制\",{\"1\":{\"67\":1}}],[\"主要任务是可以被唯一指定的架构元素\",{\"1\":{\"67\":1}}],[\"主要流程如下\",{\"1\":{\"49\":1}}],[\"主要解决可再生资源供应商入驻\",{\"1\":{\"46\":1}}],[\"主机名\",{\"0\":{\"18\":1,\"718\":1}}],[\"是对在不同的对象之间划分责任和算法的抽象化\",{\"1\":{\"774\":1}}],[\"是对全局系统资源的一种封装隔离\",{\"1\":{\"696\":1}}],[\"是根据关键码和值\",{\"1\":{\"675\":1}}],[\"是因为它看起来像一棵倒挂的树\",{\"1\":{\"669\":1}}],[\"是因为后续的收集算法都是基于这种思路并对其缺点进行改进而得到的\",{\"1\":{\"147\":1}}],[\"是使用的\",{\"1\":{\"540\":1}}],[\"是进行了实现\",{\"1\":{\"536\":1}}],[\"是redis要完整的保存整个数据集是一个比较繁重的工作\",{\"1\":{\"463\":1}}],[\"是在\",{\"1\":{\"437\":1}}],[\"是在一个类里面\",{\"1\":{\"162\":1}}],[\"是通过\",{\"1\":{\"436\":1}}],[\"是通过在实际的计算机上仿真模拟各种计算机功能来实现的\",{\"1\":{\"124\":1}}],[\"是提供事务安全表\",{\"1\":{\"431\":1}}],[\"是单元素集合且无序不可重复\",{\"1\":{\"400\":1}}],[\"是单元素集合且有序可重复\",{\"1\":{\"400\":1}}],[\"是系统运行程序的基本单位\",{\"1\":{\"395\":1}}],[\"是弱引用\",{\"1\":{\"383\":1}}],[\"是软引用\",{\"1\":{\"383\":1}}],[\"是集合的工具包\",{\"1\":{\"382\":1}}],[\"是集合的上级接口包\",{\"1\":{\"382\":1}}],[\"是吧构成问题的事务分解成对象\",{\"1\":{\"372\":1}}],[\"是分析解决问题的步骤\",{\"1\":{\"372\":1}}],[\"是线程安全的\",{\"1\":{\"359\":1}}],[\"是当前容量+1\",{\"1\":{\"304\":1}}],[\"是不可执行的\",{\"1\":{\"265\":1}}],[\"是指限制在子表有关联记录的情况下父表不能更新\",{\"1\":{\"434\":1}}],[\"是指该锁一次只能被一个线程所持有\",{\"1\":{\"261\":1}}],[\"是指在同一个线程在外层方法获取锁的时候\",{\"1\":{\"260\":1}}],[\"是指子类定义了一个与其父类中具有相同名称\",{\"1\":{\"161\":1}}],[\"是jdk内置的一种\",{\"1\":{\"198\":1}}],[\"是并发gc\",{\"1\":{\"148\":1}}],[\"是硬盘和\",{\"1\":{\"140\":1}}],[\"是被所有线程共享的\",{\"1\":{\"136\":1,\"141\":1}}],[\"是如何打破\",{\"1\":{\"129\":1}}],[\"是一种多路搜索树\",{\"1\":{\"673\":1}}],[\"是一种特殊的线性表\",{\"1\":{\"667\":1}}],[\"是一种特殊的索引\",{\"1\":{\"447\":1}}],[\"是一种用于计算设备的规范\",{\"1\":{\"124\":1}}],[\"是一个基于asm的字节码生成库\",{\"1\":{\"344\":1}}],[\"是一个\",{\"1\":{\"285\":1}}],[\"是一个可再生资源从收集到工厂制作为成品的一站式平台\",{\"1\":{\"46\":1}}],[\"是否完成\",{\"1\":{\"734\":1}}],[\"是否执行destroy\",{\"1\":{\"546\":1}}],[\"是否执行init\",{\"1\":{\"546\":1}}],[\"是否以一种宽松的模式解析构造函数\",{\"1\":{\"546\":1}}],[\"是否允许访问非public方法和属性\",{\"1\":{\"546\":1}}],[\"是否进行依赖检查\",{\"1\":{\"546\":1}}],[\"是否懒加载\",{\"1\":{\"546\":1}}],[\"是否需要\",{\"0\":{\"539\":1}}],[\"是否锁表等\",{\"1\":{\"456\":1}}],[\"是否能够转换为右面的\",{\"1\":{\"374\":1}}],[\"是否是用户定义的而不是应用程序本身定义的\",{\"1\":{\"546\":1}}],[\"是否是抽象\",{\"1\":{\"546\":1}}],[\"是否是\",{\"1\":{\"374\":1}}],[\"是否为空\",{\"0\":{\"363\":1}}],[\"是否存在数据\",{\"1\":{\"327\":1}}],[\"是否存在个\",{\"1\":{\"325\":1}}],[\"是否存在这个\",{\"1\":{\"325\":1}}],[\"是否线程共享\",{\"1\":{\"136\":1}}],[\"是否加载过\",{\"1\":{\"130\":1}}],[\"是否可以从过程架构中的不同进程去访问\",{\"1\":{\"97\":1}}],[\"是否开启自注册\",{\"1\":{\"24\":1}}],[\"是更通用的\",{\"1\":{\"89\":1}}],[\"是三种不同能力的计算机\",{\"1\":{\"87\":1}}],[\"是构成一个可执行单元的一组任务\",{\"1\":{\"67\":1}}],[\"是\",{\"1\":{\"61\":1,\"124\":1,\"136\":3,\"141\":1,\"253\":2,\"299\":1,\"301\":1,\"304\":1,\"371\":1,\"474\":1,\"529\":1,\"696\":1}}],[\"所在这里根据相关注解进行排序添加\",{\"1\":{\"540\":1}}],[\"所需要的参数\",{\"1\":{\"474\":1}}],[\"所发现的架构元素排列在逻辑\",{\"1\":{\"107\":1}}],[\"所谓的关键的功能是指\",{\"1\":{\"107\":1}}],[\"所以就衍生了信号驱动io模型\",{\"1\":{\"736\":1}}],[\"所以有人就想\",{\"1\":{\"736\":1}}],[\"所以提出了平衡二叉树\",{\"1\":{\"671\":1}}],[\"所以如果在低空还可以的情况下要介入的除了龙头就是苏州相关的个股\",{\"1\":{\"614\":1}}],[\"所以低空经济迎来了目前的二波形态\",{\"1\":{\"614\":1}}],[\"所以现在卡异动\",{\"1\":{\"601\":1}}],[\"所以放弃拉升\",{\"1\":{\"600\":1}}],[\"所以干脆也卖点京投发展\",{\"1\":{\"596\":1}}],[\"所以感觉地产链比较强\",{\"1\":{\"596\":1}}],[\"所以选择了排单爱丽家居\",{\"1\":{\"596\":1}}],[\"所以顺序变更为\",{\"1\":{\"596\":1}}],[\"所以周期应该属于\",{\"1\":{\"582\":1,\"597\":1}}],[\"所以没有进行仔细复盘\",{\"1\":{\"581\":1}}],[\"所以又提出一个\",{\"1\":{\"529\":1}}],[\"所以命名绝大多数都能够直观的看到原因所在\",{\"1\":{\"507\":1}}],[\"所以想到了池化思想\",{\"1\":{\"500\":1}}],[\"所以可以进行范围行的查询\",{\"1\":{\"674\":1}}],[\"所以可以直接引用\",{\"1\":{\"478\":1}}],[\"所以可以与飞机共享服务进程\",{\"1\":{\"97\":1}}],[\"所以主节点一定要进行持久化\",{\"1\":{\"463\":1}}],[\"所以主键要尽可能选择较短的数据类型\",{\"1\":{\"449\":1}}],[\"所以rdb持久化方式可以最大化redis的性能\",{\"1\":{\"463\":1}}],[\"所以需要注意线程安全问题\",{\"1\":{\"760\":1}}],[\"所以需要设置一些参数进行修改锁的调度\",{\"1\":{\"453\":1}}],[\"所以需要该数据对象实现对应的方法\",{\"1\":{\"303\":1}}],[\"所以系统在产生一个线程或是在各个线程之间切换工作时\",{\"1\":{\"395\":1}}],[\"所以查询的效率较低\",{\"1\":{\"380\":1}}],[\"所以通过索引查询的效率是\",{\"1\":{\"380\":1}}],[\"所以线程安全的\",{\"1\":{\"379\":1}}],[\"所以易维护\",{\"1\":{\"372\":1}}],[\"所以单片机\",{\"1\":{\"372\":1}}],[\"所以使用该方法时需要考虑是否为\",{\"1\":{\"363\":1}}],[\"所以不需要写入seek\",{\"1\":{\"463\":1}}],[\"所以不能对final修饰的类进行代理\",{\"1\":{\"350\":1}}],[\"所以不会添加锁\",{\"1\":{\"256\":1}}],[\"所以说jdk动态代理的核心是通过重写被代理对象所实现的接口中的方法来重新生成代理类来实现的\",{\"1\":{\"343\":1}}],[\"所以说它会优先尝试用\",{\"1\":{\"130\":1}}],[\"所以最大值为\",{\"1\":{\"326\":1}}],[\"所以本人认为完全的\",{\"1\":{\"298\":1}}],[\"所以上面的过程也可能会变成如下过程\",{\"1\":{\"279\":1}}],[\"所以storestore屏障可以省略\",{\"1\":{\"276\":1}}],[\"所以更不用说是覆盖了\",{\"1\":{\"265\":1}}],[\"所以在x86处理器中\",{\"1\":{\"276\":1}}],[\"所以在final类中给任何方法添加final关键字是没有任何意义的\",{\"1\":{\"264\":1}}],[\"所以在老年代一般不能直接选用这种算法\",{\"1\":{\"147\":1}}],[\"所以非公平锁有可能出现后申请锁的线程先获取锁的场景\",{\"1\":{\"259\":1}}],[\"所以自然就不行了\",{\"1\":{\"176\":1}}],[\"所以\",{\"1\":{\"124\":1,\"257\":1,\"373\":1,\"449\":1,\"735\":1}}],[\"所以外部激励的频率很高\",{\"1\":{\"97\":1}}],[\"所以物理蓝图有一些不同的形式\",{\"1\":{\"85\":1}}],[\"所以把原文和译文对照着放在一起以便对照理解\",{\"1\":{\"52\":1}}],[\"所有引用基类的地方必须能透明地使用其子类的对象\",{\"1\":{\"752\":1}}],[\"所有master\",{\"0\":{\"724\":1}}],[\"所有节点\",{\"0\":{\"721\":1,\"722\":1}}],[\"所有叶子结点位于同一层\",{\"1\":{\"673\":1}}],[\"所有的配置信息都维持在\",{\"1\":{\"474\":1}}],[\"所有给定集合的并集存储在\",{\"1\":{\"462\":1}}],[\"所有课程的总成绩\",{\"1\":{\"430\":1}}],[\"所有任务只能使用固定大小的线程\",{\"1\":{\"241\":1}}],[\"所有对象都分配在堆上渐渐变得不那么\",{\"1\":{\"136\":1,\"141\":1}}],[\"所有终端都被一个\",{\"1\":{\"73\":1}}],[\"所有人\",{\"1\":{\"24\":1}}],[\"所描述的那样\",{\"1\":{\"89\":1}}],[\"所描述的\",{\"1\":{\"71\":1}}],[\"所用技术\",{\"0\":{\"43\":1,\"47\":1}}],[\"借此实现架构升级\",{\"1\":{\"42\":1}}],[\"项目中描述了一些非常复杂的映射方案\",{\"1\":{\"101\":1}}],[\"项目中使用到了\",{\"1\":{\"34\":1}}],[\"项目规模越大\",{\"1\":{\"99\":1}}],[\"项目进度监控\",{\"1\":{\"75\":1}}],[\"项目经理\",{\"1\":{\"53\":1,\"111\":2}}],[\"项目描述\",{\"0\":{\"42\":1,\"46\":1}}],[\"新增操作和arraylist一致\",{\"1\":{\"316\":1}}],[\"新增\",{\"0\":{\"304\":1,\"310\":1,\"316\":1}}],[\"新增一个引用时计数加1\",{\"1\":{\"146\":1}}],[\"新生代使用parnew\",{\"1\":{\"148\":1}}],[\"新生代gc策略\",{\"1\":{\"148\":1}}],[\"新生代并行\",{\"1\":{\"148\":1}}],[\"新生代复制算法\",{\"1\":{\"148\":3}}],[\"新生代=\",{\"1\":{\"141\":1}}],[\"新生代\",{\"1\":{\"141\":1,\"148\":1}}],[\"新生区分为eden\",{\"1\":{\"141\":1}}],[\"新生区\",{\"1\":{\"141\":1}}],[\"新再生交易平台的流程如下\",{\"1\":{\"49\":1}}],[\"新再生交易平台\",{\"0\":{\"45\":1}}],[\"新之科技供应链平台\",{\"0\":{\"41\":1}}],[\"新建\",{\"0\":{\"232\":1},\"1\":{\"31\":1}}],[\"创建型\",{\"0\":{\"757\":1}}],[\"创建一个设备文件\",{\"1\":{\"746\":1}}],[\"创建一个新目录\",{\"1\":{\"746\":1}}],[\"创建一个新的包spring\",{\"1\":{\"521\":1}}],[\"创建一个管道\",{\"1\":{\"746\":1}}],[\"创建一个进程\",{\"1\":{\"746\":1}}],[\"创建aop时候为true\",{\"1\":{\"546\":1}}],[\"创建bean实例的方式之一\",{\"1\":{\"546\":1}}],[\"创建测试类\",{\"1\":{\"521\":1}}],[\"创建\",{\"1\":{\"502\":1,\"532\":1}}],[\"创建表的时候可以同时创建\",{\"1\":{\"447\":1}}],[\"创建索引的时候请尽量考虑符合这些原则\",{\"1\":{\"449\":1}}],[\"创建索引\",{\"0\":{\"447\":1}}],[\"创建对象\",{\"1\":{\"385\":1}}],[\"创建对象的方式\",{\"0\":{\"385\":1}}],[\"创建代理类\",{\"1\":{\"342\":1,\"345\":1}}],[\"创建后尚未启动\",{\"1\":{\"232\":1}}],[\"创建模版文件\",{\"0\":{\"40\":1}}],[\"创建文件\",{\"1\":{\"39\":1}}],[\"创建集群\",{\"0\":{\"14\":1,\"714\":1}}],[\"zuovxa\",{\"1\":{\"654\":1}}],[\"zunionstore\",{\"1\":{\"462\":1}}],[\"zyt5nn\",{\"1\":{\"650\":1}}],[\"zwylhi\",{\"1\":{\"635\":1}}],[\"zhang\",{\"1\":{\"521\":1}}],[\"zscan\",{\"1\":{\"462\":1}}],[\"zscore\",{\"1\":{\"462\":1}}],[\"zrevrank\",{\"1\":{\"462\":1}}],[\"zrevrangebyscore\",{\"1\":{\"462\":1}}],[\"zrevrange\",{\"1\":{\"462\":1}}],[\"zremrangebyscore\",{\"1\":{\"462\":1}}],[\"zremrangebyrank\",{\"1\":{\"462\":1}}],[\"zremrangebylex\",{\"1\":{\"462\":1}}],[\"zrem\",{\"1\":{\"462\":1}}],[\"zrank\",{\"1\":{\"462\":1}}],[\"zrangebyscore\",{\"1\":{\"462\":1}}],[\"zrangebylex\",{\"1\":{\"462\":1}}],[\"zrange\",{\"1\":{\"462\":1}}],[\"zlexcount\",{\"1\":{\"462\":1}}],[\"zinterstore\",{\"1\":{\"462\":1}}],[\"zincrby\",{\"1\":{\"462\":1}}],[\"zip\",{\"1\":{\"19\":1}}],[\"zcount\",{\"1\":{\"462\":1}}],[\"zcard\",{\"1\":{\"462\":1}}],[\"zadd\",{\"1\":{\"462\":1}}],[\"zero\",{\"1\":{\"367\":1}}],[\"zoneinfo\",{\"1\":{\"34\":1}}],[\"点击历史可进入正在运行的流水线\",{\"1\":{\"35\":1}}],[\"点击\",{\"1\":{\"35\":1}}],[\"点击应用\",{\"1\":{\"34\":1}}],[\"点击下一步\",{\"1\":{\"14\":1,\"714\":1}}],[\"制作镜像\",{\"1\":{\"34\":1}}],[\"进入方法\",{\"1\":{\"235\":1,\"236\":1}}],[\"进入解压包中\",{\"1\":{\"21\":1}}],[\"进而均衡\",{\"1\":{\"202\":1}}],[\"进行资源隔离的\",{\"1\":{\"695\":1}}],[\"进行限制\",{\"1\":{\"694\":1}}],[\"进行查看cgroup的配置\",{\"1\":{\"694\":1}}],[\"进行查看表级锁争用情况\",{\"1\":{\"453\":1}}],[\"进行低吸\",{\"1\":{\"645\":1}}],[\"进行一系列的处理\",{\"1\":{\"537\":1}}],[\"进行注册类信息\",{\"1\":{\"531\":1}}],[\"进行生产出对应的异常对象\",{\"1\":{\"506\":1}}],[\"进行代理所有的请求\",{\"1\":{\"502\":1}}],[\"进行代码编译\",{\"1\":{\"125\":1}}],[\"进行初始化部分功能\",{\"1\":{\"538\":1}}],[\"进行初始化创建出\",{\"1\":{\"483\":1}}],[\"进行初始化或扩容\",{\"1\":{\"327\":1}}],[\"进行重写\",{\"1\":{\"463\":1}}],[\"进行测试和学习\",{\"1\":{\"461\":1}}],[\"进行优化提高执行的效率\",{\"1\":{\"456\":1}}],[\"进行频繁的字符串操作性能较高\",{\"1\":{\"379\":1}}],[\"进行拼接时相当于新建字符数组进行替换\",{\"1\":{\"379\":1}}],[\"进行判断数据是否一致的效率\",{\"1\":{\"378\":1}}],[\"进行判断对象的内存地址是否相同\",{\"1\":{\"366\":1}}],[\"进行判断\",{\"1\":{\"365\":1}}],[\"进行出现线程数据共享\",{\"1\":{\"359\":1}}],[\"进行构建对象\",{\"1\":{\"359\":1}}],[\"进行树化处理\",{\"1\":{\"327\":1}}],[\"进行\",{\"1\":{\"327\":1,\"737\":1}}],[\"进行控制某些行为\",{\"1\":{\"326\":1}}],[\"进行防止并发操作\",{\"1\":{\"316\":1}}],[\"进行比较数据对象是否存在\",{\"1\":{\"309\":1}}],[\"进行描述\",{\"1\":{\"236\":2}}],[\"进行带负载的测试\",{\"1\":{\"107\":1}}],[\"进行组织\",{\"1\":{\"75\":1}}],[\"进行部署\",{\"1\":{\"32\":1}}],[\"进程在获取数据时\",{\"1\":{\"733\":1}}],[\"进程的基本概念\",{\"0\":{\"395\":1}}],[\"进程和进程组被映射到可用的物理硬件上\",{\"1\":{\"101\":1}}],[\"进程之间的交互序列\",{\"1\":{\"89\":1}}],[\"进程表示过程架构可以被有策略地控制的层次\",{\"1\":{\"67\":1}}],[\"进程\",{\"1\":{\"67\":2,\"83\":1,\"107\":1,\"111\":1,\"115\":1,\"395\":1}}],[\"部署上线等\",{\"1\":{\"48\":1}}],[\"部署文件的编写可能需要学习\",{\"1\":{\"37\":1}}],[\"部署文件的内容\",{\"1\":{\"32\":1}}],[\"部署\",{\"0\":{\"32\":1}}],[\"的进程拥有独立的全局系统资源\",{\"1\":{\"696\":1}}],[\"的部分文件实现来使用\",{\"1\":{\"695\":1}}],[\"的目录\",{\"1\":{\"695\":1}}],[\"的优先级\",{\"1\":{\"694\":1}}],[\"的优化\",{\"0\":{\"459\":1}}],[\"的相关知识的总结和梳理\",{\"1\":{\"680\":1}}],[\"的子树\",{\"1\":{\"673\":3}}],[\"的子类\",{\"1\":{\"307\":1}}],[\"的消息\",{\"1\":{\"614\":1}}],[\"的消费者\",{\"1\":{\"169\":1}}],[\"的配置类中的\",{\"1\":{\"538\":1}}],[\"的配置规范配置好后\",{\"1\":{\"468\":1}}],[\"的主要方法是\",{\"1\":{\"538\":1}}],[\"的主要内容如下图\",{\"1\":{\"124\":1}}],[\"的织入\",{\"1\":{\"537\":1}}],[\"的某些功能的自定义\",{\"1\":{\"536\":1}}],[\"的本质其实是自己进行管理\",{\"1\":{\"529\":1}}],[\"的初始化本质为\",{\"1\":{\"528\":1}}],[\"的代理对象\",{\"1\":{\"502\":1}}],[\"的三次握手\",{\"1\":{\"500\":1}}],[\"的三个任务中的一个上执行\",{\"1\":{\"73\":1}}],[\"的方式\",{\"1\":{\"473\":1}}],[\"的方法\",{\"1\":{\"161\":1,\"253\":1}}],[\"的方法不能被重写\",{\"1\":{\"161\":2}}],[\"的核心\",{\"1\":{\"469\":1}}],[\"的速度和\",{\"1\":{\"463\":1}}],[\"的速度可能会慢于\",{\"1\":{\"463\":1}}],[\"的性能依然非常高\",{\"1\":{\"463\":1}}],[\"的情况下丢失的数据最少的话\",{\"1\":{\"463\":1}}],[\"的成员\",{\"1\":{\"462\":1}}],[\"的末尾\",{\"1\":{\"462\":1}}],[\"的长度\",{\"1\":{\"462\":1}}],[\"的长度为什么是\",{\"0\":{\"407\":1}}],[\"的后面是查询非唯一索引字段的子查询\",{\"1\":{\"456\":1}}],[\"的后面是一个查询主键字段的子查询\",{\"1\":{\"456\":1}}],[\"的查询\",{\"1\":{\"456\":1}}],[\"的执行计划\",{\"1\":{\"456\":1}}],[\"的执行情况\",{\"1\":{\"456\":1}}],[\"的执行频率\",{\"1\":{\"456\":1}}],[\"的一般步骤\",{\"0\":{\"456\":1}}],[\"的一部分\",{\"1\":{\"252\":1}}],[\"的锁调度\",{\"1\":{\"453\":1}}],[\"的缺陷是对表的大小有限制\",{\"1\":{\"437\":1}}],[\"的学生姓名和分数\",{\"1\":{\"430\":1}}],[\"的所有学生的学号\",{\"1\":{\"430\":1}}],[\"的所有功能且添加了部分自己独有的一些功能\",{\"1\":{\"301\":1}}],[\"的同学所学相同的同学的信息\",{\"1\":{\"430\":1}}],[\"的异同\",{\"0\":{\"408\":1}}],[\"的安全检查来提升反射速度\",{\"1\":{\"399\":1}}],[\"的用法\",{\"0\":{\"389\":1}}],[\"的四种引用\",{\"0\":{\"383\":1}}],[\"的对象\",{\"1\":{\"374\":1}}],[\"的对象一定是线程安全的\",{\"1\":{\"216\":1}}],[\"的哈希值\",{\"1\":{\"327\":1}}],[\"的时候不去进行真正的关闭\",{\"1\":{\"500\":1}}],[\"的时候才可能树化\",{\"1\":{\"326\":1}}],[\"的时候\",{\"1\":{\"326\":1,\"420\":1}}],[\"的属性\",{\"1\":{\"326\":1,\"532\":1}}],[\"的属性和方法\",{\"1\":{\"158\":1}}],[\"的元素\",{\"1\":{\"325\":1}}],[\"的不重复集合\",{\"1\":{\"325\":1}}],[\"的最大值为\",{\"1\":{\"326\":1}}],[\"的最大值\",{\"1\":{\"304\":1}}],[\"的实现原理\",{\"0\":{\"284\":1}}],[\"的实例\",{\"1\":{\"89\":1}}],[\"的静态方法\",{\"1\":{\"253\":1}}],[\"的区别\",{\"0\":{\"253\":1,\"380\":1,\"381\":1,\"398\":1}}],[\"的中断操作\",{\"0\":{\"248\":1}}],[\"的中间桥梁\",{\"1\":{\"140\":1}}],[\"的操作次数\",{\"1\":{\"456\":1}}],[\"的操作\",{\"1\":{\"247\":1,\"474\":1}}],[\"的调用声明了当前线程已经完成了生命周期中最重要的部分\",{\"1\":{\"244\":1}}],[\"的处理方式\",{\"1\":{\"229\":1}}],[\"的处理器重排序规则会要求\",{\"1\":{\"206\":1}}],[\"的正确性\",{\"1\":{\"226\":1}}],[\"的值也是\",{\"1\":{\"546\":1}}],[\"的值\",{\"1\":{\"462\":3}}],[\"的值为\",{\"1\":{\"325\":2}}],[\"的值更新为\",{\"1\":{\"224\":1}}],[\"的值等于\",{\"1\":{\"224\":1}}],[\"的存在\",{\"1\":{\"205\":1}}],[\"的高性能\",{\"1\":{\"202\":1}}],[\"的高效稳定运行\",{\"1\":{\"140\":1}}],[\"的meta\",{\"1\":{\"198\":1}}],[\"的策略\",{\"1\":{\"171\":1}}],[\"的生产者\",{\"1\":{\"169\":1}}],[\"的输入参数上使用通配符\",{\"1\":{\"169\":1}}],[\"的非\",{\"1\":{\"161\":1}}],[\"的空间\",{\"1\":{\"147\":1}}],[\"的默认加载器就是\",{\"1\":{\"130\":1}}],[\"的类型\",{\"1\":{\"456\":1}}],[\"的类\",{\"1\":{\"130\":1}}],[\"的机制\",{\"1\":{\"129\":1}}],[\"的编译器重排序规则会禁止特定类型的编译器重排序\",{\"1\":{\"206\":1}}],[\"的编译\",{\"0\":{\"125\":1}}],[\"的缩写\",{\"1\":{\"124\":1}}],[\"的形式被捕获的\",{\"1\":{\"107\":1}}],[\"的笔误\",{\"1\":{\"105\":1}}],[\"的可见部分的一个类型\",{\"1\":{\"99\":1}}],[\"的可以添加环境\",{\"1\":{\"31\":1}}],[\"的完成而被挂起时\",{\"1\":{\"97\":1}}],[\"的视图\",{\"1\":{\"89\":1}}],[\"的物理架构\",{\"1\":{\"87\":2}}],[\"的\",{\"0\":{\"407\":1},\"1\":{\"77\":1,\"85\":1,\"241\":1,\"248\":1,\"325\":1,\"326\":2,\"383\":1,\"399\":1,\"462\":8,\"532\":2,\"534\":1,\"537\":1,\"539\":1,\"694\":1}}],[\"的过程蓝图\",{\"1\":{\"73\":1}}],[\"的分类法\",{\"1\":{\"71\":1}}],[\"的逻辑\",{\"1\":{\"67\":1}}],[\"的工作\",{\"1\":{\"57\":1}}],[\"的公式独立地运用在每种视图上\",{\"1\":{\"57\":1}}],[\"的关注点\",{\"1\":{\"55\":1}}],[\"的内容\",{\"1\":{\"34\":2}}],[\"的位置直接执行\",{\"1\":{\"31\":1}}],[\"b+树所有的叶子结点在同一层\",{\"1\":{\"674\":1}}],[\"b+树\",{\"0\":{\"674\":1}}],[\"bj8lxv\",{\"1\":{\"605\":1}}],[\"bwv3cy\",{\"1\":{\"593\":1}}],[\"bridge\",{\"1\":{\"731\":12}}],[\"brpoplpush\",{\"1\":{\"462\":1}}],[\"brpop\",{\"1\":{\"462\":1}}],[\"broadcast\",{\"1\":{\"111\":1}}],[\"broadcasts\",{\"1\":{\"67\":1}}],[\"btree\",{\"0\":{\"450\":1},\"1\":{\"446\":1,\"450\":1}}],[\"bdb\",{\"1\":{\"431\":2,\"446\":1}}],[\"b=\",{\"1\":{\"391\":1}}],[\"blkio\",{\"1\":{\"694\":1}}],[\"blopop\",{\"1\":{\"462\":1}}],[\"block\",{\"1\":{\"695\":1}}],[\"blockquote>\",{\"1\":{\"367\":2}}],[\"blocking\",{\"0\":{\"234\":1}}],[\"blackhole\",{\"1\":{\"431\":1}}],[\"bluprints\",{\"0\":{\"64\":1}}],[\"blueprint图7\",{\"1\":{\"85\":1}}],[\"blueprint\",{\"0\":{\"72\":1,\"76\":1,\"84\":1,\"86\":1},\"1\":{\"55\":1,\"57\":2,\"61\":1,\"65\":2,\"67\":1,\"69\":1,\"73\":1,\"77\":1,\"87\":1,\"91\":1}}],[\"blueprints\",{\"0\":{\"53\":1},\"1\":{\"77\":1,\"81\":1,\"85\":1,\"107\":3}}],[\"bnr\",{\"1\":{\"111\":2}}],[\"b\",{\"0\":{\"673\":1},\"1\":{\"65\":2,\"109\":2,\"164\":16,\"211\":2,\"224\":2,\"226\":1,\"388\":2,\"391\":1,\"430\":4,\"456\":2,\"674\":1}}],[\"beg\",{\"1\":{\"731\":1}}],[\"begin\",{\"1\":{\"368\":1,\"439\":1,\"444\":1,\"445\":1}}],[\"beginning\",{\"1\":{\"368\":1}}],[\"beijing\",{\"1\":{\"703\":1,\"704\":3}}],[\"bean的描述信息\",{\"1\":{\"546\":1}}],[\"bean的角色\",{\"1\":{\"546\":1}}],[\"bean的class对象或是类的全限定名\",{\"1\":{\"546\":1}}],[\"bean属性的名称以及对应的值\",{\"1\":{\"546\":1}}],[\"bean>\",{\"1\":{\"546\":1}}],[\"beanmetadataattributeaccessor\",{\"1\":{\"546\":1}}],[\"beanprocessortargetcount\",{\"1\":{\"540\":2}}],[\"beanpostprocessors\",{\"1\":{\"540\":6}}],[\"beanpostprocessorchecker\",{\"1\":{\"540\":2}}],[\"beanpostprocessor\",{\"1\":{\"539\":1,\"540\":9}}],[\"beannamegenerator\",{\"1\":{\"532\":1}}],[\"beanname\",{\"1\":{\"532\":3}}],[\"beanclass\",{\"1\":{\"532\":2,\"546\":1}}],[\"beanfactorypostprocessors\",{\"1\":{\"538\":7}}],[\"beanfactorypostprocessor\",{\"0\":{\"538\":1},\"1\":{\"537\":2,\"538\":9}}],[\"beanfactory接口未注册为可解析类型\",{\"1\":{\"535\":1}}],[\"beanfactory\",{\"1\":{\"529\":1,\"534\":3,\"535\":31,\"536\":8,\"537\":2,\"538\":29,\"539\":6,\"540\":19,\"541\":4,\"542\":5}}],[\"beanuser\",{\"1\":{\"521\":1}}],[\"beandefinition的默认实现类\",{\"0\":{\"546\":1}}],[\"beandefinitionregistry\",{\"1\":{\"538\":4}}],[\"beandefinitionregistrypostprocessors\",{\"1\":{\"538\":5}}],[\"beandefinitionregistrypostprocessor\",{\"1\":{\"521\":2,\"538\":9}}],[\"beandefinitionreaderutils\",{\"1\":{\"532\":1}}],[\"beandefinitionholder\",{\"1\":{\"532\":3}}],[\"beandefinitioncustomizer\",{\"1\":{\"532\":3}}],[\"beandefinition\",{\"1\":{\"521\":2,\"532\":6,\"538\":1,\"546\":2}}],[\"bean\",{\"1\":{\"521\":10,\"529\":3,\"535\":7,\"538\":4,\"539\":1,\"540\":2,\"541\":5,\"542\":5,\"546\":7}}],[\"beans\",{\"1\":{\"521\":3,\"535\":2,\"538\":2,\"540\":1,\"544\":1}}],[\"bears\",{\"1\":{\"65\":1}}],[\"bef\",{\"1\":{\"439\":1}}],[\"before|agter\",{\"1\":{\"462\":1}}],[\"before\",{\"0\":{\"211\":1,\"287\":2},\"1\":{\"207\":1,\"214\":1,\"388\":1,\"439\":3}}],[\"bell\",{\"1\":{\"113\":2}}],[\"below\",{\"1\":{\"79\":1,\"99\":1}}],[\"beta5\",{\"1\":{\"729\":1}}],[\"better\",{\"1\":{\"105\":1}}],[\"betwenen\",{\"1\":{\"89\":1}}],[\"between\",{\"0\":{\"94\":1},\"1\":{\"65\":2,\"79\":1,\"89\":1,\"91\":1,\"97\":1,\"99\":2,\"101\":1,\"450\":1,\"538\":2,\"540\":1}}],[\"besides\",{\"1\":{\"105\":1}}],[\"because\",{\"1\":{\"97\":3}}],[\"becoming\",{\"1\":{\"73\":1,\"105\":1}}],[\"become\",{\"1\":{\"57\":1,\"85\":1,\"107\":2}}],[\"becomes\",{\"1\":{\"55\":1}}],[\"benefits\",{\"1\":{\"105\":1}}],[\"benefit\",{\"1\":{\"69\":1}}],[\"behaving\",{\"1\":{\"97\":1}}],[\"behavior\",{\"1\":{\"59\":1,\"358\":1}}],[\"behalf\",{\"1\":{\"65\":1}}],[\"be\",{\"1\":{\"57\":3,\"59\":1,\"65\":1,\"67\":9,\"69\":1,\"75\":2,\"81\":1,\"83\":3,\"97\":5,\"99\":1,\"103\":1,\"105\":2,\"107\":3,\"109\":1,\"111\":1,\"358\":3,\"367\":2,\"368\":1,\"531\":1,\"533\":1}}],[\"been\",{\"1\":{\"55\":1,\"75\":1,\"93\":1,\"111\":2}}],[\"bio\",{\"0\":{\"733\":1},\"1\":{\"732\":1}}],[\"bifunction<\",{\"1\":{\"325\":1}}],[\"birman\",{\"1\":{\"71\":2,\"97\":1,\"101\":2}}],[\"bigger\",{\"1\":{\"65\":1}}],[\"bit\",{\"1\":{\"55\":1,\"462\":1}}],[\"bindingexception\",{\"1\":{\"507\":1}}],[\"binarynametopath\",{\"1\":{\"130\":1}}],[\"binaries\",{\"1\":{\"29\":1}}],[\"bin\",{\"1\":{\"29\":1,\"34\":5,\"703\":1,\"731\":6}}],[\"boundsql\",{\"1\":{\"474\":2}}],[\"body\",{\"1\":{\"444\":1,\"445\":1}}],[\"both\",{\"1\":{\"89\":1,\"367\":2}}],[\"bootstrapclassloader\",{\"1\":{\"130\":1}}],[\"boolean\",{\"1\":{\"130\":3,\"363\":1,\"365\":1,\"366\":1,\"368\":1,\"373\":5,\"538\":1,\"546\":9}}],[\"booch\",{\"1\":{\"59\":2,\"61\":2,\"69\":2,\"77\":2,\"113\":2}}],[\"books\",{\"1\":{\"55\":1}}],[\"boehn又对公式进行了优化\",{\"1\":{\"57\":1}}],[\"boehm\",{\"1\":{\"57\":1}}],[\"boxes\",{\"1\":{\"55\":2}}],[\"buf\",{\"1\":{\"746\":2}}],[\"bufferedreader\",{\"1\":{\"496\":4}}],[\"buffer\",{\"0\":{\"359\":1},\"1\":{\"359\":8}}],[\"buffering\",{\"1\":{\"67\":1}}],[\"bus\",{\"1\":{\"111\":1}}],[\"business\",{\"1\":{\"57\":2}}],[\"but\",{\"1\":{\"55\":1,\"57\":2,\"59\":1,\"89\":1,\"91\":1,\"97\":3,\"99\":1,\"111\":1}}],[\"builderexception\",{\"1\":{\"507\":1}}],[\"builder\",{\"0\":{\"360\":1},\"1\":{\"360\":8}}],[\"building\",{\"1\":{\"105\":1}}],[\"build\",{\"1\":{\"31\":1,\"34\":5,\"35\":1,\"81\":1,\"482\":1,\"521\":1}}],[\"byjiwz\",{\"1\":{\"648\":1}}],[\"bytype\",{\"1\":{\"546\":1}}],[\"bytes\",{\"0\":{\"358\":1},\"1\":{\"358\":7,\"695\":1}}],[\"byte\",{\"0\":{\"358\":1},\"1\":{\"358\":2,\"373\":3,\"391\":2}}],[\"byname\",{\"1\":{\"546\":1}}],[\"by\",{\"1\":{\"52\":1,\"55\":1,\"57\":3,\"59\":1,\"65\":1,\"67\":3,\"69\":1,\"71\":1,\"73\":3,\"75\":3,\"77\":1,\"79\":1,\"81\":1,\"89\":2,\"97\":5,\"107\":4,\"111\":1,\"130\":1,\"358\":1,\"362\":1,\"364\":1,\"366\":1,\"367\":3,\"368\":1,\"430\":38,\"450\":1,\"459\":2,\"540\":1,\"546\":4}}],[\"bfs\",{\"1\":{\"48\":1}}],[\"bak\",{\"1\":{\"731\":2}}],[\"balance\",{\"1\":{\"731\":1}}],[\"batchexecutorexception\",{\"1\":{\"507\":1}}],[\"barrier\",{\"1\":{\"285\":2}}],[\"barriers\",{\"1\":{\"206\":1}}],[\"backtracking\",{\"1\":{\"105\":1}}],[\"backup\",{\"1\":{\"97\":1}}],[\"backend\",{\"1\":{\"32\":1,\"34\":1,\"40\":1,\"731\":2}}],[\"basis\",{\"1\":{\"75\":2}}],[\"bash\",{\"1\":{\"34\":1,\"731\":2}}],[\"baseurl=http\",{\"1\":{\"731\":1}}],[\"baseurl=https\",{\"1\":{\"22\":1}}],[\"base64\",{\"1\":{\"729\":2}}],[\"base和son都有方法test\",{\"1\":{\"265\":1}}],[\"base\",{\"1\":{\"200\":1}}],[\"based\",{\"1\":{\"53\":1,\"67\":2,\"107\":2,\"367\":1}}],[\"basedn\",{\"1\":{\"24\":1}}],[\"b15\",{\"1\":{\"29\":1}}],[\"将一个类的接口转换成客户希望的另外一个接口\",{\"1\":{\"766\":1}}],[\"将一个或者多个值插入列表头部\",{\"1\":{\"462\":1}}],[\"将指定名称的文件信息放入\",{\"1\":{\"746\":1}}],[\"将打开文件fd的信息放入\",{\"1\":{\"746\":1}}],[\"将退出状态存入\",{\"1\":{\"746\":1}}],[\"将n\",{\"1\":{\"746\":1}}],[\"将数据从内核复制到应用进程中\",{\"1\":{\"736\":1}}],[\"将证书导入chrome浏览器\",{\"1\":{\"729\":1}}],[\"将kubecfg\",{\"1\":{\"729\":1}}],[\"将作为首选者\",{\"1\":{\"546\":1}}],[\"将不考虑该bean\",{\"1\":{\"546\":1}}],[\"将不同的关注点划分到不同软件区域上\",{\"1\":{\"97\":1}}],[\"将信息封装到\",{\"1\":{\"474\":1}}],[\"将执行\",{\"1\":{\"471\":1}}],[\"将配置文件中的每一个<mapper>\",{\"1\":{\"468\":1}}],[\"将之前的master作为slave\",{\"1\":{\"463\":1}}],[\"将其中一个slave作为master\",{\"1\":{\"463\":1}}],[\"将弹出的元素插入到另外一个列表中并返回它\",{\"1\":{\"462\":1}}],[\"将\",{\"1\":{\"462\":8,\"474\":1,\"731\":1}}],[\"将所有数据保存在\",{\"1\":{\"437\":1}}],[\"将所有的泛型表示\",{\"1\":{\"171\":1}}],[\"将内存的对象进行解析\",{\"1\":{\"399\":1}}],[\"将内存空间的地址赋值给对应的引用\",{\"1\":{\"279\":2}}],[\"将新生成的class文件重新加载到\",{\"1\":{\"343\":1}}],[\"将i的值写回内存\",{\"1\":{\"282\":1}}],[\"将造成最后写到内存中的i值是2而不是3\",{\"1\":{\"205\":1}}],[\"将最后的结果i写入内存\",{\"1\":{\"205\":1}}],[\"将变量\",{\"1\":{\"205\":1}}],[\"将cpu分别给其它活动\",{\"1\":{\"97\":1}}],[\"将特定于卡的信号转换成一组小的\",{\"1\":{\"65\":1}}],[\"将架构和某些需求联系起来\",{\"1\":{\"57\":1}}],[\"将jenkins账号分别加入到root组中\",{\"1\":{\"28\":1}}],[\"将第\",{\"1\":{\"26\":1}}],[\"行为型\",{\"0\":{\"774\":1}}],[\"行锁模式及加锁方法\",{\"1\":{\"454\":1}}],[\"行级锁\",{\"1\":{\"452\":1}}],[\"行\",{\"1\":{\"26\":1}}],[\"文件描述符\",{\"1\":{\"746\":1}}],[\"文件系统\",{\"1\":{\"743\":1}}],[\"文件见附件\",{\"1\":{\"724\":1,\"725\":1,\"729\":1}}],[\"文件了\",{\"1\":{\"472\":1}}],[\"文件进行配置的\",{\"1\":{\"472\":1}}],[\"文件进行追加操作\",{\"1\":{\"463\":1}}],[\"文件末尾的\",{\"1\":{\"463\":1}}],[\"文件未被重写\",{\"1\":{\"463\":1}}],[\"文件也非常简单\",{\"1\":{\"463\":1}}],[\"文件也不会丢失\",{\"1\":{\"463\":1}}],[\"文件有序地保存了对数据库执行的所有写入操作\",{\"1\":{\"463\":1}}],[\"文件切换到新\",{\"1\":{\"463\":1}}],[\"文件创建完毕\",{\"1\":{\"463\":1}}],[\"文件里面\",{\"1\":{\"463\":1}}],[\"文件的体积\",{\"1\":{\"463\":1}}],[\"文件的体积通常要大于\",{\"1\":{\"463\":1}}],[\"文件的内容非常容易被人读懂\",{\"1\":{\"463\":1}}],[\"文件的过程中\",{\"1\":{\"463\":1}}],[\"文件的加载\",{\"1\":{\"126\":1}}],[\"文件包含了恢复当前数据集所需的最小命令集合\",{\"1\":{\"463\":1}}],[\"文件包含组合表的信息\",{\"1\":{\"436\":1}}],[\"文件体积变得过大时\",{\"1\":{\"463\":1}}],[\"文件来修改\",{\"1\":{\"436\":1}}],[\"文件存储表定义\",{\"1\":{\"436\":1}}],[\"文件恢复时是不能被正确识别的\",{\"1\":{\"434\":1}}],[\"文件和\",{\"1\":{\"434\":1}}],[\"文件是不行的\",{\"1\":{\"434\":1}}],[\"文件名称\",{\"1\":{\"694\":1}}],[\"文件名以表的名字开始\",{\"1\":{\"436\":1}}],[\"文件名是\",{\"1\":{\"434\":1}}],[\"文件名和表明相同\",{\"1\":{\"433\":1}}],[\"文件中\",{\"1\":{\"434\":2}}],[\"文件中常量池部分的内存映射\",{\"1\":{\"135\":1}}],[\"文件引入的错误\",{\"1\":{\"132\":1}}],[\"文件在文件开头有特定的文件标识\",{\"1\":{\"126\":1}}],[\"文件记录者整个源码的相关信息\",{\"1\":{\"125\":1}}],[\"文件由\",{\"1\":{\"125\":1}}],[\"文件\",{\"1\":{\"26\":1,\"125\":1,\"126\":1,\"395\":1,\"434\":1,\"463\":1}}],[\"~gregor\",{\"1\":{\"52\":1}}],[\"~\",{\"1\":{\"26\":1}}],[\"报以下错误\",{\"1\":{\"26\":1}}],[\"执行命令以应用\",{\"1\":{\"731\":1}}],[\"执行以下命令创建serviceaccount\",{\"1\":{\"729\":1}}],[\"执行以下命令安装\",{\"1\":{\"729\":1}}],[\"执行以下命令进行安装\",{\"1\":{\"461\":1}}],[\"执行黄框复制内容\",{\"1\":{\"727\":1}}],[\"执行绿框复制内容\",{\"1\":{\"726\":1}}],[\"执行红框部分\",{\"1\":{\"725\":1}}],[\"执行结果\",{\"1\":{\"725\":1}}],[\"执行初始化命令\",{\"1\":{\"704\":1}}],[\"执行器\",{\"1\":{\"474\":1}}],[\"执行之前的状态\",{\"1\":{\"463\":1}}],[\"执行情况的说明和描述\",{\"1\":{\"456\":1}}],[\"执行线程2的是cpu2\",{\"1\":{\"204\":1}}],[\"执行引擎的作用及工作过程\",{\"1\":{\"142\":1}}],[\"执行引擎\",{\"0\":{\"142\":1},\"1\":{\"126\":1}}],[\"执行视图可以用过程视图和物理视图共同描述\",{\"1\":{\"111\":1}}],[\"执行自定义\",{\"1\":{\"34\":1}}],[\"执行\",{\"0\":{\"538\":1},\"1\":{\"26\":1,\"34\":1,\"83\":1,\"456\":5,\"537\":1}}],[\"只需调用工厂的某方法就可生成对应的对象\",{\"1\":{\"761\":1}}],[\"只需要修改指针地址即可\",{\"1\":{\"666\":1}}],[\"只需要付出少量存活对象的复制成本就可以完成收集\",{\"1\":{\"147\":1}}],[\"只需要选择\",{\"1\":{\"16\":1,\"716\":1}}],[\"只与你的直接朋友交谈\",{\"1\":{\"755\":1}}],[\"只在\",{\"1\":{\"731\":1}}],[\"只存在仓位控制\",{\"1\":{\"661\":1,\"663\":1}}],[\"只会存放通过setter注入的值\",{\"1\":{\"546\":1}}],[\"只会存在一个\",{\"1\":{\"381\":1}}],[\"只是基础的事务管理\",{\"1\":{\"489\":1}}],[\"只是对注解配置\",{\"1\":{\"472\":1}}],[\"只是在更新数据的时候去判断之前有没有别的线程更新了这个数据\",{\"1\":{\"256\":1}}],[\"只累加一次\",{\"1\":{\"456\":1}}],[\"只用于使用=或<=>操作符的等式比较\",{\"1\":{\"450\":1}}],[\"只含有\",{\"1\":{\"449\":1}}],[\"只对新建的表生效\",{\"1\":{\"434\":1}}],[\"只按年份来算\",{\"1\":{\"430\":1}}],[\"只包含时分秒\",{\"1\":{\"422\":1}}],[\"只包含年月日\",{\"1\":{\"422\":1}}],[\"只复制当前对象\",{\"1\":{\"387\":1}}],[\"只不过需要定时的去执行\",{\"1\":{\"453\":1}}],[\"只不过在操作的时候添加了锁\",{\"1\":{\"316\":1}}],[\"只不过在判断时加锁进而防止并发问题\",{\"1\":{\"315\":1}}],[\"只不过加入了自己特性的一些东西\",{\"1\":{\"313\":1}}],[\"只不过虚拟机栈是服务\",{\"1\":{\"136\":1,\"138\":1}}],[\"只要有可能就应该这样做\",{\"1\":{\"449\":1}}],[\"只要给定类的名称\",{\"1\":{\"399\":1}}],[\"只要散列足够大\",{\"1\":{\"386\":1}}],[\"只要一个不可变的对象被正确地构建出来\",{\"1\":{\"216\":1}}],[\"只要移动堆顶指针\",{\"1\":{\"147\":1}}],[\"只保留一些对外接口使之与外部发生联系\",{\"1\":{\"157\":1}}],[\"只使用一个线程去回收\",{\"1\":{\"148\":1}}],[\"只有一个通信放弃\",{\"1\":{\"597\":1}}],[\"只有一个磁盘文件\",{\"1\":{\"435\":1}}],[\"只有在使用的时候才会进行创建该对象\",{\"1\":{\"760\":1}}],[\"只有在出错时才返回\",{\"1\":{\"746\":1}}],[\"只有在\",{\"1\":{\"462\":1}}],[\"只有在查询条件中使用了创建索引时的第一个字段\",{\"1\":{\"447\":1}}],[\"只有持有写锁的线程可以更新操作\",{\"1\":{\"453\":1}}],[\"只有少量按索引条件更新数据的应用\",{\"1\":{\"452\":1}}],[\"只有少量存活\",{\"1\":{\"147\":1}}],[\"只有\",{\"1\":{\"446\":1}}],[\"只有很少的更新和删操作\",{\"1\":{\"437\":1}}],[\"只有实现了\",{\"1\":{\"401\":1}}],[\"只有当容量大于\",{\"1\":{\"326\":1}}],[\"只有当\",{\"1\":{\"224\":1}}],[\"只有当所有的软件元素都被确定好后\",{\"1\":{\"75\":1}}],[\"只负责\",{\"1\":{\"126\":1}}],[\"只能操作其中个的一段\",{\"1\":{\"667\":1}}],[\"只能访问显示加锁的表\",{\"1\":{\"453\":1}}],[\"只能使用整个关键字来搜索一行\",{\"1\":{\"450\":1}}],[\"只能修饰变量\",{\"1\":{\"396\":1}}],[\"只能初始化一次\",{\"1\":{\"353\":1}}],[\"只能保证单次的读\",{\"1\":{\"281\":1}}],[\"只能用在同步方法或者同步控制块中使用\",{\"1\":{\"252\":1}}],[\"只能靠硬件来完成\",{\"1\":{\"224\":1}}],[\"只能引用integer的值\",{\"1\":{\"175\":1}}],[\"只能接收string或object类型的泛型\",{\"1\":{\"169\":1}}],[\"只能勉强按字面意思翻译\",{\"1\":{\"52\":1}}],[\"只能管理员\",{\"1\":{\"24\":1}}],[\"默认为true\",{\"1\":{\"546\":3}}],[\"默认不是首选的\",{\"1\":{\"546\":1}}],[\"默认不是懒加载\",{\"1\":{\"546\":1}}],[\"默认不进行自动装配\",{\"1\":{\"546\":1}}],[\"默认不进行依赖检查\",{\"1\":{\"546\":2}}],[\"默认作用域名称的常量\",{\"1\":{\"546\":1}}],[\"默认\",{\"1\":{\"456\":1}}],[\"默认支持\",{\"1\":{\"435\":1}}],[\"默认存储格式\",{\"1\":{\"433\":1}}],[\"默认引擎\",{\"1\":{\"433\":1}}],[\"默认值\",{\"1\":{\"373\":8,\"546\":1}}],[\"默认的scope是单例\",{\"1\":{\"546\":1}}],[\"默认的\",{\"1\":{\"437\":1,\"538\":1}}],[\"默认的负载因子\",{\"1\":{\"326\":1}}],[\"默认的初始容量是\",{\"1\":{\"314\":1}}],[\"默认gc线程数为cpu的数量\",{\"1\":{\"148\":1}}],[\"默认30分钟\",{\"1\":{\"24\":1}}],[\"默认是true\",{\"1\":{\"546\":1}}],[\"默认是10次\",{\"1\":{\"257\":1}}],[\"默认是设置delegate是false的\",{\"1\":{\"130\":1}}],[\"默认是everyone\",{\"1\":{\"24\":1}}],[\"默认是db\",{\"1\":{\"24\":1}}],[\"默认是harbor12345\",{\"1\":{\"24\":1}}],[\"默认是http\",{\"1\":{\"24\":1}}],[\"o复用\",{\"0\":{\"735\":1},\"1\":{\"732\":1}}],[\"oss\",{\"1\":{\"703\":1,\"704\":3}}],[\"ohl3k0\",{\"1\":{\"657\":1}}],[\"ohnjec\",{\"1\":{\"113\":2}}],[\"oyjdil\",{\"1\":{\"565\":1}}],[\"oxm\",{\"1\":{\"521\":1}}],[\"ognl\",{\"1\":{\"470\":1}}],[\"obtainfreshbeanfactory\",{\"1\":{\"534\":1}}],[\"obtaining\",{\"1\":{\"360\":1}}],[\"obj\",{\"1\":{\"176\":2,\"345\":2,\"374\":4}}],[\"object>\",{\"1\":{\"495\":1}}],[\"object>>\",{\"1\":{\"495\":1}}],[\"objects\",{\"1\":{\"59\":1,\"73\":1,\"83\":1,\"89\":1,\"97\":12,\"101\":1,\"546\":1}}],[\"object\",{\"0\":{\"365\":2,\"401\":1},\"1\":{\"53\":1,\"57\":2,\"59\":4,\"63\":2,\"65\":2,\"67\":1,\"89\":2,\"91\":3,\"93\":1,\"97\":11,\"107\":1,\"169\":1,\"176\":2,\"235\":3,\"236\":5,\"252\":1,\"253\":1,\"299\":2,\"302\":1,\"325\":7,\"342\":5,\"345\":3,\"355\":1,\"356\":1,\"362\":1,\"365\":6,\"366\":1,\"367\":4,\"368\":2,\"495\":3,\"500\":4,\"502\":4,\"546\":1}}],[\"objectclass=person\",{\"1\":{\"24\":1}}],[\"okhbb7\",{\"1\":{\"562\":1}}],[\"ok\",{\"1\":{\"170\":3}}],[\"oldvalue\",{\"1\":{\"325\":2}}],[\"oldcapacity\",{\"1\":{\"304\":5}}],[\"old的并行版本\",{\"1\":{\"148\":1}}],[\"old是serial\",{\"1\":{\"148\":1}}],[\"old是parallel\",{\"1\":{\"148\":1}}],[\"old策略进行gc\",{\"1\":{\"148\":1}}],[\"old都是单线程进行gc\",{\"1\":{\"148\":1}}],[\"old\",{\"1\":{\"148\":7}}],[\"oader\",{\"1\":{\"129\":1}}],[\"ows3ph\",{\"1\":{\"653\":1}}],[\"owes\",{\"1\":{\"113\":1}}],[\"own\",{\"1\":{\"57\":1,\"97\":6}}],[\"occur\",{\"1\":{\"107\":1}}],[\"omitted\",{\"1\":{\"103\":1}}],[\"omgt\",{\"1\":{\"34\":12,\"39\":1}}],[\"opt\",{\"1\":{\"731\":2}}],[\"option\",{\"1\":{\"153\":4,\"731\":5}}],[\"options\",{\"1\":{\"153\":1}}],[\"optimize\",{\"1\":{\"433\":1,\"453\":1}}],[\"optimizing\",{\"1\":{\"105\":1}}],[\"optimal\",{\"1\":{\"97\":1}}],[\"operator\",{\"1\":{\"366\":1,\"367\":1}}],[\"operating\",{\"1\":{\"81\":1}}],[\"operational\",{\"1\":{\"67\":1}}],[\"operation\",{\"1\":{\"67\":1,\"107\":1}}],[\"operations\",{\"1\":{\"59\":1,\"97\":10}}],[\"open\",{\"1\":{\"746\":1}}],[\"openview\",{\"1\":{\"111\":2}}],[\"openssl\",{\"1\":{\"729\":1}}],[\"opensession\",{\"1\":{\"482\":1}}],[\"opens\",{\"1\":{\"93\":1}}],[\"oom\",{\"0\":{\"394\":1},\"1\":{\"394\":1}}],[\"oo\",{\"1\":{\"59\":1}}],[\"outofmemoryerror\",{\"1\":{\"136\":1,\"138\":1,\"304\":2}}],[\"outline\",{\"1\":{\"109\":2}}],[\"out\",{\"1\":{\"97\":1,\"107\":1,\"164\":4,\"166\":3,\"167\":1,\"169\":1,\"342\":3,\"345\":3,\"442\":1,\"443\":1,\"482\":1,\"521\":1,\"729\":1}}],[\"outside\",{\"1\":{\"97\":2}}],[\"outs\",{\"1\":{\"67\":1}}],[\"our\",{\"1\":{\"57\":1,\"130\":1}}],[\"ou=harbor\",{\"1\":{\"26\":1}}],[\"ou=people\",{\"1\":{\"24\":2}}],[\"otherwise\",{\"1\":{\"363\":1,\"365\":1,\"366\":1,\"368\":2}}],[\"others\",{\"1\":{\"83\":1}}],[\"other\",{\"1\":{\"57\":3,\"59\":1,\"89\":1,\"95\":1,\"97\":11,\"105\":1,\"109\":1,\"111\":2,\"356\":1,\"367\":1,\"538\":2}}],[\"otn\",{\"1\":{\"29\":1}}],[\"overflow\",{\"1\":{\"304\":3}}],[\"overloading\",{\"1\":{\"162\":1}}],[\"override\",{\"1\":{\"130\":2,\"161\":1,\"179\":1,\"180\":2,\"342\":2,\"345\":1,\"481\":1,\"493\":1,\"500\":1,\"531\":1}}],[\"overhead\",{\"1\":{\"97\":1}}],[\"over\",{\"1\":{\"55\":1,\"97\":3,\"358\":1}}],[\"offline\",{\"1\":{\"704\":1}}],[\"offset\",{\"1\":{\"462\":6}}],[\"off\",{\"1\":{\"67\":1,\"81\":1,\"93\":1}}],[\"office\",{\"1\":{\"65\":1}}],[\"often\",{\"1\":{\"55\":1,\"111\":1}}],[\"of\",{\"0\":{\"53\":1,\"64\":1,\"72\":1,\"80\":1,\"86\":1,\"92\":1},\"1\":{\"53\":6,\"55\":10,\"57\":19,\"59\":11,\"61\":1,\"63\":2,\"65\":11,\"67\":17,\"69\":5,\"71\":2,\"73\":3,\"75\":8,\"77\":3,\"79\":4,\"81\":9,\"83\":4,\"85\":2,\"87\":3,\"89\":6,\"91\":1,\"93\":4,\"95\":1,\"97\":44,\"99\":6,\"101\":2,\"105\":7,\"107\":17,\"109\":4,\"111\":5,\"113\":1,\"355\":1,\"356\":4,\"357\":4,\"358\":5,\"359\":3,\"360\":3,\"362\":4,\"364\":4,\"365\":1,\"366\":2,\"367\":5,\"368\":5,\"500\":1,\"502\":1,\"533\":1,\"538\":1,\"540\":1,\"541\":1}}],[\"orm\",{\"1\":{\"472\":2,\"521\":1}}],[\"orthogonal\",{\"1\":{\"95\":1}}],[\"original\",{\"0\":{\"356\":1},\"1\":{\"356\":5,\"538\":1}}],[\"originally\",{\"1\":{\"69\":1}}],[\"oriented\",{\"1\":{\"53\":1,\"57\":1,\"59\":1,\"63\":1}}],[\"orderedpostprocessors\",{\"1\":{\"538\":4,\"540\":4}}],[\"orderedpostprocessornames\",{\"1\":{\"538\":4,\"540\":4}}],[\"ordered\",{\"1\":{\"538\":6,\"540\":3}}],[\"ordering\",{\"1\":{\"367\":1}}],[\"order\",{\"1\":{\"57\":1,\"79\":1,\"107\":1,\"430\":12,\"450\":1,\"459\":1}}],[\"or\",{\"1\":{\"55\":9,\"57\":2,\"59\":3,\"63\":1,\"67\":6,\"69\":1,\"71\":1,\"75\":5,\"79\":1,\"81\":1,\"83\":3,\"85\":1,\"95\":1,\"97\":13,\"99\":1,\"101\":1,\"103\":1,\"105\":3,\"107\":9,\"111\":1,\"364\":1,\"367\":3,\"368\":1,\"456\":1,\"459\":1,\"493\":1}}],[\"organizing\",{\"1\":{\"105\":1}}],[\"organized\",{\"1\":{\"57\":1,\"75\":1}}],[\"organize\",{\"1\":{\"55\":1}}],[\"organization\",{\"1\":{\"55\":1,\"57\":1,\"75\":2,\"81\":1,\"99\":1,\"107\":1,\"109\":1,\"111\":1}}],[\"org\",{\"1\":{\"29\":1,\"478\":2,\"479\":3,\"481\":1,\"482\":5,\"521\":7,\"731\":2}}],[\"oraclelicense=accept\",{\"1\":{\"29\":1}}],[\"oracle\",{\"1\":{\"29\":2}}],[\"o\",{\"0\":{\"733\":1,\"734\":1,\"736\":1,\"737\":1},\"1\":{\"27\":1,\"202\":2,\"246\":1,\"299\":2,\"342\":5,\"380\":1,\"695\":2,\"725\":1,\"732\":4,\"734\":1,\"746\":1}}],[\"o=vmware\",{\"1\":{\"26\":1}}],[\"o=\",{\"1\":{\"26\":1}}],[\"once\",{\"1\":{\"533\":1}}],[\"only\",{\"1\":{\"59\":1,\"61\":1,\"75\":1,\"79\":1,\"97\":4,\"103\":2,\"363\":1,\"365\":1,\"541\":1}}],[\"online\",{\"1\":{\"23\":2}}],[\"onto\",{\"1\":{\"57\":1,\"83\":1,\"85\":1,\"97\":4,\"101\":1}}],[\"ones\",{\"1\":{\"57\":1,\"89\":1,\"538\":1}}],[\"one\",{\"1\":{\"55\":4,\"57\":1,\"67\":1,\"71\":1,\"73\":1,\"75\":1,\"87\":1,\"95\":1,\"99\":3,\"101\":1,\"103\":1,\"111\":1,\"366\":1,\"367\":1,\"531\":1}}],[\"on\",{\"1\":{\"24\":3,\"53\":1,\"55\":3,\"57\":1,\"59\":1,\"65\":2,\"67\":5,\"69\":2,\"73\":1,\"75\":2,\"79\":1,\"81\":1,\"83\":2,\"87\":1,\"89\":1,\"93\":1,\"97\":6,\"107\":3,\"111\":1,\"130\":1,\"364\":1,\"367\":1,\"430\":26,\"439\":2,\"447\":2,\"546\":1,\"731\":1}}],[\"本篇文章是本人结合网上文章和个人理解进行总结得到的\",{\"1\":{\"680\":1}}],[\"本质也是通过观察者模式实现\",{\"1\":{\"544\":1}}],[\"本文只是为了演示\",{\"1\":{\"341\":1}}],[\"本文提出了一种模型\",{\"1\":{\"53\":1}}],[\"本人虽然也学习并使用了很长的时间\",{\"1\":{\"680\":1}}],[\"本人认为此处是进行初始化\",{\"1\":{\"535\":1}}],[\"本人代码库\",{\"0\":{\"522\":1}}],[\"本人结合源码和网络上的相关文章进行了总结\",{\"1\":{\"298\":1}}],[\"本人水平有限\",{\"1\":{\"52\":1}}],[\"本地方法栈中jni引用的对象\",{\"1\":{\"146\":1}}],[\"本地方法栈\",{\"0\":{\"138\":1},\"1\":{\"136\":1}}],[\"本地呼叫的一个场景雏形\",{\"1\":{\"93\":1}}],[\"本译文按\",{\"1\":{\"105\":1}}],[\"本段第一句\",{\"1\":{\"105\":1}}],[\"本次存储\",{\"1\":{\"24\":1}}],[\"本科\",{\"1\":{\"3\":1}}],[\"如类\",{\"1\":{\"750\":1}}],[\"如下代码可以看出通过\",{\"1\":{\"531\":1}}],[\"如设置参数\",{\"1\":{\"474\":1}}],[\"如与前面的\",{\"1\":{\"219\":1}}],[\"如何优化\",{\"1\":{\"459\":1}}],[\"如何使用的\",{\"0\":{\"695\":1}}],[\"如何使用\",{\"1\":{\"457\":1}}],[\"如何执行\",{\"1\":{\"456\":1}}],[\"如何提供按需禁用缓存和编译优化的方法\",{\"1\":{\"207\":1}}],[\"如何获取泛型的参数类型\",{\"0\":{\"177\":1}}],[\"如何理解泛型类型不能实例化\",{\"0\":{\"176\":1}}],[\"如何理解泛型的多态\",{\"0\":{\"174\":1}}],[\"如何理解基本类型不能作为泛型类型\",{\"0\":{\"175\":1}}],[\"如何进行擦除\",{\"0\":{\"173\":1}}],[\"如何判断一个对象是否还存活\",{\"0\":{\"146\":1}}],[\"如\",{\"1\":{\"89\":1,\"229\":1,\"341\":1,\"442\":1,\"446\":1,\"493\":1}}],[\"如e\",{\"1\":{\"59\":1}}],[\"如ladp\",{\"1\":{\"24\":1}}],[\"如果文件结束\",{\"1\":{\"746\":1}}],[\"如果您访问\",{\"1\":{\"731\":1}}],[\"如果同一个关键码有多个\",{\"1\":{\"675\":1}}],[\"如果为false\",{\"1\":{\"546\":1}}],[\"如果容器中有多个相同类型的\",{\"1\":{\"546\":1}}],[\"如果master\",{\"1\":{\"463\":1}}],[\"如果主节点由于故障下线了\",{\"1\":{\"463\":1}}],[\"如果所连接的redis实例因为故障下线了\",{\"1\":{\"463\":1}}],[\"如果你不小心执行了\",{\"1\":{\"463\":1}}],[\"如果你希望在redis意外停止工作\",{\"1\":{\"463\":1}}],[\"如果数据集巨大并且cpu性能不是很好的情况下\",{\"1\":{\"463\":1}}],[\"如果数据已经被其他线程更新\",{\"1\":{\"256\":1}}],[\"如果出现网络问题或者主机宕机等问题\",{\"1\":{\"462\":1}}],[\"如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止\",{\"1\":{\"462\":1}}],[\"如果将一个\",{\"1\":{\"450\":1}}],[\"如果既没有主键又没有唯一索引\",{\"1\":{\"449\":1}}],[\"如果既是生产又是消费\",{\"1\":{\"169\":1}}],[\"如果对字符串列进行索引\",{\"1\":{\"449\":1}}],[\"如果对象是并发的\",{\"1\":{\"97\":1}}],[\"如果有配置\",{\"1\":{\"731\":1}}],[\"如果有明确定义的主键\",{\"1\":{\"449\":1}}],[\"如果有函数从其他类型的数据库迁移到\",{\"1\":{\"443\":1}}],[\"如果有不相等的则返回插值\",{\"1\":{\"367\":1}}],[\"如果应用对事务的完整性有比较高的要求\",{\"1\":{\"437\":1}}],[\"如果应用是以读操作和插入操作为主\",{\"1\":{\"437\":1}}],[\"如果是从节点下线了\",{\"1\":{\"463\":1}}],[\"如果是个分区表\",{\"1\":{\"434\":1}}],[\"如果是组合索引\",{\"1\":{\"434\":1,\"447\":1}}],[\"如果是这个流程\",{\"1\":{\"279\":1}}],[\"如果需要对自定义对象进行判断是否相等\",{\"1\":{\"365\":1}}],[\"如果需要解决\",{\"1\":{\"226\":1}}],[\"如果大量拼接\",{\"1\":{\"353\":1}}],[\"如果要被代理的对象不是个实现类那么\",{\"1\":{\"349\":1}}],[\"如果要被代理的对象是个实现类\",{\"1\":{\"349\":1}}],[\"如果要实现更大范围操作的原子性\",{\"1\":{\"212\":1}}],[\"如果当前插入的位置等于元素数量即当前集合数据已满\",{\"1\":{\"304\":1}}],[\"如果以x86处理为例\",{\"1\":{\"276\":1}}],[\"如果可见的\",{\"1\":{\"274\":1}}],[\"如果可以\",{\"1\":{\"176\":1,\"712\":1}}],[\"如果线程t对数据a加上共享锁后\",{\"1\":{\"261\":1}}],[\"如果线程t对数据a加上排它锁后\",{\"1\":{\"261\":1}}],[\"如果自旋超过了限定次数\",{\"1\":{\"257\":1}}],[\"如果锁被占用的时间很长\",{\"1\":{\"257\":1}}],[\"如果锁被占用的时间很短\",{\"1\":{\"257\":1}}],[\"如果物理机器有多个处理器\",{\"1\":{\"257\":1}}],[\"如果这个数据没有被更新\",{\"1\":{\"256\":1}}],[\"如果某些部分必须在其它部分之前完成\",{\"1\":{\"250\":1}}],[\"如果该线程处于阻塞\",{\"1\":{\"246\":1}}],[\"如果其线程释放了锁就会结束此状态\",{\"1\":{\"234\":1}}],[\"如果能保证\",{\"1\":{\"229\":1}}],[\"如果一些有序的数据存储可能会导致退化为链表\",{\"1\":{\"671\":1}}],[\"如果一段代码中所需要的数据必须与其他代码共享\",{\"1\":{\"229\":1}}],[\"如果一个节点是红的\",{\"1\":{\"672\":1}}],[\"如果一个队列\",{\"1\":{\"453\":1}}],[\"如果一个类没有使用\",{\"1\":{\"406\":1}}],[\"如果一个线程的\",{\"1\":{\"247\":1}}],[\"如果一个方法本来就不涉及共享数据\",{\"1\":{\"227\":1}}],[\"如果一个变量初次读取的时候是\",{\"1\":{\"226\":1}}],[\"如果操作\",{\"1\":{\"211\":1,\"388\":1}}],[\"如果使用了被\",{\"1\":{\"180\":1}}],[\"如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型\",{\"1\":{\"172\":1}}],[\"如果类型参数是无限制通配符或没有上下界限定则替换为object\",{\"1\":{\"172\":1}}],[\"如果它表示一个\",{\"1\":{\"169\":1}}],[\"如果参数化类型表示一个\",{\"1\":{\"169\":1}}],[\"如果没有则等待到可以弹出的元素或者等到超时时间\",{\"1\":{\"462\":2}}],[\"如果没有则调用\",{\"1\":{\"327\":1}}],[\"如果没有主键\",{\"1\":{\"449\":1}}],[\"如果没有释放锁\",{\"1\":{\"252\":1}}],[\"如果没有其它线程争用共享数据\",{\"1\":{\"224\":1}}],[\"如果没有泛型\",{\"1\":{\"164\":1}}],[\"如果没有加载过\",{\"1\":{\"130\":1}}],[\"如果不修改\",{\"1\":{\"731\":1}}],[\"如果不重写\",{\"1\":{\"365\":1}}],[\"如果不在返回内会抛出stringindexoutofboundsexception异常\",{\"1\":{\"364\":1}}],[\"如果不存在数据依赖性\",{\"1\":{\"206\":1}}],[\"如果不能继承一个类\",{\"1\":{\"161\":1}}],[\"如果不想浪费50\",{\"1\":{\"147\":1}}],[\"如果父类的一个方法被声明为\",{\"1\":{\"161\":1}}],[\"如果父加载器也没找到\",{\"1\":{\"130\":1}}],[\"如果指定了选项\",{\"1\":{\"148\":1}}],[\"如果扩展到无法申请到足够的内存就会抛出\",{\"1\":{\"136\":1,\"138\":1}}],[\"如果上述都没有找到\",{\"1\":{\"130\":1}}],[\"如果本地应用目录下还有没有这个类\",{\"1\":{\"130\":1}}],[\"如果先加载这个类\",{\"1\":{\"130\":1}}],[\"如果\",{\"1\":{\"130\":2,\"392\":1,\"462\":1}}],[\"如果加载过就返回\",{\"1\":{\"130\":1}}],[\"如果加载过就返回缓存中的\",{\"1\":{\"130\":1}}],[\"如果在三次握手之后却只进行了一次查询这就会浪费较多的资源\",{\"1\":{\"500\":1}}],[\"如果在自旋完成后前面锁定同步资源的线程已经释放了锁\",{\"1\":{\"257\":1}}],[\"如果在运行过程中发生异常也会提前结束\",{\"1\":{\"245\":1}}],[\"如果在webappclassloader没找到类\",{\"1\":{\"130\":1}}],[\"如果在本地目录没有找到\",{\"1\":{\"130\":1}}],[\"如果设置为true那么就按照双亲委派机制加载类\",{\"1\":{\"130\":1}}],[\"如果设置https\",{\"1\":{\"24\":1}}],[\"如果找不到在交给父加载器去加载\",{\"1\":{\"129\":1}}],[\"如果收到类加载的请求\",{\"1\":{\"129\":1}}],[\"如果条件允许\",{\"1\":{\"107\":1}}],[\"如果只有一个处理器而且只有一个进程或程序时\",{\"1\":{\"103\":1}}],[\"如果我们确实需要实例化一个泛型\",{\"1\":{\"176\":1}}],[\"如果我们观察\",{\"1\":{\"99\":1}}],[\"如果我们比较图3b和图6\",{\"1\":{\"99\":1}}],[\"如果定义对象的内部行为很重要\",{\"1\":{\"59\":1}}],[\"如果映射端口为\",{\"1\":{\"12\":1}}],[\"启动命令如下\",{\"1\":{\"692\":1}}],[\"启动容器\",{\"0\":{\"683\":1}}],[\"启动\",{\"0\":{\"25\":1},\"1\":{\"27\":1,\"67\":1,\"435\":1}}],[\"启动harbor后\",{\"1\":{\"24\":1}}],[\"启动docker\",{\"1\":{\"9\":1}}],[\"<>\",{\"1\":{\"546\":1}}],[\"<bean><qualifier><\",{\"1\":{\"546\":1}}],[\"<blockquote>\",{\"1\":{\"367\":2}}],[\"<select\",{\"1\":{\"479\":1}}],[\"<sample\",{\"1\":{\"24\":1}}],[\"<mapper\",{\"1\":{\"478\":1,\"479\":1}}],[\"<mappers>\",{\"1\":{\"478\":1}}],[\"<datasource\",{\"1\":{\"478\":1}}],[\"<environment\",{\"1\":{\"478\":1}}],[\"<environments\",{\"1\":{\"478\":1}}],[\"<configuration>\",{\"1\":{\"478\":1}}],[\"<3\",{\"1\":{\"430\":1}}],[\"<property\",{\"1\":{\"478\":8}}],[\"<properties>\",{\"1\":{\"478\":1}}],[\"<pre>\",{\"1\":{\"367\":2,\"368\":1}}],[\"<p>if\",{\"1\":{\"364\":1}}],[\"<p>\",{\"1\":{\"358\":1,\"360\":1,\"366\":1,\"367\":1}}],[\"<i>k<\",{\"1\":{\"367\":2}}],[\"<li>\",{\"1\":{\"366\":3}}],[\"<ul>\",{\"1\":{\"366\":1}}],[\"<a\",{\"1\":{\"362\":1,\"364\":1,\"430\":1}}],[\"<=\",{\"1\":{\"304\":2,\"450\":1}}],[\"<\",{\"1\":{\"169\":5,\"176\":1,\"304\":2,\"364\":1,\"366\":1,\"367\":3,\"368\":2,\"430\":15,\"450\":1,\"478\":13,\"479\":6,\"546\":2,\"673\":1}}],[\"<transactionmanager\",{\"1\":{\"478\":1}}],[\"<t>\",{\"1\":{\"176\":1,\"345\":1,\"532\":1}}],[\"<t\",{\"1\":{\"164\":1}}],[\"<<eof\",{\"1\":{\"22\":1,\"731\":2}}],[\"<<\",{\"1\":{\"11\":1,\"326\":2}}],[\"f1361db2\",{\"1\":{\"731\":1}}],[\"fd\",{\"1\":{\"731\":3,\"746\":5}}],[\"fstat\",{\"1\":{\"746\":1}}],[\"fstab\",{\"1\":{\"731\":4}}],[\"fs\",{\"1\":{\"694\":2,\"695\":3,\"743\":1}}],[\"fsync\",{\"1\":{\"463\":3}}],[\"fsync是由后台线程进行处理的\",{\"1\":{\"463\":1}}],[\"f8vk2a\",{\"1\":{\"656\":1}}],[\"fyehfi\",{\"1\":{\"646\":1}}],[\"fxgyfl\",{\"1\":{\"646\":1}}],[\"fwik4i\",{\"1\":{\"623\":1}}],[\"further\",{\"1\":{\"538\":1}}],[\"fun\",{\"1\":{\"169\":3}}],[\"function\",{\"1\":{\"358\":1,\"444\":1,\"445\":1}}],[\"function<\",{\"1\":{\"325\":1}}],[\"functions\",{\"1\":{\"107\":1}}],[\"functionality\",{\"1\":{\"55\":1,\"57\":1,\"81\":1,\"107\":1,\"111\":1}}],[\"functional\",{\"1\":{\"53\":2,\"57\":1,\"59\":2,\"67\":1,\"83\":1,\"97\":1}}],[\"fulltext\",{\"1\":{\"446\":2,\"447\":1}}],[\"full\",{\"1\":{\"97\":1,\"103\":1}}],[\"fully\",{\"1\":{\"95\":1}}],[\"frontend\",{\"1\":{\"731\":1}}],[\"from\",{\"0\":{\"96\":1,\"98\":1,\"100\":1},\"1\":{\"24\":1,\"34\":1,\"55\":2,\"57\":3,\"59\":1,\"61\":1,\"65\":1,\"67\":2,\"69\":3,\"71\":1,\"77\":2,\"81\":2,\"85\":2,\"93\":1,\"97\":5,\"103\":1,\"111\":3,\"130\":5,\"141\":1,\"353\":1,\"360\":1,\"364\":1,\"430\":114,\"456\":1,\"479\":1}}],[\"free\",{\"1\":{\"704\":1}}],[\"freezer\",{\"1\":{\"694\":1}}],[\"frequency\",{\"1\":{\"107\":1}}],[\"frm\",{\"1\":{\"433\":1,\"434\":3,\"435\":1,\"436\":1}}],[\"fragment\",{\"1\":{\"93\":1}}],[\"framework\",{\"1\":{\"81\":2,\"519\":1,\"522\":1}}],[\"federated\",{\"1\":{\"431\":1}}],[\"fence\",{\"1\":{\"206\":1}}],[\"feature\",{\"1\":{\"65\":1}}],[\"few\",{\"1\":{\"57\":1,\"65\":1,\"97\":1,\"107\":1}}],[\"flushall\",{\"1\":{\"463\":3}}],[\"flush\",{\"1\":{\"436\":1}}],[\"float\",{\"1\":{\"164\":3,\"326\":1,\"373\":2}}],[\"flow\",{\"1\":{\"67\":1,\"93\":1}}],[\"flows\",{\"1\":{\"55\":1}}],[\"flags表示read\",{\"1\":{\"746\":1}}],[\"flags\",{\"1\":{\"746\":1}}],[\"flaws\",{\"1\":{\"107\":1}}],[\"flavor\",{\"1\":{\"57\":1}}],[\"flights\",{\"1\":{\"97\":3}}],[\"flight\",{\"1\":{\"97\":11}}],[\"flexible\",{\"1\":{\"83\":1}}],[\"folds\",{\"1\":{\"111\":1}}],[\"folded\",{\"1\":{\"111\":1}}],[\"follow\",{\"1\":{\"731\":1}}],[\"follows\",{\"1\":{\"109\":1,\"367\":1}}],[\"following\",{\"1\":{\"95\":1,\"366\":1}}],[\"found\",{\"1\":{\"99\":1,\"107\":1,\"111\":1,\"130\":1,\"535\":1,\"786\":1}}],[\"four\",{\"1\":{\"57\":1,\"89\":1}}],[\"focuses\",{\"1\":{\"69\":1,\"75\":1}}],[\"focus\",{\"1\":{\"59\":1}}],[\"fork\",{\"1\":{\"746\":1}}],[\"fork的过程是非常耗时的\",{\"1\":{\"463\":1}}],[\"forname\",{\"1\":{\"130\":4,\"399\":2}}],[\"forward=1\",{\"1\":{\"731\":1}}],[\"forwardfor\",{\"1\":{\"731\":1}}],[\"forward\",{\"1\":{\"77\":1,\"731\":2}}],[\"forth\",{\"1\":{\"59\":1}}],[\"format\",{\"1\":{\"430\":7}}],[\"format=b\",{\"1\":{\"150\":1}}],[\"form\",{\"1\":{\"57\":1,\"59\":2,\"67\":1,\"81\":1,\"97\":1,\"107\":1}}],[\"formula2\",{\"1\":{\"57\":1}}],[\"forms\",{\"1\":{\"57\":3,\"85\":1}}],[\"for\",{\"0\":{\"60\":1,\"62\":1,\"68\":1,\"70\":1,\"76\":1,\"78\":1,\"84\":1,\"90\":1},\"1\":{\"53\":1,\"57\":5,\"59\":2,\"61\":2,\"63\":2,\"65\":5,\"67\":7,\"69\":4,\"71\":2,\"73\":1,\"75\":8,\"77\":2,\"79\":1,\"83\":5,\"85\":1,\"87\":2,\"89\":2,\"91\":3,\"93\":2,\"97\":9,\"99\":4,\"101\":2,\"103\":1,\"105\":3,\"107\":4,\"109\":1,\"111\":2,\"113\":1,\"353\":3,\"364\":1,\"367\":1,\"439\":2,\"532\":2,\"533\":1,\"535\":3,\"538\":7,\"540\":6,\"544\":3}}],[\"f\",{\"1\":{\"34\":4,\"87\":2,\"150\":1,\"449\":1,\"729\":2,\"730\":1,\"731\":3}}],[\"fast\",{\"0\":{\"404\":1}}],[\"faster\",{\"1\":{\"360\":1}}],[\"fastthread\",{\"1\":{\"151\":1}}],[\"familiarity\",{\"1\":{\"107\":1}}],[\"fault\",{\"1\":{\"67\":1,\"83\":1,\"111\":1}}],[\"factorymethodname\",{\"1\":{\"546\":1}}],[\"factorybeanname\",{\"1\":{\"546\":1}}],[\"factorybeans\",{\"1\":{\"538\":2,\"544\":1}}],[\"factory\",{\"1\":{\"521\":2,\"538\":3}}],[\"factor\",{\"1\":{\"326\":1}}],[\"fact\",{\"1\":{\"57\":1}}],[\"far\",{\"1\":{\"55\":1,\"538\":1}}],[\"failure\",{\"1\":{\"97\":1}}],[\"fail\",{\"0\":{\"404\":1},\"1\":{\"26\":1,\"500\":1,\"502\":1}}],[\"false\",{\"1\":{\"24\":1,\"130\":3,\"363\":1,\"365\":3,\"366\":1,\"368\":4,\"373\":1,\"390\":1,\"533\":1,\"538\":5,\"540\":1,\"544\":1,\"546\":3}}],[\"fi\",{\"1\":{\"731\":1}}],[\"fifo\",{\"1\":{\"668\":1}}],[\"fifth\",{\"1\":{\"57\":1}}],[\"field1\",{\"1\":{\"462\":1}}],[\"field2\",{\"1\":{\"462\":2}}],[\"field\",{\"1\":{\"399\":1,\"462\":11}}],[\"first\",{\"1\":{\"310\":1,\"364\":2,\"436\":1,\"538\":4,\"540\":1,\"544\":1}}],[\"firewalld\",{\"1\":{\"6\":2,\"731\":2}}],[\"fixedthreadpool\",{\"1\":{\"241\":2}}],[\"finally\",{\"0\":{\"392\":2},\"1\":{\"392\":2,\"495\":2,\"538\":2,\"540\":1,\"544\":1}}],[\"final的实现原理\",{\"0\":{\"276\":1}}],[\"final域读\",{\"1\":{\"275\":1}}],[\"final域写\",{\"1\":{\"275\":1}}],[\"final域写针对编译器和处理器重排序增加了这样的约束\",{\"1\":{\"273\":1}}],[\"final域为引用类型\",{\"0\":{\"272\":1}}],[\"final域为基本类型\",{\"0\":{\"269\":1}}],[\"final域重排序规则\",{\"0\":{\"268\":1}}],[\"final方法是可以被重载的\",{\"1\":{\"265\":1}}],[\"final类中的所有方法都隐式为final\",{\"1\":{\"264\":1}}],[\"final基础使用\",{\"0\":{\"263\":1}}],[\"finalize\",{\"1\":{\"211\":1,\"388\":1,\"401\":1}}],[\"final\",{\"0\":{\"210\":1,\"262\":1,\"388\":1},\"1\":{\"161\":3,\"207\":1,\"353\":3,\"379\":1,\"388\":6,\"493\":3,\"546\":12}}],[\"findloadedclass\",{\"1\":{\"130\":1}}],[\"findloadedclass0\",{\"1\":{\"130\":1}}],[\"findclassinternal\",{\"1\":{\"130\":4}}],[\"findclass\",{\"1\":{\"130\":4}}],[\"find\",{\"1\":{\"111\":1,\"496\":1}}],[\"fit\",{\"1\":{\"67\":1,\"71\":1}}],[\"figures\",{\"1\":{\"87\":1,\"109\":1}}],[\"figure3\",{\"1\":{\"65\":1}}],[\"figure\",{\"1\":{\"57\":1,\"61\":1,\"65\":2,\"69\":1,\"73\":1,\"77\":1,\"79\":1,\"81\":1,\"85\":1,\"87\":4,\"93\":1,\"97\":1,\"109\":1}}],[\"fig\",{\"1\":{\"57\":1,\"69\":1,\"81\":1,\"91\":2,\"93\":1,\"97\":1,\"99\":2,\"109\":1}}],[\"five\",{\"1\":{\"53\":1,\"57\":2,\"81\":1,\"107\":1}}],[\"film\",{\"1\":{\"439\":2}}],[\"filarey\",{\"1\":{\"67\":2}}],[\"file2\",{\"1\":{\"746\":2}}],[\"file1\",{\"1\":{\"746\":1}}],[\"filesystemxmlapplicationcontext\",{\"1\":{\"530\":1}}],[\"file=dumpfile\",{\"1\":{\"150\":1}}],[\"file\",{\"1\":{\"26\":13,\"434\":2,\"435\":1,\"746\":5}}],[\"filters\",{\"1\":{\"71\":1}}],[\"filter\",{\"1\":{\"24\":1,\"130\":1,\"299\":2}}],[\"邮件设置\",{\"1\":{\"24\":1}}],[\"邮箱\",{\"1\":{\"3\":1}}],[\"则修改\",{\"1\":{\"731\":1}}],[\"则修改集合中key\",{\"1\":{\"325\":1}}],[\"则可执行清楚集群命令或者删除集群的所有主机命令进行重置\",{\"1\":{\"712\":1}}],[\"则可能导致无法做安装节点\",{\"1\":{\"18\":1,\"718\":1}}],[\"则在以下情况\",{\"1\":{\"546\":1}}],[\"则用传入的\",{\"1\":{\"532\":1}}],[\"则按照主键顺序保存\",{\"1\":{\"449\":1}}],[\"则对此列进行索引没有多大用处\",{\"1\":{\"449\":1}}],[\"则每个分区对应单独的\",{\"1\":{\"434\":1}}],[\"则表示父表在更新或者删除的时候\",{\"1\":{\"434\":1}}],[\"则表示这个变量可以被本地代码引用\",{\"1\":{\"181\":1}}],[\"则默认比较内存地址\",{\"1\":{\"365\":1}}],[\"则执行\",{\"1\":{\"327\":1}}],[\"则链接在链表后\",{\"1\":{\"327\":1}}],[\"则传入\",{\"1\":{\"325\":1}}],[\"则通过链表进行链接\",{\"1\":{\"386\":1}}],[\"则通过\",{\"1\":{\"325\":1}}],[\"则重新赋值\",{\"1\":{\"325\":1}}],[\"则进行添加\",{\"1\":{\"325\":1}}],[\"则直接调用的addall\",{\"1\":{\"308\":1}}],[\"则需要判断扩容\",{\"1\":{\"304\":1}}],[\"则需要进行扩容\",{\"1\":{\"304\":1}}],[\"则第一次扩容容量会变更为\",{\"1\":{\"304\":1}}],[\"则会阻塞进程\",{\"1\":{\"733\":1}}],[\"则会通过链表进行相互连接\",{\"1\":{\"675\":1}}],[\"则会进行master\",{\"1\":{\"463\":1}}],[\"则会进行默认为容量是\",{\"1\":{\"304\":1}}],[\"则会直接\",{\"1\":{\"392\":1}}],[\"则会把元素赋值给this\",{\"1\":{\"302\":1}}],[\"则会给属性\",{\"1\":{\"302\":1}}],[\"则抛出异常\",{\"1\":{\"302\":1}}],[\"则其他线程只能对a再加共享锁\",{\"1\":{\"261\":1}}],[\"则其他线程不能再对a加任何类型的锁\",{\"1\":{\"261\":1}}],[\"则根据不同的实现方式执行不同的操作\",{\"1\":{\"256\":1}}],[\"则相当于调用每个线程的\",{\"1\":{\"248\":1}}],[\"则就变成了\",{\"1\":{\"176\":1}}],[\"则不能重写该类的方法\",{\"1\":{\"161\":1}}],[\"则新生代默认使用parnew\",{\"1\":{\"148\":1}}],[\"则证明此对象是不可用的\",{\"1\":{\"146\":1}}],[\"则由\",{\"1\":{\"126\":1}}],[\"则nginx\",{\"1\":{\"24\":1}}],[\"=file\",{\"1\":{\"456\":1}}],[\"=或者<>\",{\"1\":{\"450\":1}}],[\"=a\",{\"1\":{\"430\":1}}],[\"=0\",{\"1\":{\"430\":1}}],[\"=10这句时\",{\"1\":{\"204\":1}}],[\"==\",{\"0\":{\"377\":1,\"390\":1},\"1\":{\"130\":2,\"304\":1,\"327\":1,\"363\":1,\"365\":2,\"366\":3,\"377\":1,\"495\":1,\"500\":1,\"502\":1,\"532\":2,\"533\":1,\"539\":1,\"541\":1}}],[\"=\",{\"1\":{\"24\":30,\"26\":2,\"57\":2,\"130\":31,\"164\":4,\"166\":6,\"167\":3,\"169\":5,\"170\":6,\"176\":1,\"204\":1,\"274\":1,\"304\":2,\"326\":6,\"327\":1,\"342\":3,\"345\":3,\"353\":1,\"355\":1,\"356\":2,\"357\":1,\"359\":1,\"360\":1,\"365\":7,\"366\":1,\"367\":9,\"368\":6,\"383\":4,\"391\":2,\"430\":68,\"431\":1,\"434\":1,\"444\":2,\"445\":2,\"456\":1,\"479\":1,\"481\":2,\"482\":5,\"493\":4,\"495\":8,\"496\":14,\"500\":1,\"502\":8,\"521\":3,\"530\":2,\"531\":1,\"532\":8,\"533\":3,\"538\":18,\"540\":11,\"541\":6,\"542\":3,\"544\":3,\"546\":29,\"695\":2,\"731\":3}}],[\"xv6系统调用\",{\"1\":{\"746\":1}}],[\"xvf\",{\"1\":{\"23\":1}}],[\"xzyxwi\",{\"1\":{\"656\":1}}],[\"xkpnk5\",{\"1\":{\"650\":1}}],[\"xml文件\",{\"1\":{\"483\":1}}],[\"xml\",{\"1\":{\"468\":1,\"472\":3,\"473\":1,\"478\":2,\"479\":1,\"482\":1,\"483\":1}}],[\"x\",{\"1\":{\"420\":3}}],[\"xxl\",{\"0\":{\"793\":1}}],[\"xxxmapper\",{\"1\":{\"468\":1}}],[\"xxx\",{\"1\":{\"456\":2}}],[\"xx\",{\"1\":{\"148\":10,\"257\":1}}],[\"xip\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"x64\",{\"1\":{\"29\":1}}],[\"x86不会对写\",{\"1\":{\"276\":1}}],[\"x86\",{\"1\":{\"22\":1,\"731\":1}}],[\"可手工拉取\",{\"1\":{\"730\":1}}],[\"可互通\",{\"1\":{\"722\":1}}],[\"可实现动态扩容\",{\"1\":{\"463\":1}}],[\"可采用cluster方案达到负载均衡的目的\",{\"1\":{\"463\":1}}],[\"可查看日志信息进行排查\",{\"1\":{\"730\":1}}],[\"可查看命令的执行次数\",{\"1\":{\"456\":1}}],[\"可查看当前数据库支持的引擎\",{\"1\":{\"431\":1}}],[\"可利用的\",{\"1\":{\"449\":1}}],[\"可提供极快的访问\",{\"1\":{\"437\":1}}],[\"可使用\",{\"1\":{\"434\":1}}],[\"可使用锁或者volatile\",{\"1\":{\"274\":1}}],[\"可通过写锁进行解决\",{\"1\":{\"454\":1}}],[\"可通过\",{\"1\":{\"434\":1}}],[\"可通过cookiecutter进行模板化生成\",{\"1\":{\"37\":1}}],[\"可靠安全\",{\"1\":{\"371\":1}}],[\"可靠性\",{\"1\":{\"83\":1}}],[\"可看出其本质和sqlrunner类一致\",{\"1\":{\"496\":1}}],[\"可看出\",{\"1\":{\"360\":1}}],[\"可选操作\",{\"1\":{\"299\":1}}],[\"可重入锁的一个优点是可一定程度避免死锁\",{\"1\":{\"260\":1}}],[\"可重入锁又名递归锁\",{\"1\":{\"260\":1}}],[\"可重入锁\",{\"0\":{\"260\":1}}],[\"可重入代码有一些共同的特征\",{\"1\":{\"230\":1}}],[\"可运行\",{\"0\":{\"233\":1}}],[\"可见性实现\",{\"0\":{\"285\":1}}],[\"可见性\",{\"0\":{\"204\":1,\"213\":1}}],[\"可见性问题主要指一个线程修改了共享变量值\",{\"1\":{\"280\":1}}],[\"可见性问题\",{\"1\":{\"99\":1,\"202\":1}}],[\"可见这会使得cpu的利用率尽可能的高\",{\"1\":{\"148\":1}}],[\"可达性分析\",{\"1\":{\"146\":1}}],[\"可能没有\",{\"1\":{\"731\":1}}],[\"可能加密\",{\"1\":{\"463\":1}}],[\"可能使用的索引\",{\"1\":{\"456\":1}}],[\"可能得\",{\"1\":{\"386\":1}}],[\"可能正在运行\",{\"1\":{\"233\":1}}],[\"可能会导致redis在一些毫秒级内不能响应客户端的请求\",{\"1\":{\"463\":1}}],[\"可能会导致无法访问\",{\"1\":{\"12\":1}}],[\"可能会因为错误的操作导致数据的丢失\",{\"1\":{\"434\":1}}],[\"可能会抛出\",{\"1\":{\"243\":1}}],[\"可能会产生较长的停顿\",{\"1\":{\"148\":1}}],[\"可能还包括字符串字而量和数字常量\",{\"1\":{\"135\":1}}],[\"可理解性\",{\"1\":{\"111\":1}}],[\"可复用性\",{\"1\":{\"111\":1,\"115\":1}}],[\"可复用性或通用性相关的内部需求\",{\"1\":{\"75\":1}}],[\"可用性\",{\"1\":{\"111\":2}}],[\"可移植性\",{\"1\":{\"75\":1,\"111\":1}}],[\"可移植性和可用性\",{\"1\":{\"57\":1}}],[\"可扩展性\",{\"1\":{\"57\":1,\"111\":1}}],[\"可再生资源入库问题\",{\"1\":{\"49\":1}}],[\"可再生资源运输问题\",{\"1\":{\"49\":1}}],[\"可设置通知\",{\"1\":{\"31\":1}}],[\"可设置定时构建\",{\"1\":{\"31\":1}}],[\"可指定文件执行\",{\"1\":{\"31\":1}}],[\"可以由一个线程监控多个网络请求\",{\"1\":{\"735\":1}}],[\"可以看到当前的内存使用是\",{\"1\":{\"695\":1}}],[\"可以看到主要是调用\",{\"1\":{\"532\":1}}],[\"可以识别来自特定\",{\"1\":{\"694\":1}}],[\"可以相互导通\",{\"1\":{\"679\":1}}],[\"可以入栈和出栈\",{\"1\":{\"667\":1}}],[\"可以随意添加数据\",{\"1\":{\"666\":1}}],[\"可以搏明天出异动或者卖点前置今日卖出\",{\"1\":{\"601\":1}}],[\"可以考虑是首阴收盘介入还是第二天高开的时候介入\",{\"1\":{\"582\":1,\"590\":1,\"597\":1}}],[\"可以知道datasourcefactory的设计是采用了工厂模式\",{\"1\":{\"497\":1}}],[\"可以配置多个\",{\"1\":{\"478\":1}}],[\"可以采用布隆过滤器解决此问题\",{\"1\":{\"464\":1}}],[\"可以提供更有保证的最大延迟时间\",{\"1\":{\"463\":1}}],[\"可以让一些进程只能看到与自己相关的一部分资源\",{\"1\":{\"696\":1}}],[\"可以让\",{\"1\":{\"463\":1}}],[\"可以执行一些\",{\"1\":{\"462\":1}}],[\"可以进行消息的持久化和消息的主备模式\",{\"1\":{\"462\":1}}],[\"可以实时查看\",{\"1\":{\"456\":1}}],[\"可以设置存储引擎并发插入将\",{\"1\":{\"453\":1}}],[\"可以设计出低耦合的系统\",{\"1\":{\"372\":1}}],[\"可以有效地改善\",{\"1\":{\"437\":1}}],[\"可以有\",{\"1\":{\"436\":1}}],[\"可以比较方便地进行单表备份和恢复操作\",{\"1\":{\"434\":1}}],[\"可以是\",{\"1\":{\"439\":2}}],[\"可以是多个文件\",{\"1\":{\"434\":1}}],[\"可以是线程结束任务之后自己结束\",{\"1\":{\"237\":1}}],[\"可以重复\",{\"1\":{\"400\":1}}],[\"可以重新安排语句的执行顺序\",{\"1\":{\"206\":1}}],[\"可以调用包装类的\",{\"1\":{\"399\":1}}],[\"可以抛出的异常有三种\",{\"1\":{\"393\":1}}],[\"可以存在链表长度大于\",{\"1\":{\"326\":1}}],[\"可以切换给其它线程来执行\",{\"1\":{\"244\":1}}],[\"可以说任务是通过线程驱动从而执行的\",{\"1\":{\"238\":1}}],[\"可以根据这个类名进行加载实例化\",{\"1\":{\"198\":1}}],[\"可以根据自己的需求定义注解\",{\"1\":{\"179\":1}}],[\"可以用来启用框架扩展和替换组件\",{\"1\":{\"198\":1}}],[\"可以用状态转换图或状态图来完成\",{\"1\":{\"59\":1}}],[\"可以对包\",{\"1\":{\"179\":1}}],[\"可以对场景进行综合\",{\"1\":{\"107\":1}}],[\"可以当做\",{\"1\":{\"158\":1}}],[\"可以继承自\",{\"1\":{\"158\":1}}],[\"可以更容易被程序员理解\",{\"1\":{\"157\":1}}],[\"可以独立地开发\",{\"1\":{\"157\":1}}],[\"可以指定在删除\",{\"1\":{\"434\":1}}],[\"可以指定等待的条件\",{\"1\":{\"254\":1}}],[\"可以指定gc线程数\",{\"1\":{\"148\":1}}],[\"可以指定运行脚本等\",{\"1\":{\"31\":1}}],[\"可以通过简单积木的组合形成复杂的\",{\"1\":{\"765\":1}}],[\"可以通过硬件提高应用程序的高性能\",{\"1\":{\"742\":1}}],[\"可以通过下表进行快速访问\",{\"1\":{\"665\":1}}],[\"可以通过分布式锁解决此问题\",{\"1\":{\"464\":1}}],[\"可以通过修改\",{\"1\":{\"436\":1}}],[\"可以通过实现该接口定义横切逻辑\",{\"1\":{\"341\":1}}],[\"可以通过volatile关键字来保证一定的\",{\"1\":{\"214\":1}}],[\"可以通过synchronized和lock来实现\",{\"1\":{\"212\":1}}],[\"可以通过\",{\"1\":{\"211\":1,\"388\":1,\"435\":1,\"456\":1}}],[\"可以通过反射进行获取参数的实际类型\",{\"1\":{\"177\":1}}],[\"可以通过反射实现\",{\"1\":{\"176\":1}}],[\"可以通过剖析确定哪些模块影响了系统的性能\",{\"1\":{\"157\":1}}],[\"可以通过参数来打开自适应调节策略\",{\"1\":{\"148\":1}}],[\"可以通过复制进程来增加负载处理的分布性\",{\"1\":{\"67\":1}}],[\"可以被看做一棵树的数组对象\",{\"1\":{\"676\":1}}],[\"可以被\",{\"1\":{\"129\":1}}],[\"可以省略过程视图\",{\"1\":{\"103\":1}}],[\"可以为每个group\",{\"1\":{\"694\":1}}],[\"可以为\",{\"1\":{\"77\":1}}],[\"可以先列出影响开发架构的规则\",{\"1\":{\"75\":1}}],[\"可以分给一个或少数几个开发者来开发\",{\"1\":{\"75\":1}}],[\"可以基于过程蓝图来评估消息流和过程负载\",{\"1\":{\"67\":1}}],[\"可以在创建分区的时候指定每个分区的数据文件的位置\",{\"1\":{\"434\":1}}],[\"可以在\",{\"1\":{\"254\":1,\"463\":1}}],[\"可以在代码执行的任何时刻中断它\",{\"1\":{\"230\":1}}],[\"可以在不太影响应用软件的情况下\",{\"1\":{\"69\":1}}],[\"可以在一个处理节点上被独立调用控制线程\",{\"1\":{\"67\":1}}],[\"可以在指定目录下载\",{\"1\":{\"23\":1}}],[\"可以使用任何类作为\",{\"0\":{\"406\":1}}],[\"可以使用类似\",{\"1\":{\"71\":1}}],[\"可以使用\",{\"1\":{\"59\":1,\"148\":1,\"229\":1,\"257\":1}}],[\"可以使用其它设计方法\",{\"1\":{\"57\":1}}],[\"可以使用其它的表示法和工具\",{\"1\":{\"57\":1}}],[\"可以使用ip\",{\"1\":{\"24\":1}}],[\"可以围绕这四个视图来组织\",{\"1\":{\"57\":1}}],[\">80\",{\"1\":{\"692\":2}}],[\">2\",{\"1\":{\"430\":1}}],[\">地址相同\",{\"1\":{\"366\":1}}],[\">surrogate<\",{\"1\":{\"364\":1}}],[\">unicode\",{\"1\":{\"362\":1}}],[\">runtimeexception\",{\"1\":{\"130\":2}}],[\">classnotfoundexception\",{\"1\":{\"130\":1}}],[\">exception\",{\"1\":{\"130\":1}}],[\">=90\",{\"1\":{\"430\":1}}],[\">=\",{\"1\":{\"130\":1,\"364\":1,\"368\":1,\"430\":9,\"450\":1}}],[\">>>\",{\"1\":{\"327\":1}}],[\">>\",{\"1\":{\"34\":1,\"130\":1,\"304\":1,\"721\":1,\"729\":2,\"731\":3}}],[\">部署的脚本\",{\"1\":{\"34\":1}}],[\">推送镜像\",{\"1\":{\"34\":1}}],[\">\",{\"1\":{\"22\":1,\"30\":1,\"34\":1,\"130\":6,\"169\":1,\"170\":5,\"176\":1,\"299\":4,\"304\":1,\"368\":1,\"422\":1,\"430\":5,\"456\":1,\"478\":20,\"479\":6,\"496\":1,\"531\":1,\"544\":1,\"546\":2,\"731\":3}}],[\"vymng6\",{\"1\":{\"631\":1}}],[\"vldb\",{\"1\":{\"437\":1}}],[\"vs\",{\"0\":{\"239\":1,\"256\":1,\"257\":1,\"258\":3,\"259\":1,\"260\":1,\"261\":1}}],[\"vector\",{\"0\":{\"313\":1},\"1\":{\"219\":1,\"300\":4,\"313\":1}}],[\"very\",{\"1\":{\"57\":2,\"59\":1,\"61\":1,\"79\":1,\"81\":1,\"85\":1,\"91\":1,\"99\":2,\"101\":1,\"103\":1,\"107\":1}}],[\"version=\",{\"1\":{\"478\":1,\"479\":1}}],[\"versions\",{\"1\":{\"67\":1}}],[\"version\",{\"1\":{\"39\":1,\"40\":1,\"521\":2,\"704\":1,\"731\":1}}],[\"verify\",{\"0\":{\"132\":1},\"1\":{\"24\":1}}],[\"v>>\",{\"1\":{\"326\":1}}],[\"v>\",{\"1\":{\"166\":1,\"325\":3,\"326\":1}}],[\"vmid\",{\"1\":{\"153\":3}}],[\"v\",{\"1\":{\"113\":2,\"166\":3,\"224\":3,\"325\":7,\"731\":1}}],[\"volatile是无法保证这三个操作是具有原子性的\",{\"1\":{\"282\":1}}],[\"volatile不能保证完全的原子性\",{\"1\":{\"281\":1}}],[\"volatile关键字能有效的解决这个问题\",{\"1\":{\"280\":1}}],[\"volatile的作用详解\",{\"0\":{\"278\":1}}],[\"volatile\",{\"0\":{\"208\":1,\"277\":1,\"284\":1,\"285\":1,\"286\":1,\"287\":3,\"288\":1},\"1\":{\"207\":1,\"211\":2,\"285\":1,\"288\":13,\"388\":2,\"546\":1}}],[\"void\",{\"1\":{\"166\":5,\"167\":2,\"169\":5,\"342\":3,\"345\":2,\"481\":2,\"482\":1,\"496\":3,\"521\":1,\"531\":1,\"532\":1,\"533\":1,\"535\":1,\"536\":1,\"538\":1,\"540\":1,\"541\":1,\"542\":1,\"544\":1}}],[\"voice\",{\"1\":{\"65\":1}}],[\"vous\",{\"1\":{\"111\":2}}],[\"vale1\",{\"1\":{\"462\":1}}],[\"value=\",{\"1\":{\"478\":8}}],[\"value2\",{\"1\":{\"462\":1}}],[\"value1\",{\"1\":{\"462\":3}}],[\"values\",{\"1\":{\"325\":1,\"367\":1,\"426\":12,\"427\":3,\"428\":3,\"429\":18,\"439\":1,\"495\":1,\"538\":1}}],[\"value为integer\",{\"1\":{\"166\":1}}],[\"value\",{\"0\":{\"357\":1},\"1\":{\"166\":5,\"304\":2,\"325\":17,\"353\":3,\"355\":3,\"356\":2,\"357\":6,\"359\":1,\"360\":1,\"362\":1,\"363\":1,\"364\":9,\"365\":4,\"366\":3,\"367\":11,\"368\":4,\"400\":1,\"462\":34,\"675\":1}}],[\"valid\",{\"1\":{\"93\":1,\"358\":1,\"367\":1,\"502\":1}}],[\"validaterequiredproperties\",{\"1\":{\"533\":1}}],[\"validate\",{\"1\":{\"93\":1,\"105\":1,\"533\":1}}],[\"validation\",{\"1\":{\"89\":1}}],[\"varchar\",{\"1\":{\"426\":3,\"427\":2,\"428\":2,\"429\":2,\"446\":1,\"447\":1}}],[\"var的类型由t指定\",{\"1\":{\"166\":1}}],[\"varies\",{\"1\":{\"107\":1}}],[\"variations\",{\"1\":{\"81\":1,\"97\":1}}],[\"variation\",{\"1\":{\"77\":1}}],[\"variants\",{\"1\":{\"71\":1}}],[\"various\",{\"1\":{\"53\":1,\"59\":1,\"83\":3,\"95\":1,\"101\":1,\"111\":1}}],[\"var\",{\"1\":{\"27\":1,\"166\":5,\"167\":7,\"169\":12,\"731\":3}}],[\"virtual\",{\"1\":{\"124\":1}}],[\"visible\",{\"1\":{\"99\":1}}],[\"visibility\",{\"1\":{\"75\":1,\"99\":1}}],[\"via\",{\"1\":{\"67\":1,\"73\":1,\"360\":1}}],[\"viewed\",{\"1\":{\"67\":1}}],[\"views\",{\"0\":{\"94\":1},\"1\":{\"53\":4,\"55\":1,\"57\":5,\"89\":1,\"95\":2,\"99\":4,\"103\":2,\"109\":1,\"111\":2}}],[\"view\",{\"0\":{\"53\":1,\"60\":1,\"62\":1,\"68\":1,\"70\":1,\"78\":1,\"96\":1},\"1\":{\"53\":1,\"57\":11,\"59\":1,\"61\":1,\"63\":2,\"67\":1,\"69\":1,\"71\":1,\"75\":1,\"79\":1,\"85\":1,\"89\":1,\"91\":2,\"95\":1,\"97\":2,\"99\":2,\"101\":2,\"103\":4,\"111\":13,\"113\":1,\"115\":2}}],[\"vi\",{\"1\":{\"28\":1,\"721\":1,\"723\":1,\"743\":1}}],[\"vim\",{\"1\":{\"24\":1}}],[\"v1beta2\",{\"1\":{\"731\":2}}],[\"v1beta1\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"v1\",{\"1\":{\"23\":2,\"32\":2,\"34\":2,\"40\":2,\"365\":2,\"367\":2,\"704\":1,\"729\":1,\"731\":3}}],[\"v3\",{\"1\":{\"21\":1,\"730\":1,\"731\":1}}],[\"v2\",{\"1\":{\"19\":6,\"365\":2,\"367\":2,\"729\":1}}],[\"通信介质\",{\"1\":{\"111\":1}}],[\"通信协议在第1层或更低层的子系统中\",{\"1\":{\"99\":1}}],[\"通信工程\",{\"0\":{\"649\":1},\"1\":{\"3\":1}}],[\"通用类加载器\",{\"1\":{\"129\":1}}],[\"通用性的可能\",{\"1\":{\"107\":1}}],[\"通用的网关机制在第2层子系统中\",{\"1\":{\"99\":1}}],[\"通用\",{\"1\":{\"57\":1}}],[\"通常\",{\"1\":{\"97\":1}}],[\"通常软件架构没有考虑到所有\",{\"1\":{\"55\":1}}],[\"通常是什么都用同样的符号在表达\",{\"1\":{\"55\":1}}],[\"通过抽象工厂进行生成工厂\",{\"1\":{\"762\":1}}],[\"通过工厂类能够进行生成所需对象\",{\"1\":{\"761\":1}}],[\"通过不断的轮询fd的可读状态来知道是否就可读的数据\",{\"1\":{\"736\":1}}],[\"通过以上内容可以看出在启动容器的时候\",{\"1\":{\"695\":1}}],[\"通过查看\",{\"1\":{\"695\":1}}],[\"通过unionfs来实现文件资源你的隔离\",{\"1\":{\"692\":1}}],[\"通过cgroup来实现物力资源的隔离\",{\"1\":{\"692\":1}}],[\"通过namespace\",{\"1\":{\"692\":1}}],[\"通过key和value来映射到集合中的一个位置\",{\"1\":{\"675\":1}}],[\"通过指针进行访问下一个\",{\"1\":{\"666\":1}}],[\"通过指定\",{\"1\":{\"453\":1}}],[\"通过指定启动参数\",{\"1\":{\"453\":1}}],[\"通过加入\",{\"1\":{\"539\":1}}],[\"通过类创建\",{\"1\":{\"532\":1}}],[\"通过跟踪\",{\"1\":{\"532\":1}}],[\"通过注册的类来进行扫描相关注解实现组件的注册\",{\"1\":{\"531\":1}}],[\"通过传入的参数值\",{\"1\":{\"470\":1}}],[\"通过传入的字符组进行复制\",{\"1\":{\"357\":1}}],[\"通过传入的字符串的位置进行获取\",{\"1\":{\"364\":1}}],[\"通过传入的字符串\",{\"1\":{\"356\":1}}],[\"通过传入参数构建动态\",{\"0\":{\"470\":1},\"1\":{\"469\":1}}],[\"通过动态代理机制生成一个\",{\"1\":{\"468\":1}}],[\"通过框架监听mysql的binlog\",{\"1\":{\"464\":1}}],[\"通过gossip协议同步节点信息\",{\"1\":{\"463\":1}}],[\"通过分数返回有序集合指定区间内的成员\",{\"1\":{\"462\":1}}],[\"通过索引\",{\"1\":{\"462\":1}}],[\"通过索引区间返回有序集合指定区间内的成员\",{\"1\":{\"462\":1}}],[\"通过索引的方式获取列表中的元素\",{\"1\":{\"462\":1}}],[\"通过索引通常可以帮助用户解决大多数的\",{\"1\":{\"457\":1}}],[\"通过慢查询日志定位查询慢的\",{\"1\":{\"456\":1}}],[\"通过命令了解各种\",{\"1\":{\"456\":1}}],[\"通过一定机制生成一致性数据快照\",{\"1\":{\"454\":1}}],[\"通过一个类的全限定名获取定义此类的`二进制例\",{\"1\":{\"127\":1}}],[\"通过执行命令\",{\"1\":{\"453\":1}}],[\"通过sqlsessionfactory开启sqlsession进行执行对应\",{\"1\":{\"483\":1}}],[\"通过show\",{\"1\":{\"453\":1,\"456\":1}}],[\"通过synchronized和lock也能够保证可见性\",{\"1\":{\"213\":1}}],[\"通过序列化\",{\"1\":{\"385\":1}}],[\"通过字典区间返回有序集合的成员\",{\"1\":{\"462\":1}}],[\"通过字符组的长度从而获得字符串的长度\",{\"1\":{\"362\":1}}],[\"通过字节码生成的方式加快反射速度\",{\"1\":{\"399\":1}}],[\"通过字节码技术动态创建子类实例\",{\"1\":{\"345\":1}}],[\"通过字节组进行创建对象\",{\"1\":{\"358\":1}}],[\"通过设置\",{\"1\":{\"355\":1}}],[\"通过设置一些属性\",{\"1\":{\"326\":1}}],[\"通过修改其字节码生成子类来处理\",{\"1\":{\"347\":1}}],[\"通过jdk\",{\"1\":{\"343\":1}}],[\"通过集合进行初始化的\",{\"1\":{\"308\":1}}],[\"通过equals判断数据是否相等\",{\"1\":{\"303\":1}}],[\"通过插入特定类型的内存屏障来禁止+\",{\"1\":{\"285\":1}}],[\"通过调用一个线程的\",{\"1\":{\"246\":1}}],[\"通过调用\",{\"1\":{\"236\":1}}],[\"通过内存屏障指令来禁止特定类型的处理器重排序\",{\"1\":{\"206\":1}}],[\"通过切面实现解耦\",{\"0\":{\"187\":1}}],[\"通过代码里标识的元数据让编译器在编译期间进行检查验证\",{\"1\":{\"179\":1}}],[\"通过代码里标识的元数据生成javadoc文档\",{\"1\":{\"179\":1}}],[\"通过子类实例化对象\",{\"1\":{\"167\":1}}],[\"通过构造方法设置属性内容\",{\"1\":{\"167\":1}}],[\"通过泛型\",{\"1\":{\"164\":1}}],[\"通过泛型可以将类型参数化\",{\"1\":{\"164\":1}}],[\"通过泛型指定的不同类型来控制形参具体限制的类型\",{\"1\":{\"163\":1}}],[\"通过控制台进行查看流水线日志\",{\"1\":{\"35\":1}}],[\"通过\",{\"0\":{\"20\":1},\"1\":{\"32\":1,\"301\":1,\"325\":1,\"359\":3,\"399\":1,\"456\":2,\"468\":1,\"470\":1,\"483\":1,\"696\":1}}],[\"wkdgay\",{\"1\":{\"651\":1}}],[\"wzanji\",{\"1\":{\"645\":1}}],[\"wp0ene\",{\"1\":{\"642\":1}}],[\"wrapexception\",{\"1\":{\"506\":2}}],[\"write文件描述符放在p\",{\"1\":{\"746\":1}}],[\"write\",{\"1\":{\"453\":1,\"746\":2}}],[\"wrf\",{\"1\":{\"383\":2}}],[\"w\",{\"1\":{\"107\":1,\"111\":1,\"113\":2}}],[\"watch\",{\"1\":{\"725\":1}}],[\"waited的值越高\",{\"1\":{\"453\":1}}],[\"wait\",{\"0\":{\"252\":1,\"253\":1},\"1\":{\"235\":1,\"236\":3,\"252\":2,\"253\":2,\"254\":1,\"401\":1,\"746\":1}}],[\"waiting\",{\"0\":{\"235\":1,\"236\":1},\"1\":{\"97\":1}}],[\"warning\",{\"1\":{\"731\":1}}],[\"warn\",{\"1\":{\"130\":2}}],[\"way\",{\"1\":{\"107\":1}}],[\"ways\",{\"1\":{\"97\":1}}],[\"wake\",{\"1\":{\"93\":1}}],[\"want\",{\"1\":{\"111\":1}}],[\"wan\",{\"1\":{\"67\":1,\"111\":1}}],[\"whose\",{\"1\":{\"97\":1,\"109\":1,\"367\":1}}],[\"whole\",{\"1\":{\"63\":1}}],[\"while\",{\"1\":{\"97\":1,\"365\":1,\"367\":1,\"368\":1,\"496\":2,\"538\":1}}],[\"which\",{\"1\":{\"55\":1,\"57\":6,\"65\":1,\"67\":2,\"69\":2,\"73\":3,\"89\":1,\"97\":4,\"101\":1,\"109\":1,\"367\":1}}],[\"where\",{\"1\":{\"107\":1,\"368\":1,\"430\":68,\"444\":1,\"445\":1,\"447\":1,\"449\":1,\"456\":1,\"479\":1}}],[\"whereas\",{\"1\":{\"87\":1}}],[\"when\",{\"1\":{\"57\":1,\"75\":1,\"93\":1,\"97\":1,\"101\":1,\"130\":1,\"358\":2,\"367\":1,\"430\":12,\"540\":2}}],[\"what\",{\"1\":{\"59\":1,\"111\":1}}],[\"words\",{\"1\":{\"356\":1}}],[\"word解决加锁问题\",{\"1\":{\"258\":1}}],[\"world\",{\"1\":{\"148\":1}}],[\"worker\",{\"1\":{\"731\":2}}],[\"worker节点\",{\"0\":{\"727\":1}}],[\"workers\",{\"1\":{\"24\":1}}],[\"workdir\",{\"1\":{\"34\":1}}],[\"work\",{\"1\":{\"16\":1,\"57\":2,\"75\":1,\"89\":1,\"716\":1}}],[\"would\",{\"1\":{\"71\":1,\"113\":1,\"367\":1}}],[\"wolf\",{\"1\":{\"57\":2}}],[\"wolfe\",{\"1\":{\"57\":2}}],[\"west\",{\"1\":{\"725\":1}}],[\"weaver\",{\"1\":{\"535\":1,\"539\":1}}],[\"weaving\",{\"1\":{\"535\":1}}],[\"weakreference\",{\"1\":{\"383\":3}}],[\"weakhashmap\",{\"0\":{\"329\":1}}],[\"weekofyear\",{\"1\":{\"430\":4}}],[\"weeks\",{\"1\":{\"107\":1}}],[\"were\",{\"1\":{\"105\":1}}],[\"weight\",{\"1\":{\"67\":1}}],[\"well\",{\"1\":{\"57\":2,\"67\":2,\"75\":1,\"79\":1}}],[\"went\",{\"1\":{\"55\":1}}],[\"we\",{\"1\":{\"55\":2,\"57\":11,\"59\":1,\"61\":1,\"63\":1,\"67\":1,\"69\":2,\"71\":1,\"79\":1,\"83\":1,\"89\":2,\"91\":1,\"97\":9,\"99\":4,\"105\":3,\"107\":1,\"111\":2,\"130\":1,\"538\":2,\"544\":2}}],[\"webapplicationcontextutils\",{\"1\":{\"536\":2}}],[\"webappclassloader\",{\"0\":{\"130\":1},\"1\":{\"129\":2,\"130\":3}}],[\"websocket\",{\"1\":{\"521\":1}}],[\"webflux\",{\"1\":{\"521\":1}}],[\"webmvc\",{\"1\":{\"521\":1}}],[\"web\",{\"1\":{\"34\":3,\"111\":2,\"129\":9,\"229\":2,\"437\":1,\"521\":1,\"536\":1,\"543\":1}}],[\"webhooks\",{\"1\":{\"31\":1}}],[\"wide\",{\"1\":{\"725\":1}}],[\"witt等人提出了架构设计的4个阶段\",{\"1\":{\"105\":1}}],[\"witt等人提出的方法\",{\"1\":{\"97\":1}}],[\"witt\",{\"1\":{\"97\":1,\"105\":1}}],[\"withscores\",{\"1\":{\"462\":4}}],[\"without\",{\"1\":{\"69\":1,\"85\":2,\"111\":1}}],[\"within\",{\"1\":{\"67\":1,\"73\":1,\"111\":1}}],[\"with\",{\"1\":{\"53\":1,\"57\":5,\"59\":1,\"67\":1,\"71\":2,\"81\":1,\"85\":2,\"87\":2,\"89\":1,\"91\":1,\"97\":7,\"99\":2,\"105\":2,\"107\":5,\"111\":4,\"368\":1,\"538\":1}}],[\"will\",{\"1\":{\"57\":2,\"83\":1,\"89\":1,\"107\":1}}],[\"windows\",{\"0\":{\"413\":1},\"1\":{\"19\":1}}],[\"window\",{\"1\":{\"19\":1}}],[\"www\",{\"1\":{\"52\":1,\"151\":1}}],[\"wget\",{\"1\":{\"23\":1,\"27\":1,\"29\":2,\"703\":1,\"704\":4,\"731\":2}}],[\"gqfyzz\",{\"1\":{\"655\":1}}],[\"gwi0ey\",{\"1\":{\"650\":1}}],[\"g1gc\",{\"1\":{\"148\":2}}],[\"g1垃圾回收器将堆内存分割成不同的区域然后并发的对其进行垃圾回收\",{\"1\":{\"148\":1}}],[\"g1垃圾回收器\",{\"1\":{\"148\":1}}],[\"gceasy\",{\"1\":{\"151\":1}}],[\"gcpauseintervalmillis=200\",{\"1\":{\"148\":1}}],[\"gc时间\",{\"1\":{\"148\":1}}],[\"gc策略\",{\"1\":{\"148\":3}}],[\"gc\",{\"1\":{\"146\":1}}],[\"gateways\",{\"1\":{\"99\":1}}],[\"gateway\",{\"1\":{\"99\":3}}],[\"garlan\",{\"1\":{\"55\":2,\"71\":2}}],[\"guide\",{\"1\":{\"731\":1}}],[\"guidelines\",{\"1\":{\"107\":1,\"109\":1}}],[\"guideline\",{\"1\":{\"63\":1}}],[\"guarantee\",{\"1\":{\"97\":1}}],[\"g\",{\"1\":{\"97\":2,\"107\":2,\"113\":2,\"431\":1,\"441\":1,\"456\":1,\"538\":1,\"731\":5}}],[\"google\",{\"1\":{\"731\":1}}],[\"googleapis\",{\"1\":{\"23\":1}}],[\"godoc\",{\"1\":{\"731\":1}}],[\"goes\",{\"1\":{\"444\":1,\"445\":1}}],[\"goals\",{\"1\":{\"109\":1}}],[\"goldberg6所指出的主要抽象\",{\"1\":{\"107\":1}}],[\"goldberg6\",{\"1\":{\"89\":2,\"107\":1}}],[\"govern\",{\"1\":{\"75\":1}}],[\"grep\",{\"1\":{\"692\":1,\"729\":3}}],[\"greater\",{\"1\":{\"99\":2,\"107\":1,\"367\":2,\"368\":1}}],[\"gradle文件为一下内容\",{\"1\":{\"521\":1}}],[\"gradle中的include\",{\"1\":{\"520\":1}}],[\"graphical\",{\"1\":{\"69\":1}}],[\"grows\",{\"1\":{\"105\":1}}],[\"grouping\",{\"1\":{\"75\":1}}],[\"groupings\",{\"1\":{\"55\":1}}],[\"group\",{\"1\":{\"67\":1,\"430\":26,\"459\":1,\"496\":1,\"521\":2,\"731\":1}}],[\"groups\",{\"1\":{\"65\":1,\"71\":1,\"101\":1}}],[\"grouped\",{\"1\":{\"59\":1,\"99\":1}}],[\"group=root\",{\"1\":{\"28\":1}}],[\"gif\",{\"1\":{\"731\":1}}],[\"given\",{\"1\":{\"97\":1,\"358\":1,\"365\":1}}],[\"give\",{\"1\":{\"57\":1}}],[\"giving\",{\"1\":{\"57\":1}}],[\"gist\",{\"1\":{\"55\":1}}],[\"gitee\",{\"1\":{\"522\":1}}],[\"githubusercontent\",{\"1\":{\"729\":1}}],[\"github\",{\"1\":{\"151\":1,\"519\":1,\"704\":1}}],[\"git\",{\"1\":{\"3\":1,\"519\":2,\"522\":1}}],[\"globals\",{\"1\":{\"130\":1}}],[\"global\",{\"1\":{\"30\":1,\"456\":1,\"731\":2}}],[\"gpg\",{\"1\":{\"731\":2}}],[\"gpgkey=http\",{\"1\":{\"731\":1}}],[\"gpgcheck=0\",{\"1\":{\"22\":1,\"731\":2}}],[\"gpw\",{\"1\":{\"29\":1}}],[\"gpasswd\",{\"1\":{\"28\":1}}],[\"genkey\",{\"1\":{\"495\":3}}],[\"generation\",{\"1\":{\"344\":1}}],[\"generatebeanname\",{\"1\":{\"532\":1}}],[\"generate\",{\"1\":{\"26\":1}}],[\"generated\",{\"1\":{\"26\":11,\"69\":1,\"495\":2}}],[\"generally\",{\"1\":{\"360\":1}}],[\"general\",{\"1\":{\"89\":1,\"99\":1}}],[\"genericsdemo21\",{\"1\":{\"169\":1}}],[\"genericsdemo24\",{\"1\":{\"167\":1}}],[\"genericsdemo09\",{\"1\":{\"166\":1}}],[\"genericsdemo06\",{\"1\":{\"166\":1}}],[\"generic\",{\"1\":{\"57\":1}}],[\"geo\",{\"1\":{\"462\":1}}],[\"getapplicationeventmulticaster\",{\"1\":{\"544\":3}}],[\"getapplicationlisteners\",{\"1\":{\"544\":1}}],[\"getandincrement\",{\"1\":{\"225\":1}}],[\"getinternalparentmessagesource\",{\"1\":{\"541\":2}}],[\"getid\",{\"1\":{\"481\":1}}],[\"getpid\",{\"1\":{\"746\":1}}],[\"getparentmessagesource\",{\"1\":{\"541\":1}}],[\"getproxy\",{\"1\":{\"345\":2}}],[\"getting\",{\"1\":{\"540\":1,\"731\":1}}],[\"gettempclassloader\",{\"1\":{\"539\":1}}],[\"getenvironment\",{\"1\":{\"533\":1,\"535\":4}}],[\"getdisplayname\",{\"1\":{\"533\":1}}],[\"getdeclaringclass\",{\"1\":{\"500\":1,\"502\":1}}],[\"getsimplename\",{\"1\":{\"542\":1}}],[\"getsystemenvironment\",{\"1\":{\"535\":1}}],[\"getsystemproperties\",{\"1\":{\"535\":1}}],[\"getscopename\",{\"1\":{\"532\":1}}],[\"getself\",{\"1\":{\"493\":4}}],[\"getset\",{\"1\":{\"462\":1}}],[\"getbeanpostprocessorcount\",{\"1\":{\"540\":1}}],[\"getbeannamesfortype\",{\"1\":{\"538\":4,\"540\":1,\"544\":1}}],[\"getbeanclassloader\",{\"1\":{\"535\":2,\"539\":1}}],[\"getbeanfactory\",{\"1\":{\"534\":1,\"541\":1,\"542\":1}}],[\"getbean\",{\"1\":{\"521\":1,\"538\":6,\"540\":3,\"541\":1,\"542\":1}}],[\"getbeandefinition\",{\"1\":{\"521\":1}}],[\"getbit\",{\"1\":{\"462\":1}}],[\"getgeneratedkeys\",{\"1\":{\"495\":1}}],[\"getname\",{\"1\":{\"481\":1,\"482\":1,\"500\":1,\"502\":1}}],[\"getmetadata\",{\"1\":{\"532\":1}}],[\"getmessage\",{\"1\":{\"130\":2}}],[\"getmapper\",{\"1\":{\"468\":1}}],[\"getresults\",{\"1\":{\"495\":1}}],[\"getresourceasstream\",{\"1\":{\"482\":1}}],[\"getresource\",{\"1\":{\"130\":1}}],[\"getrange\",{\"1\":{\"462\":1}}],[\"getclass\",{\"1\":{\"399\":1,\"542\":1}}],[\"getclassloadinglock\",{\"1\":{\"130\":1}}],[\"getclassloader\",{\"1\":{\"130\":1,\"342\":1,\"502\":1,\"535\":1}}],[\"getordefault\",{\"1\":{\"325\":1}}],[\"getvalue\",{\"1\":{\"166\":2,\"359\":2,\"360\":1}}],[\"getvar\",{\"1\":{\"166\":2,\"167\":3,\"169\":2}}],[\"getkey\",{\"1\":{\"166\":2}}],[\"getjavaseclassloader\",{\"1\":{\"130\":1}}],[\"get\",{\"1\":{\"22\":1,\"97\":1,\"325\":1,\"462\":1,\"495\":1,\"725\":2,\"726\":1,\"727\":1,\"729\":1,\"731\":1}}],[\"gz\",{\"1\":{\"19\":2,\"29\":2,\"704\":5}}],[\"tc\",{\"1\":{\"694\":1}}],[\"tcp\",{\"1\":{\"500\":1,\"692\":2,\"731\":2}}],[\"tytx8v\",{\"1\":{\"649\":1}}],[\"typical\",{\"1\":{\"109\":1}}],[\"typically\",{\"1\":{\"97\":1,\"99\":1}}],[\"typeexception\",{\"1\":{\"507\":1}}],[\"type=\",{\"1\":{\"478\":2}}],[\"typehandler\",{\"1\":{\"474\":1}}],[\"type\",{\"1\":{\"99\":1,\"171\":1,\"200\":1,\"399\":1,\"447\":1,\"456\":2,\"535\":1,\"546\":2}}],[\"types\",{\"1\":{\"87\":1}}],[\"tkrhlu\",{\"1\":{\"620\":1}}],[\"t王\",{\"1\":{\"585\":1}}],[\"tx\",{\"1\":{\"521\":1}}],[\"tb7o6p\",{\"1\":{\"657\":1}}],[\"tb\",{\"1\":{\"479\":1}}],[\"tbl\",{\"1\":{\"434\":2,\"439\":1,\"447\":1}}],[\"tp\",{\"1\":{\"430\":4}}],[\"tt1\",{\"1\":{\"430\":5}}],[\"t2\",{\"1\":{\"430\":10}}],[\"t1\",{\"1\":{\"430\":45}}],[\"tname\",{\"1\":{\"428\":1,\"430\":5,\"444\":1,\"445\":1}}],[\"t>\",{\"1\":{\"169\":2}}],[\"t是type的简称\",{\"1\":{\"166\":1}}],[\"two\",{\"1\":{\"87\":1,\"89\":1,\"97\":1,\"109\":1,\"366\":4,\"367\":4}}],[\"tid\",{\"1\":{\"427\":1,\"428\":1,\"430\":8,\"444\":1,\"445\":1}}],[\"title\",{\"1\":{\"109\":1}}],[\"tie\",{\"1\":{\"65\":1}}],[\"timed\",{\"0\":{\"236\":1}}],[\"time\",{\"1\":{\"55\":1,\"65\":1,\"67\":1,\"97\":2,\"439\":2,\"456\":1,\"535\":1,\"539\":1}}],[\"timezone\",{\"1\":{\"34\":1}}],[\"timeout\",{\"1\":{\"24\":1,\"235\":2,\"236\":2,\"462\":3,\"731\":7}}],[\"trim\",{\"1\":{\"496\":1}}],[\"trimmedline\",{\"1\":{\"496\":6}}],[\"tri\",{\"1\":{\"439\":1}}],[\"triggers\",{\"1\":{\"441\":1}}],[\"trigger\",{\"1\":{\"439\":8,\"440\":2}}],[\"treemap\",{\"0\":{\"328\":1}}],[\"treeifybin\",{\"1\":{\"327\":1}}],[\"treeify\",{\"1\":{\"326\":3}}],[\"treeset\",{\"0\":{\"321\":1}}],[\"true\",{\"1\":{\"130\":2,\"247\":1,\"299\":1,\"363\":2,\"365\":4,\"366\":5,\"367\":1,\"368\":2,\"374\":1,\"399\":1,\"502\":1,\"532\":2,\"533\":1,\"538\":6,\"540\":1,\"544\":1,\"546\":5}}],[\"trunk\",{\"1\":{\"65\":1}}],[\"trw\",{\"1\":{\"69\":1,\"85\":2}}],[\"tryloadingfromjavaseloader\",{\"1\":{\"130\":3}}],[\"try\",{\"0\":{\"392\":2},\"1\":{\"63\":1,\"107\":1,\"130\":8,\"495\":5,\"496\":2,\"500\":1,\"502\":1}}],[\"trace\",{\"1\":{\"130\":6,\"533\":1,\"541\":2,\"542\":2}}],[\"training\",{\"1\":{\"105\":1}}],[\"transactionexception\",{\"1\":{\"507\":1}}],[\"transaction通过datasource抽象出来的接口实现了业务隔离\",{\"1\":{\"489\":1}}],[\"transaction\",{\"1\":{\"442\":1}}],[\"transmittable\",{\"0\":{\"297\":1}}],[\"transmits\",{\"1\":{\"93\":1}}],[\"transient\",{\"1\":{\"97\":1,\"396\":3}}],[\"transition\",{\"1\":{\"59\":1,\"93\":1}}],[\"translation\",{\"1\":{\"65\":2}}],[\"translating\",{\"1\":{\"65\":1}}],[\"traffic\",{\"1\":{\"57\":2,\"65\":2,\"79\":2,\"81\":2,\"97\":1,\"694\":1}}],[\"ta\",{\"1\":{\"368\":2}}],[\"tab\",{\"1\":{\"327\":1}}],[\"tablename\",{\"1\":{\"431\":1,\"434\":1}}],[\"tablespace\",{\"1\":{\"434\":2}}],[\"tables\",{\"1\":{\"431\":1,\"436\":1,\"493\":1}}],[\"table\",{\"1\":{\"109\":1,\"111\":1,\"326\":1,\"327\":3,\"417\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"433\":1,\"434\":4,\"435\":1,\"446\":1,\"447\":2,\"453\":3,\"456\":1,\"493\":2}}],[\"tailoring\",{\"0\":{\"102\":1}}],[\"taxonomy1\",{\"1\":{\"71\":1}}],[\"tasking\",{\"1\":{\"69\":1}}],[\"task\",{\"1\":{\"67\":3,\"69\":1,\"73\":6,\"97\":2,\"111\":1}}],[\"tasks\",{\"1\":{\"67\":8,\"69\":1,\"73\":1,\"83\":1,\"97\":2}}],[\"tactically\",{\"1\":{\"67\":1}}],[\"takes\",{\"1\":{\"67\":1,\"75\":1,\"83\":1,\"97\":2}}],[\"take\",{\"1\":{\"61\":1,\"85\":1,\"97\":1,\"99\":1}}],[\"taken\",{\"1\":{\"59\":1}}],[\"target用于标明注解使用的范围\",{\"1\":{\"179\":1}}],[\"target\",{\"1\":{\"34\":1,\"67\":1,\"97\":1,\"107\":1,\"179\":1,\"181\":1}}],[\"targetport\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"tar\",{\"1\":{\"19\":2,\"23\":1,\"29\":2,\"704\":5}}],[\"turn\",{\"1\":{\"57\":1,\"731\":1}}],[\"thomopson\",{\"1\":{\"113\":2}}],[\"those\",{\"1\":{\"57\":1,\"107\":1}}],[\"things\",{\"1\":{\"109\":1}}],[\"think\",{\"1\":{\"105\":1}}],[\"this\",{\"1\":{\"53\":2,\"55\":1,\"57\":1,\"59\":2,\"61\":1,\"65\":1,\"69\":1,\"81\":3,\"89\":2,\"97\":5,\"101\":1,\"105\":2,\"107\":3,\"111\":1,\"130\":2,\"166\":5,\"167\":3,\"169\":6,\"302\":4,\"342\":1,\"345\":1,\"355\":2,\"356\":3,\"357\":1,\"358\":2,\"359\":1,\"360\":2,\"362\":2,\"364\":2,\"365\":5,\"366\":3,\"367\":11,\"368\":5,\"481\":2,\"493\":1,\"500\":1,\"502\":9,\"530\":4,\"531\":2,\"532\":6,\"533\":11,\"535\":6,\"536\":5,\"541\":8,\"542\":5,\"544\":2}}],[\"throwable\",{\"1\":{\"130\":1,\"342\":1,\"345\":1,\"500\":2,\"502\":2}}],[\"throws\",{\"1\":{\"130\":3,\"176\":1,\"342\":1,\"345\":1,\"482\":1,\"495\":2,\"496\":1,\"500\":1,\"502\":1}}],[\"throw\",{\"1\":{\"105\":1,\"130\":8,\"304\":2,\"364\":1,\"496\":2,\"500\":2,\"502\":2}}],[\"throughput\",{\"1\":{\"83\":1,\"97\":1}}],[\"threshold\",{\"1\":{\"326\":4}}],[\"three\",{\"1\":{\"73\":1,\"87\":2}}],[\"threadlocal\",{\"0\":{\"296\":1},\"1\":{\"229\":1}}],[\"threaddump\",{\"1\":{\"151\":1}}],[\"threads\",{\"1\":{\"67\":1,\"97\":1}}],[\"thread\",{\"0\":{\"229\":1,\"239\":1,\"297\":1},\"1\":{\"67\":2,\"97\":3,\"101\":1,\"211\":2,\"229\":1,\"235\":1,\"236\":4,\"238\":2,\"239\":2,\"243\":1,\"244\":1,\"252\":1,\"253\":1,\"388\":2}}],[\"thank\",{\"1\":{\"113\":1}}],[\"than\",{\"1\":{\"55\":1,\"101\":1,\"364\":1,\"367\":4,\"368\":1}}],[\"that\",{\"1\":{\"55\":2,\"57\":1,\"59\":1,\"61\":1,\"65\":1,\"67\":4,\"69\":2,\"73\":1,\"75\":2,\"77\":1,\"79\":2,\"81\":1,\"83\":1,\"91\":1,\"97\":7,\"99\":2,\"103\":3,\"105\":3,\"107\":6,\"109\":1,\"111\":1,\"355\":2,\"356\":1,\"357\":1,\"359\":1,\"360\":1,\"365\":1,\"367\":3,\"533\":1,\"538\":6,\"540\":4,\"544\":1}}],[\"there\",{\"1\":{\"97\":5,\"99\":1,\"103\":2,\"367\":1}}],[\"therefore\",{\"1\":{\"83\":1,\"99\":1}}],[\"them\",{\"1\":{\"73\":2,\"93\":1,\"97\":1,\"538\":2,\"544\":1}}],[\"then\",{\"1\":{\"57\":1,\"67\":1,\"105\":1,\"107\":5,\"111\":1,\"367\":3,\"430\":12,\"731\":1}}],[\"they\",{\"1\":{\"55\":1,\"59\":2,\"67\":1,\"85\":1,\"97\":3,\"103\":1,\"105\":1,\"111\":1,\"366\":1,\"367\":3}}],[\"their\",{\"1\":{\"55\":1,\"57\":1,\"59\":1,\"67\":2,\"69\":1,\"89\":1,\"97\":4,\"107\":1,\"113\":1,\"367\":1}}],[\"these\",{\"1\":{\"55\":1,\"57\":2,\"99\":1,\"107\":2,\"111\":1}}],[\"the\",{\"0\":{\"53\":1,\"58\":1,\"60\":1,\"62\":1,\"66\":1,\"68\":1,\"70\":1,\"74\":1,\"76\":1,\"78\":1,\"82\":1,\"84\":1,\"90\":1,\"94\":1,\"96\":2,\"102\":1,\"108\":1},\"1\":{\"53\":8,\"55\":11,\"57\":39,\"59\":15,\"61\":7,\"63\":6,\"65\":20,\"67\":21,\"69\":16,\"71\":3,\"73\":9,\"75\":25,\"77\":13,\"79\":5,\"81\":8,\"83\":14,\"85\":6,\"87\":2,\"89\":12,\"91\":6,\"93\":13,\"95\":1,\"97\":54,\"99\":18,\"101\":5,\"103\":7,\"105\":12,\"107\":38,\"109\":6,\"111\":11,\"113\":1,\"130\":1,\"148\":1,\"353\":3,\"356\":4,\"357\":8,\"358\":13,\"359\":6,\"360\":7,\"362\":6,\"364\":15,\"365\":6,\"366\":13,\"367\":34,\"368\":13,\"533\":3,\"538\":12,\"540\":5,\"731\":3}}],[\"tz=asia\",{\"1\":{\"34\":1}}],[\"text\",{\"1\":{\"446\":1,\"447\":1}}],[\"temporary\",{\"1\":{\"535\":1}}],[\"temp1\",{\"1\":{\"430\":17}}],[\"temp\",{\"1\":{\"169\":2,\"430\":2}}],[\"templates\",{\"1\":{\"59\":2}}],[\"template\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"technical\",{\"1\":{\"107\":1}}],[\"technology\",{\"1\":{\"97\":1}}],[\"tells\",{\"1\":{\"93\":1}}],[\"telephone\",{\"1\":{\"65\":1}}],[\"telic\",{\"1\":{\"65\":4,\"73\":2}}],[\"terminated\",{\"0\":{\"237\":1}}],[\"terminal\",{\"1\":{\"65\":4,\"73\":3,\"93\":5}}],[\"terminals\",{\"1\":{\"65\":3,\"73\":1}}],[\"terminology4\",{\"1\":{\"111\":1}}],[\"terminial\",{\"1\":{\"73\":2}}],[\"terms\",{\"1\":{\"59\":1,\"101\":1}}],[\"teachermapper\",{\"1\":{\"478\":1,\"479\":1,\"482\":1}}],[\"teacher\",{\"1\":{\"428\":4,\"430\":5,\"444\":1,\"445\":1,\"479\":2,\"481\":2,\"482\":1}}],[\"teaching\",{\"1\":{\"52\":1}}],[\"teams\",{\"1\":{\"75\":1}}],[\"team\",{\"1\":{\"55\":1,\"75\":1,\"99\":1,\"105\":1}}],[\"testbeanfactorypostprocessor\",{\"1\":{\"521\":4}}],[\"testcompile\",{\"1\":{\"521\":1}}],[\"tested\",{\"1\":{\"105\":1,\"107\":1}}],[\"tests\",{\"1\":{\"89\":1,\"368\":1}}],[\"testing\",{\"1\":{\"83\":1,\"101\":1}}],[\"test\",{\"1\":{\"32\":5,\"67\":1,\"107\":1,\"265\":1,\"430\":3,\"478\":3,\"479\":1,\"481\":1,\"482\":4,\"521\":3}}],[\"tee\",{\"1\":{\"11\":1}}],[\"todo\",{\"1\":{\"501\":1}}],[\"total\",{\"1\":{\"430\":3}}],[\"to++\",{\"1\":{\"368\":1}}],[\"toffset\",{\"0\":{\"368\":1},\"1\":{\"368\":9}}],[\"tolowercase\",{\"1\":{\"366\":1}}],[\"tolerance\",{\"1\":{\"67\":1,\"83\":1,\"111\":1}}],[\"touppercase\",{\"1\":{\"366\":1}}],[\"touch\",{\"1\":{\"40\":1}}],[\"toarray\",{\"1\":{\"299\":2}}],[\"tostring\",{\"1\":{\"130\":1,\"169\":4,\"360\":1,\"481\":1,\"495\":1,\"496\":2,\"500\":1,\"502\":1,\"506\":1,\"521\":1}}],[\"tomcat\",{\"0\":{\"129\":1,\"792\":1},\"1\":{\"129\":3,\"536\":1}}],[\"tone\",{\"1\":{\"93\":1}}],[\"top\",{\"1\":{\"65\":1}}],[\"toomanyresultsexception\",{\"1\":{\"507\":1}}],[\"too\",{\"1\":{\"55\":1,\"105\":2}}],[\"toolset\",{\"1\":{\"71\":1,\"75\":1}}],[\"tools\",{\"1\":{\"57\":2,\"105\":2}}],[\"tool\",{\"1\":{\"30\":1,\"69\":1,\"111\":1}}],[\"together综合所有的视图\",{\"1\":{\"89\":1}}],[\"together\",{\"1\":{\"53\":1,\"89\":1}}],[\"to\",{\"0\":{\"96\":1,\"98\":1,\"100\":1},\"1\":{\"26\":2,\"53\":3,\"55\":3,\"57\":8,\"59\":4,\"61\":2,\"63\":3,\"65\":9,\"67\":2,\"69\":2,\"71\":1,\"73\":2,\"75\":5,\"77\":1,\"79\":2,\"81\":4,\"83\":4,\"87\":1,\"89\":2,\"91\":1,\"93\":5,\"95\":1,\"97\":36,\"99\":3,\"101\":2,\"105\":3,\"107\":11,\"109\":1,\"111\":2,\"113\":2,\"130\":4,\"141\":1,\"353\":1,\"358\":2,\"360\":3,\"362\":1,\"364\":1,\"365\":3,\"366\":4,\"367\":3,\"368\":2,\"533\":2,\"538\":6,\"540\":1,\"544\":3}}],[\"token有效时间\",{\"1\":{\"24\":1}}],[\"token\",{\"0\":{\"20\":1},\"1\":{\"21\":1,\"24\":1}}],[\"tgz\",{\"1\":{\"23\":2}}],[\"t\",{\"1\":{\"21\":1,\"34\":4,\"107\":1,\"130\":1,\"164\":2,\"166\":9,\"167\":5,\"169\":8,\"176\":4,\"299\":1,\"345\":2,\"430\":5,\"480\":1,\"493\":3,\"500\":2,\"502\":2}}],[\"工厂方法名\",{\"1\":{\"546\":1}}],[\"工厂类名\",{\"1\":{\"546\":1}}],[\"工厂模式的进阶用法\",{\"1\":{\"762\":1}}],[\"工厂模式\",{\"0\":{\"506\":1,\"761\":1},\"1\":{\"488\":1,\"498\":1,\"504\":1}}],[\"工厂管理\",{\"1\":{\"49\":1}}],[\"工作的主要顶层\",{\"1\":{\"474\":1}}],[\"工作年限\",{\"1\":{\"3\":1}}],[\"工具来监控\",{\"1\":{\"694\":1}}],[\"工具创建\",{\"1\":{\"433\":1}}],[\"工具类\",{\"0\":{\"295\":1},\"1\":{\"399\":1}}],[\"工具为类生成帮助文档时是否要保留其注解信息\",{\"1\":{\"181\":1}}],[\"工具支持\",{\"1\":{\"111\":1}}],[\"工具使用\",{\"0\":{\"19\":1}}],[\"kuboard\",{\"1\":{\"731\":1}}],[\"kubecfg\",{\"1\":{\"729\":5}}],[\"kubectl\",{\"0\":{\"22\":1},\"1\":{\"22\":2,\"34\":4,\"725\":2,\"726\":1,\"727\":1,\"728\":1,\"729\":4,\"731\":5}}],[\"kubeadm\",{\"1\":{\"728\":1,\"731\":10}}],[\"kube\",{\"1\":{\"725\":1,\"730\":1,\"731\":3}}],[\"kubelet\",{\"0\":{\"724\":1},\"1\":{\"724\":2,\"730\":1,\"731\":6}}],[\"kubelet使用的\",{\"1\":{\"722\":1}}],[\"kube1\",{\"1\":{\"704\":5}}],[\"kuberentes\",{\"0\":{\"701\":1}}],[\"kubernetesversion\",{\"1\":{\"731\":1}}],[\"kubernetes安装\",{\"1\":{\"711\":1}}],[\"kubernetes\",{\"0\":{\"13\":1,\"32\":1,\"36\":1,\"810\":1},\"1\":{\"3\":1,\"4\":3,\"22\":4,\"37\":1,\"39\":1,\"729\":8,\"731\":12}}],[\"ku3jn2\",{\"1\":{\"652\":1}}],[\"kill\",{\"1\":{\"746\":1}}],[\"kimi目前有三个标的\",{\"1\":{\"580\":1}}],[\"kimi持续性差\",{\"1\":{\"577\":1}}],[\"kimi\",{\"0\":{\"577\":1,\"580\":1}}],[\"kinds\",{\"1\":{\"65\":1}}],[\"kind\",{\"1\":{\"32\":3,\"34\":3,\"40\":3,\"731\":5}}],[\"krosrmsj\",{\"1\":{\"725\":1}}],[\"krcsif\",{\"1\":{\"561\":1}}],[\"kruchtenrational\",{\"1\":{\"53\":1}}],[\"kv\",{\"1\":{\"381\":2}}],[\"k++\",{\"1\":{\"367\":1}}],[\"know\",{\"1\":{\"111\":1}}],[\"known\",{\"1\":{\"105\":1}}],[\"ksloc\",{\"1\":{\"107\":2}}],[\"k\",{\"1\":{\"71\":2,\"87\":2,\"166\":3,\"325\":9,\"367\":7,\"673\":6}}],[\"kernel\",{\"1\":{\"704\":1}}],[\"keeping\",{\"1\":{\"97\":1}}],[\"keep\",{\"1\":{\"63\":1,\"731\":1}}],[\"key和value\",{\"1\":{\"675\":1}}],[\"key1\",{\"1\":{\"462\":9}}],[\"key2\",{\"1\":{\"462\":7}}],[\"keyvalue\",{\"1\":{\"462\":1}}],[\"keys\",{\"1\":{\"456\":1,\"495\":4}}],[\"keyset\",{\"1\":{\"325\":1}}],[\"keywords\",{\"1\":{\"53\":1}}],[\"key\",{\"0\":{\"406\":2},\"1\":{\"24\":2,\"26\":2,\"27\":1,\"59\":2,\"166\":5,\"325\":27,\"327\":3,\"381\":1,\"383\":1,\"400\":1,\"456\":4,\"462\":97,\"495\":4,\"729\":3,\"731\":2}}],[\"k8s\",{\"0\":{\"725\":1,\"726\":2,\"727\":2,\"729\":1},\"1\":{\"18\":3,\"24\":1,\"718\":3,\"721\":5,\"728\":1,\"731\":9}}],[\"若准备完成则向应用进程发送\",{\"1\":{\"736\":1,\"737\":1}}],[\"若内核无准备好数据\",{\"1\":{\"733\":1}}],[\"若安装过程中出错\",{\"1\":{\"712\":1}}],[\"若两个顶点之间存在一条边\",{\"1\":{\"677\":1}}],[\"若bean未指定销毁方法\",{\"1\":{\"546\":1}}],[\"若传入\",{\"1\":{\"532\":1}}],[\"若转换失败则会抛出异常\",{\"1\":{\"507\":1}}],[\"若转换失败则会抛出该异常\",{\"1\":{\"507\":1}}],[\"若用户需要自定sql\",{\"1\":{\"493\":1}}],[\"若当前线程获得写锁\",{\"1\":{\"453\":1}}],[\"若人数相同\",{\"1\":{\"430\":1}}],[\"若类重写了\",{\"1\":{\"406\":1}}],[\"若不是树\",{\"1\":{\"327\":1}}],[\"若不为空\",{\"1\":{\"325\":1}}],[\"若不存在\",{\"1\":{\"325\":1}}],[\"若不存在在返回\",{\"1\":{\"325\":1}}],[\"若存在多个则通过\",{\"1\":{\"386\":1}}],[\"若存在哈希冲突则需要判断\",{\"1\":{\"327\":1}}],[\"若存在\",{\"1\":{\"325\":2}}],[\"若是返回\",{\"1\":{\"374\":1}}],[\"若是树则进行添加子节点\",{\"1\":{\"327\":1}}],[\"若是存在key\",{\"1\":{\"325\":1}}],[\"若是不能确定则看运行时\",{\"1\":{\"374\":1}}],[\"若是不存在\",{\"1\":{\"325\":1}}],[\"若是不一致则会抛出concurrentmodificationexception异常\",{\"1\":{\"305\":1}}],[\"若是会超过则取\",{\"1\":{\"304\":1}}],[\"若是无参的构造方法\",{\"1\":{\"304\":1}}],[\"若初始元素数量大于\",{\"1\":{\"302\":1}}],[\"若初始元素数量等于\",{\"1\":{\"302\":1}}],[\"若设置容量小于\",{\"1\":{\"302\":1}}],[\"若设置容量等于\",{\"1\":{\"302\":1}}],[\"若设置容量大于\",{\"1\":{\"302\":1}}],[\"若都存在则返回\",{\"1\":{\"299\":1}}],[\"若\",{\"1\":{\"18\":1,\"325\":1,\"327\":1,\"386\":1,\"718\":1}}],[\"若主机名重复\",{\"1\":{\"18\":1,\"718\":1}}],[\"需要满足广泛的使用场景\",{\"1\":{\"744\":1}}],[\"需要大量的思考\",{\"1\":{\"744\":1}}],[\"需要经常fork子进程来保存数据集到硬盘上\",{\"1\":{\"463\":1}}],[\"需要关联\",{\"1\":{\"456\":1}}],[\"需要设置参数\",{\"1\":{\"434\":1}}],[\"需要设置合盖不影响\",{\"1\":{\"17\":1,\"717\":1}}],[\"需要定期执行\",{\"1\":{\"433\":1}}],[\"需要在应用端添加锁\",{\"1\":{\"454\":1}}],[\"需要在创建表的时候指定\",{\"1\":{\"433\":1}}],[\"需要在classpath下的meta\",{\"1\":{\"198\":1}}],[\"需要解析字节码\",{\"1\":{\"399\":1}}],[\"需要进行数组的处理\",{\"1\":{\"380\":1}}],[\"需要重写对象的equals方法\",{\"1\":{\"365\":1}}],[\"需要通过指针进行遍历\",{\"1\":{\"666\":1}}],[\"需要通过\",{\"1\":{\"365\":1}}],[\"需要强转类型\",{\"1\":{\"170\":1}}],[\"需要打破双亲委托机制\",{\"1\":{\"130\":1}}],[\"需要互斥或者仅需要少量处理能力的类共享一个代理\",{\"1\":{\"97\":1}}],[\"需要多线程控制有几个原因\",{\"1\":{\"97\":1}}],[\"需要\",{\"1\":{\"31\":1}}],[\"需要修改\",{\"1\":{\"26\":1}}],[\"需要下载kubectl工具对kubernetes进行操作\",{\"1\":{\"21\":1}}],[\"需要选择\",{\"1\":{\"15\":1,\"715\":1}}],[\"笔记本合盖\",{\"0\":{\"17\":1,\"717\":1}}],[\"42fcf85f6317\",{\"1\":{\"725\":1}}],[\"4294\",{\"1\":{\"725\":1}}],[\"4749b708\",{\"1\":{\"725\":1}}],[\"4g\",{\"1\":{\"722\":1}}],[\"4182016\",{\"1\":{\"695\":1}}],[\"48\",{\"1\":{\"692\":1}}],[\"49\",{\"1\":{\"692\":1}}],[\"49798\",{\"1\":{\"692\":2}}],[\"498\",{\"1\":{\"26\":1}}],[\"4x8rwj\",{\"1\":{\"655\":1}}],[\"4bnx3r\",{\"1\":{\"646\":1}}],[\"4wwxzb\",{\"1\":{\"637\":1}}],[\"404\",{\"1\":{\"786\":1}}],[\"4000\",{\"1\":{\"731\":1}}],[\"40\",{\"0\":{\"410\":1}}],[\"4+1\",{\"0\":{\"53\":1},\"1\":{\"57\":4,\"103\":2,\"109\":2,\"111\":4,\"113\":2}}],[\"4+1view\",{\"1\":{\"52\":1}}],[\"4\",{\"0\":{\"17\":1,\"369\":1,\"374\":1,\"717\":1,\"745\":1},\"1\":{\"19\":6,\"59\":1,\"69\":2,\"79\":1,\"81\":1,\"91\":1,\"93\":2,\"105\":2,\"107\":2,\"111\":1,\"130\":1,\"132\":1,\"326\":1,\"373\":3,\"430\":1,\"456\":1,\"459\":1,\"463\":2,\"521\":1,\"692\":2,\"704\":1}}],[\"443\",{\"1\":{\"12\":2}}],[\"节点时可能会碰到如下错误\",{\"1\":{\"731\":1}}],[\"节点都要执行\",{\"1\":{\"731\":1}}],[\"节点和\",{\"1\":{\"731\":1}}],[\"节点执行\",{\"1\":{\"731\":1}}],[\"节点无法正常启动\",{\"1\":{\"730\":1}}],[\"节点名称\",{\"1\":{\"728\":1}}],[\"节点的\",{\"1\":{\"468\":1}}],[\"节点项对应\",{\"1\":{\"468\":1}}],[\"节点中的<select|update|delete|insert>\",{\"1\":{\"468\":1}}],[\"节点抽象为一个\",{\"1\":{\"468\":1}}],[\"节点发现\",{\"1\":{\"463\":1}}],[\"节点流\",{\"1\":{\"397\":1}}],[\"节点\",{\"1\":{\"15\":1,\"111\":1,\"715\":1}}],[\"添加node\",{\"0\":{\"707\":1}}],[\"添加master\",{\"0\":{\"705\":1}}],[\"添加数据较简单\",{\"1\":{\"666\":1}}],[\"添加了配置\",{\"1\":{\"536\":1}}],[\"添加了一些默认的配置\",{\"1\":{\"535\":1}}],[\"添加配置文件类\",{\"1\":{\"521\":1}}],[\"添加测试包\",{\"0\":{\"521\":1}}],[\"添加集合中的所有元素\",{\"1\":{\"325\":1}}],[\"添加集群\",{\"1\":{\"14\":1,\"714\":1}}],[\"添加元素时先让modcount\",{\"1\":{\"304\":1}}],[\"添加源码管理并指定分支\",{\"1\":{\"34\":1}}],[\"添加\",{\"0\":{\"20\":1},\"1\":{\"34\":1,\"325\":1}}],[\"添加节点\",{\"1\":{\"14\":1,\"714\":1}}],[\"添加docker源\",{\"1\":{\"9\":1}}],[\"更高效地使用索引\",{\"1\":{\"449\":1}}],[\"更加易于理解和维护\",{\"1\":{\"164\":1}}],[\"更关键的是\",{\"1\":{\"147\":1}}],[\"更换端口即可\",{\"1\":{\"12\":1}}],[\"更新状态\",{\"1\":{\"533\":1}}],[\"更新数据库\",{\"1\":{\"464\":2}}],[\"更新丢失问题\",{\"1\":{\"454\":1}}],[\"更新丢失\",{\"1\":{\"454\":1}}],[\"更新或者删除子表对应记录\",{\"1\":{\"434\":1}}],[\"更新父表时\",{\"1\":{\"434\":1}}],[\"更新设计指南和逻辑依据\",{\"1\":{\"107\":1}}],[\"更新4个主要的蓝图\",{\"1\":{\"107\":1}}],[\"更新yum\",{\"1\":{\"9\":1}}],[\"更新\",{\"0\":{\"7\":1},\"1\":{\"436\":1}}],[\"nf\",{\"1\":{\"731\":6}}],[\"nfs\",{\"1\":{\"731\":4}}],[\"n>=1\",{\"1\":{\"669\":1}}],[\"ndb\",{\"1\":{\"431\":1}}],[\"nvarchar\",{\"1\":{\"427\":1}}],[\"n\",{\"0\":{\"407\":1},\"1\":{\"365\":3,\"434\":1,\"446\":1,\"449\":2,\"480\":1,\"725\":1,\"729\":4,\"746\":4}}],[\"nio\",{\"0\":{\"398\":1,\"734\":1},\"1\":{\"358\":1,\"398\":3,\"732\":1}}],[\"nicely\",{\"1\":{\"57\":1}}],[\"nuhid3\",{\"1\":{\"653\":1}}],[\"nu2k9c\",{\"1\":{\"606\":1}}],[\"nullable\",{\"1\":{\"532\":4,\"546\":13}}],[\"null\",{\"1\":{\"130\":13,\"166\":1,\"167\":1,\"327\":1,\"342\":1,\"345\":1,\"363\":2,\"365\":1,\"366\":2,\"373\":1,\"381\":3,\"420\":4,\"430\":11,\"434\":3,\"456\":2,\"495\":1,\"496\":2,\"500\":1,\"502\":1,\"532\":3,\"533\":1,\"539\":1,\"541\":2,\"544\":1}}],[\"numeric\",{\"1\":{\"495\":1}}],[\"numerous\",{\"1\":{\"61\":1,\"97\":1}}],[\"numkeys\",{\"1\":{\"462\":2}}],[\"num\",{\"1\":{\"430\":8}}],[\"numberformatexception\",{\"1\":{\"495\":1}}],[\"number>\",{\"1\":{\"164\":1,\"169\":1}}],[\"numbering\",{\"1\":{\"65\":2,\"93\":1}}],[\"number\",{\"1\":{\"57\":1,\"75\":1,\"97\":1,\"107\":3,\"362\":1}}],[\"near\",{\"1\":{\"368\":1}}],[\"negative\",{\"1\":{\"364\":1,\"367\":1,\"368\":1}}],[\"negotiate\",{\"1\":{\"65\":1}}],[\"newly\",{\"1\":{\"355\":1,\"356\":2,\"357\":1,\"359\":1,\"360\":1}}],[\"newproxyinstance\",{\"1\":{\"342\":1,\"502\":1}}],[\"newvalue\",{\"1\":{\"325\":4}}],[\"newcapacity\",{\"1\":{\"304\":6}}],[\"newinstance\",{\"1\":{\"176\":1,\"385\":1}}],[\"newtclass\",{\"1\":{\"176\":1}}],[\"new\",{\"0\":{\"232\":1},\"1\":{\"107\":4,\"130\":8,\"166\":2,\"167\":1,\"169\":4,\"170\":6,\"176\":2,\"304\":2,\"342\":3,\"345\":2,\"357\":1,\"358\":2,\"359\":1,\"360\":1,\"364\":1,\"383\":8,\"385\":1,\"482\":1,\"493\":1,\"496\":6,\"506\":1,\"521\":6,\"530\":2,\"532\":3,\"533\":2,\"535\":6,\"536\":1,\"538\":9,\"539\":2,\"540\":8,\"541\":1,\"542\":1,\"546\":2}}],[\"next\",{\"1\":{\"107\":1,\"364\":1,\"495\":1,\"538\":2,\"540\":1}}],[\"never\",{\"1\":{\"97\":2,\"500\":1,\"502\":1}}],[\"netowork\",{\"1\":{\"694\":1}}],[\"net\",{\"1\":{\"694\":2,\"695\":1,\"731\":6}}],[\"networking\",{\"1\":{\"731\":1}}],[\"network\",{\"1\":{\"69\":2,\"83\":1}}],[\"networks\",{\"1\":{\"67\":3,\"69\":1,\"79\":1,\"83\":1}}],[\"netty\",{\"1\":{\"43\":1,\"47\":1}}],[\"netty等框架\",{\"1\":{\"3\":1}}],[\"needed\",{\"1\":{\"97\":2,\"105\":1,\"356\":1}}],[\"needs\",{\"1\":{\"83\":1}}],[\"need\",{\"1\":{\"55\":1,\"83\":1,\"97\":2,\"103\":1,\"107\":1,\"538\":2,\"544\":1}}],[\"npm\",{\"1\":{\"34\":2}}],[\"nor\",{\"1\":{\"493\":1}}],[\"nord\",{\"1\":{\"111\":2}}],[\"notion\",{\"1\":{\"725\":1}}],[\"notifyall\",{\"0\":{\"252\":1},\"1\":{\"235\":1,\"236\":1,\"252\":2,\"401\":1}}],[\"notify\",{\"0\":{\"252\":1},\"1\":{\"235\":1,\"236\":1,\"252\":2,\"401\":1}}],[\"notably\",{\"1\":{\"97\":1}}],[\"notation4\",{\"1\":{\"61\":1}}],[\"notations\",{\"1\":{\"57\":1}}],[\"notation\",{\"0\":{\"60\":1,\"68\":1,\"76\":1,\"84\":1,\"90\":1},\"1\":{\"53\":1,\"57\":3,\"61\":2,\"69\":5,\"71\":1,\"77\":2,\"85\":1,\"87\":1,\"91\":1,\"115\":1}}],[\"notempty\",{\"1\":{\"531\":1}}],[\"notepad<string\",{\"1\":{\"166\":2}}],[\"notepad<k\",{\"1\":{\"166\":1}}],[\"note\",{\"1\":{\"91\":1,\"97\":1,\"355\":1,\"368\":1,\"439\":1}}],[\"noted\",{\"1\":{\"55\":1}}],[\"not\",{\"1\":{\"55\":1,\"57\":1,\"59\":1,\"61\":1,\"67\":1,\"95\":1,\"97\":3,\"99\":1,\"103\":2,\"105\":1,\"130\":1,\"357\":1,\"358\":2,\"359\":1,\"360\":1,\"364\":1,\"365\":1,\"366\":1,\"430\":3,\"538\":2,\"540\":1,\"544\":1,\"786\":1}}],[\"nonpublicaccessallowed\",{\"1\":{\"546\":1}}],[\"none\",{\"1\":{\"546\":2}}],[\"nonorderedpostprocessors\",{\"1\":{\"538\":3,\"540\":3}}],[\"nonorderedpostprocessornames\",{\"1\":{\"538\":4,\"540\":4}}],[\"non\",{\"1\":{\"53\":1,\"57\":1,\"67\":1,\"83\":1}}],[\"now\",{\"1\":{\"35\":1,\"57\":1,\"422\":1,\"430\":3,\"538\":1,\"540\":1,\"544\":1}}],[\"no\",{\"1\":{\"29\":2,\"97\":2,\"99\":1,\"107\":3,\"288\":1,\"367\":1,\"434\":2,\"436\":1,\"495\":2,\"538\":1,\"541\":2,\"542\":1,\"546\":4}}],[\"nodexx\",{\"1\":{\"728\":1}}],[\"node节点\",{\"0\":{\"724\":1}}],[\"node02\",{\"0\":{\"727\":1},\"1\":{\"721\":1}}],[\"node01\",{\"0\":{\"727\":1},\"1\":{\"721\":1}}],[\"node<k\",{\"1\":{\"326\":1}}],[\"nodejs\",{\"1\":{\"31\":1,\"34\":2}}],[\"nodes\",{\"1\":{\"22\":1,\"83\":4,\"97\":2,\"725\":1,\"726\":1,\"727\":1}}],[\"node\",{\"0\":{\"16\":1,\"716\":1},\"1\":{\"18\":1,\"31\":1,\"67\":2,\"97\":1,\"111\":1,\"704\":1,\"707\":3,\"708\":3,\"718\":1,\"728\":1}}],[\"nginx\",{\"0\":{\"32\":1},\"1\":{\"26\":2,\"32\":13,\"39\":2,\"40\":1,\"692\":4,\"695\":1}}],[\"nat\",{\"1\":{\"722\":1}}],[\"native\",{\"1\":{\"136\":1,\"138\":1,\"181\":2,\"731\":2}}],[\"nand\",{\"1\":{\"493\":1}}],[\"narrow\",{\"1\":{\"75\":1}}],[\"nacos\",{\"0\":{\"790\":1},\"1\":{\"43\":1,\"47\":1}}],[\"na\",{\"1\":{\"24\":1}}],[\"name=$apiserver\",{\"1\":{\"731\":1}}],[\"name=apiserver\",{\"1\":{\"721\":1}}],[\"name=\",{\"1\":{\"478\":8,\"481\":1}}],[\"name=kubernetes\",{\"1\":{\"22\":1,\"731\":1}}],[\"names\",{\"1\":{\"692\":1}}],[\"names=1\",{\"1\":{\"417\":1}}],[\"namespaces\",{\"1\":{\"696\":1,\"729\":1}}],[\"namespace=\",{\"1\":{\"479\":1}}],[\"namespace\",{\"0\":{\"696\":1},\"1\":{\"32\":2,\"34\":2,\"39\":1,\"40\":5,\"479\":1,\"696\":7,\"731\":2}}],[\"name\",{\"1\":{\"12\":1,\"32\":5,\"34\":5,\"39\":1,\"40\":16,\"130\":25,\"417\":1,\"430\":1,\"434\":2,\"439\":2,\"440\":2,\"447\":5,\"456\":1,\"461\":1,\"481\":6,\"521\":1,\"532\":3,\"535\":7,\"539\":1,\"541\":4,\"542\":4,\"546\":2,\"692\":1,\"695\":1,\"721\":1,\"729\":1,\"731\":8}}],[\"836b\",{\"1\":{\"695\":1}}],[\"85\",{\"1\":{\"430\":11}}],[\"89\",{\"1\":{\"429\":1}}],[\"87\",{\"1\":{\"429\":1}}],[\"8的时候\",{\"1\":{\"351\":1}}],[\"8中提供了两个元注解\",{\"1\":{\"181\":1}}],[\"8组类\",{\"1\":{\"65\":1}}],[\"8\",{\"0\":{\"378\":1},\"1\":{\"34\":1,\"65\":1,\"87\":1,\"111\":2,\"141\":1,\"326\":3,\"373\":2,\"478\":1,\"479\":1,\"731\":1}}],[\"8u141\",{\"1\":{\"29\":2}}],[\"8443\",{\"1\":{\"12\":1,\"21\":1}}],[\"8038\",{\"1\":{\"34\":6}}],[\"80\",{\"1\":{\"12\":2,\"32\":5,\"429\":5,\"430\":5,\"692\":4}}],[\"8080\",{\"1\":{\"12\":1,\"39\":1}}],[\"q\",{\"1\":{\"430\":2}}],[\"qualifier><\",{\"1\":{\"546\":1}}],[\"qualifier\",{\"1\":{\"532\":5,\"546\":1}}],[\"qualifiers\",{\"1\":{\"532\":3,\"546\":1}}],[\"quality\",{\"1\":{\"109\":1}}],[\"query\",{\"1\":{\"456\":1}}],[\"queries\",{\"1\":{\"456\":1}}],[\"queue\",{\"0\":{\"333\":1},\"1\":{\"731\":1}}],[\"queues\",{\"1\":{\"73\":1}}],[\"quite\",{\"1\":{\"97\":1}}],[\"q47dgr1i\",{\"1\":{\"11\":1}}],[\"qq\",{\"1\":{\"3\":1,\"34\":1}}],[\"eh9hqq\",{\"1\":{\"652\":1}}],[\"eq\",{\"1\":{\"456\":2,\"731\":2}}],[\"equivalent\",{\"1\":{\"365\":1,\"366\":1}}],[\"equal\",{\"1\":{\"358\":1,\"362\":1,\"366\":2,\"367\":2}}],[\"equalsignorecase\",{\"0\":{\"366\":1},\"1\":{\"365\":1,\"366\":1}}],[\"equals\",{\"0\":{\"365\":1,\"377\":1},\"1\":{\"299\":2,\"365\":2,\"366\":1,\"367\":1,\"377\":1,\"378\":1,\"386\":1,\"401\":1,\"406\":3,\"500\":2,\"502\":2}}],[\"equation\",{\"1\":{\"57\":1}}],[\"errorcontext\",{\"1\":{\"506\":1}}],[\"error\",{\"0\":{\"393\":1},\"1\":{\"393\":1,\"496\":2}}],[\"erasure\",{\"1\":{\"171\":1}}],[\"e>\",{\"1\":{\"169\":2,\"299\":1}}],[\"eden\",{\"1\":{\"141\":1}}],[\"either\",{\"1\":{\"97\":1,\"367\":1}}],[\"effictive\",{\"1\":{\"169\":1}}],[\"efficiency\",{\"1\":{\"55\":1}}],[\"effect\",{\"1\":{\"97\":1}}],[\"earlyevent\",{\"1\":{\"544\":2}}],[\"earlyeventstoprocess\",{\"1\":{\"544\":3}}],[\"earlyapplicationevents\",{\"1\":{\"533\":1,\"544\":2}}],[\"earlyapplicationlisteners\",{\"1\":{\"533\":3}}],[\"early\",{\"1\":{\"533\":1,\"535\":1,\"544\":1}}],[\"ease\",{\"1\":{\"75\":1,\"360\":1}}],[\"easily\",{\"1\":{\"69\":1}}],[\"each\",{\"1\":{\"53\":1,\"55\":1,\"57\":6,\"59\":1,\"67\":1,\"75\":1,\"79\":1,\"81\":1,\"97\":2,\"366\":2,\"367\":1,\"439\":2}}],[\"eurocontrol\",{\"1\":{\"67\":2}}],[\"etre\",{\"1\":{\"107\":1}}],[\"et\",{\"1\":{\"67\":1,\"97\":2,\"105\":1}}],[\"etc\",{\"1\":{\"11\":2,\"22\":1,\"27\":1,\"28\":1,\"34\":2,\"53\":1,\"65\":2,\"67\":2,\"105\":1,\"111\":2,\"540\":1,\"721\":2,\"723\":1,\"729\":2,\"731\":14}}],[\"estimated\",{\"1\":{\"67\":1}}],[\"established\",{\"1\":{\"97\":1}}],[\"establishes\",{\"1\":{\"65\":1}}],[\"establishing\",{\"1\":{\"75\":1}}],[\"establish\",{\"1\":{\"65\":1}}],[\"esthetics\",{\"1\":{\"57\":1}}],[\"especially\",{\"1\":{\"57\":1}}],[\"e\",{\"1\":{\"57\":1,\"59\":1,\"65\":3,\"67\":1,\"97\":3,\"107\":2,\"113\":2,\"130\":11,\"299\":4,\"417\":1,\"495\":3,\"496\":6,\"506\":3,\"538\":1,\"540\":1,\"731\":2}}],[\"evolves\",{\"1\":{\"107\":1}}],[\"evolved\",{\"1\":{\"57\":1}}],[\"evolutionary\",{\"1\":{\"105\":1}}],[\"evaluation\",{\"1\":{\"75\":1}}],[\"even\",{\"1\":{\"75\":1,\"103\":1}}],[\"event\",{\"1\":{\"67\":1,\"439\":2,\"542\":4,\"694\":1}}],[\"events\",{\"1\":{\"65\":1,\"97\":1,\"544\":1}}],[\"eventually\",{\"1\":{\"57\":1}}],[\"everything\",{\"1\":{\"55\":1}}],[\"everyone\",{\"1\":{\"24\":1}}],[\"elasticsearch\",{\"0\":{\"794\":1}}],[\"elaborate\",{\"1\":{\"101\":1}}],[\"eligible\",{\"1\":{\"540\":1}}],[\"elementdata赋值为empty\",{\"1\":{\"302\":2}}],[\"elementdata赋值为new\",{\"1\":{\"302\":1}}],[\"elementdata赋值为defaultcapacity\",{\"1\":{\"302\":1}}],[\"elementdata\",{\"1\":{\"302\":4,\"304\":3}}],[\"elements\",{\"1\":{\"57\":3,\"59\":1,\"67\":1,\"69\":1,\"75\":1,\"83\":1,\"89\":2,\"95\":2,\"107\":2}}],[\"else\",{\"1\":{\"130\":3,\"430\":12,\"495\":1,\"496\":2,\"500\":1,\"502\":1,\"532\":2,\"533\":2,\"538\":5,\"540\":2,\"541\":1,\"542\":1}}],[\"elsewhere\",{\"1\":{\"111\":1,\"113\":1}}],[\"el7\",{\"1\":{\"22\":1,\"731\":1}}],[\"egd=file\",{\"1\":{\"34\":1}}],[\"echo\",{\"1\":{\"34\":1,\"721\":1,\"731\":6}}],[\"exec\",{\"1\":{\"731\":2,\"746\":1}}],[\"execstart=\",{\"1\":{\"731\":3}}],[\"executorexception\",{\"1\":{\"507\":1}}],[\"executor\",{\"0\":{\"241\":1,\"248\":1},\"1\":{\"241\":2,\"248\":1,\"474\":1}}],[\"execution\",{\"1\":{\"97\":1,\"111\":1,\"126\":1}}],[\"executing\",{\"1\":{\"67\":1,\"496\":2}}],[\"executelinebyline\",{\"1\":{\"496\":1}}],[\"executefullscript\",{\"1\":{\"496\":1}}],[\"executeupdate\",{\"1\":{\"495\":2}}],[\"executestatement\",{\"1\":{\"496\":2}}],[\"executes\",{\"1\":{\"83\":1}}],[\"executed\",{\"1\":{\"67\":1,\"73\":1,\"97\":2}}],[\"executables\",{\"1\":{\"87\":1}}],[\"executable\",{\"1\":{\"67\":1}}],[\"exit\",{\"1\":{\"731\":1,\"746\":1}}],[\"existing\",{\"1\":{\"107\":1}}],[\"existence\",{\"1\":{\"97\":1,\"113\":1}}],[\"exist\",{\"1\":{\"67\":1}}],[\"extra\",{\"1\":{\"456\":1}}],[\"extclassloader\",{\"1\":{\"130\":4}}],[\"extends\",{\"1\":{\"164\":1,\"169\":4,\"325\":4,\"493\":1,\"532\":2,\"546\":1}}],[\"extended\",{\"1\":{\"107\":1}}],[\"extending\",{\"1\":{\"107\":1}}],[\"extensions\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"external\",{\"1\":{\"81\":1,\"97\":5,\"99\":1}}],[\"except\",{\"1\":{\"731\":1}}],[\"exceptionfactory\",{\"1\":{\"506\":2}}],[\"exceptionutil\",{\"1\":{\"500\":1,\"502\":1}}],[\"exception\",{\"0\":{\"393\":1},\"1\":{\"130\":3,\"364\":1,\"496\":2,\"506\":1}}],[\"exclusion\",{\"1\":{\"97\":1}}],[\"exactly\",{\"1\":{\"367\":1}}],[\"exact\",{\"1\":{\"97\":1}}],[\"example\",{\"0\":{\"64\":1,\"72\":1,\"80\":1,\"86\":1,\"92\":1},\"1\":{\"65\":1,\"67\":2,\"71\":1,\"97\":2,\"99\":2,\"111\":1,\"431\":1,\"521\":1}}],[\"examples\",{\"1\":{\"57\":1}}],[\"explainsql\",{\"1\":{\"493\":1}}],[\"explain\",{\"1\":{\"456\":3}}],[\"explicit\",{\"1\":{\"356\":1}}],[\"exploratory\",{\"1\":{\"105\":1}}],[\"exploit\",{\"1\":{\"59\":1}}],[\"expected\",{\"1\":{\"99\":2}}],[\"expect\",{\"1\":{\"83\":1}}],[\"experiment\",{\"1\":{\"67\":1}}],[\"export\",{\"1\":{\"75\":1,\"463\":1,\"721\":3,\"725\":1,\"729\":1}}],[\"expose\",{\"1\":{\"34\":1}}],[\"expanded\",{\"1\":{\"69\":1}}],[\"expression\",{\"1\":{\"368\":1,\"521\":1}}],[\"expressed\",{\"1\":{\"89\":1}}],[\"express\",{\"1\":{\"55\":1}}],[\"expiration\",{\"1\":{\"24\":1}}],[\"e24=http\",{\"1\":{\"29\":1}}],[\"embeddedvalueresolveraware\",{\"1\":{\"535\":1}}],[\"embryo\",{\"1\":{\"93\":1}}],[\"emery\",{\"1\":{\"111\":2}}],[\"emit\",{\"1\":{\"93\":1}}],[\"emphasize\",{\"1\":{\"59\":1}}],[\"emphasis\",{\"1\":{\"55\":1}}],[\"empty\",{\"1\":{\"26\":2,\"302\":1,\"304\":1,\"355\":1}}],[\"email\",{\"1\":{\"24\":7}}],[\"enforcedestroymethod\",{\"1\":{\"546\":1}}],[\"enforceinitmethod\",{\"1\":{\"546\":1}}],[\"enforcement\",{\"1\":{\"77\":1}}],[\"en\",{\"1\":{\"478\":1,\"479\":1}}],[\"encoding=\",{\"1\":{\"478\":1,\"479\":1}}],[\"encapsulation\",{\"1\":{\"59\":1}}],[\"enhancer\",{\"1\":{\"345\":6}}],[\"enhancement\",{\"1\":{\"107\":1}}],[\"entrypoint\",{\"1\":{\"692\":1}}],[\"entry<k\",{\"1\":{\"326\":1}}],[\"entryset\",{\"1\":{\"325\":1,\"326\":1}}],[\"entered\",{\"1\":{\"93\":1}}],[\"engines\",{\"1\":{\"431\":1}}],[\"engine\",{\"1\":{\"126\":1,\"431\":1,\"731\":2}}],[\"engineering\",{\"1\":{\"55\":1,\"77\":2}}],[\"engineers\",{\"1\":{\"53\":1,\"111\":1}}],[\"engaged\",{\"1\":{\"65\":1}}],[\"end\",{\"1\":{\"53\":1,\"99\":1,\"105\":1,\"107\":1,\"111\":3,\"130\":1,\"430\":12,\"439\":1,\"444\":1,\"445\":1,\"462\":2,\"540\":1,\"731\":1}}],[\"enviroment\",{\"1\":{\"77\":1}}],[\"environmentaware\",{\"1\":{\"535\":1}}],[\"environments>\",{\"1\":{\"478\":1}}],[\"environment>\",{\"1\":{\"478\":1}}],[\"environment\",{\"1\":{\"57\":1,\"69\":2,\"75\":1,\"77\":1,\"107\":1,\"533\":1,\"535\":5}}],[\"env\",{\"1\":{\"26\":4,\"34\":6,\"39\":1,\"40\":10}}],[\"enableaspectjautoproxy\",{\"1\":{\"521\":1}}],[\"enabled\",{\"1\":{\"130\":1}}],[\"enabled=1\",{\"1\":{\"22\":1,\"731\":1}}],[\"enable\",{\"1\":{\"10\":1,\"681\":1,\"723\":1,\"731\":2}}],[\"eof\",{\"1\":{\"11\":2,\"22\":1,\"731\":2}}],[\"cc\",{\"1\":{\"743\":1}}],[\"cgroupfs\",{\"1\":{\"731\":1}}],[\"cgroupdriver=systemd\",{\"1\":{\"731\":2}}],[\"cgroup是对不同进程组进行资源控制和统计的技术\",{\"1\":{\"694\":1}}],[\"cgroup\",{\"0\":{\"694\":1,\"695\":1},\"1\":{\"694\":10,\"695\":6,\"731\":2}}],[\"cgroups\",{\"0\":{\"693\":1},\"1\":{\"694\":1}}],[\"cglib是针对类来实现代理的\",{\"1\":{\"350\":1}}],[\"cglib动态代理是通过字节码底层继承要代理类来实现\",{\"1\":{\"348\":1}}],[\"cglib动态代理\",{\"1\":{\"347\":1}}],[\"cglib通过继承方式实现代理\",{\"1\":{\"344\":1}}],[\"cglib\",{\"0\":{\"339\":1,\"344\":1},\"1\":{\"344\":1}}],[\"c0f373db9d49879e669f79989c81a6b5ec904e660732b4f0e4bebbb311850475\",{\"1\":{\"695\":3}}],[\"c0f373db9d49\",{\"1\":{\"692\":2,\"695\":1}}],[\"cp\",{\"1\":{\"731\":2}}],[\"cpo\",{\"0\":{\"652\":1}}],[\"cpuacct\",{\"1\":{\"694\":2}}],[\"cpu不必唤醒所有线程\",{\"1\":{\"259\":1}}],[\"cpu唤醒阻塞线程的开销比非公平锁大\",{\"1\":{\"259\":1}}],[\"cpu寄存器\",{\"1\":{\"205\":1}}],[\"cpu缓存引起\",{\"0\":{\"204\":1}}],[\"cpu\",{\"1\":{\"97\":2,\"139\":1,\"140\":1,\"202\":5,\"205\":2,\"233\":1,\"235\":1,\"285\":3,\"395\":1,\"694\":6,\"695\":1,\"722\":1,\"743\":1}}],[\"cpuset\",{\"1\":{\"694\":1}}],[\"cpus\",{\"1\":{\"97\":2}}],[\"cytwcl\",{\"1\":{\"647\":1}}],[\"cycle\",{\"1\":{\"73\":4}}],[\"cyclical\",{\"1\":{\"67\":1}}],[\"cj\",{\"1\":{\"478\":1}}],[\"cn\",{\"1\":{\"703\":1,\"704\":3,\"731\":2}}],[\"cname\",{\"1\":{\"427\":1,\"430\":4}}],[\"cn=notarysigner\",{\"1\":{\"26\":1}}],[\"cn=\",{\"1\":{\"26\":1}}],[\"city\",{\"1\":{\"447\":2}}],[\"cityname\",{\"1\":{\"447\":1}}],[\"cid\",{\"1\":{\"427\":1,\"429\":1,\"430\":75}}],[\"circumstances\",{\"1\":{\"103\":1}}],[\"c2\",{\"1\":{\"366\":1,\"367\":3}}],[\"c1\",{\"1\":{\"366\":1,\"367\":3}}],[\"curl\",{\"1\":{\"731\":1}}],[\"cursor\",{\"1\":{\"462\":3}}],[\"currank+1\",{\"1\":{\"430\":1}}],[\"currank\",{\"1\":{\"430\":2}}],[\"currentregistryprocessors\",{\"1\":{\"538\":16}}],[\"currenttimemillis\",{\"1\":{\"502\":2,\"533\":1}}],[\"currently\",{\"1\":{\"357\":1,\"359\":1,\"360\":1}}],[\"current\",{\"1\":{\"97\":1}}],[\"curtime\",{\"1\":{\"422\":1}}],[\"curdate\",{\"1\":{\"422\":1,\"430\":4}}],[\"custombeandefinitionregistrypostprocessor\",{\"1\":{\"521\":3}}],[\"customization\",{\"1\":{\"111\":1}}],[\"customizer\",{\"1\":{\"532\":2}}],[\"customizers\",{\"1\":{\"532\":3}}],[\"customize\",{\"1\":{\"24\":1,\"532\":1}}],[\"customers\",{\"1\":{\"55\":1,\"83\":1,\"111\":1}}],[\"c\",{\"1\":{\"87\":2,\"109\":2,\"211\":2,\"225\":1,\"226\":1,\"299\":4,\"388\":2,\"430\":16,\"454\":1,\"703\":1,\"704\":3}}],[\"c++\",{\"1\":{\"69\":2,\"77\":2}}],[\"cf\",{\"1\":{\"57\":1,\"91\":2,\"109\":1}}],[\"cfg\",{\"1\":{\"24\":1,\"723\":2,\"731\":1}}],[\"cms+serial\",{\"1\":{\"148\":1}}],[\"cms\",{\"1\":{\"148\":3}}],[\"cms收集器\",{\"1\":{\"148\":1}}],[\"cmu的abowd\",{\"1\":{\"55\":1}}],[\"cmu\",{\"1\":{\"55\":1}}],[\"cmd\",{\"1\":{\"34\":1,\"731\":1}}],[\"chdir\",{\"1\":{\"746\":1}}],[\"chroot\",{\"1\":{\"731\":1}}],[\"chmod\",{\"1\":{\"703\":1}}],[\"childrenhello\",{\"1\":{\"342\":1}}],[\"children\",{\"1\":{\"342\":4}}],[\"ch\",{\"1\":{\"113\":2}}],[\"chain\",{\"1\":{\"540\":1}}],[\"change\",{\"1\":{\"73\":1,\"109\":1}}],[\"changes\",{\"1\":{\"69\":1,\"73\":1,\"85\":1,\"107\":2}}],[\"charat\",{\"0\":{\"364\":1},\"1\":{\"364\":1,\"367\":2}}],[\"characterencoding=utf8\",{\"1\":{\"478\":1}}],[\"characters\",{\"1\":{\"356\":1,\"357\":1,\"358\":1,\"359\":1,\"360\":1,\"362\":1,\"365\":1,\"366\":3,\"367\":2}}],[\"character\",{\"1\":{\"353\":1,\"355\":1,\"357\":3,\"362\":1,\"364\":1,\"366\":4,\"367\":5,\"368\":1,\"373\":1}}],[\"characteristics\",{\"1\":{\"59\":1,\"97\":1}}],[\"charsetdecoder\",{\"1\":{\"358\":1}}],[\"charset\",{\"1\":{\"358\":4}}],[\"char\",{\"0\":{\"357\":1},\"1\":{\"353\":1,\"357\":1,\"364\":7,\"365\":2,\"366\":2,\"367\":4,\"368\":2,\"373\":1,\"446\":1,\"447\":1,\"746\":13}}],[\"charts\",{\"1\":{\"59\":1}}],[\"challenging\",{\"1\":{\"57\":1}}],[\"chosen\",{\"1\":{\"57\":1,\"107\":1}}],[\"chunks\",{\"1\":{\"55\":1,\"75\":1}}],[\"checked\",{\"1\":{\"760\":1}}],[\"checkexception\",{\"1\":{\"393\":1}}],[\"checkconnection\",{\"1\":{\"500\":1,\"502\":1}}],[\"checkformissinglineterminator\",{\"1\":{\"496\":1}}],[\"checkpackagedefinition\",{\"1\":{\"130\":2}}],[\"checkstateforclassloading\",{\"1\":{\"130\":1}}],[\"check\",{\"1\":{\"29\":1,\"463\":1,\"546\":5,\"731\":4}}],[\"clcerts\",{\"1\":{\"729\":1}}],[\"cls\",{\"1\":{\"694\":1}}],[\"clusterconfiguration\",{\"1\":{\"731\":1}}],[\"clusterrole\",{\"1\":{\"731\":1}}],[\"clusterrolebinding\",{\"1\":{\"729\":1,\"731\":1}}],[\"cluster\",{\"1\":{\"431\":1,\"463\":1,\"731\":2}}],[\"clustering\",{\"1\":{\"97\":1}}],[\"cloud\",{\"1\":{\"704\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"401\":1}}],[\"clone\",{\"1\":{\"385\":1,\"401\":2,\"519\":1}}],[\"cloneable\",{\"1\":{\"381\":2,\"401\":3,\"546\":1}}],[\"closed\",{\"1\":{\"533\":1}}],[\"close\",{\"1\":{\"99\":1,\"495\":2,\"500\":2,\"502\":2,\"731\":1,\"746\":1}}],[\"closely\",{\"1\":{\"99\":1,\"109\":1}}],[\"cl\",{\"1\":{\"130\":4}}],[\"clazz\",{\"1\":{\"130\":31,\"176\":2,\"345\":2}}],[\"clause\",{\"1\":{\"111\":1}}],[\"classid\",{\"1\":{\"694\":1}}],[\"classpathbeandefinitionscanner\",{\"1\":{\"530\":1}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"530\":1}}],[\"class2\",{\"1\":{\"430\":13}}],[\"class1\",{\"1\":{\"430\":14}}],[\"classnotfoundexception\",{\"1\":{\"130\":15}}],[\"class<t>\",{\"1\":{\"345\":1,\"532\":1}}],[\"class<\",{\"1\":{\"130\":4,\"531\":1,\"532\":2}}],[\"classloader1\",{\"1\":{\"130\":1}}],[\"classloader\",{\"1\":{\"126\":1,\"130\":3,\"535\":1}}],[\"class文件结构\",{\"1\":{\"125\":1}}],[\"class\",{\"0\":{\"531\":1},\"1\":{\"59\":8,\"65\":3,\"85\":1,\"97\":6,\"99\":3,\"111\":2,\"125\":2,\"126\":3,\"130\":13,\"132\":1,\"135\":1,\"166\":4,\"167\":2,\"169\":4,\"176\":1,\"342\":6,\"343\":1,\"345\":4,\"358\":1,\"374\":3,\"399\":7,\"468\":1,\"481\":1,\"482\":1,\"493\":2,\"500\":1,\"502\":2,\"506\":1,\"521\":3,\"531\":1,\"532\":2,\"535\":10,\"536\":2,\"538\":14,\"540\":6,\"541\":1,\"542\":1,\"544\":1,\"546\":3}}],[\"classes\",{\"1\":{\"59\":3,\"63\":1,\"65\":3,\"97\":8,\"99\":2,\"101\":1,\"107\":1}}],[\"clean\",{\"1\":{\"706\":2,\"708\":2,\"709\":1}}],[\"clearmetadatacache\",{\"1\":{\"538\":1}}],[\"clearance\",{\"1\":{\"97\":2}}],[\"clear\",{\"1\":{\"55\":1,\"299\":1,\"325\":1,\"533\":1,\"538\":4}}],[\"clements\",{\"1\":{\"55\":1}}],[\"clients\",{\"1\":{\"71\":1}}],[\"client\",{\"1\":{\"71\":2,\"97\":2,\"729\":3,\"731\":3}}],[\"cli2\",{\"1\":{\"19\":3}}],[\"cli\",{\"0\":{\"19\":1},\"1\":{\"32\":1,\"681\":1,\"731\":1,\"743\":1}}],[\"calico\",{\"1\":{\"730\":1,\"731\":6}}],[\"calico镜像无法拉取\",{\"1\":{\"730\":1}}],[\"callback\",{\"1\":{\"538\":1}}],[\"callable\",{\"1\":{\"238\":2}}],[\"call\",{\"1\":{\"93\":1,\"442\":1,\"731\":6}}],[\"calls\",{\"1\":{\"67\":1}}],[\"called\",{\"1\":{\"55\":1,\"67\":1}}],[\"cause\",{\"1\":{\"496\":2,\"506\":1}}],[\"cascade\",{\"1\":{\"434\":2}}],[\"cas\",{\"1\":{\"224\":2,\"225\":1,\"226\":2}}],[\"case\",{\"1\":{\"89\":2,\"115\":1,\"366\":5,\"367\":2,\"417\":1,\"430\":12}}],[\"cases\",{\"1\":{\"57\":1,\"107\":1}}],[\"cached\",{\"1\":{\"538\":1}}],[\"cachedthreadpool\",{\"1\":{\"241\":1}}],[\"cacheexception\",{\"1\":{\"507\":1}}],[\"cache\",{\"1\":{\"130\":2,\"353\":1,\"437\":1}}],[\"capacity\",{\"1\":{\"87\":1,\"304\":1,\"326\":3}}],[\"captured\",{\"1\":{\"107\":2,\"109\":1}}],[\"captures\",{\"1\":{\"57\":1,\"109\":1}}],[\"capture\",{\"1\":{\"53\":1,\"55\":1,\"57\":2,\"91\":1,\"107\":1}}],[\"card\",{\"1\":{\"65\":2}}],[\"cards\",{\"1\":{\"65\":1}}],[\"carefully\",{\"1\":{\"55\":1}}],[\"candidate属性设置为false\",{\"1\":{\"546\":1}}],[\"cancat\",{\"1\":{\"420\":1}}],[\"canada\",{\"1\":{\"81\":1,\"113\":1}}],[\"canada3\",{\"1\":{\"81\":1}}],[\"can\",{\"1\":{\"55\":1,\"57\":4,\"59\":1,\"67\":9,\"69\":1,\"71\":1,\"75\":2,\"77\":1,\"79\":1,\"81\":1,\"85\":1,\"97\":4,\"103\":1,\"107\":1}}],[\"ca\",{\"1\":{\"52\":1}}],[\"catch\",{\"0\":{\"392\":1},\"1\":{\"130\":10,\"495\":3,\"496\":2,\"500\":1,\"502\":1}}],[\"catalina\",{\"1\":{\"129\":1}}],[\"category\",{\"1\":{\"99\":1,\"111\":1}}],[\"categories\",{\"1\":{\"59\":1,\"65\":1,\"99\":2}}],[\"cater\",{\"1\":{\"65\":1}}],[\"cat\",{\"1\":{\"22\":1,\"27\":1,\"158\":4,\"695\":2,\"731\":3}}],[\"css\",{\"1\":{\"731\":1}}],[\"csv\",{\"1\":{\"431\":1}}],[\"cs\",{\"1\":{\"52\":1}}],[\"c=us\",{\"1\":{\"26\":1}}],[\"c=\",{\"1\":{\"26\":1}}],[\"cri\",{\"1\":{\"731\":1}}],[\"criticality\",{\"1\":{\"107\":1}}],[\"critical\",{\"1\":{\"97\":1,\"107\":2}}],[\"crank\",{\"1\":{\"430\":3}}],[\"createdtimestamp\",{\"1\":{\"502\":1}}],[\"created\",{\"1\":{\"355\":1,\"356\":2,\"357\":1,\"359\":1,\"360\":1,\"540\":1,\"692\":1}}],[\"create\",{\"1\":{\"345\":1,\"426\":1,\"427\":1,\"428\":1,\"429\":1,\"439\":2,\"444\":1,\"445\":1,\"446\":1,\"447\":4}}],[\"creation\",{\"1\":{\"24\":1}}],[\"crt\",{\"1\":{\"24\":2,\"26\":1,\"729\":2}}],[\"cd\",{\"1\":{\"24\":1,\"34\":8}}],[\"centered\",{\"1\":{\"53\":1}}],[\"centos\",{\"0\":{\"415\":1},\"1\":{\"9\":1,\"681\":1,\"722\":1,\"731\":2}}],[\"certs\",{\"1\":{\"731\":1}}],[\"certral\",{\"1\":{\"65\":1}}],[\"certain\",{\"1\":{\"57\":2,\"79\":1,\"95\":1,\"97\":1}}],[\"certificate\",{\"1\":{\"29\":1,\"729\":1}}],[\"cert\",{\"1\":{\"24\":5,\"26\":1}}],[\"ce\",{\"1\":{\"9\":3,\"681\":4,\"731\":5}}],[\"core\",{\"1\":{\"521\":1}}],[\"correspondence\",{\"0\":{\"94\":1},\"1\":{\"99\":1}}],[\"corresponding\",{\"1\":{\"57\":1,\"69\":1,\"73\":1,\"81\":1,\"87\":1,\"89\":1,\"93\":2,\"366\":1}}],[\"col\",{\"1\":{\"447\":3}}],[\"collectionutils\",{\"1\":{\"544\":1}}],[\"collection<\",{\"1\":{\"299\":4}}],[\"collection\",{\"0\":{\"299\":1,\"382\":1},\"1\":{\"299\":1,\"301\":2,\"382\":1,\"533\":1}}],[\"collections\",{\"0\":{\"382\":1},\"1\":{\"99\":1,\"382\":1}}],[\"colleagues\",{\"1\":{\"113\":1}}],[\"collocation\",{\"1\":{\"67\":1}}],[\"co\",{\"1\":{\"430\":2}}],[\"copied\",{\"1\":{\"357\":1,\"359\":1,\"360\":1}}],[\"copyof\",{\"1\":{\"357\":1,\"359\":1,\"360\":1}}],[\"copyonwritearrayset\",{\"0\":{\"323\":1}}],[\"copyonwritearraylist\",{\"0\":{\"322\":1}}],[\"copy\",{\"1\":{\"305\":1,\"356\":2}}],[\"course\",{\"1\":{\"427\":4,\"430\":13}}],[\"count\",{\"1\":{\"153\":1,\"430\":51,\"453\":1,\"462\":8}}],[\"could\",{\"1\":{\"71\":1,\"111\":1}}],[\"coverage\",{\"1\":{\"107\":1}}],[\"cost\",{\"1\":{\"75\":1,\"111\":1}}],[\"coherent\",{\"1\":{\"63\":1}}],[\"coexistence\",{\"1\":{\"57\":1,\"67\":1}}],[\"code\",{\"1\":{\"55\":1,\"69\":1,\"77\":1,\"83\":1,\"85\":1,\"99\":1,\"230\":1,\"304\":1,\"344\":1,\"353\":1,\"355\":1,\"356\":3,\"357\":1,\"358\":2,\"359\":1,\"360\":3,\"362\":1,\"363\":5,\"364\":12,\"365\":7,\"366\":11,\"367\":13,\"368\":6}}],[\"cookiecutter\",{\"0\":{\"38\":1},\"1\":{\"38\":1,\"39\":2,\"40\":36}}],[\"cookie\",{\"1\":{\"29\":2}}],[\"cookies\",{\"1\":{\"29\":1}}],[\"conversionpattern=\",{\"1\":{\"480\":1}}],[\"conversation\",{\"1\":{\"65\":4,\"93\":1}}],[\"conditionevaluator\",{\"1\":{\"532\":1}}],[\"conditional\",{\"1\":{\"532\":1}}],[\"condition\",{\"1\":{\"254\":2}}],[\"connceted\",{\"1\":{\"95\":1}}],[\"connect\",{\"1\":{\"731\":1}}],[\"connected\",{\"1\":{\"67\":1}}],[\"connection\",{\"1\":{\"65\":2,\"495\":3,\"502\":7}}],[\"connecting\",{\"1\":{\"57\":1}}],[\"connectors\",{\"1\":{\"57\":1,\"91\":1,\"111\":1}}],[\"consoleappender\",{\"1\":{\"480\":1}}],[\"conscious\",{\"1\":{\"304\":1}}],[\"considerations\",{\"1\":{\"366\":1}}],[\"considerably\",{\"1\":{\"61\":1,\"107\":1}}],[\"considered\",{\"1\":{\"99\":1,\"366\":2}}],[\"consider\",{\"1\":{\"97\":1,\"107\":1}}],[\"const\",{\"1\":{\"456\":1}}],[\"constructs\",{\"1\":{\"358\":1}}],[\"constructorargumentvalues\",{\"1\":{\"546\":2}}],[\"constructor\",{\"1\":{\"355\":1,\"356\":1,\"358\":1,\"360\":1,\"399\":1,\"546\":4}}],[\"construct\",{\"1\":{\"97\":1}}],[\"constraints\",{\"1\":{\"57\":2,\"65\":1,\"75\":1,\"97\":2,\"99\":1,\"109\":1}}],[\"constomer\",{\"1\":{\"81\":1}}],[\"constitute\",{\"1\":{\"81\":1}}],[\"conclusion\",{\"0\":{\"110\":1}}],[\"concern\",{\"1\":{\"99\":1}}],[\"concerns\",{\"1\":{\"53\":1,\"55\":2,\"57\":1,\"67\":1,\"97\":1,\"111\":1}}],[\"concurrency\",{\"1\":{\"57\":1,\"67\":1,\"97\":2}}],[\"concurrentmodificationexception\",{\"1\":{\"404\":1}}],[\"concurrentlinkeddeque\",{\"0\":{\"338\":1}}],[\"concurrentlinkedqueue\",{\"0\":{\"337\":1}}],[\"concurrently\",{\"1\":{\"97\":1}}],[\"concurrentskiplistmap\",{\"0\":{\"332\":1}}],[\"concurrentskiplistset\",{\"0\":{\"324\":1}}],[\"concurrenthashmap\",{\"0\":{\"331\":1,\"408\":1}}],[\"concurrent\",{\"1\":{\"53\":1,\"55\":1,\"97\":2,\"115\":1,\"148\":2,\"254\":1,\"453\":1}}],[\"contexttypematchclassloader\",{\"1\":{\"535\":1,\"539\":1}}],[\"context\",{\"1\":{\"521\":6,\"533\":1,\"538\":1,\"541\":1}}],[\"contents\",{\"1\":{\"109\":1,\"357\":1,\"359\":1,\"360\":1}}],[\"continue\",{\"1\":{\"107\":1}}],[\"contained\",{\"1\":{\"357\":1,\"359\":1,\"360\":1}}],[\"container\",{\"1\":{\"692\":1,\"695\":1}}],[\"containerd=\",{\"1\":{\"731\":3}}],[\"containerd\",{\"1\":{\"681\":1,\"731\":7}}],[\"containerport\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"containers\",{\"1\":{\"32\":1,\"34\":1,\"40\":1,\"57\":1,\"111\":1,\"731\":1}}],[\"containment\",{\"1\":{\"111\":1}}],[\"containing\",{\"1\":{\"65\":1,\"81\":1}}],[\"containslocalbean\",{\"1\":{\"535\":3,\"541\":1,\"542\":1}}],[\"containsbean\",{\"1\":{\"535\":1,\"539\":1}}],[\"containsvalue\",{\"1\":{\"325\":1}}],[\"containskey\",{\"1\":{\"325\":1}}],[\"containsall\",{\"1\":{\"299\":1}}],[\"contains\",{\"1\":{\"65\":1,\"69\":1,\"81\":1,\"299\":1,\"359\":1,\"360\":1,\"538\":3}}],[\"contributions\",{\"1\":{\"113\":1}}],[\"contract\",{\"1\":{\"34\":4}}],[\"controlplaneendpoint\",{\"1\":{\"731\":1}}],[\"controlled\",{\"1\":{\"67\":1}}],[\"controllers\",{\"1\":{\"97\":1,\"730\":1}}],[\"controller\",{\"1\":{\"65\":3,\"73\":6,\"93\":3}}],[\"control\",{\"1\":{\"15\":1,\"55\":1,\"57\":2,\"65\":2,\"67\":2,\"81\":2,\"97\":7,\"101\":1,\"107\":1,\"358\":1,\"715\":1}}],[\"conf的监控目标会随之调换\",{\"1\":{\"463\":1}}],[\"conf的内容都会发生改变\",{\"1\":{\"463\":1}}],[\"conf中会多一行slaveof的配置\",{\"1\":{\"463\":1}}],[\"conf和sentinel\",{\"1\":{\"463\":1}}],[\"conf\",{\"1\":{\"26\":3,\"463\":1,\"729\":2,\"731\":8}}],[\"config=kubeadm\",{\"1\":{\"731\":1}}],[\"configurablelistablebeanfactory\",{\"1\":{\"534\":1,\"535\":1,\"536\":1,\"538\":1,\"540\":1,\"541\":1,\"542\":1}}],[\"configurablepropertyresolver\",{\"1\":{\"533\":1}}],[\"configuration注解的处理\",{\"1\":{\"537\":1}}],[\"configuration>\",{\"1\":{\"478\":1}}],[\"configurations\",{\"1\":{\"83\":1,\"101\":1}}],[\"configuration\",{\"1\":{\"26\":10,\"87\":1,\"99\":1,\"111\":1,\"474\":2,\"478\":1,\"521\":1,\"538\":1}}],[\"configure\",{\"1\":{\"30\":1}}],[\"config\",{\"1\":{\"9\":1,\"26\":15,\"478\":2,\"482\":1,\"483\":1,\"521\":3,\"681\":1,\"731\":6}}],[\"combination\",{\"1\":{\"111\":1}}],[\"come\",{\"1\":{\"97\":1}}],[\"commitconnection\",{\"1\":{\"496\":2}}],[\"commit\",{\"1\":{\"437\":1,\"442\":1}}],[\"commandreadytoexecute\",{\"1\":{\"496\":1}}],[\"command\",{\"1\":{\"107\":1,\"496\":15,\"692\":1}}],[\"communicates\",{\"1\":{\"73\":1}}],[\"communicate\",{\"1\":{\"67\":2}}],[\"communication\",{\"1\":{\"67\":2,\"69\":1,\"111\":1}}],[\"communications\",{\"1\":{\"65\":1,\"99\":1}}],[\"communicating\",{\"1\":{\"67\":1}}],[\"commonclassloader\",{\"1\":{\"129\":1}}],[\"commonality\",{\"1\":{\"75\":1,\"99\":1,\"107\":1}}],[\"common\",{\"1\":{\"26\":12,\"59\":2,\"81\":1,\"417\":1,\"731\":1}}],[\"compile\",{\"1\":{\"521\":22}}],[\"compilation\",{\"1\":{\"55\":1,\"111\":1}}],[\"company\",{\"1\":{\"456\":3}}],[\"comparison\",{\"1\":{\"367\":1}}],[\"compared\",{\"1\":{\"366\":1,\"367\":2}}],[\"compareto\",{\"0\":{\"367\":1},\"1\":{\"365\":1,\"367\":4}}],[\"compares\",{\"1\":{\"365\":1,\"366\":1,\"367\":1}}],[\"compareandset\",{\"1\":{\"225\":1}}],[\"compare\",{\"1\":{\"99\":1,\"224\":1,\"365\":1,\"366\":1}}],[\"computeifpresent\",{\"1\":{\"325\":1}}],[\"computeifabsent\",{\"1\":{\"325\":1}}],[\"computers\",{\"1\":{\"55\":1,\"83\":1,\"87\":1}}],[\"compromise\",{\"1\":{\"97\":1}}],[\"complete\",{\"1\":{\"75\":1,\"89\":1,\"97\":1}}],[\"complex\",{\"1\":{\"71\":1,\"79\":1,\"97\":1}}],[\"component\",{\"1\":{\"531\":1}}],[\"componentclasses\",{\"1\":{\"531\":3}}],[\"components\",{\"1\":{\"57\":1,\"91\":1,\"111\":1}}],[\"compose\",{\"1\":{\"722\":1}}],[\"composes\",{\"1\":{\"73\":1}}],[\"composed\",{\"1\":{\"57\":1}}],[\"composition\",{\"1\":{\"57\":1,\"59\":1}}],[\"com>\",{\"1\":{\"24\":1}}],[\"com\",{\"1\":{\"3\":1,\"9\":1,\"11\":1,\"19\":3,\"22\":1,\"23\":1,\"24\":4,\"29\":2,\"34\":1,\"399\":1,\"456\":6,\"478\":1,\"519\":1,\"522\":1,\"681\":1,\"703\":1,\"704\":4,\"725\":2,\"729\":1,\"731\":7}}],[\"awk\",{\"1\":{\"729\":3}}],[\"aware\",{\"1\":{\"541\":1}}],[\"await\",{\"0\":{\"254\":1},\"1\":{\"254\":2}}],[\"away\",{\"1\":{\"105\":1}}],[\"aio\",{\"0\":{\"737\":1},\"1\":{\"729\":1,\"732\":1,\"737\":1}}],[\"airspace\",{\"1\":{\"97\":3}}],[\"aircraft公司\",{\"1\":{\"113\":1}}],[\"aircraft\",{\"1\":{\"81\":2,\"113\":1}}],[\"air\",{\"1\":{\"57\":2,\"65\":2,\"79\":2,\"81\":2,\"97\":1}}],[\"aux\",{\"1\":{\"692\":1}}],[\"autodetect\",{\"1\":{\"546\":3}}],[\"autowirecandidate\",{\"1\":{\"546\":1}}],[\"autowirecandidatequalifier\",{\"1\":{\"532\":1,\"546\":1}}],[\"autowirecapablebeanfactory\",{\"1\":{\"546\":5}}],[\"autowired\",{\"1\":{\"546\":1}}],[\"autowire\",{\"1\":{\"546\":17}}],[\"autowiremode\",{\"1\":{\"546\":6}}],[\"autoreconnect=true\",{\"1\":{\"478\":1}}],[\"auto\",{\"1\":{\"434\":1}}],[\"autonomy\",{\"1\":{\"97\":1}}],[\"automatically\",{\"1\":{\"69\":1}}],[\"authorization\",{\"1\":{\"731\":2}}],[\"authors\",{\"1\":{\"55\":2}}],[\"auth\",{\"1\":{\"24\":3,\"729\":1,\"731\":1}}],[\"aop\",{\"0\":{\"539\":1},\"1\":{\"464\":1,\"521\":1,\"537\":2,\"539\":1}}],[\"aof工具修复这些问题\",{\"1\":{\"463\":1}}],[\"aof文件是一个只进行追加的日志文件\",{\"1\":{\"463\":1}}],[\"aof\",{\"1\":{\"463\":19}}],[\"aof也需要fork\",{\"1\":{\"463\":1}}],[\"aof和rdb\",{\"1\":{\"463\":1}}],[\"a+b\",{\"1\":{\"391\":1}}],[\"a+=b\",{\"0\":{\"391\":1}}],[\"a=a+b\",{\"0\":{\"391\":1}}],[\"a>\",{\"1\":{\"362\":1,\"364\":1}}],[\"af6b\",{\"1\":{\"725\":1}}],[\"affect\",{\"1\":{\"357\":1,\"359\":1,\"360\":1}}],[\"after\",{\"1\":{\"89\":1,\"107\":1,\"439\":1}}],[\"aeronautical\",{\"1\":{\"97\":1}}],[\"ago\",{\"1\":{\"692\":1}}],[\"agents\",{\"1\":{\"97\":4}}],[\"agent\",{\"1\":{\"97\":6}}],[\"against\",{\"1\":{\"365\":1,\"366\":1,\"447\":1}}],[\"again\",{\"1\":{\"69\":1,\"77\":1}}],[\"amazonaws\",{\"1\":{\"725\":1}}],[\"amp\",{\"1\":{\"478\":3}}],[\"ambitious\",{\"1\":{\"105\":1}}],[\"among\",{\"1\":{\"97\":1,\"109\":1}}],[\"amount\",{\"1\":{\"97\":2}}],[\"amd64\",{\"1\":{\"19\":2}}],[\"avg\",{\"1\":{\"430\":14}}],[\"available\",{\"1\":{\"101\":1,\"533\":1}}],[\"availability\",{\"1\":{\"57\":1,\"67\":2,\"83\":1,\"97\":2,\"111\":2}}],[\"avoid\",{\"1\":{\"63\":1}}],[\"acl\",{\"1\":{\"731\":2}}],[\"ac\",{\"1\":{\"521\":3}}],[\"acid\",{\"1\":{\"454\":1}}],[\"ace\",{\"1\":{\"130\":8}}],[\"acknowledgments\",{\"0\":{\"112\":1}}],[\"acronyms\",{\"1\":{\"109\":1}}],[\"across\",{\"1\":{\"59\":1,\"63\":1,\"67\":1,\"81\":2,\"97\":2,\"99\":1}}],[\"acquisition\",{\"1\":{\"105\":1}}],[\"acquaintance\",{\"1\":{\"105\":1}}],[\"achieve\",{\"1\":{\"97\":2}}],[\"acctually\",{\"1\":{\"111\":1}}],[\"accommodate\",{\"1\":{\"107\":1}}],[\"account\",{\"1\":{\"61\":1,\"67\":1,\"75\":1,\"83\":1,\"97\":1}}],[\"acceptable\",{\"1\":{\"97\":1}}],[\"accesscontrol\",{\"1\":{\"743\":1}}],[\"accesscontrolexception\",{\"1\":{\"130\":2}}],[\"accesscontroller\",{\"1\":{\"130\":3}}],[\"access\",{\"1\":{\"97\":2}}],[\"accessible\",{\"1\":{\"97\":1}}],[\"action\",{\"1\":{\"434\":2}}],[\"activity\",{\"1\":{\"97\":1}}],[\"activities\",{\"1\":{\"67\":1,\"97\":2}}],[\"active\",{\"1\":{\"73\":1,\"97\":7,\"533\":1}}],[\"actual\",{\"1\":{\"75\":1,\"99\":1}}],[\"actually\",{\"1\":{\"55\":1,\"67\":1,\"105\":1}}],[\"abd\",{\"1\":{\"532\":12}}],[\"aba\",{\"1\":{\"226\":2}}],[\"abbreviations\",{\"1\":{\"109\":1}}],[\"abstractflag\",{\"1\":{\"546\":1}}],[\"abstractbeandefinition\",{\"1\":{\"546\":1}}],[\"abstractapplicationcontext\",{\"1\":{\"540\":1}}],[\"abstractrefreshablewebapplicationcontext\",{\"1\":{\"536\":1}}],[\"abstractsql命名采用了全大写的模式\",{\"1\":{\"494\":1}}],[\"abstractsql即可\",{\"1\":{\"493\":1}}],[\"abstractsql<t>\",{\"1\":{\"493\":1}}],[\"abstractsql<sql>\",{\"1\":{\"493\":1}}],[\"abstractmap\",{\"1\":{\"381\":1}}],[\"abstract\",{\"1\":{\"107\":1,\"493\":2,\"546\":1}}],[\"abstractions\",{\"1\":{\"59\":1,\"67\":1,\"107\":1}}],[\"abstraction\",{\"1\":{\"57\":1,\"59\":1,\"67\":1,\"89\":1,\"107\":1}}],[\"above\",{\"1\":{\"75\":1,\"77\":1,\"538\":1}}],[\"about\",{\"1\":{\"67\":1,\"75\":1,\"111\":1}}],[\"abowd\",{\"1\":{\"55\":1}}],[\"abc\",{\"1\":{\"24\":1}}],[\"asc\",{\"1\":{\"430\":2,\"447\":1}}],[\"ask\",{\"1\":{\"130\":1}}],[\"asynchronous\",{\"1\":{\"67\":1}}],[\"assert\",{\"1\":{\"531\":1}}],[\"assembling\",{\"1\":{\"57\":1}}],[\"associated\",{\"1\":{\"105\":1}}],[\"association\",{\"1\":{\"59\":1,\"111\":1}}],[\"assignment\",{\"1\":{\"97\":1}}],[\"assumptions\",{\"1\":{\"67\":1}}],[\"as\",{\"1\":{\"55\":2,\"57\":4,\"59\":1,\"67\":6,\"71\":1,\"75\":1,\"81\":1,\"83\":1,\"89\":5,\"91\":1,\"97\":2,\"99\":2,\"103\":1,\"107\":1,\"356\":1,\"364\":1,\"365\":1,\"366\":1,\"367\":1,\"368\":1,\"430\":22,\"533\":1,\"535\":1,\"540\":1,\"541\":1,\"731\":1}}],[\"aspecttest\",{\"1\":{\"521\":3}}],[\"aspectjweaver\",{\"1\":{\"521\":1}}],[\"aspectj\",{\"1\":{\"521\":1}}],[\"aspects\",{\"1\":{\"57\":1,\"97\":1,\"520\":1,\"521\":1}}],[\"aspect\",{\"1\":{\"55\":1,\"57\":1,\"97\":1}}],[\"atomicstampedreference\",{\"1\":{\"226\":1}}],[\"atomicinteger\",{\"1\":{\"225\":1}}],[\"attention\",{\"1\":{\"97\":1}}],[\"attempts\",{\"1\":{\"55\":1}}],[\"atc\",{\"1\":{\"81\":4}}],[\"at\",{\"1\":{\"55\":4,\"57\":2,\"61\":1,\"67\":3,\"77\":1,\"105\":1,\"113\":3,\"130\":1,\"364\":5,\"366\":1,\"367\":5,\"368\":2,\"531\":1,\"731\":1}}],[\"argv\",{\"1\":{\"746\":1}}],[\"arg\",{\"1\":{\"546\":1}}],[\"arg标签\",{\"1\":{\"546\":1}}],[\"argument\",{\"1\":{\"356\":2,\"357\":1,\"359\":1,\"360\":1,\"364\":1,\"365\":1,\"366\":1,\"367\":6,\"368\":1}}],[\"args\",{\"1\":{\"166\":2,\"169\":2,\"342\":3,\"345\":3,\"482\":1,\"495\":4,\"500\":2,\"502\":2,\"521\":1}}],[\"arrays\",{\"1\":{\"357\":1,\"359\":1,\"360\":1}}],[\"arrayblockingqueue\",{\"0\":{\"334\":1}}],[\"arraycopy进行数组的\",{\"1\":{\"305\":1}}],[\"array\",{\"1\":{\"304\":3,\"357\":3,\"358\":2,\"364\":1}}],[\"arraylist\",{\"0\":{\"301\":1,\"380\":1,\"402\":1,\"403\":1},\"1\":{\"170\":1,\"219\":1,\"300\":2,\"301\":1,\"302\":1,\"313\":1,\"380\":1}}],[\"arraylist<>\",{\"1\":{\"538\":8,\"540\":6}}],[\"arraylist<\",{\"1\":{\"170\":3}}],[\"arraylist<string>\",{\"1\":{\"170\":2}}],[\"arrows\",{\"1\":{\"55\":2}}],[\"arsg\",{\"1\":{\"167\":1}}],[\"arbitration\",{\"1\":{\"97\":2}}],[\"around\",{\"1\":{\"57\":1}}],[\"areas\",{\"1\":{\"97\":1}}],[\"are\",{\"1\":{\"53\":1,\"55\":3,\"57\":1,\"59\":1,\"61\":2,\"65\":1,\"67\":2,\"69\":1,\"73\":2,\"75\":1,\"77\":1,\"79\":1,\"81\":1,\"87\":1,\"89\":2,\"91\":1,\"95\":2,\"97\":18,\"99\":5,\"101\":2,\"103\":3,\"105\":1,\"107\":8,\"355\":1,\"356\":1,\"357\":1,\"358\":1,\"359\":1,\"360\":1,\"366\":5,\"367\":3,\"533\":1}}],[\"articles\",{\"1\":{\"55\":1}}],[\"article\",{\"1\":{\"53\":1,\"97\":1}}],[\"architcture\",{\"1\":{\"77\":1}}],[\"architect\",{\"1\":{\"69\":1}}],[\"architects\",{\"1\":{\"57\":1,\"69\":2}}],[\"architecturally\",{\"1\":{\"61\":1,\"69\":1,\"77\":1}}],[\"architectural\",{\"0\":{\"53\":1,\"56\":1},\"1\":{\"55\":1,\"57\":3,\"65\":1,\"67\":1,\"89\":2,\"107\":5,\"109\":3}}],[\"architectures\",{\"1\":{\"57\":1,\"87\":1,\"97\":1}}],[\"architecture\",{\"0\":{\"53\":1,\"58\":1,\"66\":1,\"74\":1,\"80\":1,\"82\":1,\"108\":1},\"1\":{\"52\":1,\"53\":4,\"55\":5,\"57\":8,\"59\":2,\"61\":1,\"65\":1,\"67\":6,\"69\":4,\"75\":5,\"81\":3,\"83\":1,\"85\":2,\"87\":3,\"89\":2,\"97\":10,\"103\":2,\"105\":6,\"107\":5,\"109\":7,\"111\":1}}],[\"archive\",{\"1\":{\"29\":1,\"431\":1}}],[\"annotatedgenericbeandefinition\",{\"1\":{\"532\":2}}],[\"annotatedbeandefinitionreader\",{\"1\":{\"530\":2,\"531\":1}}],[\"annotationconfigutils\",{\"1\":{\"532\":2}}],[\"annotationconfigapplicationcontext\",{\"1\":{\"521\":3,\"528\":1,\"530\":2}}],[\"annotation>\",{\"1\":{\"532\":2}}],[\"annotation\",{\"1\":{\"186\":1,\"521\":2}}],[\"anobject\",{\"1\":{\"365\":5}}],[\"anoter\",{\"1\":{\"97\":1}}],[\"anotherstring\",{\"0\":{\"366\":1,\"367\":1},\"1\":{\"365\":3,\"366\":6,\"367\":6}}],[\"another\",{\"1\":{\"71\":1,\"97\":1,\"366\":1}}],[\"animal\",{\"1\":{\"158\":5}}],[\"any\",{\"1\":{\"73\":2,\"97\":2,\"533\":1,\"538\":1}}],[\"analyzer\",{\"1\":{\"151\":1}}],[\"analyzed\",{\"1\":{\"105\":1}}],[\"analyze\",{\"1\":{\"93\":1}}],[\"analysis\",{\"1\":{\"59\":1,\"107\":1}}],[\"anapsix\",{\"1\":{\"34\":1}}],[\"an\",{\"0\":{\"56\":1},\"1\":{\"53\":1,\"55\":2,\"57\":3,\"59\":3,\"63\":1,\"65\":3,\"67\":3,\"81\":1,\"89\":2,\"97\":8,\"99\":1,\"105\":5,\"107\":2,\"111\":1,\"355\":1,\"356\":1,\"364\":1,\"366\":1,\"500\":1,\"502\":1,\"540\":1}}],[\"and\",{\"1\":{\"26\":1,\"53\":2,\"55\":3,\"57\":21,\"59\":6,\"63\":1,\"65\":4,\"67\":7,\"69\":4,\"71\":4,\"73\":2,\"75\":6,\"77\":5,\"79\":1,\"81\":6,\"83\":4,\"87\":3,\"89\":5,\"91\":1,\"93\":4,\"95\":1,\"97\":20,\"99\":7,\"101\":2,\"103\":2,\"105\":5,\"107\":10,\"109\":2,\"111\":7,\"113\":2,\"224\":1,\"358\":1,\"360\":1,\"363\":1,\"364\":1,\"365\":2,\"366\":3,\"367\":1,\"430\":19,\"456\":1,\"493\":1,\"535\":1,\"538\":2,\"540\":1}}],[\"apu2eh\",{\"1\":{\"550\":1}}],[\"apis\",{\"1\":{\"731\":1}}],[\"apiserver\",{\"1\":{\"721\":4,\"731\":3}}],[\"apigroup\",{\"1\":{\"731\":1}}],[\"api\",{\"0\":{\"467\":1},\"1\":{\"219\":1,\"398\":1,\"466\":1,\"467\":1,\"473\":1,\"474\":1,\"729\":1}}],[\"apiversion\",{\"1\":{\"32\":3,\"34\":3,\"40\":3,\"731\":3}}],[\"apex\",{\"1\":{\"77\":3,\"111\":2}}],[\"apache\",{\"1\":{\"29\":2,\"479\":1,\"480\":2,\"481\":1,\"482\":5}}],[\"appear\",{\"1\":{\"538\":1}}],[\"appender\",{\"1\":{\"480\":3}}],[\"append\",{\"1\":{\"462\":2,\"496\":6}}],[\"appendices\",{\"1\":{\"109\":1}}],[\"appclassloader\",{\"1\":{\"130\":5}}],[\"applicationlistener\",{\"1\":{\"544\":1}}],[\"applicationlistener<\",{\"1\":{\"544\":1}}],[\"applicationlistenerdetector\",{\"1\":{\"535\":1,\"540\":1}}],[\"applicationlisteners\",{\"1\":{\"533\":4,\"535\":1,\"540\":1}}],[\"applicationevent\",{\"1\":{\"544\":1}}],[\"applicationeventmulticaster\",{\"1\":{\"542\":7}}],[\"applicationeventpublisher\",{\"1\":{\"535\":1}}],[\"applicationeventpublisheraware\",{\"1\":{\"535\":1}}],[\"applicationevents\",{\"1\":{\"533\":1}}],[\"applicationcontextaware\",{\"1\":{\"535\":1}}],[\"applicationcontextawareprocessor\",{\"1\":{\"535\":1}}],[\"applicationcontext\",{\"0\":{\"529\":1,\"530\":1},\"1\":{\"521\":1,\"528\":2,\"529\":1,\"530\":2,\"535\":1,\"536\":1,\"540\":2}}],[\"application\",{\"1\":{\"59\":1,\"69\":1,\"533\":1,\"542\":4,\"544\":1,\"546\":1}}],[\"applyscopedproxymode\",{\"1\":{\"532\":1}}],[\"applying\",{\"1\":{\"366\":2}}],[\"apply\",{\"1\":{\"34\":4,\"57\":1,\"538\":2,\"544\":1,\"729\":2,\"731\":1}}],[\"approach\",{\"0\":{\"106\":1},\"1\":{\"59\":1,\"69\":1,\"71\":1,\"105\":3,\"111\":1}}],[\"approacch\",{\"1\":{\"59\":1}}],[\"apps\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"app\",{\"1\":{\"26\":1,\"32\":6,\"34\":6,\"39\":5,\"40\":25,\"731\":1}}],[\"a\",{\"0\":{\"72\":1,\"92\":1,\"106\":1},\"1\":{\"28\":1,\"53\":2,\"55\":7,\"57\":10,\"59\":3,\"63\":1,\"65\":16,\"67\":11,\"69\":2,\"71\":1,\"73\":2,\"75\":4,\"77\":1,\"79\":4,\"81\":4,\"83\":2,\"85\":1,\"87\":5,\"89\":3,\"93\":7,\"97\":27,\"99\":5,\"105\":1,\"107\":6,\"109\":6,\"111\":3,\"113\":2,\"130\":1,\"158\":2,\"164\":16,\"211\":2,\"224\":2,\"226\":2,\"355\":1,\"356\":3,\"357\":1,\"358\":2,\"359\":2,\"360\":4,\"364\":1,\"365\":2,\"367\":5,\"368\":1,\"388\":2,\"391\":1,\"430\":10,\"454\":1,\"456\":3,\"500\":1,\"502\":1,\"535\":2,\"540\":2,\"544\":1,\"731\":1}}],[\"alive\",{\"1\":{\"731\":1}}],[\"aliyuncs\",{\"1\":{\"11\":1,\"703\":1,\"704\":3,\"731\":1}}],[\"aliyun\",{\"1\":{\"9\":1,\"22\":1,\"681\":1,\"731\":4}}],[\"already\",{\"1\":{\"538\":1,\"541\":1}}],[\"al\",{\"1\":{\"67\":1,\"97\":2,\"105\":1}}],[\"alter\",{\"1\":{\"431\":1,\"434\":3,\"447\":1}}],[\"alternatively\",{\"1\":{\"59\":1}}],[\"although\",{\"1\":{\"97\":1}}],[\"alto\",{\"1\":{\"26\":1}}],[\"alcatel\",{\"1\":{\"57\":2,\"113\":1}}],[\"also\",{\"1\":{\"55\":1,\"57\":1,\"59\":1,\"65\":1,\"67\":1,\"97\":1,\"105\":1}}],[\"allocate\",{\"1\":{\"97\":1}}],[\"allocates\",{\"1\":{\"93\":1,\"357\":1,\"359\":1,\"360\":1}}],[\"allocating\",{\"1\":{\"97\":1}}],[\"allocation\",{\"1\":{\"75\":2,\"87\":2}}],[\"allowed\",{\"1\":{\"111\":1}}],[\"allow\",{\"1\":{\"79\":1,\"107\":1,\"533\":1}}],[\"allowing\",{\"1\":{\"57\":1,\"85\":1,\"105\":1}}],[\"allows\",{\"1\":{\"53\":1,\"69\":1,\"97\":1,\"105\":1}}],[\"allen\",{\"1\":{\"55\":2}}],[\"all\",{\"1\":{\"55\":2,\"65\":2,\"73\":2,\"75\":1,\"89\":1,\"103\":2,\"107\":1,\"456\":1,\"533\":1,\"538\":5,\"540\":3,\"544\":1,\"546\":1,\"709\":1}}],[\"always\",{\"1\":{\"34\":1,\"97\":1}}],[\"alpine\",{\"1\":{\"34\":1}}],[\"adjustment\",{\"1\":{\"111\":1}}],[\"advocate\",{\"1\":{\"105\":1}}],[\"advantage\",{\"1\":{\"97\":1}}],[\"adopting\",{\"1\":{\"79\":1}}],[\"adornments\",{\"1\":{\"61\":1}}],[\"ada\",{\"1\":{\"67\":2,\"69\":4,\"77\":2,\"97\":1,\"99\":2,\"521\":1}}],[\"adminserver\",{\"1\":{\"26\":1}}],[\"admin\",{\"1\":{\"24\":4,\"729\":3,\"731\":5}}],[\"admiral\",{\"1\":{\"24\":1}}],[\"addapplicationlistenerbean\",{\"1\":{\"544\":1}}],[\"addapplicationlistener\",{\"1\":{\"544\":1}}],[\"addall\",{\"1\":{\"299\":1,\"533\":1,\"538\":3}}],[\"addbeanpostprocessor\",{\"1\":{\"535\":3,\"536\":1,\"539\":1,\"540\":2}}],[\"addpropertyeditorregistrar\",{\"1\":{\"535\":1}}],[\"addqualifier\",{\"1\":{\"532\":1}}],[\"adds\",{\"1\":{\"81\":1}}],[\"additional\",{\"1\":{\"67\":1,\"81\":1,\"97\":1,\"99\":1,\"107\":2}}],[\"addition\",{\"1\":{\"67\":1}}],[\"addressed\",{\"1\":{\"67\":1}}],[\"addresses\",{\"1\":{\"57\":1,\"67\":1}}],[\"addressing\",{\"1\":{\"55\":1,\"67\":1}}],[\"address\",{\"1\":{\"53\":1,\"55\":1,\"57\":1,\"65\":1,\"99\":1}}],[\"add\",{\"1\":{\"9\":1,\"34\":1,\"164\":4,\"299\":1,\"493\":2,\"538\":13,\"540\":8,\"681\":1,\"731\":1}}],[\"hhyx06\",{\"1\":{\"654\":1}}],[\"hscan\",{\"1\":{\"462\":1}}],[\"hsetnx\",{\"1\":{\"462\":1}}],[\"hset\",{\"1\":{\"462\":1}}],[\"hvals\",{\"1\":{\"462\":1}}],[\"hms\",{\"1\":{\"541\":3}}],[\"hmset\",{\"1\":{\"462\":1}}],[\"hmget\",{\"1\":{\"462\":1}}],[\"hlen\",{\"1\":{\"462\":1}}],[\"hkeys\",{\"1\":{\"462\":1}}],[\"hgetall\",{\"1\":{\"462\":1}}],[\"hget\",{\"1\":{\"462\":1}}],[\"hdel\",{\"1\":{\"462\":1}}],[\"html\",{\"1\":{\"362\":1,\"364\":1}}],[\"httplog\",{\"1\":{\"731\":1}}],[\"https\",{\"1\":{\"11\":1,\"19\":3,\"21\":1,\"23\":1,\"27\":2,\"29\":1,\"151\":1,\"519\":1,\"522\":1,\"703\":1,\"704\":4,\"725\":1,\"729\":2,\"731\":8}}],[\"http\",{\"1\":{\"9\":1,\"24\":1,\"29\":1,\"32\":1,\"34\":1,\"40\":1,\"52\":1,\"151\":3,\"478\":1,\"479\":1,\"681\":1,\"731\":6}}],[\"href=\",{\"1\":{\"362\":1,\"364\":1}}],[\"h\",{\"1\":{\"327\":2,\"731\":3}}],[\"hypothetical\",{\"1\":{\"97\":1}}],[\"hugetlb\",{\"1\":{\"694\":1}}],[\"hugecapacity\",{\"1\":{\"304\":2}}],[\"huge\",{\"1\":{\"97\":1}}],[\"hughes\",{\"1\":{\"79\":2,\"81\":3,\"113\":1}}],[\"hub\",{\"1\":{\"24\":1,\"731\":1}}],[\"hierarchicalmessagesource\",{\"1\":{\"541\":3}}],[\"hierarchy\",{\"1\":{\"75\":1}}],[\"hincrbyfloat\",{\"1\":{\"462\":1}}],[\"hincrby\",{\"1\":{\"462\":1}}],[\"hilliard\",{\"1\":{\"111\":2}}],[\"history\",{\"1\":{\"109\":1}}],[\"higher\",{\"1\":{\"97\":1}}],[\"highest\",{\"1\":{\"67\":1,\"107\":1}}],[\"highly\",{\"1\":{\"83\":1}}],[\"high\",{\"1\":{\"57\":1,\"73\":2,\"97\":1}}],[\"hours\",{\"1\":{\"692\":2}}],[\"hotspot\",{\"1\":{\"140\":1}}],[\"home\",{\"1\":{\"129\":1,\"434\":1}}],[\"hofmeister\",{\"1\":{\"111\":2}}],[\"hopefully\",{\"1\":{\"107\":1}}],[\"hook\",{\"1\":{\"93\":2}}],[\"hollow\",{\"1\":{\"67\":1}}],[\"however\",{\"1\":{\"75\":1,\"97\":1}}],[\"how\",{\"1\":{\"67\":1,\"97\":1}}],[\"hosts\",{\"1\":{\"721\":2}}],[\"hostid\",{\"1\":{\"153\":1}}],[\"host\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"hostname\",{\"1\":{\"24\":1,\"722\":1}}],[\"hostname设置访问地址\",{\"1\":{\"24\":1}}],[\"hexists\",{\"1\":{\"462\":1}}],[\"helloproxytest\",{\"1\":{\"345\":1}}],[\"helloproxy\",{\"1\":{\"345\":5}}],[\"hello\",{\"1\":{\"169\":1,\"342\":1,\"345\":10}}],[\"head\",{\"1\":{\"729\":2}}],[\"header\",{\"1\":{\"29\":1}}],[\"heap\",{\"1\":{\"435\":1}}],[\"heaphero\",{\"1\":{\"151\":1}}],[\"heuristics\",{\"1\":{\"95\":1}}],[\"here\",{\"1\":{\"57\":1,\"73\":1,\"85\":1,\"105\":1,\"444\":1,\"445\":1,\"538\":2,\"544\":1}}],[\"hence\",{\"1\":{\"57\":1,\"89\":1,\"97\":1,\"107\":1,\"358\":1}}],[\"hangzhou\",{\"1\":{\"731\":1}}],[\"hand\",{\"1\":{\"97\":1}}],[\"handleline\",{\"1\":{\"496\":2}}],[\"handler\",{\"1\":{\"342\":2}}],[\"handled\",{\"1\":{\"73\":1,\"97\":1,\"538\":1}}],[\"handle\",{\"1\":{\"53\":1,\"97\":1}}],[\"haproxy\",{\"1\":{\"723\":5,\"731\":6}}],[\"happens\",{\"0\":{\"211\":1,\"287\":2},\"1\":{\"207\":1,\"388\":1}}],[\"having\",{\"1\":{\"430\":1}}],[\"have\",{\"1\":{\"55\":2,\"57\":3,\"69\":1,\"71\":1,\"75\":1,\"83\":1,\"97\":1,\"99\":2,\"107\":1,\"111\":2,\"130\":1,\"367\":2,\"538\":1,\"544\":1}}],[\"hasnext\",{\"1\":{\"495\":1}}],[\"hash\",{\"0\":{\"450\":1},\"1\":{\"327\":1,\"353\":2,\"355\":1,\"356\":3,\"435\":1,\"450\":3,\"462\":1}}],[\"hashset<>\",{\"1\":{\"538\":1}}],[\"hashset\",{\"0\":{\"320\":1}}],[\"hashcode\",{\"0\":{\"378\":1,\"386\":1},\"1\":{\"299\":3,\"327\":1,\"378\":2,\"386\":2,\"401\":1,\"406\":3,\"500\":2,\"502\":4}}],[\"hashmap的扩缩容\",{\"0\":{\"327\":1}}],[\"hashmap\",{\"0\":{\"326\":1,\"381\":1,\"405\":1,\"406\":1,\"407\":1,\"408\":1},\"1\":{\"219\":1,\"326\":2,\"381\":1,\"386\":1}}],[\"hashtable\",{\"0\":{\"330\":1,\"381\":1,\"405\":1},\"1\":{\"219\":1,\"381\":1}}],[\"hasexternalrepositories\",{\"1\":{\"130\":1}}],[\"has\",{\"1\":{\"55\":1,\"65\":1,\"79\":1,\"93\":1,\"97\":2,\"105\":1,\"111\":1,\"367\":1}}],[\"hardware建立软件和硬件的映射关系\",{\"1\":{\"83\":1}}],[\"hardware\",{\"1\":{\"57\":1,\"67\":1,\"81\":1,\"87\":1,\"101\":1}}],[\"hard\",{\"1\":{\"55\":1,\"65\":1}}],[\"harbor\",{\"0\":{\"23\":1,\"24\":1,\"25\":1},\"1\":{\"4\":1,\"23\":3,\"24\":3,\"26\":1}}],[\"lb\",{\"1\":{\"721\":1}}],[\"lbip\",{\"1\":{\"39\":1,\"40\":2}}],[\"luigr6\",{\"1\":{\"649\":1}}],[\"lua\",{\"1\":{\"462\":1}}],[\"lpush\",{\"1\":{\"462\":1}}],[\"lpop\",{\"1\":{\"462\":1}}],[\"llen\",{\"1\":{\"462\":1}}],[\"lt\",{\"1\":{\"367\":1}}],[\"left\",{\"1\":{\"420\":1,\"430\":22}}],[\"lenientconstructorresolution\",{\"1\":{\"546\":1}}],[\"len\",{\"1\":{\"456\":1}}],[\"len2\",{\"1\":{\"367\":3}}],[\"len1\",{\"1\":{\"367\":3}}],[\"lengths\",{\"1\":{\"367\":2}}],[\"length\",{\"0\":{\"362\":1},\"1\":{\"166\":1,\"304\":1,\"357\":1,\"358\":3,\"359\":1,\"360\":1,\"362\":5,\"363\":3,\"364\":3,\"365\":2,\"366\":4,\"367\":4,\"368\":3,\"447\":1,\"496\":1,\"540\":1}}],[\"let\",{\"1\":{\"367\":1,\"538\":2,\"544\":1}}],[\"lexicographic\",{\"1\":{\"367\":1}}],[\"lexicographically\",{\"1\":{\"367\":8}}],[\"less\",{\"1\":{\"364\":1,\"367\":2}}],[\"lessons\",{\"1\":{\"107\":2}}],[\"leave\",{\"1\":{\"538\":2,\"544\":1}}],[\"least\",{\"1\":{\"366\":1,\"531\":1}}],[\"learned\",{\"1\":{\"107\":2}}],[\"leading\",{\"1\":{\"97\":1}}],[\"levels\",{\"1\":{\"67\":1}}],[\"level\",{\"1\":{\"57\":1,\"61\":1,\"65\":1,\"67\":3,\"77\":1,\"206\":1}}],[\"ln\",{\"1\":{\"34\":1}}],[\"lazyinit\",{\"1\":{\"546\":1}}],[\"lazy\",{\"1\":{\"532\":2,\"546\":1}}],[\"layout\",{\"1\":{\"480\":1}}],[\"layout=org\",{\"1\":{\"480\":1}}],[\"layered\",{\"1\":{\"79\":1}}],[\"layering\",{\"1\":{\"77\":1,\"99\":1}}],[\"layer\",{\"1\":{\"75\":1,\"79\":4,\"81\":4,\"99\":3}}],[\"layers\",{\"1\":{\"75\":3,\"79\":3,\"81\":2,\"99\":2}}],[\"lastusedtimestamp\",{\"1\":{\"502\":1}}],[\"last等于新元素\",{\"1\":{\"310\":1}}],[\"last\",{\"1\":{\"310\":3,\"434\":1,\"436\":1}}],[\"lastindexof\",{\"1\":{\"130\":1,\"496\":1}}],[\"laid\",{\"1\":{\"107\":1}}],[\"lang\",{\"1\":{\"130\":2,\"229\":1,\"341\":1,\"366\":2}}],[\"language\",{\"1\":{\"75\":1}}],[\"lan\",{\"1\":{\"67\":1,\"111\":1}}],[\"latency\",{\"1\":{\"463\":1}}],[\"later\",{\"1\":{\"57\":1,\"89\":1}}],[\"latest\",{\"1\":{\"34\":9,\"39\":1,\"703\":1,\"731\":3}}],[\"larger\",{\"1\":{\"99\":2}}],[\"large\",{\"1\":{\"57\":1,\"85\":2,\"87\":2,\"99\":1,\"107\":1,\"111\":1}}],[\"labels\",{\"1\":{\"32\":4,\"34\":4,\"40\":4}}],[\"longer\",{\"1\":{\"367\":1}}],[\"long\",{\"1\":{\"353\":1,\"373\":2,\"456\":1,\"481\":3}}],[\"locking\",{\"1\":{\"760\":1}}],[\"locksupport\",{\"1\":{\"235\":1,\"236\":2}}],[\"lock\",{\"1\":{\"211\":1,\"388\":1,\"453\":1}}],[\"locak\",{\"1\":{\"453\":1}}],[\"located\",{\"1\":{\"130\":1}}],[\"locate\",{\"1\":{\"130\":1}}],[\"locations\",{\"1\":{\"97\":2}}],[\"local2\",{\"1\":{\"731\":1}}],[\"localhost\",{\"1\":{\"478\":1,\"722\":1}}],[\"locally\",{\"1\":{\"67\":1}}],[\"localtime\",{\"1\":{\"34\":1}}],[\"local\",{\"0\":{\"229\":1,\"297\":1},\"1\":{\"34\":4,\"93\":1,\"111\":1,\"130\":2,\"533\":1,\"731\":1}}],[\"loop循环\",{\"1\":{\"107\":1}}],[\"loop\",{\"1\":{\"107\":1}}],[\"lookup\",{\"1\":{\"546\":1}}],[\"look\",{\"1\":{\"57\":1}}],[\"looking\",{\"1\":{\"55\":1,\"368\":1}}],[\"lower\",{\"1\":{\"417\":1}}],[\"low\",{\"1\":{\"73\":2,\"453\":3}}],[\"loadtimeweaverawareprocessor\",{\"1\":{\"535\":1,\"539\":1}}],[\"loadtimeweaver\",{\"1\":{\"535\":1}}],[\"loadfactor\",{\"1\":{\"326\":1}}],[\"loadload\",{\"1\":{\"288\":2,\"388\":1}}],[\"loading\",{\"1\":{\"130\":3}}],[\"loadclass\",{\"1\":{\"130\":1}}],[\"loaded\",{\"1\":{\"130\":1}}],[\"loadstore\",{\"1\":{\"288\":2}}],[\"loads\",{\"1\":{\"67\":2}}],[\"load\",{\"1\":{\"67\":1,\"97\":2,\"107\":1,\"326\":1,\"435\":1,\"535\":1,\"539\":1}}],[\"loadbalancer\",{\"1\":{\"32\":2,\"34\":2,\"40\":2}}],[\"logs\",{\"1\":{\"540\":1}}],[\"logger\",{\"1\":{\"533\":4,\"541\":4,\"542\":4}}],[\"logexception\",{\"1\":{\"507\":1}}],[\"log4j\",{\"1\":{\"480\":6}}],[\"logic\",{\"1\":{\"99\":1}}],[\"logical\",{\"0\":{\"58\":1,\"60\":1,\"62\":1,\"64\":1,\"96\":1,\"98\":1},\"1\":{\"55\":1,\"57\":2,\"59\":4,\"61\":3,\"63\":2,\"65\":2,\"67\":4,\"81\":1,\"91\":2,\"97\":5,\"99\":1,\"101\":1,\"103\":1,\"107\":2,\"109\":1,\"111\":3}}],[\"login\",{\"1\":{\"21\":1,\"729\":1}}],[\"logrotate\",{\"1\":{\"26\":1,\"731\":2}}],[\"log\",{\"1\":{\"26\":1,\"34\":1,\"130\":38,\"456\":1,\"731\":2}}],[\"lifo\",{\"1\":{\"667\":1}}],[\"life\",{\"1\":{\"97\":1}}],[\"lifecycle\",{\"1\":{\"69\":2}}],[\"limit\",{\"1\":{\"430\":2,\"462\":2,\"695\":1}}],[\"limiting\",{\"1\":{\"77\":1}}],[\"lim\",{\"1\":{\"367\":2}}],[\"likely\",{\"1\":{\"360\":1}}],[\"like\",{\"1\":{\"113\":1,\"430\":2,\"447\":1,\"450\":1,\"453\":1}}],[\"little\",{\"1\":{\"105\":1}}],[\"listenerbeanname\",{\"1\":{\"544\":2}}],[\"listenerbeannames\",{\"1\":{\"544\":2}}],[\"listener\",{\"1\":{\"544\":2}}],[\"listeners\",{\"1\":{\"533\":1,\"544\":1}}],[\"list6\",{\"1\":{\"170\":1}}],[\"list<beanpostprocessor>\",{\"1\":{\"540\":4}}],[\"list<beandefinitionregistrypostprocessor>\",{\"1\":{\"538\":2}}],[\"list<beanfactorypostprocessor>\",{\"1\":{\"538\":5}}],[\"list<map<string\",{\"1\":{\"495\":1}}],[\"list<\",{\"1\":{\"170\":2}}],[\"list<string>\",{\"1\":{\"170\":5,\"538\":2,\"540\":2}}],[\"list15\",{\"1\":{\"170\":1}}],[\"list14\",{\"1\":{\"170\":1}}],[\"list13\",{\"1\":{\"170\":1}}],[\"list12\",{\"1\":{\"170\":1}}],[\"list11\",{\"1\":{\"170\":1}}],[\"list\",{\"0\":{\"400\":1},\"1\":{\"73\":1,\"75\":1,\"109\":1,\"299\":1,\"400\":1,\"462\":1,\"474\":2,\"540\":1}}],[\"light\",{\"1\":{\"67\":1}}],[\"linsert\",{\"1\":{\"462\":1}}],[\"lindex\",{\"1\":{\"462\":1}}],[\"link\",{\"1\":{\"358\":1,\"363\":2,\"366\":2,\"367\":1,\"746\":1}}],[\"linkedhashmap\",{\"1\":{\"546\":1}}],[\"linkedhashset<>\",{\"1\":{\"533\":2}}],[\"linkedblockingdeque\",{\"0\":{\"336\":1}}],[\"linkedblockingqueue\",{\"0\":{\"335\":1}}],[\"linkedlist\",{\"0\":{\"307\":1,\"380\":1,\"402\":1},\"1\":{\"300\":1,\"307\":1,\"380\":1}}],[\"linking\",{\"0\":{\"131\":1}}],[\"lineiscomment\",{\"1\":{\"496\":1}}],[\"linereader\",{\"1\":{\"496\":4}}],[\"linear\",{\"1\":{\"97\":1,\"105\":1}}],[\"lines\",{\"1\":{\"65\":1,\"91\":1}}],[\"line\",{\"1\":{\"65\":11,\"67\":2,\"75\":1,\"81\":2,\"111\":1,\"496\":14}}],[\"linux系统把所有网络请求以一个fd来标识\",{\"1\":{\"735\":1}}],[\"linux的一些功能进行实现的\",{\"1\":{\"692\":1}}],[\"linux\",{\"0\":{\"811\":1},\"1\":{\"3\":1,\"9\":1,\"11\":1,\"19\":2,\"29\":1,\"681\":1,\"694\":2,\"696\":1,\"731\":4}}],[\"libraries\",{\"1\":{\"75\":1}}],[\"library\",{\"1\":{\"34\":9,\"111\":1,\"344\":1}}],[\"lib\",{\"1\":{\"27\":1,\"129\":2,\"731\":4}}],[\"l=palo\",{\"1\":{\"26\":1}}],[\"l=\",{\"1\":{\"26\":1}}],[\"ldaps\",{\"1\":{\"24\":1}}],[\"ldap\",{\"1\":{\"24\":9}}],[\"ldap认证时配置项\",{\"1\":{\"24\":1}}],[\"lvm2\",{\"1\":{\"8\":1,\"731\":1}}],[\"p12证书下载到本地\",{\"1\":{\"729\":1}}],[\"p12\",{\"1\":{\"729\":1}}],[\"pkcs12\",{\"1\":{\"729\":1}}],[\"pkg\",{\"1\":{\"27\":2,\"704\":1}}],[\"pts\",{\"1\":{\"692\":1}}],[\"pzgtc3\",{\"1\":{\"559\":1}}],[\"pp\",{\"1\":{\"540\":12}}],[\"ppname\",{\"1\":{\"538\":20,\"540\":10}}],[\"please\",{\"1\":{\"731\":1}}],[\"plugins\",{\"1\":{\"521\":1}}],[\"pluginexception\",{\"1\":{\"507\":1}}],[\"placeholders\",{\"1\":{\"538\":1}}],[\"placeholder\",{\"1\":{\"533\":1}}],[\"place\",{\"1\":{\"107\":2}}],[\"platform\",{\"1\":{\"81\":1,\"358\":1}}],[\"planning\",{\"1\":{\"75\":1}}],[\"plan\",{\"1\":{\"65\":2,\"93\":1}}],[\"ps\",{\"1\":{\"495\":11,\"692\":2}}],[\"psetex\",{\"1\":{\"462\":1}}],[\"p2p模式\",{\"1\":{\"463\":1}}],[\"pc\",{\"1\":{\"368\":3}}],[\"png\",{\"1\":{\"206\":1,\"231\":1,\"258\":1,\"288\":2,\"725\":1,\"731\":1}}],[\"pivot\",{\"1\":{\"462\":1}}],[\"pidfile\",{\"1\":{\"731\":1}}],[\"pids\",{\"1\":{\"694\":1,\"695\":1}}],[\"pid\",{\"1\":{\"150\":1,\"153\":1,\"692\":1,\"731\":1,\"746\":1}}],[\"picking\",{\"1\":{\"71\":1,\"540\":1}}],[\"pick\",{\"1\":{\"57\":1}}],[\"pipe\",{\"1\":{\"746\":1}}],[\"pipes\",{\"1\":{\"71\":1}}],[\"pip\",{\"1\":{\"38\":1}}],[\"phantomreference\",{\"1\":{\"383\":2}}],[\"phases\",{\"1\":{\"105\":2}}],[\"phase\",{\"1\":{\"65\":1,\"93\":1,\"538\":1}}],[\"phrof\",{\"1\":{\"150\":1}}],[\"phone\",{\"1\":{\"65\":1,\"93\":1}}],[\"physical\",{\"0\":{\"82\":1,\"84\":1,\"86\":1,\"100\":1},\"1\":{\"55\":1,\"57\":1,\"65\":1,\"67\":1,\"83\":2,\"85\":3,\"87\":4,\"97\":4,\"99\":1,\"101\":1,\"103\":1,\"107\":2,\"109\":1,\"111\":4}}],[\"philippe\",{\"1\":{\"53\":1}}],[\"pdf\",{\"1\":{\"52\":1}}],[\"polling\",{\"1\":{\"734\":1}}],[\"poll\",{\"0\":{\"735\":1},\"1\":{\"732\":1}}],[\"policy\",{\"1\":{\"99\":1}}],[\"podsubnet\",{\"1\":{\"731\":1}}],[\"pod\",{\"1\":{\"721\":1,\"725\":2,\"731\":4}}],[\"pooleddatasource\",{\"1\":{\"502\":1}}],[\"pooledconnection\",{\"1\":{\"502\":1}}],[\"pooled\",{\"1\":{\"478\":1}}],[\"po++\",{\"1\":{\"368\":1}}],[\"po\",{\"1\":{\"368\":1}}],[\"potential\",{\"1\":{\"97\":1,\"107\":2}}],[\"potentially\",{\"1\":{\"97\":2}}],[\"point<string>\",{\"1\":{\"166\":2}}],[\"point<t>\",{\"1\":{\"166\":1}}],[\"point\",{\"1\":{\"89\":1}}],[\"position\",{\"1\":{\"367\":3}}],[\"positions\",{\"1\":{\"367\":1}}],[\"positive\",{\"1\":{\"367\":1}}],[\"possible\",{\"1\":{\"67\":1,\"69\":1,\"75\":1,\"87\":1,\"103\":1,\"107\":1,\"130\":1,\"456\":1}}],[\"postinstall\",{\"1\":{\"731\":1}}],[\"postprocessbeandefinitionregistry\",{\"1\":{\"538\":1}}],[\"postprocessbeanfactory\",{\"1\":{\"536\":1,\"538\":1}}],[\"postprocessorname\",{\"1\":{\"538\":4}}],[\"postprocessornames\",{\"1\":{\"538\":8,\"540\":3}}],[\"postprocessor\",{\"1\":{\"537\":1,\"538\":4}}],[\"post\",{\"1\":{\"31\":1,\"535\":1,\"538\":3,\"540\":1,\"544\":1}}],[\"portability\",{\"1\":{\"57\":1,\"75\":1,\"111\":1}}],[\"ports\",{\"1\":{\"32\":2,\"34\":2,\"40\":2,\"692\":1}}],[\"port\",{\"1\":{\"24\":1,\"32\":1,\"34\":1,\"39\":1,\"40\":6}}],[\"pure\",{\"1\":{\"230\":1}}],[\"purposes\",{\"1\":{\"89\":1}}],[\"purpose\",{\"1\":{\"57\":1}}],[\"putifabsent\",{\"1\":{\"325\":1}}],[\"putall\",{\"1\":{\"325\":1}}],[\"putting\",{\"1\":{\"89\":1}}],[\"puts\",{\"1\":{\"73\":1}}],[\"put\",{\"1\":{\"57\":1,\"107\":2,\"325\":1,\"327\":1}}],[\"pushconnection\",{\"1\":{\"500\":1,\"502\":1}}],[\"push\",{\"1\":{\"34\":4}}],[\"publish\",{\"1\":{\"544\":1}}],[\"published\",{\"1\":{\"533\":1}}],[\"public\",{\"0\":{\"355\":1,\"356\":1,\"357\":1,\"358\":1,\"359\":1,\"360\":1},\"1\":{\"34\":19,\"130\":2,\"161\":2,\"166\":10,\"167\":6,\"169\":11,\"342\":8,\"345\":7,\"355\":1,\"356\":1,\"357\":1,\"358\":1,\"359\":1,\"360\":1,\"362\":1,\"363\":1,\"364\":1,\"365\":1,\"366\":1,\"367\":1,\"368\":1,\"478\":1,\"479\":1,\"481\":6,\"482\":2,\"493\":6,\"495\":2,\"500\":1,\"502\":2,\"506\":2,\"521\":8,\"530\":1,\"531\":1,\"538\":1,\"540\":1,\"546\":12}}],[\"pub\",{\"1\":{\"29\":1}}],[\"pull\",{\"1\":{\"12\":1,\"417\":1,\"730\":1}}],[\"people\",{\"1\":{\"107\":1}}],[\"perf\",{\"1\":{\"694\":2}}],[\"performs\",{\"1\":{\"97\":1}}],[\"performance\",{\"1\":{\"57\":1,\"67\":2,\"83\":1,\"109\":1,\"111\":2}}],[\"permission\",{\"1\":{\"130\":1}}],[\"permanent\",{\"1\":{\"97\":1}}],[\"per\",{\"1\":{\"63\":2,\"99\":1,\"229\":1,\"434\":1}}],[\"person\",{\"1\":{\"521\":5}}],[\"persistency\",{\"1\":{\"97\":2}}],[\"persistenceexception\",{\"1\":{\"506\":1,\"507\":1}}],[\"persistence\",{\"1\":{\"97\":2}}],[\"persistent\",{\"1\":{\"8\":1,\"731\":1}}],[\"perspectives\",{\"1\":{\"57\":1}}],[\"perry\",{\"1\":{\"57\":4}}],[\"pem\",{\"1\":{\"26\":1}}],[\"prf\",{\"1\":{\"383\":1}}],[\"practical\",{\"1\":{\"97\":1}}],[\"prio\",{\"1\":{\"694\":1}}],[\"priorityorderedpostprocessors\",{\"1\":{\"538\":4,\"540\":4}}],[\"priorityordered\",{\"1\":{\"538\":6,\"540\":3}}],[\"priority\",{\"1\":{\"453\":3}}],[\"prioritize\",{\"1\":{\"97\":1}}],[\"primarykey\",{\"1\":{\"456\":1}}],[\"primary\",{\"1\":{\"456\":3,\"532\":2,\"546\":2}}],[\"primarily\",{\"1\":{\"59\":1,\"83\":1}}],[\"print\",{\"1\":{\"166\":2,\"169\":1,\"729\":3}}],[\"printlnerror\",{\"1\":{\"496\":2}}],[\"println\",{\"1\":{\"164\":4,\"166\":1,\"167\":1,\"342\":3,\"345\":3,\"482\":1,\"496\":3,\"521\":1}}],[\"principles\",{\"1\":{\"59\":1,\"99\":1,\"109\":1}}],[\"privilegedjavasegetresource\",{\"1\":{\"130\":1}}],[\"privilegedaction<url>\",{\"1\":{\"130\":1}}],[\"privilegedaction<class<\",{\"1\":{\"130\":1}}],[\"privilegedgetclassloader\",{\"1\":{\"130\":1}}],[\"privilegedfindclassbyname\",{\"1\":{\"130\":1}}],[\"private\",{\"1\":{\"26\":1,\"65\":1,\"158\":1,\"161\":1,\"164\":4,\"166\":3,\"167\":1,\"169\":2,\"265\":1,\"304\":2,\"342\":1,\"345\":1,\"353\":3,\"481\":2,\"493\":3,\"496\":3,\"506\":1,\"532\":1,\"546\":26}}],[\"pre\",{\"1\":{\"533\":2}}],[\"prevent\",{\"1\":{\"506\":1}}],[\"pre>\",{\"1\":{\"368\":1}}],[\"pre><\",{\"1\":{\"367\":2}}],[\"prefix\",{\"0\":{\"368\":1},\"1\":{\"368\":8}}],[\"preferred\",{\"1\":{\"360\":1}}],[\"precedes\",{\"1\":{\"367\":3}}],[\"precise\",{\"1\":{\"97\":1}}],[\"predicate<\",{\"1\":{\"299\":1}}],[\"preblockspin来更改\",{\"1\":{\"257\":1}}],[\"preliminary\",{\"1\":{\"107\":1}}],[\"present\",{\"1\":{\"107\":1}}],[\"presents\",{\"1\":{\"53\":1}}],[\"premature\",{\"1\":{\"63\":1}}],[\"prematurely\",{\"1\":{\"55\":1}}],[\"preparebeanfactory\",{\"1\":{\"535\":1}}],[\"preparerefresh\",{\"1\":{\"533\":1}}],[\"preparerefresh|500x500\",{\"1\":{\"533\":1}}],[\"preparestatement\",{\"1\":{\"495\":3}}],[\"preparedstatement\",{\"1\":{\"470\":1,\"495\":2}}],[\"prepare\",{\"0\":{\"133\":1},\"1\":{\"26\":2,\"535\":1}}],[\"proxies\",{\"1\":{\"540\":1}}],[\"proxyconnection\",{\"1\":{\"502\":1}}],[\"proxy类重新生成一个新的类\",{\"1\":{\"343\":1}}],[\"proxytest\",{\"1\":{\"342\":1}}],[\"proxyhandler\",{\"1\":{\"342\":4}}],[\"proxy和invocationhandler\",{\"1\":{\"341\":1}}],[\"proxy\",{\"1\":{\"340\":1,\"342\":2,\"345\":2,\"500\":1,\"502\":2,\"729\":1,\"772\":1}}],[\"properties\",{\"1\":{\"533\":1,\"535\":2}}],[\"properties>\",{\"1\":{\"478\":1}}],[\"propertyvalues\",{\"1\":{\"546\":1}}],[\"property标签或者\",{\"1\":{\"546\":1}}],[\"property\",{\"1\":{\"533\":1}}],[\"proposed\",{\"1\":{\"69\":1,\"111\":2}}],[\"propose\",{\"1\":{\"55\":1,\"57\":1}}],[\"produces\",{\"1\":{\"366\":2}}],[\"produced\",{\"1\":{\"109\":1}}],[\"products\",{\"1\":{\"81\":2}}],[\"product\",{\"1\":{\"69\":1,\"75\":1,\"81\":2,\"111\":1}}],[\"profile\",{\"1\":{\"97\":2}}],[\"protected\",{\"1\":{\"97\":3,\"161\":2,\"533\":1,\"534\":1,\"535\":1,\"536\":1,\"541\":1,\"542\":1,\"544\":1}}],[\"prototypes\",{\"1\":{\"105\":1}}],[\"prototyped\",{\"1\":{\"105\":1}}],[\"prototype\",{\"1\":{\"89\":1,\"105\":1,\"107\":2}}],[\"protocols\",{\"1\":{\"99\":1}}],[\"protocol\",{\"1\":{\"24\":1}}],[\"progress\",{\"1\":{\"75\":1}}],[\"programming\",{\"1\":{\"75\":1}}],[\"program\",{\"1\":{\"75\":1,\"103\":1}}],[\"programs\",{\"1\":{\"55\":1,\"67\":1}}],[\"providing\",{\"1\":{\"75\":1}}],[\"provided\",{\"1\":{\"360\":1}}],[\"provider\",{\"1\":{\"198\":1}}],[\"provide\",{\"1\":{\"59\":1,\"85\":1,\"97\":1}}],[\"proccess\",{\"0\":{\"104\":1}}],[\"proccessor\",{\"1\":{\"63\":1}}],[\"proceeds\",{\"1\":{\"97\":1}}],[\"proceed\",{\"1\":{\"97\":2}}],[\"procedures\",{\"1\":{\"105\":1}}],[\"procedure\",{\"1\":{\"67\":1}}],[\"processed\",{\"1\":{\"538\":1,\"540\":1}}],[\"processedbeans\",{\"1\":{\"538\":7}}],[\"processes\",{\"1\":{\"67\":4,\"69\":2,\"83\":1,\"89\":1,\"97\":12,\"101\":1,\"107\":2}}],[\"processcommondefinitionannotations\",{\"1\":{\"532\":1}}],[\"processlist命令查看当前\",{\"1\":{\"456\":1}}],[\"processors\",{\"1\":{\"538\":5,\"544\":1}}],[\"processor\",{\"1\":{\"97\":1,\"103\":1,\"535\":1,\"540\":2}}],[\"processing\",{\"1\":{\"67\":3,\"83\":1,\"97\":2,\"186\":1}}],[\"process关键词\",{\"1\":{\"53\":1}}],[\"process\",{\"0\":{\"66\":1,\"68\":1,\"70\":1,\"72\":1,\"96\":1,\"100\":1},\"1\":{\"53\":1,\"57\":2,\"67\":11,\"69\":4,\"71\":2,\"73\":6,\"85\":2,\"87\":3,\"91\":1,\"97\":10,\"99\":1,\"101\":2,\"103\":2,\"107\":3,\"109\":1,\"111\":4,\"115\":2,\"358\":1}}],[\"problem\",{\"1\":{\"55\":1,\"59\":1,\"97\":1}}],[\"projectcalico\",{\"1\":{\"731\":1}}],[\"projects\",{\"1\":{\"111\":1,\"519\":1}}],[\"project\",{\"1\":{\"24\":1,\"34\":4,\"39\":1,\"40\":1,\"53\":1,\"75\":1,\"99\":2,\"101\":1,\"105\":2,\"107\":2,\"111\":1,\"521\":21}}],[\"pwd\",{\"1\":{\"24\":1}}],[\"pa\",{\"1\":{\"368\":2}}],[\"page\",{\"1\":{\"109\":1}}],[\"pairs\",{\"1\":{\"107\":1}}],[\"packages\",{\"1\":{\"99\":1}}],[\"package\",{\"1\":{\"99\":2,\"481\":1,\"482\":1,\"521\":2,\"731\":1}}],[\"packaged\",{\"1\":{\"75\":1}}],[\"pay\",{\"1\":{\"97\":1}}],[\"paper\",{\"1\":{\"89\":1}}],[\"papers\",{\"1\":{\"52\":1}}],[\"palette\",{\"1\":{\"81\":1,\"107\":1}}],[\"passwd\",{\"1\":{\"704\":1}}],[\"password=root\",{\"1\":{\"417\":1}}],[\"password\",{\"1\":{\"24\":4,\"478\":3}}],[\"passive\",{\"1\":{\"97\":2}}],[\"passing\",{\"1\":{\"73\":1,\"130\":1}}],[\"passes\",{\"1\":{\"73\":1}}],[\"pabx建立终端之间的通信\",{\"1\":{\"65\":1}}],[\"pabx的逻辑蓝图\",{\"1\":{\"65\":1}}],[\"pabx来源于我们在阿尔卡特商业系统\",{\"1\":{\"57\":1}}],[\"pabx\",{\"1\":{\"57\":1,\"65\":6,\"73\":2,\"87\":6,\"93\":1}}],[\"patternlayout\",{\"1\":{\"480\":1}}],[\"pattern\",{\"1\":{\"340\":1,\"450\":2,\"462\":3,\"496\":1,\"768\":1,\"772\":1}}],[\"patterns\",{\"1\":{\"57\":1}}],[\"paths\",{\"1\":{\"32\":1,\"34\":1,\"40\":1,\"69\":1}}],[\"path\",{\"1\":{\"24\":1,\"32\":1,\"34\":1,\"40\":1,\"65\":1,\"434\":1,\"731\":2}}],[\"parsingexception\",{\"1\":{\"507\":1}}],[\"parseint\",{\"1\":{\"495\":1}}],[\"parse\",{\"1\":{\"463\":1}}],[\"parameterhandler\",{\"1\":{\"474\":1}}],[\"parameterobject\",{\"1\":{\"468\":2,\"474\":1}}],[\"parametertype\",{\"1\":{\"468\":1}}],[\"param\",{\"1\":{\"356\":1,\"357\":1,\"358\":1,\"359\":1,\"360\":1,\"364\":1,\"365\":1,\"366\":1,\"367\":1,\"368\":2}}],[\"parallelstream\",{\"1\":{\"299\":1}}],[\"parallelism\",{\"1\":{\"206\":1}}],[\"parallelgcthreads选项指定gc的线程数\",{\"1\":{\"148\":1}}],[\"parallel收集器更关注系统的吞吐量\",{\"1\":{\"148\":1}}],[\"parallel收集器\",{\"1\":{\"148\":1}}],[\"parallel\",{\"1\":{\"97\":1,\"148\":8}}],[\"parkuntil\",{\"1\":{\"236\":1}}],[\"parknanos\",{\"1\":{\"236\":1}}],[\"park\",{\"1\":{\"235\":1}}],[\"parnew是serial的并行版本\",{\"1\":{\"148\":1}}],[\"parnew\",{\"1\":{\"148\":2}}],[\"parnew收集器其实就是serial收集器的多线程版本\",{\"1\":{\"148\":1}}],[\"parnew收集器\",{\"1\":{\"148\":1}}],[\"part\",{\"1\":{\"75\":1,\"99\":1}}],[\"parts\",{\"1\":{\"59\":1}}],[\"partial\",{\"1\":{\"73\":1}}],[\"partially\",{\"1\":{\"57\":1}}],[\"partitioned\",{\"1\":{\"67\":1}}],[\"partitioning\",{\"1\":{\"55\":1,\"75\":1,\"97\":1}}],[\"particular\",{\"1\":{\"57\":1,\"61\":1,\"113\":1}}],[\"parent\",{\"1\":{\"34\":3,\"130\":8,\"342\":7,\"541\":5}}],[\"p\",{\"1\":{\"11\":1,\"12\":2,\"34\":1,\"166\":3,\"417\":1,\"461\":1,\"673\":4,\"692\":1,\"731\":1,\"746\":1}}],[\"python\",{\"1\":{\"3\":1}}],[\"uancng\",{\"1\":{\"651\":1}}],[\"uaqpkj\",{\"1\":{\"607\":1}}],[\"utf\",{\"1\":{\"478\":1,\"479\":1}}],[\"util\",{\"1\":{\"198\":1,\"254\":1}}],[\"utilization\",{\"1\":{\"97\":1}}],[\"utilities\",{\"1\":{\"59\":1}}],[\"utils\",{\"1\":{\"8\":1,\"681\":1,\"731\":4}}],[\"u000\",{\"1\":{\"373\":1}}],[\"ul>\",{\"1\":{\"366\":1}}],[\"u\",{\"1\":{\"225\":1,\"226\":1,\"730\":1}}],[\"unwrapthrowable\",{\"1\":{\"500\":1,\"502\":1}}],[\"unspecified\",{\"1\":{\"358\":1}}],[\"unsafe\",{\"1\":{\"225\":1}}],[\"unnecessary\",{\"1\":{\"355\":1,\"356\":1}}],[\"untreeify\",{\"1\":{\"326\":1}}],[\"until\",{\"1\":{\"97\":1,\"538\":1}}],[\"unlink\",{\"1\":{\"746\":1}}],[\"unlimited\",{\"1\":{\"34\":1}}],[\"unless\",{\"1\":{\"356\":1}}],[\"unlock\",{\"1\":{\"211\":1,\"388\":1}}],[\"understandability\",{\"1\":{\"111\":1}}],[\"understood\",{\"1\":{\"105\":1}}],[\"under\",{\"1\":{\"107\":1}}],[\"unprecedentedness\",{\"1\":{\"107\":1}}],[\"unprecedented\",{\"1\":{\"105\":1}}],[\"unas包含一个工具\",{\"1\":{\"69\":1}}],[\"unas\",{\"1\":{\"69\":2,\"85\":2,\"111\":4}}],[\"uninitialized\",{\"1\":{\"538\":2,\"544\":1}}],[\"unionfs\",{\"0\":{\"697\":1}}],[\"union\",{\"1\":{\"456\":2}}],[\"unique\",{\"1\":{\"456\":5}}],[\"unique|fulltext|spatial\",{\"1\":{\"447\":2}}],[\"uniquely\",{\"1\":{\"67\":1}}],[\"unicode\",{\"1\":{\"362\":1,\"364\":1,\"367\":1}}],[\"unix\",{\"0\":{\"732\":1},\"1\":{\"97\":1,\"731\":1,\"732\":1,\"739\":1}}],[\"universal\",{\"1\":{\"69\":2}}],[\"units<\",{\"1\":{\"362\":1}}],[\"unit\",{\"1\":{\"67\":1}}],[\"uniform\",{\"1\":{\"65\":1}}],[\"upload\",{\"1\":{\"731\":1}}],[\"upd\",{\"1\":{\"439\":1}}],[\"updated\",{\"1\":{\"97\":1,\"107\":1}}],[\"updates=1\",{\"1\":{\"453\":1}}],[\"updates\",{\"1\":{\"97\":1,\"453\":1}}],[\"update\",{\"1\":{\"7\":1,\"9\":1,\"107\":1,\"439\":3,\"444\":2,\"445\":2,\"453\":1,\"456\":2,\"468\":1,\"493\":2,\"495\":1,\"681\":1}}],[\"upgrade\",{\"1\":{\"107\":1}}],[\"up\",{\"1\":{\"57\":1,\"93\":1,\"99\":1,\"107\":1,\"540\":1,\"692\":1}}],[\"ubc\",{\"1\":{\"52\":1}}],[\"ubuntu\",{\"0\":{\"414\":1},\"1\":{\"26\":1}}],[\"urandom\",{\"1\":{\"34\":1}}],[\"url\",{\"1\":{\"24\":3,\"130\":5,\"478\":3,\"704\":1,\"731\":2}}],[\"us\",{\"1\":{\"85\":1,\"725\":1}}],[\"usage\",{\"1\":{\"59\":1,\"695\":2}}],[\"usc\",{\"1\":{\"55\":2}}],[\"usually\",{\"1\":{\"55\":1,\"99\":2,\"111\":1}}],[\"using\",{\"1\":{\"53\":1,\"55\":1,\"57\":1,\"81\":1,\"89\":1,\"91\":1,\"107\":1,\"130\":1,\"358\":1,\"367\":1,\"447\":1,\"541\":2,\"542\":2}}],[\"usejunitplatform\",{\"1\":{\"521\":1}}],[\"usegeneratedkeysupport\",{\"1\":{\"495\":2}}],[\"useunicode=true\",{\"1\":{\"478\":1}}],[\"useless\",{\"1\":{\"103\":1}}],[\"usessl=false\",{\"1\":{\"478\":1}}],[\"uses\",{\"1\":{\"65\":2,\"91\":1,\"93\":1}}],[\"useful\",{\"1\":{\"61\":1,\"103\":1}}],[\"used\",{\"1\":{\"57\":5,\"67\":1,\"69\":2,\"83\":1,\"97\":1,\"101\":1,\"111\":1,\"353\":1,\"358\":1}}],[\"use\",{\"1\":{\"53\":2,\"57\":3,\"59\":2,\"61\":1,\"63\":1,\"69\":1,\"71\":1,\"89\":3,\"97\":3,\"107\":2,\"115\":1,\"353\":1,\"355\":1,\"356\":1}}],[\"user1\",{\"1\":{\"521\":1}}],[\"usertest\",{\"1\":{\"521\":1}}],[\"userconfig\",{\"1\":{\"521\":3}}],[\"user即为数据库中的表\",{\"1\":{\"479\":1}}],[\"users\",{\"1\":{\"59\":1}}],[\"user\",{\"1\":{\"53\":1,\"81\":1,\"107\":1,\"111\":3,\"521\":10,\"704\":1,\"729\":1,\"731\":4}}],[\"user=root\",{\"1\":{\"28\":1}}],[\"username\",{\"1\":{\"24\":1,\"478\":3}}],[\"usr\",{\"1\":{\"34\":5,\"703\":1,\"731\":6}}],[\"uid\",{\"1\":{\"24\":2}}],[\"uid=searchuser\",{\"1\":{\"24\":1}}],[\"ui\",{\"0\":{\"20\":1},\"1\":{\"24\":1,\"26\":3}}],[\"yes\",{\"1\":{\"731\":1}}],[\"year=\",{\"1\":{\"456\":1}}],[\"yx9jwp\",{\"1\":{\"654\":1}}],[\"yield\",{\"0\":{\"244\":1},\"1\":{\"244\":1}}],[\"yaml到用户目录\",{\"1\":{\"729\":1}}],[\"yaml\",{\"1\":{\"34\":5,\"40\":2,\"729\":2,\"731\":8}}],[\"yml\",{\"1\":{\"26\":3}}],[\"y\",{\"1\":{\"8\":1,\"9\":2,\"22\":1,\"430\":5,\"681\":2,\"731\":7}}],[\"yum\",{\"0\":{\"7\":1},\"1\":{\"7\":1,\"8\":2,\"9\":3,\"22\":3,\"27\":2,\"681\":5,\"723\":1,\"731\":15}}],[\"i+1\",{\"1\":{\"673\":1}}],[\"i++\",{\"1\":{\"365\":1}}],[\"i++其实是一个复合操作\",{\"1\":{\"282\":1}}],[\"i++为什么不能保证原子性\",{\"0\":{\"282\":1}}],[\"i4lppb\",{\"1\":{\"656\":1}}],[\"ivxmpx\",{\"1\":{\"653\":1}}],[\"i5akei\",{\"1\":{\"633\":1}}],[\"irk6t0\",{\"1\":{\"622\":1}}],[\"ibatisexception\",{\"1\":{\"507\":1}}],[\"ibatis\",{\"1\":{\"479\":1,\"481\":1,\"482\":5}}],[\"ibd\",{\"1\":{\"434\":4}}],[\"id=\",{\"1\":{\"478\":1,\"479\":1,\"481\":1}}],[\"id的值为\",{\"1\":{\"464\":1}}],[\"id\",{\"1\":{\"430\":1,\"434\":1,\"444\":1,\"445\":1,\"456\":2,\"464\":1,\"467\":1,\"468\":2,\"479\":3,\"481\":6,\"521\":1,\"534\":1,\"692\":1,\"695\":1}}],[\"identified\",{\"1\":{\"75\":1,\"83\":1}}],[\"identify\",{\"1\":{\"59\":2,\"97\":3,\"107\":1}}],[\"identity\",{\"1\":{\"24\":1}}],[\"i>\",{\"1\":{\"367\":2}}],[\"ignoring\",{\"1\":{\"366\":5}}],[\"ignoredependencyinterface\",{\"1\":{\"535\":6,\"536\":2}}],[\"ignore\",{\"1\":{\"130\":3,\"495\":3}}],[\"ilp\",{\"1\":{\"206\":1}}],[\"illegalmonitorstateexeception\",{\"1\":{\"252\":1}}],[\"illegalaccessexception\",{\"1\":{\"176\":1}}],[\"illustrate\",{\"1\":{\"97\":1}}],[\"illustrated\",{\"1\":{\"57\":1}}],[\"illustration\",{\"1\":{\"89\":1}}],[\"i2\",{\"1\":{\"169\":3}}],[\"i1\",{\"1\":{\"169\":4}}],[\"ifaces\",{\"1\":{\"502\":1}}],[\"if\",{\"1\":{\"59\":1,\"97\":1,\"99\":2,\"103\":2,\"107\":1,\"130\":39,\"304\":4,\"363\":3,\"364\":2,\"365\":7,\"366\":3,\"367\":10,\"368\":5,\"495\":5,\"496\":4,\"500\":2,\"502\":2,\"532\":5,\"533\":3,\"535\":5,\"538\":9,\"539\":1,\"540\":5,\"541\":6,\"542\":3,\"544\":1,\"731\":1}}],[\"i\",{\"0\":{\"733\":1,\"734\":1,\"735\":1,\"736\":1,\"737\":1},\"1\":{\"57\":1,\"65\":3,\"67\":1,\"97\":1,\"113\":1,\"130\":3,\"167\":3,\"202\":2,\"204\":2,\"205\":3,\"246\":1,\"365\":3,\"454\":1,\"495\":3,\"540\":1,\"546\":2,\"673\":4,\"695\":2,\"731\":9,\"732\":5,\"734\":1,\"746\":1}}],[\"istio\",{\"0\":{\"809\":1}}],[\"istypematch\",{\"1\":{\"538\":4,\"540\":2}}],[\"istraceenabled\",{\"1\":{\"130\":8,\"533\":1,\"541\":2,\"542\":2}}],[\"issue\",{\"1\":{\"500\":1,\"502\":1}}],[\"issues\",{\"1\":{\"67\":1,\"99\":1}}],[\"isempty\",{\"0\":{\"363\":1},\"1\":{\"299\":1,\"325\":1,\"363\":1,\"544\":1}}],[\"isdockersystemdcheck\",{\"1\":{\"731\":1}}],[\"isdebugenabled\",{\"1\":{\"130\":10,\"533\":1}}],[\"isdn线路\",{\"1\":{\"65\":1}}],[\"isdn\",{\"1\":{\"65\":1}}],[\"isis\",{\"1\":{\"71\":2,\"101\":2}}],[\"is\",{\"1\":{\"53\":1,\"55\":1,\"57\":9,\"59\":5,\"61\":2,\"63\":2,\"65\":1,\"67\":5,\"69\":3,\"73\":2,\"75\":4,\"79\":1,\"81\":4,\"89\":3,\"91\":1,\"97\":10,\"99\":3,\"103\":3,\"105\":3,\"107\":4,\"109\":1,\"130\":2,\"158\":2,\"353\":1,\"355\":1,\"356\":3,\"358\":3,\"360\":3,\"362\":1,\"363\":2,\"364\":5,\"365\":3,\"366\":2,\"367\":13,\"368\":4,\"430\":1,\"533\":1,\"540\":2,\"731\":1}}],[\"ieee\",{\"1\":{\"52\":1}}],[\"iptables=1\",{\"1\":{\"731\":1}}],[\"iptables\",{\"1\":{\"731\":2}}],[\"ip6tables=1\",{\"1\":{\"731\":1}}],[\"ip6tables\",{\"1\":{\"731\":2}}],[\"ipv4\",{\"1\":{\"731\":3}}],[\"ip=172\",{\"1\":{\"721\":1}}],[\"ip\",{\"1\":{\"32\":1,\"34\":1,\"40\":1,\"721\":1,\"722\":2,\"731\":3}}],[\"img\",{\"1\":{\"725\":1}}],[\"immutable\",{\"1\":{\"216\":1,\"355\":1,\"356\":1}}],[\"improve\",{\"1\":{\"97\":1}}],[\"improved\",{\"1\":{\"67\":1}}],[\"imposes\",{\"1\":{\"97\":1}}],[\"imposed\",{\"1\":{\"75\":1}}],[\"important\",{\"1\":{\"59\":1,\"89\":2,\"97\":1,\"107\":1,\"109\":1}}],[\"import\",{\"1\":{\"27\":1,\"75\":1,\"389\":1,\"434\":1,\"482\":6,\"521\":11}}],[\"impact\",{\"1\":{\"69\":1,\"83\":1}}],[\"implements\",{\"1\":{\"167\":1,\"342\":2,\"345\":1,\"546\":2}}],[\"implementing\",{\"1\":{\"69\":1,\"97\":1}}],[\"implement\",{\"1\":{\"67\":1,\"69\":1,\"538\":6,\"540\":3}}],[\"implemented\",{\"1\":{\"67\":1,\"99\":1,\"107\":1}}],[\"implementation\",{\"1\":{\"57\":1,\"67\":1,\"77\":1,\"99\":1,\"107\":1}}],[\"imagerepository\",{\"1\":{\"731\":1}}],[\"images\",{\"1\":{\"731\":1}}],[\"image1\",{\"1\":{\"725\":1}}],[\"imagepullpolicy\",{\"1\":{\"34\":1}}],[\"image\",{\"1\":{\"32\":1,\"34\":1,\"39\":2,\"40\":3,\"115\":1,\"206\":1,\"231\":1,\"258\":1,\"288\":2,\"692\":1}}],[\"io模型\",{\"0\":{\"732\":1}}],[\"ioc\",{\"1\":{\"529\":1}}],[\"ioexception\",{\"1\":{\"482\":2}}],[\"io\",{\"0\":{\"154\":1,\"397\":1,\"398\":1},\"1\":{\"27\":3,\"32\":1,\"34\":1,\"40\":1,\"151\":4,\"398\":1,\"433\":1,\"434\":1,\"482\":3,\"681\":1,\"694\":2,\"731\":9,\"732\":1,\"733\":2,\"739\":2}}],[\"inkey\",{\"1\":{\"729\":1}}],[\"inner\",{\"1\":{\"535\":1,\"540\":1}}],[\"innodb\",{\"0\":{\"434\":1,\"454\":1},\"1\":{\"431\":4,\"434\":5,\"437\":3,\"446\":3,\"449\":3,\"454\":2,\"456\":2}}],[\"inout\",{\"1\":{\"442\":1,\"443\":1}}],[\"initmethodname\",{\"1\":{\"546\":1}}],[\"initmessagesource\",{\"1\":{\"541\":1}}],[\"initmessagesource|500x500\",{\"1\":{\"541\":1}}],[\"initapplicationeventmulticaster\",{\"1\":{\"542\":1}}],[\"initapplicationeventmulticaster|500x500\",{\"1\":{\"542\":1}}],[\"initpropertysources\",{\"1\":{\"533\":1}}],[\"init\",{\"1\":{\"435\":1,\"546\":1,\"704\":1,\"731\":3}}],[\"initialize\",{\"1\":{\"533\":1,\"538\":2,\"544\":1}}],[\"initializes\",{\"1\":{\"355\":1,\"356\":1}}],[\"initialization\",{\"0\":{\"135\":1}}],[\"initialcapacity\",{\"1\":{\"302\":1}}],[\"initial\",{\"1\":{\"107\":1,\"326\":1,\"357\":1}}],[\"initialadminpassowrd\",{\"1\":{\"27\":1}}],[\"initiate\",{\"1\":{\"97\":1}}],[\"initiative\",{\"1\":{\"97\":1}}],[\"inherited用于标明注解可继承\",{\"1\":{\"179\":1}}],[\"inherited\",{\"1\":{\"179\":1,\"181\":1}}],[\"inheritance\",{\"1\":{\"59\":2,\"111\":1}}],[\"inferred\",{\"1\":{\"546\":1}}],[\"infer\",{\"1\":{\"546\":1}}],[\"infile\",{\"1\":{\"435\":1}}],[\"inf\",{\"1\":{\"198\":2}}],[\"info\",{\"1\":{\"540\":1}}],[\"info<\",{\"1\":{\"169\":1}}],[\"info<object>\",{\"1\":{\"169\":2}}],[\"info<integer>\",{\"1\":{\"169\":2}}],[\"info<t\",{\"1\":{\"169\":1}}],[\"info<t>\",{\"1\":{\"167\":2,\"169\":1}}],[\"info<string>\",{\"1\":{\"167\":1,\"169\":2}}],[\"infoimpl<string>\",{\"1\":{\"167\":1}}],[\"infoimpl<t>\",{\"1\":{\"167\":1}}],[\"infoimpl\",{\"1\":{\"167\":1}}],[\"information\",{\"1\":{\"97\":1}}],[\"infrequent\",{\"1\":{\"97\":1}}],[\"infrequently\",{\"1\":{\"97\":1}}],[\"infrastructure\",{\"1\":{\"81\":2}}],[\"inserted\",{\"1\":{\"456\":1}}],[\"insert\",{\"1\":{\"426\":12,\"427\":3,\"428\":3,\"429\":18,\"434\":1,\"435\":1,\"436\":1,\"439\":2,\"453\":2,\"456\":4,\"459\":1,\"495\":1}}],[\"instrument\",{\"1\":{\"521\":1}}],[\"instruction\",{\"1\":{\"206\":1}}],[\"instead\",{\"1\":{\"500\":1,\"502\":1}}],[\"instantiation\",{\"1\":{\"506\":1,\"540\":1}}],[\"instantiationexception\",{\"1\":{\"176\":1}}],[\"instanceof\",{\"0\":{\"374\":1},\"1\":{\"365\":1,\"374\":1,\"538\":2,\"540\":3,\"541\":1}}],[\"instance\",{\"1\":{\"111\":1,\"506\":1,\"538\":1}}],[\"instancesupplier\",{\"1\":{\"546\":1}}],[\"instances\",{\"1\":{\"89\":1,\"91\":1}}],[\"installer\",{\"1\":{\"23\":2}}],[\"install\",{\"1\":{\"8\":1,\"9\":1,\"22\":1,\"25\":1,\"26\":1,\"27\":1,\"34\":1,\"38\":1,\"681\":2,\"723\":1,\"724\":1,\"725\":1,\"731\":9}}],[\"inside\",{\"1\":{\"97\":1}}],[\"involve\",{\"1\":{\"101\":1}}],[\"involved\",{\"1\":{\"65\":1,\"107\":1}}],[\"invokebeandefinitionregistrypostprocessors\",{\"1\":{\"538\":3}}],[\"invokebeanfactorypostprocessors|500x500\",{\"1\":{\"538\":1}}],[\"invokebeanfactorypostprocessors\",{\"1\":{\"538\":8}}],[\"invoke\",{\"1\":{\"342\":2,\"500\":2,\"502\":2,\"538\":9}}],[\"invoked\",{\"1\":{\"97\":1}}],[\"invokesuper\",{\"1\":{\"345\":1}}],[\"invokes\",{\"1\":{\"97\":2}}],[\"invoking\",{\"1\":{\"97\":2}}],[\"invocationhandler\",{\"1\":{\"342\":1}}],[\"invocationhandler是一个接口\",{\"1\":{\"341\":1}}],[\"invocation\",{\"1\":{\"97\":3}}],[\"inactive\",{\"1\":{\"73\":1}}],[\"inputstream\",{\"1\":{\"482\":4}}],[\"input\",{\"1\":{\"73\":1}}],[\"inject\",{\"1\":{\"65\":1}}],[\"indexer\",{\"1\":{\"521\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"364\":1}}],[\"indexing\",{\"1\":{\"364\":1}}],[\"index\",{\"0\":{\"364\":1},\"1\":{\"364\":15,\"367\":5,\"368\":2,\"433\":1,\"447\":7,\"456\":6,\"462\":1}}],[\"independent\",{\"1\":{\"67\":2,\"81\":1,\"95\":1}}],[\"independently\",{\"1\":{\"57\":1,\"67\":1}}],[\"indicate\",{\"1\":{\"105\":2}}],[\"indicated\",{\"1\":{\"57\":1,\"107\":1}}],[\"individually\",{\"1\":{\"67\":1}}],[\"individual\",{\"1\":{\"59\":1}}],[\"in\",{\"1\":{\"55\":1,\"57\":8,\"59\":3,\"61\":1,\"65\":3,\"67\":3,\"73\":2,\"75\":2,\"77\":1,\"79\":4,\"81\":4,\"85\":2,\"89\":2,\"95\":1,\"97\":10,\"99\":6,\"101\":3,\"103\":1,\"105\":2,\"107\":8,\"109\":1,\"111\":1,\"113\":1,\"356\":1,\"357\":1,\"358\":1,\"359\":1,\"360\":1,\"362\":1,\"366\":1,\"367\":4,\"368\":1,\"430\":23,\"443\":2,\"456\":2,\"533\":1,\"538\":2,\"695\":1,\"729\":1}}],[\"intb+=a\",{\"1\":{\"391\":1}}],[\"int\",{\"0\":{\"364\":1,\"368\":1},\"1\":{\"130\":1,\"164\":3,\"299\":1,\"304\":7,\"325\":1,\"326\":4,\"353\":1,\"362\":1,\"364\":1,\"365\":2,\"367\":5,\"368\":4,\"373\":2,\"444\":2,\"445\":2,\"495\":2,\"540\":1,\"546\":12,\"746\":36}}],[\"introduced\",{\"1\":{\"67\":1}}],[\"introduction\",{\"0\":{\"54\":1}}],[\"intel\",{\"1\":{\"206\":1}}],[\"integer\",{\"1\":{\"304\":2,\"367\":2,\"373\":1,\"375\":1,\"495\":1}}],[\"integer>\",{\"1\":{\"166\":2}}],[\"integrator\",{\"1\":{\"111\":1}}],[\"integrity\",{\"1\":{\"67\":1,\"97\":2,\"109\":1,\"111\":1}}],[\"interoperability\",{\"1\":{\"353\":1}}],[\"intercept\",{\"1\":{\"345\":1}}],[\"interruptedexception\",{\"0\":{\"246\":1},\"1\":{\"243\":1,\"246\":1,\"247\":1}}],[\"interrupted\",{\"0\":{\"247\":1},\"1\":{\"211\":1,\"247\":2,\"388\":1}}],[\"interrupt\",{\"1\":{\"211\":1,\"246\":1,\"247\":2,\"248\":1,\"388\":1}}],[\"interval\",{\"1\":{\"153\":1}}],[\"interaction\",{\"1\":{\"89\":1}}],[\"interactions\",{\"1\":{\"89\":1,\"91\":1,\"101\":1}}],[\"inter\",{\"1\":{\"67\":1,\"69\":1}}],[\"interprets\",{\"1\":{\"73\":1}}],[\"interpret\",{\"1\":{\"65\":1}}],[\"interfaces\",{\"1\":{\"65\":1,\"81\":1,\"97\":1,\"99\":1,\"107\":1}}],[\"interface\",{\"1\":{\"65\":2,\"75\":1,\"81\":1,\"167\":1,\"198\":1,\"342\":1,\"546\":1}}],[\"internalpostprocessors\",{\"1\":{\"540\":6}}],[\"internalautowiredannotationprocessor\",{\"1\":{\"538\":1}}],[\"internaleventlistenerprocessor\",{\"1\":{\"538\":1}}],[\"internaleventlistenerfactory\",{\"1\":{\"538\":1}}],[\"internalconfigurationannotationprocessor\",{\"1\":{\"538\":1}}],[\"internal\",{\"1\":{\"59\":1,\"75\":1,\"540\":1}}],[\"intent\",{\"1\":{\"57\":1}}],[\"intensive\",{\"1\":{\"53\":1}}],[\"into\",{\"1\":{\"55\":1,\"59\":2,\"61\":1,\"67\":2,\"69\":1,\"75\":1,\"83\":1,\"97\":1,\"99\":2,\"105\":2,\"111\":4,\"358\":1,\"426\":12,\"427\":3,\"428\":3,\"429\":18,\"435\":1,\"439\":1}}],[\"ingress\",{\"1\":{\"32\":2,\"34\":4,\"40\":4}}],[\"incrbyfloat\",{\"1\":{\"462\":1}}],[\"incrby\",{\"1\":{\"462\":1}}],[\"incr\",{\"1\":{\"462\":1}}],[\"increment\",{\"1\":{\"434\":1,\"462\":10}}],[\"increase\",{\"1\":{\"97\":2}}],[\"increased\",{\"1\":{\"67\":1}}],[\"include\",{\"1\":{\"111\":2}}],[\"including\",{\"1\":{\"69\":1,\"97\":1}}],[\"incorporated\",{\"1\":{\"69\":1}}],[\"inc\",{\"1\":{\"26\":1}}],[\"itself\",{\"1\":{\"83\":1,\"107\":1}}],[\"its\",{\"1\":{\"55\":1,\"57\":4,\"59\":1,\"67\":1,\"73\":1,\"97\":8,\"99\":1,\"113\":1}}],[\"itestimpl\",{\"1\":{\"546\":2}}],[\"itest\",{\"1\":{\"546\":3}}],[\"iterator\",{\"1\":{\"495\":1}}],[\"iterator<object>\",{\"1\":{\"495\":1}}],[\"iteration\",{\"1\":{\"107\":3}}],[\"iterations\",{\"1\":{\"97\":1,\"105\":1,\"107\":2}}],[\"iterative\",{\"0\":{\"104\":1},\"1\":{\"53\":1,\"105\":2}}],[\"items\",{\"1\":{\"61\":1,\"77\":1}}],[\"item\",{\"1\":{\"31\":1}}],[\"it\",{\"1\":{\"53\":1,\"55\":3,\"57\":3,\"59\":1,\"61\":1,\"65\":1,\"67\":2,\"75\":3,\"77\":1,\"81\":1,\"89\":2,\"97\":1,\"103\":1,\"111\":3,\"130\":1,\"166\":1,\"355\":1,\"356\":1,\"357\":1,\"366\":1,\"540\":1},\"2\":{\"2\":1,\"51\":1,\"117\":1,\"119\":1,\"121\":1,\"123\":1,\"475\":1,\"484\":1,\"511\":1,\"513\":1,\"515\":1,\"517\":1,\"523\":1,\"526\":1,\"547\":1}}],[\"3rxneg\",{\"1\":{\"643\":1}}],[\"39\",{\"0\":{\"409\":1}}],[\"38\",{\"0\":{\"408\":1}}],[\"386\",{\"1\":{\"19\":1}}],[\"37374d999dbadb788ef0461844a70151\",{\"1\":{\"704\":1}}],[\"37lu5n\",{\"1\":{\"648\":1}}],[\"37\",{\"0\":{\"407\":1}}],[\"36\",{\"0\":{\"406\":1}}],[\"35\",{\"0\":{\"405\":1}}],[\"34\",{\"0\":{\"404\":1},\"1\":{\"429\":1}}],[\"3306\",{\"1\":{\"417\":2,\"478\":1}}],[\"33\",{\"0\":{\"403\":1}}],[\"336fa29ff2bb4ef291e347e091f7f4a7\",{\"1\":{\"29\":1}}],[\"32\",{\"0\":{\"402\":1}}],[\"3以后\",{\"1\":{\"341\":1}}],[\"31\",{\"0\":{\"401\":1},\"1\":{\"326\":1,\"429\":1,\"731\":1}}],[\"3b\",{\"1\":{\"65\":1,\"81\":1,\"99\":1}}],[\"3a\",{\"1\":{\"29\":1,\"65\":1}}],[\"3000\",{\"1\":{\"731\":1}}],[\"3016~3049\",{\"1\":{\"625\":1}}],[\"3074\",{\"1\":{\"612\":1}}],[\"3055\",{\"1\":{\"612\":1}}],[\"30\",{\"0\":{\"400\":1},\"1\":{\"24\":1,\"326\":2,\"429\":1}}],[\"3\",{\"0\":{\"8\":1,\"16\":1,\"40\":1,\"361\":1,\"373\":1,\"390\":2,\"716\":1,\"744\":1},\"1\":{\"19\":6,\"22\":1,\"24\":2,\"29\":3,\"32\":1,\"39\":1,\"57\":1,\"81\":1,\"93\":2,\"107\":2,\"130\":2,\"132\":1,\"141\":2,\"144\":1,\"169\":1,\"206\":1,\"224\":1,\"430\":1,\"436\":1,\"456\":1,\"457\":1,\"459\":1,\"463\":2,\"464\":1,\"478\":2,\"479\":2,\"546\":2,\"585\":1,\"586\":1,\"587\":1,\"695\":4,\"704\":1,\"731\":6,\"760\":1}}],[\"2进3\",{\"1\":{\"582\":1,\"597\":1}}],[\"29\",{\"0\":{\"399\":1}}],[\"28\",{\"0\":{\"398\":1}}],[\"27\",{\"0\":{\"397\":1,\"548\":1},\"1\":{\"422\":1}}],[\"26\",{\"0\":{\"396\":1,\"592\":1}}],[\"24\",{\"0\":{\"394\":1,\"662\":1},\"1\":{\"661\":1,\"663\":1}}],[\"240\",{\"1\":{\"21\":1,\"32\":2,\"34\":2}}],[\"23\",{\"0\":{\"393\":1,\"630\":1}}],[\"21\",{\"0\":{\"391\":1,\"602\":1},\"1\":{\"426\":1}}],[\"20cm\",{\"1\":{\"633\":1,\"645\":2,\"661\":2,\"663\":2}}],[\"2024\",{\"0\":{\"548\":1,\"557\":1,\"574\":1,\"592\":1,\"602\":1,\"617\":1,\"630\":1,\"641\":1,\"662\":1},\"1\":{\"614\":1,\"661\":1,\"663\":1}}],[\"2020\",{\"1\":{\"422\":1}}],[\"20\",{\"0\":{\"390\":1},\"1\":{\"166\":1,\"426\":2,\"429\":1}}],[\"20k\",{\"1\":{\"99\":1}}],[\"2006\",{\"1\":{\"456\":2}}],[\"200\",{\"1\":{\"73\":1}}],[\"2014\",{\"1\":{\"426\":1}}],[\"2013\",{\"1\":{\"426\":1}}],[\"2012\",{\"1\":{\"426\":1}}],[\"2017\",{\"1\":{\"426\":2}}],[\"2019\",{\"1\":{\"3\":1}}],[\"2015\",{\"1\":{\"3\":1}}],[\"2fwww\",{\"1\":{\"29\":1}}],[\"2f\",{\"1\":{\"29\":2}}],[\"256\",{\"1\":{\"446\":1}}],[\"250\",{\"1\":{\"34\":9}}],[\"25\",{\"0\":{\"395\":1,\"574\":1,\"641\":1},\"1\":{\"24\":1,\"426\":1}}],[\"22\",{\"0\":{\"392\":1,\"557\":1,\"617\":1},\"1\":{\"21\":1,\"32\":2,\"34\":11,\"721\":6,\"729\":1,\"731\":4}}],[\"2\",{\"0\":{\"7\":1,\"11\":1,\"15\":1,\"39\":1,\"354\":1,\"372\":1,\"407\":1,\"660\":1,\"715\":1,\"743\":1,\"747\":1},\"1\":{\"22\":1,\"23\":3,\"32\":1,\"34\":1,\"61\":1,\"81\":1,\"91\":1,\"93\":2,\"99\":1,\"107\":2,\"130\":2,\"132\":1,\"141\":1,\"169\":1,\"206\":1,\"326\":2,\"353\":1,\"373\":2,\"430\":8,\"453\":1,\"456\":1,\"457\":1,\"458\":1,\"459\":1,\"463\":2,\"464\":2,\"521\":1,\"546\":3,\"673\":5,\"692\":1,\"704\":1,\"722\":1,\"725\":1,\"730\":1,\"731\":8,\"742\":1,\"753\":1,\"754\":1,\"760\":1,\"773\":1}}],[\"dcl\",{\"1\":{\"760\":1}}],[\"dc=com\",{\"1\":{\"24\":2}}],[\"dc=mydomain\",{\"1\":{\"24\":2}}],[\"dnsdomain\",{\"1\":{\"731\":1}}],[\"d85hzw\",{\"1\":{\"651\":1}}],[\"dms\",{\"1\":{\"541\":3}}],[\"dtd\",{\"1\":{\"478\":3,\"479\":3}}],[\"dp\",{\"1\":{\"130\":4}}],[\"dup\",{\"1\":{\"746\":1}}],[\"duplicated\",{\"1\":{\"97\":1}}],[\"dump\",{\"1\":{\"150\":1}}],[\"dummy\",{\"1\":{\"67\":1}}],[\"duration\",{\"1\":{\"107\":2}}],[\"during\",{\"1\":{\"89\":1,\"109\":1,\"540\":1}}],[\"drop\",{\"1\":{\"440\":1}}],[\"driver为systemd\",{\"1\":{\"731\":1}}],[\"driver接口\",{\"1\":{\"198\":1}}],[\"driver\",{\"1\":{\"89\":1,\"399\":1,\"478\":4,\"731\":2}}],[\"driven\",{\"0\":{\"106\":1},\"1\":{\"53\":1,\"59\":1,\"73\":1,\"85\":1}}],[\"draw\",{\"1\":{\"77\":1}}],[\"drawn\",{\"1\":{\"57\":1}}],[\"dir\",{\"1\":{\"434\":1,\"746\":2}}],[\"dirctory\",{\"1\":{\"433\":1}}],[\"directory\",{\"1\":{\"65\":1,\"433\":1}}],[\"dictionary\",{\"1\":{\"381\":1}}],[\"differ\",{\"1\":{\"367\":1}}],[\"difference\",{\"1\":{\"367\":2}}],[\"differents\",{\"1\":{\"87\":1}}],[\"different\",{\"1\":{\"65\":3,\"67\":1,\"83\":2,\"87\":2,\"97\":1,\"99\":1,\"367\":4}}],[\"dial\",{\"1\":{\"93\":1}}],[\"dialing\",{\"1\":{\"65\":1}}],[\"diagrams4\",{\"1\":{\"89\":1}}],[\"diagrams\",{\"1\":{\"55\":1,\"59\":3,\"75\":1,\"89\":1,\"91\":1}}],[\"diagram\",{\"1\":{\"55\":1,\"59\":1,\"65\":1}}],[\"digits\",{\"1\":{\"93\":2}}],[\"digit\",{\"1\":{\"65\":1,\"93\":1}}],[\"discard\",{\"1\":{\"434\":1}}],[\"discussed\",{\"1\":{\"111\":1}}],[\"discovered\",{\"1\":{\"107\":1}}],[\"discover\",{\"1\":{\"89\":1,\"107\":1}}],[\"display\",{\"1\":{\"97\":1}}],[\"distinct\",{\"1\":{\"430\":5}}],[\"distinguish\",{\"1\":{\"67\":1}}],[\"distance\",{\"1\":{\"99\":2}}],[\"distribution\",{\"1\":{\"67\":2,\"97\":3}}],[\"distributed\",{\"1\":{\"57\":1,\"67\":1,\"81\":1,\"97\":4}}],[\"dist\",{\"1\":{\"29\":1}}],[\"disable\",{\"1\":{\"6\":1,\"731\":1}}],[\"dfs\",{\"1\":{\"48\":1}}],[\"djava\",{\"1\":{\"34\":1}}],[\"delimiter\",{\"1\":{\"496\":3}}],[\"delete\",{\"1\":{\"439\":1,\"453\":1,\"456\":2,\"728\":1}}],[\"delegatingmessagesource\",{\"1\":{\"541\":2}}],[\"delegating\",{\"1\":{\"130\":2}}],[\"delegate\",{\"1\":{\"130\":1}}],[\"delegateload\",{\"1\":{\"130\":3}}],[\"demo\",{\"1\":{\"439\":1}}],[\"demo1\",{\"1\":{\"169\":1}}],[\"debug\",{\"1\":{\"130\":12,\"533\":2}}],[\"detected\",{\"1\":{\"731\":1}}],[\"detecting\",{\"1\":{\"535\":1,\"540\":1}}],[\"detect\",{\"1\":{\"107\":2,\"535\":1}}],[\"detects\",{\"1\":{\"73\":1,\"93\":1}}],[\"deterministic\",{\"1\":{\"97\":1}}],[\"determined\",{\"1\":{\"367\":1}}],[\"determine\",{\"1\":{\"97\":1}}],[\"degree\",{\"1\":{\"97\":1,\"99\":1,\"107\":1}}],[\"denoted\",{\"1\":{\"91\":1}}],[\"denpendencies\",{\"1\":{\"79\":1}}],[\"derived\",{\"1\":{\"57\":1,\"61\":1}}],[\"deferred\",{\"1\":{\"97\":1}}],[\"defining\",{\"1\":{\"79\":1,\"97\":1}}],[\"definitionholder\",{\"1\":{\"532\":6}}],[\"definitions\",{\"1\":{\"109\":1,\"538\":1}}],[\"definition\",{\"1\":{\"77\":1,\"99\":1,\"367\":1}}],[\"definer=`root`\",{\"1\":{\"444\":1,\"445\":1}}],[\"defined\",{\"1\":{\"59\":1,\"67\":1,\"75\":1,\"79\":1}}],[\"define\",{\"1\":{\"57\":2,\"59\":1,\"97\":4,\"130\":1}}],[\"defaults\",{\"1\":{\"731\":1}}],[\"default=\",{\"1\":{\"478\":1}}],[\"defaultvalue\",{\"1\":{\"325\":2}}],[\"defaultcapacity\",{\"1\":{\"304\":1}}],[\"default\",{\"1\":{\"32\":3,\"34\":3,\"39\":1,\"40\":2,\"304\":1,\"326\":2,\"353\":1,\"358\":2,\"478\":1,\"535\":1,\"546\":2,\"731\":1}}],[\"decrement\",{\"1\":{\"462\":2}}],[\"decrby\",{\"1\":{\"462\":1}}],[\"decr\",{\"1\":{\"462\":1}}],[\"decimal\",{\"1\":{\"429\":1}}],[\"decisions\",{\"1\":{\"57\":1,\"109\":1}}],[\"deccomposed\",{\"1\":{\"107\":1}}],[\"decorator\",{\"1\":{\"768\":1}}],[\"decoding\",{\"1\":{\"358\":2}}],[\"decoded\",{\"1\":{\"358\":1}}],[\"decode\",{\"1\":{\"65\":1}}],[\"decomposed\",{\"1\":{\"59\":1,\"99\":1}}],[\"decomposition进程分解\",{\"1\":{\"67\":1}}],[\"decomposition面向对象的分解\",{\"1\":{\"59\":1}}],[\"decompositions\",{\"1\":{\"57\":1}}],[\"decomposition\",{\"1\":{\"57\":1,\"59\":1,\"75\":1}}],[\"deals\",{\"1\":{\"57\":2}}],[\"desc\",{\"1\":{\"430\":10,\"447\":1,\"456\":1}}],[\"descriptions\",{\"1\":{\"103\":1}}],[\"description\",{\"1\":{\"55\":1,\"57\":1,\"103\":1,\"532\":1,\"546\":1}}],[\"describes\",{\"1\":{\"57\":2,\"101\":1}}],[\"describe\",{\"1\":{\"57\":2,\"89\":2,\"729\":1}}],[\"described\",{\"1\":{\"53\":1,\"57\":1,\"67\":2,\"71\":1,\"75\":1,\"77\":1,\"89\":1,\"111\":1}}],[\"describing\",{\"1\":{\"53\":1}}],[\"designer\",{\"1\":{\"111\":2}}],[\"designed\",{\"1\":{\"53\":1}}],[\"design\",{\"1\":{\"53\":1,\"55\":1,\"57\":6,\"59\":1,\"61\":2,\"63\":1,\"77\":1,\"79\":1,\"89\":3,\"95\":1,\"105\":2,\"107\":2,\"109\":4}}],[\"destroymethodname\",{\"1\":{\"546\":1}}],[\"destination\",{\"1\":{\"462\":12}}],[\"dest\",{\"1\":{\"34\":1}}],[\"deprecated说明以后可能去除\",{\"1\":{\"507\":1}}],[\"deprecated注解的代码则编译器将发出警告\",{\"1\":{\"180\":1}}],[\"deprecated\",{\"1\":{\"180\":1,\"546\":1}}],[\"deprecated和\",{\"1\":{\"179\":1,\"180\":1}}],[\"dependson\",{\"1\":{\"532\":1,\"546\":2}}],[\"depending\",{\"1\":{\"97\":1}}],[\"dependencycheck\",{\"1\":{\"546\":1}}],[\"dependency\",{\"1\":{\"111\":1,\"546\":5}}],[\"dependencies\",{\"1\":{\"55\":1,\"521\":1}}],[\"dependent\",{\"1\":{\"81\":1}}],[\"depend\",{\"1\":{\"79\":1}}],[\"depiction\",{\"1\":{\"69\":1}}],[\"dept\",{\"1\":{\"34\":6,\"39\":1,\"40\":12}}],[\"deploy\",{\"1\":{\"34\":2,\"729\":1}}],[\"deployment\",{\"1\":{\"32\":2,\"34\":7,\"40\":2,\"83\":1,\"101\":1}}],[\"devlin\",{\"1\":{\"113\":2}}],[\"developer\",{\"1\":{\"111\":2}}],[\"developers\",{\"1\":{\"53\":1,\"75\":1}}],[\"developement\",{\"1\":{\"107\":1}}],[\"developed\",{\"1\":{\"75\":1,\"81\":1}}],[\"development\",{\"0\":{\"74\":1,\"76\":1,\"78\":1,\"80\":1,\"98\":1},\"1\":{\"53\":2,\"55\":2,\"57\":2,\"75\":8,\"77\":6,\"79\":2,\"81\":2,\"83\":1,\"99\":1,\"103\":1,\"105\":1,\"107\":3,\"109\":1,\"111\":3}}],[\"dev\",{\"1\":{\"34\":6,\"39\":1,\"40\":2}}],[\"devices\",{\"1\":{\"694\":1}}],[\"device\",{\"1\":{\"8\":1,\"97\":1,\"731\":1}}],[\"dontlognull\",{\"1\":{\"731\":1}}],[\"done\",{\"1\":{\"59\":1,\"73\":1}}],[\"doregisterbean\",{\"1\":{\"532\":2}}],[\"doublevalue\",{\"1\":{\"164\":4}}],[\"double\",{\"1\":{\"164\":4,\"373\":2,\"760\":1}}],[\"doprivileged\",{\"1\":{\"130\":3}}],[\"doc\",{\"1\":{\"731\":2}}],[\"docs\",{\"1\":{\"731\":4}}],[\"doctype\",{\"1\":{\"478\":1,\"479\":1}}],[\"documented用于标明是否生成javadoc文档\",{\"1\":{\"179\":1}}],[\"documented\",{\"1\":{\"179\":1,\"181\":1}}],[\"document\",{\"1\":{\"109\":2}}],[\"documents\",{\"1\":{\"109\":1}}],[\"documentation\",{\"1\":{\"109\":1}}],[\"documenting\",{\"0\":{\"108\":1}}],[\"dockerd\",{\"1\":{\"731\":4}}],[\"docker命令使用\",{\"0\":{\"682\":1}}],[\"docker环境搭建\",{\"0\":{\"681\":1}}],[\"dockerfile\",{\"1\":{\"34\":1}}],[\"docker\",{\"0\":{\"9\":1,\"417\":1,\"680\":1,\"692\":1,\"695\":1,\"698\":1,\"699\":1,\"700\":1,\"724\":1,\"808\":1},\"1\":{\"3\":1,\"4\":1,\"9\":4,\"10\":1,\"11\":3,\"12\":2,\"34\":8,\"417\":2,\"461\":2,\"681\":6,\"692\":3,\"695\":3,\"722\":2,\"730\":1,\"731\":30}}],[\"do\",{\"1\":{\"97\":2,\"103\":1,\"538\":2,\"544\":1}}],[\"down\",{\"1\":{\"67\":1}}],[\"download\",{\"1\":{\"29\":1,\"704\":1}}],[\"dozen\",{\"1\":{\"65\":1}}],[\"domain\",{\"1\":{\"59\":1,\"81\":2,\"107\":1}}],[\"does\",{\"1\":{\"55\":2,\"99\":1,\"357\":1,\"359\":1,\"360\":1}}],[\"db\",{\"1\":{\"24\":2,\"26\":1}}],[\"d7sx4\",{\"1\":{\"21\":1}}],[\"d\",{\"1\":{\"12\":1,\"22\":1,\"27\":1,\"107\":1,\"417\":1,\"430\":2,\"454\":1,\"461\":1,\"692\":1,\"729\":2,\"731\":1}}],[\"daotools\",{\"1\":{\"731\":1}}],[\"daocloud\",{\"1\":{\"731\":2}}],[\"dashboard\",{\"0\":{\"729\":1},\"1\":{\"729\":5,\"731\":2}}],[\"date\",{\"1\":{\"430\":7}}],[\"datetime\",{\"1\":{\"426\":1}}],[\"datasourceexception\",{\"1\":{\"507\":1}}],[\"datasource\",{\"1\":{\"500\":1,\"502\":4}}],[\"datasource>\",{\"1\":{\"478\":1}}],[\"database\",{\"1\":{\"81\":1}}],[\"dataflows\",{\"1\":{\"55\":1}}],[\"data\",{\"1\":{\"8\":1,\"24\":3,\"26\":1,\"34\":19,\"55\":1,\"59\":1,\"65\":1,\"85\":1,\"97\":1,\"111\":2,\"433\":1,\"434\":2,\"435\":1,\"729\":2,\"731\":1}}],[\"dads\",{\"1\":{\"111\":4}}],[\"darwin\",{\"1\":{\"19\":1}}],[\"daemon\",{\"0\":{\"242\":1},\"1\":{\"11\":2,\"731\":2}}],[\"sbrk\",{\"1\":{\"746\":1}}],[\"s3\",{\"1\":{\"725\":1}}],[\"s+\",{\"1\":{\"692\":1}}],[\"svmkrm\",{\"1\":{\"657\":1}}],[\"s94mh0\",{\"1\":{\"655\":1}}],[\"skip\",{\"1\":{\"538\":1}}],[\"sketching\",{\"1\":{\"105\":1}}],[\"srem\",{\"1\":{\"462\":1}}],[\"srandmember\",{\"1\":{\"462\":1}}],[\"sdiffstore\",{\"1\":{\"462\":1}}],[\"sdiff\",{\"1\":{\"462\":1}}],[\"s2\",{\"1\":{\"430\":4}}],[\"s1\",{\"1\":{\"430\":6}}],[\"snapshot\",{\"1\":{\"521\":1}}],[\"sname\",{\"1\":{\"426\":1,\"430\":13}}],[\"sn\",{\"1\":{\"430\":4}}],[\"sscan\",{\"1\":{\"462\":1}}],[\"ssex\",{\"1\":{\"426\":1,\"430\":4}}],[\"ssl\",{\"1\":{\"24\":3,\"731\":1}}],[\"ssl需要设置on\",{\"1\":{\"24\":1}}],[\"swapoff\",{\"1\":{\"731\":1}}],[\"swap\",{\"1\":{\"224\":1,\"731\":2}}],[\"sweep\",{\"1\":{\"148\":2}}],[\"sqlexception\",{\"1\":{\"495\":4,\"496\":1,\"500\":1,\"502\":1}}],[\"sql的直观性\",{\"1\":{\"494\":1}}],[\"sql语句查询结果集的封装类型\",{\"1\":{\"479\":1}}],[\"sql语句\",{\"1\":{\"479\":1}}],[\"sqlstatement\",{\"1\":{\"493\":3}}],[\"sqlsource\",{\"1\":{\"474\":1}}],[\"sqlsessionexception\",{\"1\":{\"507\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"482\":2}}],[\"sqlsessionfactory\",{\"1\":{\"482\":4,\"483\":1}}],[\"sqlsession\",{\"1\":{\"467\":2,\"468\":3,\"472\":1,\"474\":1,\"482\":4}}],[\"sql\",{\"0\":{\"456\":1,\"459\":1,\"470\":1,\"471\":1},\"1\":{\"198\":1,\"442\":1,\"443\":1,\"456\":7,\"457\":1,\"468\":1,\"469\":2,\"470\":1,\"471\":2,\"472\":5,\"474\":3,\"493\":6,\"495\":6}}],[\"s|ms\",{\"1\":{\"153\":1}}],[\"s系统的服务端上\",{\"1\":{\"148\":1}}],[\"sl\",{\"1\":{\"692\":1}}],[\"slave切换后\",{\"1\":{\"463\":1}}],[\"slave\",{\"1\":{\"463\":2}}],[\"slaveof\",{\"1\":{\"463\":1}}],[\"slot迁移中数据可用\",{\"1\":{\"463\":1}}],[\"slow\",{\"1\":{\"456\":1}}],[\"slowly\",{\"1\":{\"105\":1}}],[\"sloc\",{\"1\":{\"99\":1}}],[\"sleep\",{\"0\":{\"243\":1,\"253\":1},\"1\":{\"34\":1,\"236\":3,\"243\":2,\"247\":1,\"253\":2,\"282\":1,\"746\":1}}],[\"sigaction\",{\"1\":{\"736\":1}}],[\"sigio\",{\"0\":{\"736\":1},\"1\":{\"732\":1,\"736\":1,\"737\":1}}],[\"signalall\",{\"0\":{\"254\":1},\"1\":{\"254\":1}}],[\"signal\",{\"0\":{\"254\":1},\"1\":{\"254\":1}}],[\"signals\",{\"1\":{\"65\":2}}],[\"significance\",{\"1\":{\"65\":1}}],[\"significant\",{\"1\":{\"61\":1,\"69\":1,\"73\":1,\"77\":1,\"107\":2}}],[\"sismember\",{\"1\":{\"462\":1}}],[\"sid2\",{\"1\":{\"430\":10}}],[\"sid1\",{\"1\":{\"430\":14}}],[\"sid\",{\"1\":{\"426\":1,\"429\":1,\"430\":116}}],[\"side\",{\"1\":{\"105\":1}}],[\"sinterstore\",{\"1\":{\"462\":1}}],[\"sinter\",{\"1\":{\"462\":1}}],[\"since\",{\"1\":{\"355\":1,\"356\":1,\"358\":1,\"360\":1,\"363\":1,\"538\":1}}],[\"singleton\",{\"1\":{\"532\":1}}],[\"singlethreadexecutor\",{\"1\":{\"241\":1}}],[\"single\",{\"1\":{\"55\":2,\"63\":1,\"71\":1,\"73\":1,\"97\":4}}],[\"siemens\",{\"1\":{\"111\":2}}],[\"size\",{\"1\":{\"107\":1,\"109\":1,\"299\":1,\"301\":1,\"304\":3,\"325\":1,\"326\":1,\"435\":1,\"495\":1,\"538\":2,\"540\":2}}],[\"simplification\",{\"1\":{\"107\":1}}],[\"simplified\",{\"1\":{\"57\":1,\"61\":1}}],[\"simpleapplicationeventmulticaster\",{\"1\":{\"542\":1}}],[\"simple\",{\"1\":{\"79\":1,\"456\":1,\"546\":1}}],[\"similarly\",{\"1\":{\"99\":1}}],[\"similar\",{\"1\":{\"71\":1,\"91\":1,\"103\":1,\"107\":1}}],[\"simulation\",{\"1\":{\"67\":1}}],[\"simultaneously\",{\"1\":{\"67\":1}}],[\"sites\",{\"1\":{\"83\":1}}],[\"site\",{\"1\":{\"63\":1}}],[\"smove\",{\"1\":{\"462\":1}}],[\"smembers\",{\"1\":{\"462\":1}}],[\"smaller\",{\"1\":{\"367\":1}}],[\"smallest\",{\"1\":{\"367\":1}}],[\"small\",{\"1\":{\"57\":1,\"65\":1,\"75\":2,\"87\":3,\"89\":1,\"93\":1,\"97\":4,\"103\":1,\"107\":2}}],[\"smtp\",{\"1\":{\"24\":1}}],[\"s\",{\"1\":{\"57\":2,\"67\":1,\"71\":1,\"93\":1,\"111\":1,\"342\":3,\"345\":2,\"358\":1,\"383\":1,\"430\":38,\"731\":7}}],[\"synthetic\",{\"1\":{\"546\":1}}],[\"synthesized\",{\"1\":{\"107\":1}}],[\"synchronized锁住创建方法\",{\"1\":{\"760\":1}}],[\"synchronized关键字和lock的实现类都是悲观锁\",{\"1\":{\"256\":1}}],[\"synchronized和lock保证每个时刻是有一个线程执行同步代码\",{\"1\":{\"214\":1}}],[\"synchronized和lock能保证同一时刻只有一个线程获取锁然后执行同步代码\",{\"1\":{\"213\":1}}],[\"synchronized\",{\"0\":{\"209\":1,\"289\":1},\"1\":{\"130\":1,\"207\":1,\"246\":1,\"249\":1,\"359\":2}}],[\"synchronization\",{\"1\":{\"57\":1}}],[\"synchronous\",{\"1\":{\"67\":1}}],[\"sysctl\",{\"1\":{\"731\":8}}],[\"sysconfig\",{\"1\":{\"28\":1}}],[\"sys\",{\"1\":{\"694\":2,\"695\":3}}],[\"systenctl\",{\"1\":{\"681\":1}}],[\"systemd\",{\"1\":{\"731\":3}}],[\"system的5层\",{\"1\":{\"79\":1}}],[\"system3\",{\"1\":{\"57\":1}}],[\"systems\",{\"1\":{\"53\":1,\"57\":1,\"71\":1,\"81\":2,\"85\":1,\"111\":1}}],[\"system\",{\"1\":{\"53\":1,\"55\":2,\"57\":5,\"59\":3,\"63\":1,\"65\":3,\"67\":4,\"71\":1,\"75\":1,\"79\":1,\"81\":3,\"83\":2,\"97\":5,\"103\":1,\"105\":1,\"107\":5,\"109\":1,\"111\":2,\"164\":4,\"166\":3,\"167\":1,\"169\":1,\"342\":3,\"345\":3,\"456\":1,\"482\":1,\"502\":2,\"521\":1,\"533\":1,\"535\":4,\"725\":1,\"731\":2}}],[\"systemctl\",{\"1\":{\"6\":2,\"9\":1,\"10\":1,\"11\":2,\"27\":1,\"681\":1,\"723\":2,\"731\":8}}],[\"sock\",{\"1\":{\"731\":3}}],[\"socket\",{\"1\":{\"731\":2}}],[\"sortpostprocessors\",{\"1\":{\"538\":5,\"540\":3}}],[\"sorted\",{\"1\":{\"462\":1}}],[\"sof\",{\"0\":{\"394\":1},\"1\":{\"394\":1}}],[\"softreference\",{\"1\":{\"383\":2}}],[\"softare\",{\"1\":{\"75\":1}}],[\"softwareabstract摘要\",{\"1\":{\"53\":1}}],[\"software\",{\"0\":{\"53\":1},\"1\":{\"52\":1,\"53\":3,\"55\":4,\"57\":7,\"67\":2,\"69\":3,\"75\":5,\"81\":1,\"83\":3,\"97\":1,\"103\":1,\"107\":1,\"109\":4,\"111\":2}}],[\"son进行向上转型得到father\",{\"1\":{\"265\":1}}],[\"soni\",{\"1\":{\"111\":2}}],[\"soda\",{\"1\":{\"111\":2}}],[\"solid\",{\"1\":{\"91\":1}}],[\"sourcce\",{\"1\":{\"77\":1}}],[\"sources\",{\"1\":{\"533\":1}}],[\"source\",{\"1\":{\"55\":1,\"69\":1,\"83\":1,\"85\":1,\"462\":3,\"541\":4}}],[\"so\",{\"1\":{\"59\":1,\"85\":1,\"103\":1,\"355\":1,\"356\":1,\"357\":1,\"364\":1,\"538\":1}}],[\"some\",{\"1\":{\"57\":3,\"59\":1,\"67\":1,\"79\":1,\"81\":1,\"83\":1,\"89\":1,\"93\":2,\"97\":8,\"101\":1,\"105\":2,\"107\":2,\"111\":1,\"367\":1}}],[\"sometimes\",{\"1\":{\"55\":1,\"107\":1}}],[\"sc`\",{\"1\":{\"444\":1,\"445\":1}}],[\"sc1\",{\"1\":{\"430\":12}}],[\"sc2\",{\"1\":{\"430\":8}}],[\"scopt\",{\"1\":{\"532\":1}}],[\"scopemetadataresolver\",{\"1\":{\"532\":1}}],[\"scopemetadata\",{\"1\":{\"532\":4}}],[\"scope\",{\"1\":{\"24\":1,\"97\":1,\"109\":1,\"546\":4}}],[\"score2\",{\"1\":{\"462\":1}}],[\"score1\",{\"1\":{\"462\":1}}],[\"score<90\",{\"1\":{\"430\":1}}],[\"score<80\",{\"1\":{\"430\":1}}],[\"score>=90\",{\"1\":{\"430\":1}}],[\"score>=80\",{\"1\":{\"430\":1}}],[\"score>=70\",{\"1\":{\"430\":1}}],[\"score>=60\",{\"1\":{\"430\":1}}],[\"score\",{\"1\":{\"429\":1,\"430\":69}}],[\"sc\",{\"1\":{\"429\":19,\"430\":114}}],[\"schonberg\",{\"1\":{\"113\":2}}],[\"schema\",{\"1\":{\"440\":1}}],[\"schemes\",{\"1\":{\"101\":1}}],[\"schedule\",{\"1\":{\"111\":1}}],[\"scheduled\",{\"1\":{\"67\":1}}],[\"scriptingexception\",{\"1\":{\"507\":1}}],[\"scripted\",{\"1\":{\"107\":1}}],[\"script\",{\"1\":{\"93\":1,\"107\":1,\"496\":5,\"731\":1}}],[\"scripts\",{\"1\":{\"89\":1,\"111\":1}}],[\"scard\",{\"1\":{\"462\":1}}],[\"scars\",{\"1\":{\"55\":1}}],[\"scavenge策略主要是关注一个可控的吞吐量\",{\"1\":{\"148\":1}}],[\"scavenge\",{\"1\":{\"148\":2}}],[\"scavenge收集器的老年代版本\",{\"1\":{\"148\":1}}],[\"scavenge收集器类似parnew收集器\",{\"1\":{\"148\":1}}],[\"scanner\",{\"1\":{\"530\":1}}],[\"scan\",{\"1\":{\"73\":1}}],[\"scans\",{\"1\":{\"73\":1}}],[\"scalability\",{\"1\":{\"57\":1,\"83\":1,\"97\":1,\"111\":1,\"115\":1}}],[\"scenarios\",{\"0\":{\"88\":1,\"90\":1},\"1\":{\"57\":2,\"89\":2,\"101\":1,\"103\":1,\"107\":9,\"109\":1,\"111\":1}}],[\"scenario\",{\"0\":{\"92\":1,\"106\":1},\"1\":{\"53\":1,\"89\":1,\"91\":1,\"93\":2,\"107\":1}}],[\"sf\",{\"1\":{\"34\":1}}],[\"sparkdev\",{\"1\":{\"694\":1}}],[\"spliterator\",{\"1\":{\"299\":1}}],[\"spirng默认采用jdk动态代理实现机制\",{\"1\":{\"349\":1}}],[\"spi整体机制图\",{\"1\":{\"198\":1}}],[\"spi整体机制图如下\",{\"1\":{\"198\":1}}],[\"spi\",{\"0\":{\"197\":1,\"198\":1,\"199\":1,\"200\":1},\"1\":{\"198\":1}}],[\"spop\",{\"1\":{\"462\":1}}],[\"spotify\",{\"1\":{\"151\":1}}],[\"spontaneously\",{\"1\":{\"97\":2}}],[\"speaking\",{\"1\":{\"105\":1}}],[\"specialists\",{\"1\":{\"111\":1}}],[\"specialization\",{\"1\":{\"63\":1}}],[\"specified\",{\"1\":{\"358\":1,\"364\":3,\"365\":1,\"368\":2,\"531\":1,\"544\":1}}],[\"specifications\",{\"1\":{\"69\":1}}],[\"specific\",{\"1\":{\"55\":1,\"65\":1,\"81\":1,\"99\":1}}],[\"specifying\",{\"1\":{\"69\":1,\"105\":1}}],[\"spec\",{\"1\":{\"32\":4,\"34\":4,\"40\":4}}],[\"spread\",{\"1\":{\"81\":1,\"97\":1,\"99\":1}}],[\"spring3\",{\"1\":{\"546\":1}}],[\"springframework\",{\"1\":{\"521\":6}}],[\"spring会强制使用cglib来实现动态代理\",{\"1\":{\"349\":1}}],[\"springcloudalibaba\",{\"1\":{\"43\":1,\"47\":1}}],[\"springcloud\",{\"1\":{\"3\":1}}],[\"springboot\",{\"0\":{\"33\":1},\"1\":{\"3\":1,\"43\":1,\"47\":1,\"464\":2,\"543\":1}}],[\"spring\",{\"0\":{\"524\":1,\"525\":1,\"527\":1,\"528\":1,\"799\":1},\"1\":{\"3\":1,\"519\":2,\"520\":1,\"521\":21,\"522\":1,\"528\":1,\"529\":2,\"530\":1}}],[\"sunionstore\",{\"1\":{\"462\":1}}],[\"sunion\",{\"1\":{\"462\":1}}],[\"sum\",{\"1\":{\"430\":13,\"456\":2}}],[\"summary\",{\"1\":{\"111\":1}}],[\"surrogate\",{\"1\":{\"364\":1}}],[\"survivorratio=6\",{\"1\":{\"148\":1}}],[\"supplier\",{\"1\":{\"532\":2,\"546\":1}}],[\"supplier<t>\",{\"1\":{\"532\":1}}],[\"suppresswarnings\",{\"1\":{\"179\":1,\"180\":2}}],[\"supporting\",{\"1\":{\"67\":1,\"87\":1}}],[\"supported\",{\"1\":{\"65\":1}}],[\"support\",{\"1\":{\"61\":1,\"67\":1,\"97\":1,\"107\":1,\"111\":1,\"495\":1,\"521\":2}}],[\"supports\",{\"1\":{\"59\":1,\"69\":1,\"77\":1}}],[\"super\",{\"1\":{\"130\":1,\"169\":4,\"299\":1,\"325\":3}}],[\"superclass\",{\"1\":{\"130\":1}}],[\"suspended\",{\"1\":{\"97\":1}}],[\"subnet=$pod\",{\"1\":{\"731\":1}}],[\"subnet=10\",{\"1\":{\"721\":1,\"725\":1}}],[\"subnet\",{\"1\":{\"731\":5}}],[\"subquery\",{\"1\":{\"456\":4}}],[\"subtype\",{\"1\":{\"200\":1}}],[\"substring\",{\"1\":{\"130\":1,\"368\":3,\"496\":1}}],[\"subsequent\",{\"1\":{\"105\":1,\"357\":1,\"359\":1,\"360\":1}}],[\"subsytems\",{\"1\":{\"79\":1,\"99\":1,\"107\":1}}],[\"subsystems\",{\"1\":{\"75\":2,\"81\":1,\"99\":4,\"107\":1}}],[\"subsystem\",{\"1\":{\"75\":2,\"77\":1,\"79\":2,\"99\":1,\"111\":3}}],[\"subdivided\",{\"1\":{\"105\":1}}],[\"subordinate\",{\"1\":{\"97\":2}}],[\"subordination\",{\"1\":{\"97\":1}}],[\"subclasses\",{\"1\":{\"65\":1}}],[\"subjects\",{\"1\":{\"731\":1}}],[\"subj\",{\"1\":{\"26\":2}}],[\"success\",{\"1\":{\"111\":1}}],[\"succcess\",{\"1\":{\"57\":1}}],[\"such\",{\"1\":{\"57\":1,\"59\":1,\"67\":1,\"69\":1,\"81\":1,\"83\":1,\"99\":1,\"103\":1,\"105\":1,\"367\":1}}],[\"suffers\",{\"1\":{\"55\":1}}],[\"sudo\",{\"1\":{\"11\":4,\"12\":2,\"27\":2,\"681\":6}}],[\"sadd\",{\"1\":{\"462\":1}}],[\"sage\",{\"1\":{\"426\":1,\"430\":8}}],[\"sayhell\",{\"1\":{\"342\":3,\"345\":2}}],[\"sales\",{\"1\":{\"456\":2}}],[\"sale能自动地生成相应的\",{\"1\":{\"69\":1}}],[\"sale\",{\"1\":{\"69\":4,\"111\":2}}],[\"same\",{\"1\":{\"67\":2,\"79\":1,\"97\":1,\"356\":1,\"365\":1,\"366\":5,\"368\":1}}],[\"sample\",{\"1\":{\"24\":1}}],[\"sake\",{\"1\":{\"59\":1}}],[\"satisfy\",{\"1\":{\"57\":1}}],[\"saved\",{\"1\":{\"26\":1}}],[\"shell\",{\"1\":{\"743\":1,\"746\":1}}],[\"shelf\",{\"1\":{\"81\":1}}],[\"sh文件到用户目录\",{\"1\":{\"724\":1,\"725\":1}}],[\"shields\",{\"1\":{\"81\":1}}],[\"shutdownnow\",{\"1\":{\"248\":1}}],[\"shutdown\",{\"1\":{\"248\":1}}],[\"shut\",{\"1\":{\"67\":1}}],[\"shorter\",{\"1\":{\"367\":1}}],[\"short\",{\"1\":{\"83\":1,\"373\":2}}],[\"showing\",{\"1\":{\"75\":1}}],[\"show\",{\"1\":{\"65\":1,\"87\":1,\"431\":1,\"441\":1,\"456\":2}}],[\"shows\",{\"1\":{\"59\":1,\"65\":1,\"87\":1,\"93\":1,\"97\":1}}],[\"shown\",{\"1\":{\"55\":1,\"81\":1,\"89\":1,\"97\":1}}],[\"shouldskip\",{\"1\":{\"532\":1}}],[\"should\",{\"1\":{\"59\":1,\"67\":1,\"358\":1,\"500\":1,\"502\":1}}],[\"shaw\",{\"1\":{\"71\":2}}],[\"shaw1\",{\"1\":{\"55\":2}}],[\"sharing\",{\"1\":{\"67\":1,\"97\":1}}],[\"shared\",{\"1\":{\"67\":1,\"73\":1,\"97\":1}}],[\"share\",{\"1\":{\"34\":1,\"97\":3}}],[\"shanghai\",{\"1\":{\"34\":1}}],[\"sh\",{\"1\":{\"25\":1,\"26\":1,\"724\":1,\"725\":1,\"731\":4}}],[\"sed\",{\"1\":{\"731\":6}}],[\"session\",{\"1\":{\"456\":2,\"482\":3}}],[\"session|global\",{\"1\":{\"456\":1}}],[\"se\",{\"1\":{\"129\":1,\"130\":3}}],[\"sequential\",{\"1\":{\"97\":1}}],[\"sequence\",{\"1\":{\"93\":1,\"355\":1,\"356\":1,\"357\":1,\"359\":1,\"360\":1,\"362\":1,\"364\":1,\"365\":1,\"367\":2,\"368\":1}}],[\"sequences\",{\"1\":{\"89\":1,\"107\":1}}],[\"serializable\",{\"1\":{\"381\":2}}],[\"serialization\",{\"1\":{\"97\":1}}],[\"serialversionuid\",{\"1\":{\"353\":2}}],[\"serial和serial\",{\"1\":{\"148\":1}}],[\"serial\",{\"1\":{\"148\":5}}],[\"serial收集器\",{\"1\":{\"148\":1}}],[\"servletconfigaware\",{\"1\":{\"536\":1}}],[\"servletconfig\",{\"1\":{\"536\":2}}],[\"servletcontextaware\",{\"1\":{\"536\":1}}],[\"servletcontextawareprocessor\",{\"1\":{\"536\":1}}],[\"servletcontext\",{\"1\":{\"536\":3}}],[\"servlet\",{\"1\":{\"536\":1}}],[\"serves\",{\"1\":{\"59\":1,\"75\":1,\"89\":1}}],[\"servers\",{\"1\":{\"71\":1,\"97\":3}}],[\"server\",{\"1\":{\"24\":4,\"34\":6,\"71\":2,\"97\":4,\"731\":5}}],[\"service文件中的这一行\",{\"1\":{\"731\":1}}],[\"serviceaccount\",{\"1\":{\"731\":2}}],[\"serviceloader\",{\"1\":{\"198\":1}}],[\"servicesubnet\",{\"1\":{\"731\":1}}],[\"services\",{\"1\":{\"59\":2,\"65\":3,\"67\":1,\"69\":2,\"97\":1,\"198\":2,\"729\":1}}],[\"serviceport\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"servicename\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"service\",{\"1\":{\"6\":2,\"28\":1,\"32\":1,\"34\":3,\"40\":3,\"65\":2,\"198\":1,\"731\":1}}],[\"sentinel是不会对其进行故障转移的\",{\"1\":{\"463\":1}}],[\"sentinel\",{\"1\":{\"463\":1}}],[\"sends\",{\"1\":{\"93\":1}}],[\"sense\",{\"1\":{\"89\":1}}],[\"sealstore\",{\"1\":{\"704\":1}}],[\"sealyun\",{\"1\":{\"703\":1,\"704\":3}}],[\"sealos安装应用\",{\"1\":{\"710\":1}}],[\"sealos安装集群\",{\"0\":{\"702\":1}}],[\"sealos参数\",{\"1\":{\"704\":1}}],[\"sealos\",{\"1\":{\"703\":3,\"704\":1,\"705\":2,\"706\":2,\"707\":2,\"708\":2,\"709\":1,\"711\":1}}],[\"sealos是个golang的二进制工具\",{\"1\":{\"703\":1}}],[\"seamlessly\",{\"1\":{\"89\":1}}],[\"searching\",{\"1\":{\"130\":1}}],[\"search\",{\"1\":{\"24\":1}}],[\"searchdn\",{\"1\":{\"24\":1}}],[\"separator\",{\"1\":{\"496\":3}}],[\"separate\",{\"1\":{\"67\":1,\"97\":1,\"103\":1,\"538\":2,\"540\":1}}],[\"separately\",{\"1\":{\"53\":2}}],[\"separation\",{\"1\":{\"67\":1}}],[\"see\",{\"1\":{\"57\":1,\"111\":1,\"365\":2,\"366\":1,\"533\":1}}],[\"seen\",{\"1\":{\"55\":1}}],[\"sei的clements\",{\"1\":{\"55\":1}}],[\"sei\",{\"1\":{\"55\":1}}],[\"several\",{\"1\":{\"55\":2,\"67\":1,\"71\":1,\"83\":1,\"85\":1,\"97\":8,\"99\":1,\"111\":1}}],[\"setup\",{\"1\":{\"731\":1}}],[\"setenforce\",{\"1\":{\"731\":1}}],[\"setex\",{\"1\":{\"462\":1}}],[\"set<applicationevent>\",{\"1\":{\"544\":1}}],[\"set<string>\",{\"1\":{\"538\":1}}],[\"set<map\",{\"1\":{\"326\":1}}],[\"settempclassloader\",{\"1\":{\"535\":1,\"539\":1}}],[\"setbeanexpressionresolver\",{\"1\":{\"535\":1}}],[\"setbeanclassloader\",{\"1\":{\"535\":1}}],[\"setbit\",{\"1\":{\"462\":1}}],[\"setrequiredproperties\",{\"1\":{\"533\":1}}],[\"setrange\",{\"1\":{\"462\":1}}],[\"setlazyinit\",{\"1\":{\"532\":1}}],[\"setlength\",{\"1\":{\"496\":1}}],[\"setparentmessagesource\",{\"1\":{\"541\":2}}],[\"setparameters\",{\"1\":{\"495\":2}}],[\"setprimary\",{\"1\":{\"532\":1}}],[\"setinstancesupplier\",{\"1\":{\"532\":1}}],[\"setid\",{\"1\":{\"481\":1}}],[\"setname\",{\"1\":{\"481\":1}}],[\"setnx\",{\"1\":{\"462\":1}}],[\"setxxx\",{\"1\":{\"470\":1}}],[\"setaccessible\",{\"1\":{\"399\":1}}],[\"setcallback\",{\"1\":{\"345\":1}}],[\"set的父类\",{\"1\":{\"299\":1}}],[\"setdaemon\",{\"1\":{\"242\":1}}],[\"setvalue\",{\"1\":{\"166\":2}}],[\"setvar\",{\"1\":{\"166\":2,\"167\":2,\"169\":4}}],[\"setkey\",{\"1\":{\"166\":2}}],[\"setscope\",{\"1\":{\"532\":1}}],[\"setsuperclass\",{\"1\":{\"345\":1}}],[\"sets\",{\"1\":{\"59\":1,\"111\":1,\"493\":3}}],[\"set\",{\"0\":{\"400\":1},\"1\":{\"55\":2,\"57\":1,\"59\":2,\"65\":3,\"67\":4,\"69\":1,\"89\":1,\"97\":6,\"107\":1,\"400\":1,\"430\":1,\"434\":3,\"444\":1,\"445\":1,\"453\":1,\"462\":3,\"493\":1,\"533\":2,\"535\":1,\"541\":1,\"731\":2}}],[\"selinux=disabled\",{\"1\":{\"731\":1}}],[\"selinux=enforcing\",{\"1\":{\"731\":1}}],[\"selinux\",{\"1\":{\"731\":4}}],[\"select和\",{\"0\":{\"735\":1},\"1\":{\"732\":1}}],[\"selectone\",{\"1\":{\"482\":1}}],[\"selector\",{\"1\":{\"32\":2,\"34\":2,\"40\":2}}],[\"select>\",{\"1\":{\"479\":1}}],[\"selecttest\",{\"1\":{\"479\":1,\"482\":1}}],[\"select\",{\"1\":{\"430\":116,\"435\":1,\"446\":1,\"449\":1,\"456\":9,\"468\":1,\"479\":1,\"735\":1}}],[\"selecting\",{\"1\":{\"107\":1}}],[\"selection\",{\"1\":{\"65\":1,\"93\":1}}],[\"selected\",{\"1\":{\"57\":1}}],[\"self\",{\"1\":{\"24\":1}}],[\"seconds\",{\"1\":{\"462\":2}}],[\"sectorization\",{\"1\":{\"97\":3}}],[\"secure\",{\"1\":{\"725\":1}}],[\"securebackup\",{\"1\":{\"29\":1}}],[\"securitymanager\",{\"1\":{\"130\":6}}],[\"security\",{\"1\":{\"34\":1,\"75\":1,\"130\":3}}],[\"secrets\",{\"1\":{\"27\":1}}],[\"secret\",{\"1\":{\"26\":1,\"729\":2}}],[\"secretkey\",{\"1\":{\"24\":1,\"26\":1}}],[\"stdout=org\",{\"1\":{\"480\":1}}],[\"stdout\",{\"1\":{\"480\":3}}],[\"stmt\",{\"1\":{\"439\":1}}],[\"st\",{\"1\":{\"430\":3,\"746\":4}}],[\"student\",{\"1\":{\"426\":13,\"430\":35}}],[\"step\",{\"1\":{\"111\":1}}],[\"steps\",{\"1\":{\"31\":1,\"105\":1}}],[\"still\",{\"1\":{\"97\":1}}],[\"stimuli\",{\"1\":{\"97\":4}}],[\"strlen\",{\"1\":{\"462\":1}}],[\"str\",{\"1\":{\"383\":1,\"420\":1}}],[\"stream\",{\"1\":{\"299\":1,\"462\":1}}],[\"stringindexoutofboundsexception\",{\"1\":{\"364\":1}}],[\"stringbuilder\",{\"0\":{\"360\":1,\"379\":1},\"1\":{\"360\":4,\"379\":2,\"496\":5}}],[\"stringbufer\",{\"1\":{\"359\":1}}],[\"stringbuffer\",{\"0\":{\"359\":1,\"379\":1},\"1\":{\"359\":5,\"379\":2}}],[\"strings\",{\"1\":{\"355\":1,\"356\":1,\"366\":2,\"367\":6}}],[\"string源码\",{\"0\":{\"352\":1}}],[\"string类的父类只有object类\",{\"1\":{\"169\":1}}],[\"string>\",{\"1\":{\"169\":1}}],[\"string\",{\"0\":{\"355\":1,\"356\":2,\"357\":1,\"358\":1,\"359\":1,\"360\":1,\"366\":1,\"367\":1,\"368\":1,\"379\":1},\"1\":{\"130\":5,\"166\":2,\"167\":1,\"169\":4,\"342\":3,\"345\":2,\"353\":1,\"355\":2,\"356\":6,\"357\":4,\"358\":3,\"359\":6,\"360\":8,\"362\":2,\"364\":2,\"365\":10,\"366\":6,\"367\":19,\"368\":4,\"379\":2,\"383\":5,\"462\":1,\"481\":4,\"482\":2,\"493\":4,\"495\":2,\"496\":7,\"500\":1,\"502\":1,\"506\":1,\"521\":1,\"532\":2,\"538\":8,\"540\":4,\"544\":2,\"546\":10}}],[\"strict\",{\"1\":{\"99\":1}}],[\"strawman\",{\"1\":{\"107\":1}}],[\"strategies\",{\"1\":{\"79\":1,\"97\":1}}],[\"strategy\",{\"1\":{\"55\":1,\"77\":1}}],[\"struct\",{\"1\":{\"746\":2}}],[\"structure\",{\"1\":{\"57\":1}}],[\"struggled\",{\"1\":{\"55\":1}}],[\"stylesheets\",{\"1\":{\"731\":1}}],[\"styles\",{\"1\":{\"57\":1,\"71\":1}}],[\"style\",{\"0\":{\"62\":1,\"70\":1,\"78\":1},\"1\":{\"55\":1,\"57\":2,\"63\":2,\"71\":1,\"79\":1}}],[\"standardbeanexpressionresolver\",{\"1\":{\"535\":1}}],[\"staic\",{\"1\":{\"389\":1}}],[\"stack\",{\"0\":{\"319\":1},\"1\":{\"300\":1}}],[\"stackoverflowerror\",{\"1\":{\"136\":1,\"138\":1}}],[\"staff\",{\"1\":{\"111\":1}}],[\"star\",{\"1\":{\"462\":1}}],[\"staring\",{\"1\":{\"97\":1}}],[\"startupdate\",{\"1\":{\"533\":1}}],[\"starts\",{\"1\":{\"368\":1}}],[\"startswith\",{\"0\":{\"368\":1},\"1\":{\"368\":2}}],[\"starting\",{\"1\":{\"89\":1,\"97\":1,\"368\":1}}],[\"started\",{\"1\":{\"67\":1,\"731\":1}}],[\"start\",{\"1\":{\"9\":1,\"34\":1,\"65\":1,\"107\":2,\"211\":1,\"388\":1,\"442\":1,\"462\":4,\"681\":1,\"731\":2}}],[\"stat\",{\"1\":{\"695\":1,\"746\":3}}],[\"stats\",{\"1\":{\"695\":1,\"731\":3}}],[\"statementtype\",{\"1\":{\"493\":2}}],[\"statementhandler\",{\"1\":{\"474\":1}}],[\"statementid\",{\"1\":{\"468\":2}}],[\"statement\",{\"1\":{\"467\":1,\"468\":1,\"474\":4,\"479\":1,\"495\":1}}],[\"state\",{\"1\":{\"59\":2,\"65\":1,\"73\":1,\"97\":2,\"533\":1}}],[\"statically\",{\"1\":{\"544\":1}}],[\"static\",{\"0\":{\"389\":1},\"1\":{\"57\":1,\"97\":1,\"161\":1,\"164\":4,\"166\":2,\"167\":1,\"169\":3,\"176\":1,\"304\":1,\"342\":1,\"345\":1,\"353\":1,\"482\":1,\"493\":2,\"506\":1,\"521\":1,\"538\":1,\"540\":1,\"546\":11,\"725\":1,\"731\":3}}],[\"status\",{\"1\":{\"32\":2,\"34\":2,\"40\":2,\"453\":1,\"456\":2,\"692\":1,\"746\":3}}],[\"stakeholders\",{\"1\":{\"53\":1,\"55\":1,\"111\":2}}],[\"stable\",{\"1\":{\"27\":2,\"107\":1}}],[\"st=california\",{\"1\":{\"26\":1}}],[\"st=\",{\"1\":{\"26\":1}}],[\"store\",{\"1\":{\"533\":1}}],[\"storeload\",{\"1\":{\"288\":2}}],[\"storestore\",{\"1\":{\"288\":2,\"388\":1}}],[\"story\",{\"1\":{\"107\":1}}],[\"storage\",{\"0\":{\"229\":1},\"1\":{\"23\":1,\"353\":1}}],[\"stopped\",{\"1\":{\"12\":1,\"417\":1}}],[\"stop\",{\"1\":{\"6\":1,\"65\":1,\"462\":3,\"731\":1}}],[\"1表示出错\",{\"1\":{\"746\":1}}],[\"1表示错误\",{\"1\":{\"746\":1}}],[\"1m请确保您已经设置了环境变量\",{\"1\":{\"731\":1}}],[\"1m\",{\"1\":{\"731\":3}}],[\"1个关键字\",{\"1\":{\"673\":1}}],[\"1wkew4\",{\"1\":{\"621\":1}}],[\"189\",{\"1\":{\"721\":1}}],[\"181\",{\"1\":{\"721\":6,\"729\":1,\"731\":4}}],[\"18\",{\"0\":{\"388\":1},\"1\":{\"429\":1,\"704\":5,\"731\":2}}],[\"17\",{\"0\":{\"387\":1},\"1\":{\"521\":1}}],[\"172\",{\"1\":{\"21\":1,\"32\":2,\"34\":11,\"721\":5,\"729\":1,\"731\":4}}],[\"1598678647504\",{\"1\":{\"725\":1}}],[\"15496\",{\"1\":{\"692\":1}}],[\"15\",{\"0\":{\"385\":1},\"1\":{\"430\":1,\"692\":1,\"704\":2}}],[\"14\",{\"0\":{\"384\":1},\"1\":{\"430\":1,\"614\":1,\"704\":2}}],[\"1>>>1\",{\"1\":{\"368\":1}}],[\"16mb\",{\"1\":{\"435\":1}}],[\"16\",{\"0\":{\"386\":1},\"1\":{\"326\":1,\"327\":1,\"430\":1,\"446\":1,\"704\":3,\"721\":1,\"725\":1,\"731\":6}}],[\"168\",{\"1\":{\"39\":1,\"704\":4,\"705\":4,\"706\":4,\"707\":4,\"708\":4,\"731\":1}}],[\"1需要三条\",{\"1\":{\"205\":1}}],[\"13\",{\"0\":{\"383\":1},\"1\":{\"109\":2,\"426\":2}}],[\"1144\",{\"1\":{\"692\":1}}],[\"11\",{\"0\":{\"381\":1},\"1\":{\"93\":2,\"426\":1,\"444\":1,\"445\":1,\"692\":1}}],[\"197\",{\"1\":{\"721\":1,\"731\":1}}],[\"196\",{\"1\":{\"721\":1,\"731\":1}}],[\"194\",{\"1\":{\"721\":1,\"731\":1}}],[\"1989\",{\"1\":{\"426\":1}}],[\"1992\",{\"1\":{\"426\":1}}],[\"1991\",{\"1\":{\"426\":1}}],[\"1990\",{\"1\":{\"426\":4,\"430\":2}}],[\"19\",{\"0\":{\"389\":1},\"1\":{\"614\":1}}],[\"192\",{\"1\":{\"39\":1,\"704\":4,\"705\":4,\"706\":4,\"707\":4,\"708\":4,\"721\":1,\"729\":1,\"731\":2}}],[\"190\",{\"1\":{\"21\":1,\"32\":2,\"34\":11,\"721\":1}}],[\"10s\",{\"1\":{\"731\":4}}],[\"1024\",{\"1\":{\"695\":4}}],[\"1000\",{\"1\":{\"446\":1}}],[\"100\",{\"1\":{\"430\":3,\"444\":1,\"445\":1,\"721\":1,\"725\":1}}],[\"10\",{\"0\":{\"380\":1},\"1\":{\"34\":1,\"73\":1,\"81\":1,\"87\":1,\"107\":1,\"141\":3,\"170\":6,\"304\":1,\"314\":1,\"426\":4,\"427\":3,\"428\":2,\"429\":2,\"447\":1,\"731\":2}}],[\"12136\",{\"1\":{\"692\":1}}],[\"127\",{\"1\":{\"375\":1,\"391\":2,\"731\":2}}],[\"128\",{\"1\":{\"375\":1}}],[\"12\",{\"0\":{\"382\":1},\"1\":{\"32\":1,\"97\":2,\"105\":1,\"422\":3,\"426\":7,\"521\":1}}],[\"123456\",{\"1\":{\"478\":1}}],[\"1234\",{\"1\":{\"24\":2}}],[\"1或localhost\",{\"1\":{\"24\":1}}],[\"1\",{\"0\":{\"6\":1,\"10\":1,\"14\":1,\"38\":1,\"353\":1,\"371\":1,\"390\":1,\"659\":1,\"714\":1,\"741\":1,\"742\":2,\"743\":1,\"744\":1,\"745\":1,\"746\":1},\"1\":{\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"32\":1,\"39\":2,\"57\":2,\"81\":1,\"93\":2,\"99\":1,\"111\":1,\"130\":3,\"132\":1,\"141\":3,\"148\":1,\"158\":1,\"169\":1,\"171\":1,\"180\":1,\"181\":2,\"205\":1,\"206\":1,\"241\":1,\"274\":1,\"304\":4,\"326\":3,\"341\":1,\"353\":1,\"358\":1,\"360\":1,\"363\":1,\"364\":2,\"373\":2,\"380\":1,\"383\":3,\"429\":1,\"430\":46,\"456\":2,\"457\":1,\"458\":1,\"459\":1,\"463\":2,\"464\":3,\"478\":1,\"479\":1,\"482\":1,\"495\":1,\"521\":1,\"540\":1,\"546\":3,\"673\":9,\"692\":1,\"704\":8,\"721\":1,\"725\":1,\"729\":2,\"731\":8,\"746\":1,\"753\":1,\"754\":1,\"760\":1,\"773\":1}}],[\"名称\",{\"1\":{\"4\":1,\"136\":1}}],[\"mknod\",{\"1\":{\"746\":1}}],[\"mkdir\",{\"1\":{\"11\":1,\"34\":1,\"39\":1,\"40\":1,\"731\":1,\"746\":1}}],[\"mv\",{\"1\":{\"703\":1}}],[\"m4rgw3\",{\"1\":{\"648\":1}}],[\"m1dl7n\",{\"1\":{\"628\":1}}],[\"mget\",{\"1\":{\"462\":1}}],[\"mrg\",{\"1\":{\"436\":2}}],[\"mm可以确保线程c至少能看到写线程a对final引用的对象的成员域的写入\",{\"1\":{\"274\":1}}],[\"m\",{\"1\":{\"113\":2,\"325\":1,\"430\":2,\"449\":1,\"480\":1,\"673\":7,\"731\":1}}],[\"msetnx\",{\"1\":{\"462\":1}}],[\"mset\",{\"1\":{\"462\":1}}],[\"ms\",{\"1\":{\"73\":2}}],[\"might\",{\"1\":{\"368\":1,\"538\":1}}],[\"migration\",{\"1\":{\"360\":1}}],[\"milliseconds\",{\"1\":{\"462\":2}}],[\"millisec\",{\"1\":{\"243\":2}}],[\"mitre\",{\"1\":{\"111\":2}}],[\"mitigation\",{\"1\":{\"107\":1}}],[\"mitigated\",{\"1\":{\"107\":1}}],[\"mitigate\",{\"1\":{\"105\":1}}],[\"min\",{\"1\":{\"326\":1,\"367\":1,\"430\":1,\"462\":7}}],[\"mincapacity\",{\"1\":{\"304\":10}}],[\"mind\",{\"1\":{\"97\":1}}],[\"minimal\",{\"1\":{\"83\":1}}],[\"minimize\",{\"1\":{\"79\":1}}],[\"minor\",{\"1\":{\"67\":2}}],[\"mirror\",{\"1\":{\"11\":1,\"731\":1}}],[\"mirrors\",{\"1\":{\"9\":1,\"11\":1,\"22\":1,\"681\":1,\"731\":4}}],[\"mutablepropertyvalues\",{\"1\":{\"546\":1}}],[\"mutual\",{\"1\":{\"97\":1}}],[\"multicastevent\",{\"1\":{\"544\":1}}],[\"multicaster\",{\"1\":{\"533\":1,\"542\":4,\"544\":1}}],[\"multiplex\",{\"1\":{\"97\":1}}],[\"multiple\",{\"1\":{\"53\":2,\"57\":2,\"67\":1,\"71\":3,\"97\":5,\"99\":1}}],[\"must\",{\"1\":{\"97\":3,\"99\":1,\"107\":1,\"109\":1,\"531\":1}}],[\"much\",{\"1\":{\"65\":1,\"69\":1}}],[\"mem\",{\"1\":{\"695\":2}}],[\"member\",{\"1\":{\"462\":10}}],[\"member2\",{\"1\":{\"462\":3}}],[\"member1\",{\"1\":{\"462\":3}}],[\"memory\",{\"0\":{\"435\":1},\"1\":{\"67\":1,\"73\":1,\"206\":2,\"285\":2,\"431\":1,\"435\":1,\"437\":3,\"446\":1,\"450\":1,\"694\":1,\"695\":4}}],[\"mergedbeandefinitionpostprocessor\",{\"1\":{\"540\":3}}],[\"merged\",{\"1\":{\"538\":1}}],[\"merge\",{\"0\":{\"436\":1},\"1\":{\"431\":1,\"436\":8,\"437\":3,\"456\":1}}],[\"merely\",{\"1\":{\"55\":1}}],[\"medium\",{\"1\":{\"111\":1}}],[\"meszaros\",{\"1\":{\"111\":2}}],[\"messaging\",{\"1\":{\"521\":1}}],[\"messagesource\",{\"1\":{\"541\":13}}],[\"messagesource作为bean注册\",{\"1\":{\"535\":1}}],[\"messagesourceaware\",{\"1\":{\"535\":1}}],[\"messages\",{\"1\":{\"67\":1,\"73\":1}}],[\"message\",{\"1\":{\"67\":1,\"73\":2,\"93\":1,\"111\":1,\"496\":6,\"506\":3,\"540\":1,\"541\":4}}],[\"messy\",{\"1\":{\"85\":1}}],[\"mean\",{\"1\":{\"107\":1}}],[\"means\",{\"1\":{\"59\":1,\"85\":1}}],[\"measured\",{\"1\":{\"105\":1,\"107\":1}}],[\"measure\",{\"1\":{\"67\":1,\"107\":1}}],[\"mechanisms\",{\"1\":{\"59\":2,\"63\":1,\"67\":1,\"99\":1,\"107\":1}}],[\"methodoverrides\",{\"1\":{\"546\":3}}],[\"method元素\",{\"1\":{\"546\":1}}],[\"methodname\",{\"1\":{\"500\":3,\"502\":3}}],[\"methodproxy\",{\"1\":{\"345\":1}}],[\"methodinterceptor\",{\"1\":{\"345\":1}}],[\"methods\",{\"1\":{\"57\":1,\"107\":1}}],[\"method\",{\"1\":{\"57\":1,\"97\":1,\"107\":1,\"342\":3,\"345\":2,\"360\":1,\"366\":2,\"367\":1,\"399\":1,\"436\":1,\"500\":5,\"502\":5,\"546\":7}}],[\"metadata\",{\"1\":{\"32\":4,\"34\":4,\"40\":4,\"538\":1,\"731\":2}}],[\"moving\",{\"1\":{\"540\":1}}],[\"mongodb\",{\"0\":{\"795\":1}}],[\"moneys\",{\"1\":{\"456\":2}}],[\"month\",{\"1\":{\"430\":4}}],[\"months\",{\"1\":{\"107\":1}}],[\"monitoring\",{\"1\":{\"75\":1}}],[\"most\",{\"1\":{\"75\":1,\"81\":1,\"89\":1,\"107\":2,\"109\":1}}],[\"mostly\",{\"1\":{\"59\":1,\"101\":1}}],[\"modcount\",{\"1\":{\"326\":1,\"404\":2}}],[\"modification\",{\"1\":{\"357\":1,\"359\":1,\"360\":1}}],[\"modifications\",{\"1\":{\"85\":1}}],[\"modified\",{\"1\":{\"57\":1,\"538\":1}}],[\"modules\",{\"1\":{\"79\":1,\"81\":1}}],[\"module\",{\"1\":{\"75\":2,\"77\":1,\"99\":1,\"111\":1}}],[\"model\",{\"0\":{\"53\":1,\"56\":1,\"102\":1},\"1\":{\"53\":1,\"57\":5,\"63\":1,\"111\":2,\"113\":1}}],[\"mode\",{\"1\":{\"24\":1,\"731\":2}}],[\"moreover\",{\"1\":{\"97\":2}}],[\"more\",{\"1\":{\"55\":1,\"71\":1,\"89\":1,\"97\":1,\"101\":1,\"105\":1,\"358\":1,\"367\":1}}],[\"map<string\",{\"1\":{\"495\":1}}],[\"map<\",{\"1\":{\"325\":1}}],[\"map\",{\"0\":{\"325\":1,\"400\":1},\"1\":{\"325\":1,\"381\":2,\"400\":1,\"546\":1}}],[\"mappedstatement\",{\"1\":{\"474\":2}}],[\"mapped\",{\"1\":{\"83\":1,\"97\":4,\"101\":1}}],[\"mapper映射的时候会抛出该异常\",{\"1\":{\"507\":1}}],[\"mapper>\",{\"1\":{\"479\":1}}],[\"mappers>\",{\"1\":{\"478\":1}}],[\"mapper\",{\"0\":{\"468\":1},\"1\":{\"8\":1,\"466\":1,\"468\":7,\"472\":1,\"479\":4,\"483\":1,\"731\":1}}],[\"mappingfunction\",{\"1\":{\"325\":3}}],[\"mappings\",{\"1\":{\"87\":1}}],[\"mapping\",{\"1\":{\"57\":1,\"65\":1,\"83\":2,\"85\":3,\"97\":3,\"99\":1,\"101\":1}}],[\"marked\",{\"1\":{\"533\":1}}],[\"mark\",{\"1\":{\"148\":2}}],[\"marasco\",{\"1\":{\"113\":2}}],[\"machine\",{\"1\":{\"124\":1}}],[\"macos\",{\"1\":{\"19\":1}}],[\"matching\",{\"1\":{\"535\":1}}],[\"matcher\",{\"1\":{\"496\":5}}],[\"match\",{\"1\":{\"447\":1,\"462\":3}}],[\"matchlabels\",{\"1\":{\"32\":1,\"34\":1,\"40\":1}}],[\"math\",{\"1\":{\"304\":1,\"367\":1}}],[\"matured\",{\"1\":{\"105\":1}}],[\"magnitude\",{\"1\":{\"99\":1}}],[\"make\",{\"1\":{\"67\":1,\"541\":1}}],[\"maybe\",{\"1\":{\"97\":1}}],[\"may\",{\"1\":{\"59\":1,\"65\":1,\"67\":3,\"105\":1,\"107\":4,\"358\":1}}],[\"maintain\",{\"1\":{\"65\":1,\"109\":1}}],[\"maintainer\",{\"1\":{\"34\":1}}],[\"main\",{\"1\":{\"57\":1,\"59\":1,\"63\":1,\"65\":1,\"67\":1,\"73\":2,\"89\":1,\"107\":1,\"166\":2,\"167\":1,\"169\":2,\"242\":1,\"243\":1,\"342\":1,\"345\":1,\"482\":1,\"521\":1,\"546\":3,\"731\":1}}],[\"made\",{\"1\":{\"57\":2}}],[\"major\",{\"1\":{\"57\":1,\"67\":3,\"107\":2}}],[\"many\",{\"1\":{\"55\":1,\"65\":1,\"97\":2,\"113\":1}}],[\"management\",{\"1\":{\"75\":1,\"81\":1,\"99\":1}}],[\"manage\",{\"1\":{\"30\":1,\"57\":1,\"91\":1}}],[\"managers\",{\"1\":{\"53\":1,\"111\":1}}],[\"manager\",{\"1\":{\"9\":1,\"111\":1,\"681\":1,\"731\":1}}],[\"maxconn\",{\"1\":{\"731\":2}}],[\"maximum\",{\"1\":{\"326\":1}}],[\"maxgcpausemillis=50\",{\"1\":{\"148\":1}}],[\"max\",{\"1\":{\"24\":1,\"304\":6,\"430\":1,\"435\":2,\"453\":1,\"462\":7}}],[\"master03\",{\"0\":{\"726\":1},\"1\":{\"721\":1,\"731\":1}}],[\"master02\",{\"0\":{\"726\":1},\"1\":{\"721\":1,\"731\":1}}],[\"master01\",{\"0\":{\"725\":1,\"729\":1},\"1\":{\"721\":1,\"731\":1}}],[\"master\",{\"0\":{\"15\":1,\"715\":1},\"1\":{\"15\":1,\"18\":1,\"463\":3,\"704\":3,\"705\":3,\"706\":3,\"715\":1,\"718\":1,\"725\":2,\"731\":5}}],[\"mavencentral\",{\"1\":{\"521\":1}}],[\"maven\",{\"1\":{\"3\":1,\"29\":3,\"31\":1,\"34\":1}}],[\"myindex\",{\"1\":{\"433\":1}}],[\"myi\",{\"1\":{\"433\":1}}],[\"myisampack\",{\"1\":{\"433\":1}}],[\"myisamchk\",{\"1\":{\"433\":1}}],[\"myisam\",{\"0\":{\"433\":1,\"453\":1},\"1\":{\"431\":1,\"434\":1,\"436\":3,\"437\":4,\"446\":4,\"450\":1,\"453\":4,\"454\":1}}],[\"mydata\",{\"1\":{\"433\":1}}],[\"myd\",{\"1\":{\"433\":1}}],[\"mydomain\",{\"1\":{\"24\":4}}],[\"mysqld\",{\"1\":{\"456\":1}}],[\"mysql5\",{\"1\":{\"431\":1}}],[\"mysql和postgresql都有不同的实现提供给用户\",{\"1\":{\"198\":1}}],[\"mysql数据库认证\",{\"1\":{\"24\":1}}],[\"mysql数据库root用户默认密码root123\",{\"1\":{\"24\":1}}],[\"mysql\",{\"0\":{\"411\":1,\"425\":1,\"796\":1},\"1\":{\"3\":1,\"43\":1,\"47\":1,\"399\":1,\"417\":4,\"433\":1,\"435\":1,\"437\":1,\"443\":1,\"446\":3,\"449\":1,\"450\":1,\"453\":2,\"456\":2,\"478\":2}}],[\"mybatis类型主要是根据业务相关包放在一起\",{\"1\":{\"507\":1}}],[\"mybatis对应是持久化框架\",{\"1\":{\"507\":1}}],[\"mybatis中最高的异常\",{\"1\":{\"507\":1}}],[\"mybatis是通过代理进行处理\",{\"1\":{\"500\":1}}],[\"mybatis抽象出datasourcefactory进行生成对应的datasource\",{\"1\":{\"497\":1}}],[\"mybatis\",{\"0\":{\"467\":1,\"798\":1},\"1\":{\"3\":1,\"465\":1,\"466\":2,\"467\":2,\"468\":5,\"469\":1,\"470\":3,\"471\":2,\"472\":5,\"473\":3,\"474\":4,\"478\":3,\"479\":3,\"482\":1,\"483\":1,\"507\":1}}],[\"并在保持类方法签名完整性的前提下\",{\"1\":{\"768\":1}}],[\"并在目标系统上测量其性能\",{\"1\":{\"67\":1}}],[\"并启动\",{\"1\":{\"731\":1}}],[\"并进行网络限制\",{\"1\":{\"694\":1}}],[\"并进行排名\",{\"1\":{\"430\":2}}],[\"并自动生成资源占用报告\",{\"1\":{\"694\":1}}],[\"并不是二叉的\",{\"1\":{\"673\":1}}],[\"并不是一定就要进行同步\",{\"1\":{\"227\":1}}],[\"并不看好后续\",{\"1\":{\"633\":1}}],[\"并尝试将首字母变为小写\",{\"1\":{\"546\":1}}],[\"并找到用于自动装配\",{\"1\":{\"535\":1}}],[\"并返回\",{\"1\":{\"474\":1}}],[\"并重启\",{\"1\":{\"463\":1}}],[\"并重新启动服务后才可以生效\",{\"1\":{\"434\":1}}],[\"并开始对新\",{\"1\":{\"463\":1}}],[\"并存储在新的\",{\"1\":{\"462\":1}}],[\"并设置\",{\"1\":{\"462\":2}}],[\"并设置默认的初始值\",{\"1\":{\"133\":1}}],[\"并降低写操作的性能\",{\"1\":{\"449\":1}}],[\"并作为一个对象引用它们\",{\"1\":{\"437\":1}}],[\"并统计同名人数\",{\"1\":{\"430\":1}}],[\"并显示排名\",{\"1\":{\"430\":2}}],[\"并记录存入\",{\"1\":{\"386\":1}}],[\"并覆盖其中方法实现增强\",{\"1\":{\"350\":1}}],[\"并通过反射机制调用目标类的代码\",{\"1\":{\"341\":1}}],[\"并由代理对象控制原对象的引用\",{\"1\":{\"340\":1}}],[\"并可用元注解对自定义注解进行注解\",{\"1\":{\"179\":1}}],[\"并定义所需的进程组\",{\"1\":{\"97\":1}}],[\"并发情况下服务器很可能一瞬间会收到几十上百万的请求\",{\"1\":{\"735\":1}}],[\"并发和流量瓶颈等问题时\",{\"1\":{\"463\":1}}],[\"并发事务处理带来的问题\",{\"1\":{\"454\":1}}],[\"并发度一般\",{\"1\":{\"452\":1}}],[\"并发度也高\",{\"1\":{\"452\":1}}],[\"并发度最低\",{\"1\":{\"452\":1}}],[\"并发性要求不是很高\",{\"1\":{\"437\":1}}],[\"并发数量\",{\"1\":{\"97\":1}}],[\"并发的\",{\"1\":{\"97\":1}}],[\"并行的视图\",{\"1\":{\"115\":1}}],[\"并行的视图来描述软件密集型系统的架构\",{\"1\":{\"53\":1}}],[\"并行\",{\"1\":{\"97\":1}}],[\"并将状态报告给wait\",{\"1\":{\"746\":1}}],[\"并将对象设置到该set方法的参数上\",{\"1\":{\"546\":2}}],[\"并将可能返回的结果集转换成list<e>\",{\"1\":{\"471\":1}}],[\"并将数字发送给终端\",{\"1\":{\"93\":1}}],[\"并将其中变为活动状态的终端放入高速循环任务扫描的列表中\",{\"1\":{\"73\":1}}],[\"并告诉控制器发送拨号音\",{\"1\":{\"93\":1}}],[\"并且有两种支持方式\",{\"1\":{\"471\":1}}],[\"并且只限于\",{\"1\":{\"446\":1}}],[\"并且通过将不同的表分布在多个磁盘上\",{\"1\":{\"437\":1}}],[\"并且通过反射获取到它的所有的接口\",{\"1\":{\"343\":1}}],[\"并且对\",{\"1\":{\"456\":1}}],[\"并且对事务的完整性\",{\"1\":{\"437\":1}}],[\"并且对源代码本身的影响最小\",{\"1\":{\"83\":1}}],[\"并且出现故障的时候恢复相对比较困难\",{\"1\":{\"433\":1}}],[\"并且具有访问权限\",{\"1\":{\"433\":1}}],[\"并且设置对应的\",{\"1\":{\"356\":1}}],[\"并且没有执行\",{\"1\":{\"247\":1}}],[\"并且在释放锁之前会将对变量的修改刷新到主存当中\",{\"1\":{\"213\":1}}],[\"并且在调试的时候可以不影响其他模块\",{\"1\":{\"157\":1}}],[\"并且子类方法的实现覆盖了父类方法的实现\",{\"1\":{\"161\":1}}],[\"并且被分配到其它进程\",{\"1\":{\"97\":1}}],[\"并且为客户端和服务端代理分配对象\",{\"1\":{\"97\":1}}],[\"并且可以保护应用程序免受硬件平台\",{\"1\":{\"81\":1}}],[\"并代表线路协商终端需提供的服务\",{\"1\":{\"65\":1}}],[\"并识别关键的对象特征\",{\"1\":{\"59\":1}}],[\"并展示每个视图的目的\",{\"1\":{\"57\":1}}],[\"并同时描述了用于记录视图的表示法\",{\"1\":{\"53\":1}}],[\"并分别处理功能和非功能需求\",{\"1\":{\"53\":1}}],[\"并需求分析\",{\"1\":{\"48\":1}}],[\"并有一定的了解\",{\"1\":{\"3\":1}}],[\"并能够选择合适的设计模式\",{\"1\":{\"3\":1}}],[\"和装饰器模式的区别\",{\"1\":{\"773\":1}}],[\"和适配器模式的区别\",{\"1\":{\"773\":1}}],[\"和p\",{\"1\":{\"746\":1}}],[\"和内存节点\",{\"1\":{\"694\":1}}],[\"和至多m\",{\"1\":{\"673\":1}}],[\"和查询参数给\",{\"1\":{\"467\":1}}],[\"和数据库的交互有两种方式\",{\"1\":{\"466\":1}}],[\"和缓存击穿不同的是\",{\"1\":{\"464\":1}}],[\"和回滚\",{\"1\":{\"437\":1}}],[\"和垃圾收集器有关系\",{\"1\":{\"401\":1}}],[\"和上个方法对比\",{\"1\":{\"360\":1}}],[\"和创建以此实现数据的删除\",{\"1\":{\"305\":1}}],[\"和新值\",{\"1\":{\"224\":1}}],[\"和其他\",{\"1\":{\"129\":1}}],[\"和其它一些地方\",{\"1\":{\"111\":1}}],[\"和所有的\",{\"1\":{\"129\":1}}],[\"和可扩展性\",{\"1\":{\"83\":1}}],[\"和可视化\",{\"1\":{\"75\":1}}],[\"和次要\",{\"1\":{\"67\":1}}],[\"和关闭\",{\"1\":{\"67\":1}}],[\"和空中交通控制系统\",{\"1\":{\"57\":1}}],[\"和连接器\",{\"1\":{\"57\":1}}],[\"和搭建部分常用服务\",{\"1\":{\"4\":1}}],[\"和\",{\"0\":{\"253\":1,\"377\":1,\"380\":1,\"381\":1,\"391\":1,\"393\":1,\"398\":1,\"402\":1,\"405\":1,\"408\":1,\"508\":1},\"1\":{\"3\":2,\"48\":1,\"57\":2,\"65\":1,\"69\":1,\"71\":1,\"75\":1,\"77\":1,\"89\":1,\"97\":1,\"107\":1,\"111\":1,\"113\":1,\"147\":1,\"158\":1,\"161\":2,\"206\":1,\"207\":1,\"219\":2,\"225\":1,\"233\":1,\"236\":1,\"238\":1,\"299\":2,\"300\":1,\"310\":2,\"406\":1,\"431\":1,\"433\":1,\"434\":3,\"446\":2,\"449\":1,\"729\":1,\"731\":1}}],[\"和并发编程\",{\"1\":{\"3\":1}}],[\"熟悉架构\",{\"1\":{\"105\":1}}],[\"熟悉\",{\"1\":{\"3\":1}}],[\"熟练掌握常用的设计模式\",{\"1\":{\"3\":1}}],[\"熟练掌握\",{\"1\":{\"3\":3}}],[\"rbac\",{\"1\":{\"731\":2}}],[\"rgzoe5\",{\"1\":{\"649\":1}}],[\"rrzzde\",{\"1\":{\"564\":1}}],[\"rdb方式会更快一些\",{\"1\":{\"463\":1}}],[\"rdb在保存rdb文件时父进程唯一需要做的就是fork出一个子进程\",{\"1\":{\"463\":1}}],[\"rdb是一个紧凑的单一文件\",{\"1\":{\"463\":1}}],[\"rdb是一个非常紧凑的文件\",{\"1\":{\"463\":1}}],[\"rdb\",{\"1\":{\"463\":6}}],[\"rpc\",{\"1\":{\"111\":2}}],[\"rpm\",{\"1\":{\"27\":1,\"731\":1}}],[\"risk\",{\"1\":{\"107\":3}}],[\"risks\",{\"1\":{\"105\":1,\"107\":1}}],[\"right\",{\"1\":{\"97\":2,\"430\":3}}],[\"r图\",{\"1\":{\"59\":1}}],[\"r\",{\"1\":{\"59\":1,\"107\":1,\"113\":2,\"433\":1}}],[\"raw\",{\"1\":{\"729\":1}}],[\"ram\",{\"1\":{\"437\":1}}],[\"range\",{\"1\":{\"456\":1}}],[\"ranges\",{\"1\":{\"364\":1}}],[\"rank\",{\"1\":{\"430\":2}}],[\"ranks\",{\"1\":{\"430\":3}}],[\"rancher安装集群\",{\"0\":{\"713\":1}}],[\"rancher\",{\"0\":{\"12\":1,\"19\":1},\"1\":{\"4\":1,\"12\":5,\"19\":6,\"21\":1,\"22\":1,\"32\":1,\"34\":4}}],[\"raison\",{\"1\":{\"107\":1}}],[\"rarely\",{\"1\":{\"97\":1}}],[\"rapidly\",{\"1\":{\"97\":1}}],[\"ratinal\",{\"1\":{\"77\":1}}],[\"rational\",{\"1\":{\"59\":2,\"61\":4,\"77\":3,\"91\":2,\"111\":2,\"113\":2}}],[\"rationale\",{\"1\":{\"57\":2,\"107\":1}}],[\"rate\",{\"1\":{\"73\":4,\"97\":1}}],[\"rather\",{\"1\":{\"57\":1,\"105\":1}}],[\"rf\",{\"1\":{\"34\":1,\"731\":1}}],[\"rm\",{\"1\":{\"34\":1,\"731\":3}}],[\"rup导论\",{\"1\":{\"115\":1}}],[\"rubin\",{\"1\":{\"89\":2,\"107\":2}}],[\"rule\",{\"1\":{\"79\":1}}],[\"rules\",{\"1\":{\"32\":1,\"34\":1,\"40\":1,\"75\":1,\"77\":1,\"95\":1}}],[\"runtime\",{\"1\":{\"500\":1,\"502\":1}}],[\"runtimesqlexception\",{\"1\":{\"496\":2}}],[\"runtimeexception\",{\"1\":{\"130\":2,\"393\":1,\"506\":1}}],[\"runnable\",{\"0\":{\"233\":1},\"1\":{\"238\":2}}],[\"running\",{\"1\":{\"55\":1,\"233\":1,\"725\":1}}],[\"run\",{\"1\":{\"12\":1,\"34\":3,\"55\":1,\"105\":1,\"247\":1,\"360\":1,\"417\":1,\"461\":1,\"692\":1,\"722\":1,\"731\":4}}],[\"row\",{\"1\":{\"439\":2}}],[\"rows\",{\"1\":{\"435\":1,\"456\":3}}],[\"rollback\",{\"1\":{\"437\":1,\"442\":1}}],[\"roleref\",{\"1\":{\"731\":1}}],[\"role\",{\"1\":{\"89\":1,\"532\":1,\"546\":2}}],[\"routine\",{\"1\":{\"444\":1,\"445\":1}}],[\"routes\",{\"1\":{\"65\":1}}],[\"roundrobin\",{\"1\":{\"731\":1}}],[\"round\",{\"1\":{\"430\":4}}],[\"royce\",{\"1\":{\"113\":2}}],[\"rose\",{\"1\":{\"61\":2,\"77\":2,\"91\":2,\"111\":4}}],[\"rose®\",{\"1\":{\"61\":1}}],[\"rootlogger=debug\",{\"1\":{\"480\":1}}],[\"roots包括\",{\"1\":{\"146\":1}}],[\"roots没有任何引用链相连时\",{\"1\":{\"146\":1}}],[\"roots开始向下搜索\",{\"1\":{\"146\":1}}],[\"root\",{\"1\":{\"24\":2,\"26\":2,\"28\":1,\"417\":1,\"478\":1,\"692\":2,\"704\":3,\"731\":3}}],[\"rocketmq\",{\"0\":{\"791\":1},\"1\":{\"3\":1,\"43\":1,\"47\":1}}],[\"re\",{\"1\":{\"540\":2}}],[\"reiterate\",{\"1\":{\"538\":4}}],[\"reitman\",{\"1\":{\"113\":2}}],[\"regular\",{\"1\":{\"538\":2,\"540\":1,\"544\":1}}],[\"regularpostprocessors\",{\"1\":{\"538\":3}}],[\"registerlisteners\",{\"1\":{\"544\":1}}],[\"registerbeanpostprocessors\",{\"1\":{\"540\":5}}],[\"registerbeanpostprocessors|500x500\",{\"1\":{\"540\":1}}],[\"registerbeandefinition\",{\"1\":{\"532\":1}}],[\"registered\",{\"1\":{\"538\":1,\"541\":1}}],[\"registerenvironmentbeans\",{\"1\":{\"536\":1}}],[\"registerwebapplicationscopes\",{\"1\":{\"536\":1}}],[\"registersingleton\",{\"1\":{\"535\":3,\"541\":1,\"542\":1}}],[\"registerresolvabledependency\",{\"1\":{\"535\":4}}],[\"register\",{\"1\":{\"531\":2,\"532\":1,\"535\":2,\"540\":6,\"544\":1}}],[\"registration\",{\"1\":{\"24\":1}}],[\"registryprocessor\",{\"1\":{\"538\":3}}],[\"registryprocessors\",{\"1\":{\"538\":6}}],[\"registry\",{\"1\":{\"11\":1,\"26\":2,\"532\":3,\"538\":5,\"731\":1}}],[\"regionmatches\",{\"1\":{\"366\":1}}],[\"reentrantlock\",{\"1\":{\"249\":1}}],[\"retries\",{\"1\":{\"731\":1}}],[\"retainall\",{\"1\":{\"299\":1}}],[\"retention用于标明注解被保留的阶段\",{\"1\":{\"179\":1}}],[\"retention\",{\"1\":{\"179\":1,\"181\":1}}],[\"returned\",{\"1\":{\"364\":1}}],[\"returns\",{\"1\":{\"362\":1,\"363\":1,\"364\":1,\"367\":3,\"444\":1,\"445\":1}}],[\"return\",{\"0\":{\"392\":1},\"1\":{\"130\":7,\"164\":4,\"166\":3,\"167\":1,\"169\":4,\"176\":1,\"304\":4,\"342\":1,\"345\":2,\"362\":2,\"363\":2,\"364\":2,\"365\":5,\"366\":2,\"367\":4,\"368\":4,\"392\":3,\"444\":1,\"445\":1,\"481\":3,\"493\":3,\"495\":4,\"500\":2,\"502\":2,\"506\":1,\"521\":5,\"532\":1,\"534\":1}}],[\"returning\",{\"1\":{\"130\":4}}],[\"rethrown\",{\"1\":{\"130\":2}}],[\"rendez\",{\"1\":{\"111\":2}}],[\"rendezvous\",{\"1\":{\"67\":1}}],[\"reviewed\",{\"1\":{\"107\":1}}],[\"revise\",{\"1\":{\"107\":1}}],[\"reverse\",{\"1\":{\"77\":1}}],[\"refreshbeanfactory\",{\"1\":{\"534\":1}}],[\"refresh\",{\"1\":{\"533\":2}}],[\"refreshing\",{\"1\":{\"533\":2}}],[\"ref\",{\"1\":{\"456\":5}}],[\"referencequeue<>\",{\"1\":{\"383\":1}}],[\"references\",{\"0\":{\"114\":1},\"1\":{\"109\":1}}],[\"reflectionexception\",{\"1\":{\"507\":1}}],[\"reflectasm\",{\"1\":{\"399\":1}}],[\"reflect包下边的两个类\",{\"1\":{\"341\":1}}],[\"reflects\",{\"1\":{\"57\":1}}],[\"refined\",{\"1\":{\"105\":2}}],[\"request\",{\"1\":{\"229\":1,\"731\":1}}],[\"requests\",{\"1\":{\"97\":1}}],[\"required\",{\"1\":{\"358\":1,\"533\":1}}],[\"requires\",{\"1\":{\"97\":1}}],[\"require\",{\"1\":{\"97\":1,\"103\":1}}],[\"requirement\",{\"1\":{\"75\":1}}],[\"requirements\",{\"1\":{\"53\":1,\"57\":3,\"59\":1,\"67\":1,\"75\":1,\"83\":1,\"89\":1,\"97\":1,\"105\":1,\"107\":1}}],[\"recvfrom\",{\"1\":{\"733\":1,\"734\":2,\"735\":1,\"736\":1}}],[\"receives\",{\"1\":{\"93\":1}}],[\"recommended\",{\"1\":{\"729\":1,\"731\":1}}],[\"recommend\",{\"1\":{\"79\":1}}],[\"reconfigured\",{\"1\":{\"67\":1}}],[\"recovered\",{\"1\":{\"67\":1}}],[\"reuse\",{\"1\":{\"75\":2,\"99\":1,\"107\":1,\"111\":1,\"115\":1}}],[\"readline\",{\"1\":{\"496\":2}}],[\"reader\",{\"1\":{\"496\":6,\"530\":2,\"531\":3,\"532\":1}}],[\"read\",{\"1\":{\"456\":1,\"737\":1,\"746\":1}}],[\"ready\",{\"1\":{\"233\":1}}],[\"reads\",{\"1\":{\"93\":1}}],[\"reassessing\",{\"1\":{\"107\":1}}],[\"reasonably\",{\"1\":{\"97\":1}}],[\"reasoning\",{\"1\":{\"75\":1}}],[\"reasons\",{\"1\":{\"67\":1,\"97\":2}}],[\"react\",{\"1\":{\"97\":1}}],[\"realconnection\",{\"1\":{\"500\":1,\"502\":2}}],[\"realm\",{\"1\":{\"107\":1}}],[\"real\",{\"1\":{\"65\":1,\"107\":2}}],[\"reset\",{\"1\":{\"533\":1,\"728\":1}}],[\"reshard操作不够自动化\",{\"1\":{\"463\":1}}],[\"resize\",{\"1\":{\"327\":1}}],[\"resolvable\",{\"1\":{\"533\":1}}],[\"resolvescopemetadata\",{\"1\":{\"532\":1}}],[\"resolveclass\",{\"1\":{\"130\":5}}],[\"resolve\",{\"0\":{\"134\":1},\"1\":{\"130\":6}}],[\"resourceloader\",{\"1\":{\"535\":1}}],[\"resourceloaderaware\",{\"1\":{\"535\":1}}],[\"resourceeditorregistrar\",{\"1\":{\"535\":1}}],[\"resource\",{\"1\":{\"482\":2,\"546\":2}}],[\"resource=\",{\"1\":{\"478\":1}}],[\"resourcename\",{\"1\":{\"130\":3}}],[\"resources\",{\"1\":{\"67\":2,\"93\":1,\"97\":1,\"482\":2}}],[\"respected\",{\"1\":{\"109\":1}}],[\"response\",{\"1\":{\"97\":1}}],[\"responsiveness\",{\"1\":{\"97\":1}}],[\"responsibility\",{\"1\":{\"65\":2,\"79\":1}}],[\"resulttype=\",{\"1\":{\"479\":1}}],[\"resulttype\",{\"1\":{\"479\":1}}],[\"resultsethandler\",{\"1\":{\"474\":1}}],[\"resultset\",{\"1\":{\"470\":1,\"474\":1}}],[\"resultmapexception\",{\"1\":{\"507\":1}}],[\"resultmap\",{\"1\":{\"468\":1}}],[\"result\",{\"1\":{\"57\":1,\"97\":1,\"365\":1,\"366\":2,\"367\":3,\"368\":3}}],[\"restrict\",{\"1\":{\"434\":2}}],[\"restriction\",{\"1\":{\"24\":1}}],[\"rest\",{\"1\":{\"107\":1,\"538\":2,\"540\":1}}],[\"restart=unless\",{\"1\":{\"12\":1,\"417\":1}}],[\"restart\",{\"1\":{\"11\":1,\"27\":1,\"28\":1,\"723\":1,\"731\":1}}],[\"remappingfunction\",{\"1\":{\"325\":1}}],[\"removeif\",{\"1\":{\"299\":1}}],[\"removeall\",{\"1\":{\"299\":1}}],[\"remove\",{\"1\":{\"299\":1,\"325\":2,\"731\":2}}],[\"remote\",{\"1\":{\"24\":1,\"67\":1}}],[\"remedy\",{\"1\":{\"55\":1}}],[\"replacing\",{\"1\":{\"538\":1}}],[\"replaced\",{\"1\":{\"546\":1}}],[\"replace\",{\"1\":{\"325\":2}}],[\"replicated\",{\"1\":{\"67\":1}}],[\"replicas\",{\"1\":{\"32\":1,\"34\":1,\"39\":1,\"40\":2}}],[\"repeatable\",{\"1\":{\"181\":2}}],[\"represented\",{\"1\":{\"75\":1,\"81\":1,\"362\":1,\"367\":2,\"368\":1}}],[\"represents\",{\"1\":{\"65\":1,\"81\":1,\"355\":1,\"356\":1,\"357\":1,\"365\":2,\"366\":1}}],[\"representing\",{\"1\":{\"55\":2,\"59\":1}}],[\"represent\",{\"1\":{\"55\":1,\"67\":1}}],[\"repository\",{\"1\":{\"130\":1,\"731\":1}}],[\"repositories\",{\"1\":{\"130\":1,\"521\":1}}],[\"repos\",{\"1\":{\"22\":2,\"27\":1,\"731\":2}}],[\"repo\",{\"1\":{\"9\":2,\"22\":1,\"27\":2,\"681\":2,\"731\":4}}],[\"redirect\",{\"1\":{\"746\":1}}],[\"redispatch\",{\"1\":{\"731\":1}}],[\"redis的性能依然很好\",{\"1\":{\"463\":1}}],[\"redis\",{\"0\":{\"460\":1,\"797\":1},\"1\":{\"3\":1,\"43\":1,\"47\":1,\"461\":2,\"463\":8}}],[\"reduced\",{\"1\":{\"97\":1}}],[\"redundant\",{\"1\":{\"89\":1}}],[\"redundancies\",{\"1\":{\"69\":1}}],[\"redhat\",{\"1\":{\"27\":2}}],[\"release页面也可下载\",{\"1\":{\"703\":1}}],[\"release\",{\"1\":{\"79\":1,\"99\":1}}],[\"releases\",{\"1\":{\"19\":3,\"23\":1,\"704\":1}}],[\"relate\",{\"1\":{\"101\":1}}],[\"related\",{\"1\":{\"59\":1,\"75\":1,\"97\":1,\"99\":1}}],[\"relationships\",{\"1\":{\"59\":1,\"75\":1}}],[\"reliability\",{\"1\":{\"57\":1,\"83\":1}}],[\"reload\",{\"1\":{\"11\":1,\"731\":1}}],[\"0m\",{\"1\":{\"731\":1}}],[\"0b\",{\"1\":{\"695\":3}}],[\"00\",{\"1\":{\"692\":2,\"695\":1}}],[\"0被弃用\",{\"1\":{\"546\":1}}],[\"05\",{\"1\":{\"426\":1,\"429\":2,\"614\":1,\"695\":1}}],[\"06\",{\"1\":{\"426\":6,\"429\":2}}],[\"033\",{\"1\":{\"731\":2}}],[\"03\",{\"0\":{\"557\":1,\"574\":1,\"592\":1},\"1\":{\"426\":1,\"427\":2,\"428\":1,\"429\":9}}],[\"02\",{\"0\":{\"548\":1},\"1\":{\"426\":1,\"427\":2,\"428\":1,\"429\":9,\"430\":8}}],[\"01\",{\"1\":{\"426\":9,\"427\":2,\"428\":1,\"429\":9,\"430\":18}}],[\"04\",{\"0\":{\"602\":1,\"617\":1,\"630\":1,\"641\":1,\"662\":1},\"1\":{\"422\":1,\"426\":1,\"429\":3,\"614\":1,\"661\":1,\"663\":1}}],[\"0d\",{\"1\":{\"373\":1}}],[\"0l\",{\"1\":{\"373\":1}}],[\"0f\",{\"1\":{\"373\":1}}],[\"0\",{\"0\":{\"390\":2},\"1\":{\"24\":2,\"29\":2,\"130\":2,\"274\":1,\"302\":5,\"304\":6,\"314\":1,\"326\":2,\"327\":1,\"353\":2,\"355\":1,\"358\":1,\"363\":3,\"364\":4,\"365\":2,\"366\":2,\"367\":5,\"368\":3,\"373\":5,\"420\":1,\"430\":13,\"431\":1,\"444\":1,\"445\":1,\"446\":1,\"468\":1,\"478\":2,\"479\":2,\"495\":1,\"496\":3,\"546\":3,\"585\":1,\"692\":13,\"695\":2,\"704\":14,\"705\":4,\"706\":4,\"707\":4,\"708\":4,\"721\":1,\"725\":1,\"729\":2,\"731\":12,\"746\":1}}],[\"07\",{\"1\":{\"3\":1,\"426\":1,\"429\":2}}],[\"09\",{\"1\":{\"3\":1,\"426\":1,\"731\":2}}],[\"学习\",{\"0\":{\"593\":1}}],[\"学生成绩\",{\"1\":{\"430\":1}}],[\"学生姓名\",{\"1\":{\"430\":1}}],[\"学生表\",{\"0\":{\"426\":1}}],[\"学历\",{\"1\":{\"3\":1}}],[\"学校\",{\"1\":{\"3\":1}}],[\"年所有公司的销售额\",{\"1\":{\"456\":1}}],[\"年出生的学生名单\",{\"1\":{\"430\":1}}],[\"年龄减一\",{\"1\":{\"430\":1}}],[\"年龄\",{\"1\":{\"166\":1}}],[\"年老代默认使用serial\",{\"1\":{\"148\":1}}],[\"年\",{\"1\":{\"3\":1,\"422\":1}}],[\"5+\",{\"0\":{\"746\":1}}],[\"586gib\",{\"1\":{\"695\":1}}],[\"53611\",{\"1\":{\"692\":1}}],[\"5zwvkx\",{\"1\":{\"608\":1}}],[\"5yfznk\",{\"1\":{\"582\":1,\"597\":1}}],[\"579\",{\"1\":{\"500\":1,\"502\":1}}],[\"5p\",{\"1\":{\"480\":1}}],[\"5中提供了4个标准的元注解\",{\"1\":{\"181\":1}}],[\"5开始自带的标准注解\",{\"1\":{\"180\":1}}],[\"5版本开始引入的一个特性\",{\"1\":{\"179\":1}}],[\"5才开始加入的\",{\"1\":{\"171\":1}}],[\"5k\",{\"1\":{\"99\":1}}],[\"50\",{\"0\":{\"425\":1},\"1\":{\"81\":1,\"429\":1}}],[\"5\",{\"0\":{\"18\":1,\"375\":1,\"718\":1},\"1\":{\"3\":1,\"23\":2,\"24\":1,\"29\":2,\"73\":1,\"77\":1,\"79\":1,\"81\":2,\"93\":2,\"99\":1,\"130\":1,\"304\":3,\"360\":1,\"417\":2,\"430\":2,\"446\":1,\"459\":1,\"463\":2,\"496\":1,\"521\":1,\"587\":1,\"695\":1,\"704\":1}}],[\"jcl\",{\"1\":{\"521\":1}}],[\"jndi\",{\"0\":{\"501\":1},\"1\":{\"498\":1}}],[\"jdbc类型的事务管理器\",{\"1\":{\"478\":1}}],[\"jdbctype\",{\"1\":{\"470\":1}}],[\"jdbc\",{\"1\":{\"399\":2,\"470\":2,\"474\":5,\"478\":3,\"521\":1}}],[\"jdk1\",{\"1\":{\"358\":1}}],[\"jdk的动态代理机制只能代理实现了接口的类\",{\"1\":{\"350\":1}}],[\"jdk动态代理的速度已经比cglib动态代理的速度快很多了\",{\"1\":{\"351\":1}}],[\"jdk动态代理的速度要比cglib动态代理的速度要慢\",{\"1\":{\"351\":1}}],[\"jdk动态代理是面向接口的\",{\"1\":{\"348\":1}}],[\"jdk动态代理具体实现原理\",{\"1\":{\"347\":1}}],[\"jdk动态代理步骤\",{\"0\":{\"343\":1}}],[\"jdk动态代理主要涉及java\",{\"1\":{\"341\":1}}],[\"jdk中的synchronized和juc中lock的实现类就是互斥锁\",{\"1\":{\"261\":1}}],[\"jdk中查找服务的实现的工具类是\",{\"1\":{\"198\":1}}],[\"jdk\",{\"0\":{\"339\":1,\"341\":1},\"1\":{\"29\":2,\"249\":1,\"353\":1,\"399\":1}}],[\"jms\",{\"1\":{\"521\":1}}],[\"jmm不保证线程b的写入对线程c可见\",{\"1\":{\"274\":1}}],[\"jmm会禁止这两个操作的重排序\",{\"1\":{\"271\":1}}],[\"jmm禁止编译器把final域的写重排序到构造函数之外\",{\"1\":{\"270\":1}}],[\"jmm\",{\"1\":{\"206\":2,\"285\":1,\"288\":4}}],[\"jmap\",{\"1\":{\"150\":1,\"153\":2}}],[\"jhat\",{\"1\":{\"153\":1}}],[\"jh2wgcjjnmvq7m9l9rbr8qdw5fr7nrd2bjssjfngmcjrsxncdphf7d\",{\"1\":{\"21\":1}}],[\"js\",{\"1\":{\"731\":1}}],[\"jstack\",{\"1\":{\"153\":2}}],[\"jstat\",{\"1\":{\"153\":2}}],[\"jsp\",{\"1\":{\"153\":1}}],[\"json\",{\"1\":{\"11\":1,\"39\":1}}],[\"jps\",{\"1\":{\"153\":1}}],[\"jpg\",{\"1\":{\"115\":1,\"731\":1}}],[\"jinfo\",{\"1\":{\"153\":2}}],[\"jit\",{\"0\":{\"144\":1},\"1\":{\"136\":1,\"141\":1,\"144\":1}}],[\"jiuxialb\",{\"1\":{\"3\":1,\"522\":1}}],[\"j\",{\"1\":{\"113\":2,\"204\":1,\"225\":1,\"226\":1}}],[\"junit\",{\"1\":{\"521\":2}}],[\"juc\",{\"0\":{\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1}}],[\"jurisdiction\",{\"1\":{\"97\":1}}],[\"just\",{\"1\":{\"57\":1,\"83\":1}}],[\"journalctl\",{\"1\":{\"730\":1}}],[\"join\",{\"0\":{\"251\":1},\"1\":{\"211\":1,\"235\":1,\"236\":1,\"251\":1,\"388\":1,\"430\":26,\"705\":2,\"707\":2}}],[\"joe\",{\"1\":{\"93\":1}}],[\"jobservice\",{\"1\":{\"26\":3}}],[\"job\",{\"0\":{\"793\":1},\"1\":{\"24\":1}}],[\"jar\",{\"1\":{\"34\":3,\"129\":2}}],[\"javascript\",{\"1\":{\"731\":1}}],[\"javaseloader\",{\"1\":{\"130\":2}}],[\"java提供了动态代理技术\",{\"1\":{\"341\":1}}],[\"java提供了volatile关键字来保证可见性\",{\"1\":{\"213\":1}}],[\"java集合框架\",{\"0\":{\"298\":1}}],[\"java原子类中的递增操作就通过cas自旋实现的\",{\"1\":{\"256\":1}}],[\"java中reentrantlock和synchronized都是可重入锁\",{\"1\":{\"260\":1}}],[\"java中\",{\"1\":{\"256\":1}}],[\"java中spi机制主要思想是将装配的控制权移到程序之外\",{\"1\":{\"198\":1}}],[\"java内存模型只保证了基本读取和赋值是原子性操作\",{\"1\":{\"212\":1}}],[\"java是怎么解决并发问题的\",{\"0\":{\"207\":1}}],[\"java注解的本质以及注解的底层实现原理\",{\"1\":{\"186\":1}}],[\"java8的函数式接口\",{\"1\":{\"546\":1}}],[\"java8提供了哪些新的注解\",{\"0\":{\"184\":1}}],[\"java8及之后堆内存分为\",{\"1\":{\"141\":1}}],[\"javadoc\",{\"1\":{\"181\":1}}],[\"java自带的标准注解\",{\"0\":{\"180\":1},\"1\":{\"179\":1}}],[\"java泛型的实现采取了\",{\"1\":{\"171\":1}}],[\"java泛型这个特性是从jdk\",{\"1\":{\"171\":1}}],[\"java7\",{\"1\":{\"161\":1}}],[\"java5\",{\"1\":{\"161\":1}}],[\"java基础\",{\"0\":{\"155\":1}}],[\"javac\",{\"1\":{\"125\":1}}],[\"java\",{\"0\":{\"154\":1,\"201\":1,\"255\":1,\"370\":1,\"371\":1,\"383\":1,\"385\":1,\"397\":1,\"399\":1},\"1\":{\"3\":1,\"29\":1,\"34\":2,\"124\":6,\"125\":1,\"130\":2,\"132\":3,\"133\":1,\"134\":1,\"136\":4,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":2,\"144\":1,\"153\":3,\"169\":1,\"176\":1,\"180\":1,\"198\":1,\"206\":2,\"207\":1,\"219\":1,\"220\":1,\"229\":1,\"239\":1,\"249\":1,\"254\":1,\"288\":1,\"298\":1,\"343\":2,\"358\":1,\"366\":2,\"371\":2,\"398\":1,\"470\":3,\"473\":1,\"474\":1,\"482\":2,\"521\":1}}],[\"jre\",{\"1\":{\"34\":1}}],[\"jenkins\",{\"0\":{\"27\":1,\"30\":1,\"33\":1,\"34\":1},\"1\":{\"3\":1,\"4\":1,\"27\":8,\"28\":5,\"30\":1}}],[\"jvm\",{\"0\":{\"124\":1,\"125\":1,\"150\":1,\"151\":1},\"1\":{\"3\":1,\"124\":7,\"131\":1,\"136\":1,\"140\":3,\"142\":1,\"152\":1,\"153\":1,\"207\":1,\"249\":1,\"343\":1,\"371\":1,\"373\":1,\"388\":1}}],[\"|grep\",{\"1\":{\"731\":1}}],[\"||\",{\"1\":{\"130\":1,\"364\":1,\"368\":1,\"731\":1}}],[\"|\",{\"1\":{\"3\":2,\"109\":8,\"447\":1,\"692\":1,\"711\":2,\"729\":8,\"731\":2}}],[\"微信号\",{\"1\":{\"3\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
