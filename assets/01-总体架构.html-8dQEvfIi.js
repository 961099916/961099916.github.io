import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,b as i}from"./app-CfOc6kFb.js";const s={},l=i('<h1 id="总体架构设计" tabindex="-1"><a class="header-anchor" href="#总体架构设计"><span>总体架构设计</span></a></h1><p>Mybatis 整体框架如下：</p><img src="https://zhangjiahao-prd.oss-cn-beijing.aliyuncs.com/uPic/kJIdrO.jpg" alt="kJIdrO" style="zoom:50%;"><h2 id="接口层" tabindex="-1"><a class="header-anchor" href="#接口层"><span>接口层</span></a></h2><p>MyBatis 和数据库的交互有两种方式：</p><ul><li><p>使用传统的 MyBatis 提供的 API；</p></li><li><p>使用 Mapper 接口；</p></li></ul><h3 id="使用传统的-mybatis-提供的-api" tabindex="-1"><a class="header-anchor" href="#使用传统的-mybatis-提供的-api"><span>使用传统的 MyBatis 提供的 API</span></a></h3><p>这是传统的传递 Statement Id 和查询参数给 SqlSession 对象，使用 SqlSession 对象完成和数据库的交互；MyBatis 提供了非常方便和简单的 API，供用户实现对数据库的增删改查数据操作，以及对数据库连接信息和 MyBatis 自身配置信息的维护操作。</p><img src="https://zhangjiahao-prd.oss-cn-beijing.aliyuncs.com/uPic/jFy4Pk.jpg" alt="jFy4Pk" style="zoom:50%;"><h3 id="使用-mapper-接口" tabindex="-1"><a class="header-anchor" href="#使用-mapper-接口"><span>使用 Mapper 接口</span></a></h3><p>MyBatis 将配置文件中的每一个<code>&lt;mapper&gt;</code> 节点抽象为一个 Mapper 接口，而这个接口中声明的方法和跟<code>&lt;mapper&gt;</code> 节点中的<code>&lt;select|update|delete|insert&gt;</code> 节点项对应，即<code>&lt;select|update|delete|insert&gt;</code> 节点的 id 值为 Mapper 接口中的方法名称，parameterType 值表示 Mapper 对应方法的入参类型，而 resultMap 值则对应了 Mapper 接口表示的返回值类型或者返回结果集的元素类型。</p><img src="https://zhangjiahao-prd.oss-cn-beijing.aliyuncs.com/uPic/gqJKeP.jpg" alt="gqJKeP" style="zoom:50%;"><p>根据 MyBatis 的配置规范配置好后，通过 SqlSession.getMapper(XXXMapper.class)方法，MyBatis 会根据相应的接口声明的方法信息，通过动态代理机制生成一个 Mapper 实例，我们使用 Mapper 接口的某一个方法时，MyBatis 会根据这个方法的方法名和参数类型，确定 Statement Id，底层还是通过 SqlSession.select(&quot;statementId&quot;,parameterObject);或者 SqlSession.update(&quot;statementId&quot;,parameterObject); 等等来实现对数据库的操作， MyBatis 引用 Mapper 接口这种调用方式，纯粹是为了满足面向接口编程的需要。（其实还有一个原因是在于，面向接口的编程，使得用户在接口上可以使用注解来配置 SQL 语句，这样就可以脱离 XML 配置文件，实现“0 配置”）。</p><h2 id="数据处理层" tabindex="-1"><a class="header-anchor" href="#数据处理层"><span>数据处理层</span></a></h2><p>数据处理层可以说是 MyBatis 的核心，从大的方面上讲，它要完成两个功能：</p><ul><li><p>通过传入参数构建动态 SQL 语句；</p></li><li><p>SQL 语句的执行以及封装查询结果集成<code>List&lt;E&gt;</code></p></li></ul><h3 id="通过传入参数构建动态-sql-语句" tabindex="-1"><a class="header-anchor" href="#通过传入参数构建动态-sql-语句"><span>通过传入参数构建动态 SQL 语句；</span></a></h3><p>动态语句生成可以说是 MyBatis 框架非常优雅的一个设计，MyBatis 通过传入的参数值，使用 Ognl 来动态地构造 SQL 语句，使得 MyBatis 有很强的灵活性和扩展性。</p><p>参数映射指的是对于 java 数据类型和 jdbc 数据类型之间的转换：这里有包括两个过程：查询阶段，我们要将 java 类型的数据，转换成 jdbc 类型的数据，通过 preparedStatement.setXXX() 来设值；另一个就是对 resultset 查询结果集的 jdbcType 数据转换成 java 数据类型。</p><h3 id="sql-语句的执行以及封装查询结果集成list-e" tabindex="-1"><a class="header-anchor" href="#sql-语句的执行以及封装查询结果集成list-e"><span>SQL 语句的执行以及封装查询结果集成<code>List&lt;E&gt;</code></span></a></h3><p>动态 SQL 语句生成之后，MyBatis 将执行 SQL 语句，并将可能返回的结果集转换成<code>List&lt;E&gt;</code> 列表。MyBatis 在对结果集的处理中，支持结果集关系一对多和多对一的转换，并且有两种支持方式，一种为嵌套查询语句的查询，还有一种是嵌套结果集的查询。</p><h2 id="框架支撑层" tabindex="-1"><a class="header-anchor" href="#框架支撑层"><span>框架支撑层</span></a></h2><ul><li>事务管理机制</li></ul><p>事务管理机制对于 ORM 框架而言是不可缺少的一部分，事务管理机制的质量也是考量一个 ORM 框架是否优秀的一个标准。</p><ul><li>连接池管理机制</li></ul><p>由于创建一个数据库连接所占用的资源比较大， 对于数据吞吐量大和访问量非常大的应用而言，连接池的设计就显得非常重要。</p><ul><li>缓存机制</li></ul><p>为了提高数据利用率和减小服务器和数据库的压力，MyBatis 会对于一些查询提供会话级别的数据缓存，会将对某一次查询，放置到 SqlSession 中，在允许的时间间隔内，对于完全相同的查询，MyBatis 会直接将缓存结果返回给用户，而不用再到数据库中查找。</p><ul><li>SQL 语句的配置方式</li></ul><p>传统的 MyBatis 配置 SQL 语句方式就是使用 XML 文件进行配置的，但是这种方式不能很好地支持面向接口编程的理念，为了支持面向接口的编程，MyBatis 引入了 Mapper 接口的概念，面向接口的引入，对使用注解来配置 SQL 语句成为可能，用户只需要在接口上添加必要的注解即可，不用再去配置 XML 文件了，但是，目前的 MyBatis 只是对注解配置 SQL 语句提供了有限的支持，某些高级功能还是要依赖 XML 配置文件配置 SQL 语句。</p><h2 id="引导层" tabindex="-1"><a class="header-anchor" href="#引导层"><span>引导层</span></a></h2><p>引导层是配置和启动 MyBatis 配置信息的方式。MyBatis 提供两种方式来引导 MyBatis ：基于 XML 配置文件的方式和基于 Java API 的方式。</p><h3 id="主要构件及其相互关系" tabindex="-1"><a class="header-anchor" href="#主要构件及其相互关系"><span>主要构件及其相互关系</span></a></h3><img src="https://zhangjiahao-prd.oss-cn-beijing.aliyuncs.com/uPic/1MVyxT.jpg" alt="1MVyxT" style="zoom:50%;"><p>主要的核心部件解释如下：</p><ul><li><p><code>SqlSession</code> 作为 MyBatis 工作的主要顶层 API，表示和数据库交互的会话，完成必要数据库增删改查功能</p></li><li><p><code>Executor</code> MyBatis 执行器，是 MyBatis 调度的核心，负责 SQL 语句的生成和查询缓存的维护</p></li><li><p><code>StatementHandler</code> 封装了 JDBC Statement 操作，负责对 JDBC statement 的操作，如设置参数、将 Statement 结果集转换成 List 集合。</p></li><li><p><code>ParameterHandler</code> 负责对用户传递的参数转换成 JDBC Statement 所需要的参数，</p></li><li><p><code>ResultSetHandler</code> 负责将 JDBC 返回的 ResultSet 结果集对象转换成 List 类型的集合；</p></li><li><p><code>TypeHandler</code> 负责 java 数据类型和 jdbc 数据类型之间的映射和转换</p></li><li><p><code>MappedStatement</code> MappedStatement 维护了一条<code>&lt;select|update|delete|insert&gt;</code>节点的封装，</p></li><li><p><code>SqlSource</code> 负责根据用户传递的 parameterObject，动态地生成 SQL 语句，将信息封装到 BoundSql 对象中，并返回</p></li><li><p><code>BoundSql</code> 表示动态生成的 SQL 语句以及相应的参数信息</p></li><li><p><code>Configuration</code> MyBatis 所有的配置信息都维持在 Configuration 对象之中。</p></li></ul>',36),p=[l];function n(o,r){return t(),a("div",null,p)}const h=e(s,[["render",n],["__file","01-总体架构.html.vue"]]),m=JSON.parse('{"path":"/%E6%A1%86%E6%9E%B6/mybatis/01-%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84.html","title":"总体架构设计","lang":"zh-CN","frontmatter":{"title":"总体架构设计","order":1,"category":["it"],"tags":["框架","mybatis","源码"],"description":"总体架构设计 Mybatis 整体框架如下： kJIdrO 接口层 MyBatis 和数据库的交互有两种方式： 使用传统的 MyBatis 提供的 API； 使用 Mapper 接口； 使用传统的 MyBatis 提供的 API 这是传统的传递 Statement Id 和查询参数给 SqlSession 对象，使用 SqlSession 对象完成和数...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/%E6%A1%86%E6%9E%B6/mybatis/01-%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"总体架构设计"}],["meta",{"property":"og:description","content":"总体架构设计 Mybatis 整体框架如下： kJIdrO 接口层 MyBatis 和数据库的交互有两种方式： 使用传统的 MyBatis 提供的 API； 使用 Mapper 接口； 使用传统的 MyBatis 提供的 API 这是传统的传递 Statement Id 和查询参数给 SqlSession 对象，使用 SqlSession 对象完成和数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T05:58:54.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"mybatis"}],["meta",{"property":"article:tag","content":"源码"}],["meta",{"property":"article:modified_time","content":"2024-06-22T05:58:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"总体架构设计\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-22T05:58:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"接口层","slug":"接口层","link":"#接口层","children":[{"level":3,"title":"使用传统的 MyBatis 提供的 API","slug":"使用传统的-mybatis-提供的-api","link":"#使用传统的-mybatis-提供的-api","children":[]},{"level":3,"title":"使用 Mapper 接口","slug":"使用-mapper-接口","link":"#使用-mapper-接口","children":[]}]},{"level":2,"title":"数据处理层","slug":"数据处理层","link":"#数据处理层","children":[{"level":3,"title":"通过传入参数构建动态 SQL 语句；","slug":"通过传入参数构建动态-sql-语句","link":"#通过传入参数构建动态-sql-语句","children":[]},{"level":3,"title":"SQL 语句的执行以及封装查询结果集成List<E>","slug":"sql-语句的执行以及封装查询结果集成list-e","link":"#sql-语句的执行以及封装查询结果集成list-e","children":[]}]},{"level":2,"title":"框架支撑层","slug":"框架支撑层","link":"#框架支撑层","children":[]},{"level":2,"title":"引导层","slug":"引导层","link":"#引导层","children":[{"level":3,"title":"主要构件及其相互关系","slug":"主要构件及其相互关系","link":"#主要构件及其相互关系","children":[]}]}],"git":{"createdTime":1719035934000,"updatedTime":1719035934000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":5.21,"words":1562},"filePathRelative":"框架/mybatis/01-总体架构.md","localizedDate":"2024年6月22日","excerpt":"\\n<p>Mybatis 整体框架如下：</p>\\n<img src=\\"https://zhangjiahao-prd.oss-cn-beijing.aliyuncs.com/uPic/kJIdrO.jpg\\" alt=\\"kJIdrO\\" style=\\"zoom:50%;\\">\\n<h2>接口层</h2>\\n<p>MyBatis 和数据库的交互有两种方式：</p>\\n<ul>\\n<li>\\n<p>使用传统的 MyBatis 提供的 API；</p>\\n</li>\\n<li>\\n<p>使用 Mapper 接口；</p>\\n</li>\\n</ul>\\n<h3>使用传统的 MyBatis 提供的 API</h3>\\n<p>这是传统的传递 Statement Id 和查询参数给 SqlSession 对象，使用 SqlSession 对象完成和数据库的交互；MyBatis 提供了非常方便和简单的 API，供用户实现对数据库的增删改查数据操作，以及对数据库连接信息和 MyBatis 自身配置信息的维护操作。</p>","autoDesc":true}');export{h as comp,m as data};
