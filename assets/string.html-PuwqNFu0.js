import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as e}from"./app-BjHFYRDy.js";const t={},p=e(`<h2 id="_1-属性" tabindex="-1"><a class="header-anchor" href="#_1-属性"><span>1. 属性</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/** The value is used for character storage. */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** Cache the hash code for the string */</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// Default to 0</span>

<span class="token doc-comment comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6849794470754667710L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 final 修饰的 value。只能初始化一次，如果大量拼接，不可使用该类型</li><li>使用字符组进行缓存数据</li></ul><h2 id="_2-构造方法" tabindex="-1"><a class="header-anchor" href="#_2-构造方法"><span>2. 构造方法</span></a></h2><h3 id="public-string" tabindex="-1"><a class="header-anchor" href="#public-string"><span>public String()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
   * Initializes a newly created <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object so that it represents
   * an empty character sequence.  Note that use of this constructor is
   * unnecessary since Strings are immutable.
   */</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过设置&quot;&quot;.value，实现创建对象.</li><li>hash 值默认为 0。</li></ul><h3 id="public-string-string-original" tabindex="-1"><a class="header-anchor" href="#public-string-string-original"><span>public String(String original)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Initializes a newly created <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object so that it represents
 * the same sequence of characters as the argument; in other words, the
 * newly created string is a copy of the argument string. Unless an
 * explicit copy of <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">original</span></span><span class="token punctuation">}</span> is needed, use of this constructor is
 * unnecessary since Strings are immutable.
 *
 * <span class="token keyword">@param</span>  <span class="token parameter">original</span>
 *         A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> original<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> original<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过传入的字符串，设置对象，并且设置对应的 hash</li></ul><h3 id="public-string-char-value" tabindex="-1"><a class="header-anchor" href="#public-string-char-value"><span>public String(char value[])</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Allocates a new <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> so that it represents the sequence of
 * characters currently contained in the character array argument. The
 * contents of the character array are copied; subsequent modification of
 * the character array does not affect the newly created string.
 *
 * <span class="token keyword">@param</span>  <span class="token parameter">value</span>
 *         The initial value of the string
 */</span>
<span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过传入的字符组进行复制，从而创建对象。</li></ul><h3 id="public-string-byte-bytes" tabindex="-1"><a class="header-anchor" href="#public-string-byte-bytes"><span>public String(byte bytes[])</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
    * Constructs a new <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> by decoding the specified array of bytes
    * using the platform&#39;s default charset.  The length of the new <span class="token punctuation">{</span><span class="token keyword">@code</span>
    <span class="token code-section">* <span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> is a function of the charset, and hence may not be equal to the
    * length of the byte array.
    *
    * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> The behavior of this constructor when the given bytes are not valid
    * in the default charset is unspecified.  The <span class="token punctuation">{</span><span class="token keyword">@link</span>
    * <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">CharsetDecoder</span></span><span class="token punctuation">}</span> class should be used when more control
    * over the decoding process is required.
    *
    * <span class="token keyword">@param</span>  <span class="token parameter">bytes</span>
    *         The bytes to be decoded into characters
    *
    * <span class="token keyword">@since</span>  JDK1.1
    */</span>
   <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">byte</span> bytes<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过字节组进行创建对象，调用该对象的其他方法，传入字节组，开始和结束的位置进行创建</li></ul><h3 id="public-string-stringbuffer-buffer" tabindex="-1"><a class="header-anchor" href="#public-string-stringbuffer-buffer"><span>public String(StringBuffer buffer)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Allocates a new string that contains the sequence of characters
 * currently contained in the string buffer argument. The contents of the
 * string buffer are copied; subsequent modification of the string buffer
 * does not affect the newly created string.
 *
 * <span class="token keyword">@param</span>  <span class="token parameter">buffer</span>
 *         A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">StringBuffer</span></span></span><span class="token punctuation">}</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">StringBuffer</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 StringBuffer 进行构建对象，通过 StringBufer.getValue()返回字符组，配合字符组长度创建对象</li><li>StringBuffer 通过 synchronized 进行出现线程数据共享，由此可见 StringBuffer 是线程安全的</li></ul><h3 id="public-string-stringbuilder-builder" tabindex="-1"><a class="header-anchor" href="#public-string-stringbuilder-builder"><span>public String(StringBuilder builder)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Allocates a new string that contains the sequence of characters
  * currently contained in the string builder argument. The contents of the
  * string builder are copied; subsequent modification of the string builder
  * does not affect the newly created string.
  *
  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> This constructor is provided to ease migration to <span class="token punctuation">{</span><span class="token keyword">@code</span>
  <span class="token code-section">* <span class="token code language-java"><span class="token class-name">StringBuilder</span></span></span><span class="token punctuation">}</span>. Obtaining a string from a string builder via the <span class="token punctuation">{</span><span class="token keyword">@code</span>
  <span class="token code-section">* <span class="token code language-java">toString</span></span><span class="token punctuation">}</span> method is likely to run faster and is generally preferred.
  *
  * <span class="token keyword">@param</span>   <span class="token parameter">builder</span>
  *          A <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">StringBuilder</span></span></span><span class="token punctuation">}</span>
  *
  * <span class="token keyword">@since</span>  1.5
  */</span>
 <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>和上个方法对比，可看出 StringBuilder 线程不安全。</li></ul><h2 id="_3-常用方法" tabindex="-1"><a class="header-anchor" href="#_3-常用方法"><span>3. 常用方法</span></a></h2><h3 id="字符串的长度-length" tabindex="-1"><a class="header-anchor" href="#字符串的长度-length"><span>字符串的长度 length()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
    * Returns the length of this string.
    * The length is equal to the number of <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Character.html#unicode<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Unicode
    * code units<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> in the string.
    *
    * <span class="token keyword">@return</span>  the length of the sequence of characters represented by this
    *          object.
    */</span>
   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过字符组的长度从而获得字符串的长度</li></ul><h3 id="是否为空-isempty" tabindex="-1"><a class="header-anchor" href="#是否为空-isempty"><span>是否为空 isEmpty()</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
  * Returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if, and only if, <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span>.
  *
  * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span>, otherwise
  * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>
  *
  * <span class="token keyword">@since</span> 1.6
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> value<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>检测是否为空时未检测对象是否为 null，所以使用该方法时需要考虑是否为 null</li></ul><h3 id="获得字符串的第几个字符-charat-int-index" tabindex="-1"><a class="header-anchor" href="#获得字符串的第几个字符-charat-int-index"><span>获得字符串的第几个字符 charAt(int index)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Returns the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">char</span></span></span><span class="token punctuation">}</span> value at the
 * specified index. An index ranges from <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> to
 * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span></span></span><span class="token punctuation">}</span>. The first <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">char</span></span></span><span class="token punctuation">}</span> value of the sequence
 * is at index <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span>, the next at index <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">1</span></span></span><span class="token punctuation">}</span>,
 * and so on, as for array indexing.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">char</span></span></span><span class="token punctuation">}</span> value specified by the index is a
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Character.html#unicode<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>surrogate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>, the surrogate
 * value is returned.
 *
 * <span class="token keyword">@param</span>      <span class="token parameter">index</span>   the index of the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">char</span></span></span><span class="token punctuation">}</span> value.
 * <span class="token keyword">@return</span>     the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">char</span></span></span><span class="token punctuation">}</span> value at the specified index of this string.
 *             The first <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">char</span></span></span><span class="token punctuation">}</span> value is at index <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span>.
 * <span class="token keyword">@exception</span>  <span class="token reference"><span class="token class-name">IndexOutOfBoundsException</span></span>  if the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">index</span></span><span class="token punctuation">}</span>
 *             argument is negative or not less than the length of this
 *             string.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StringIndexOutOfBoundsException</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过传入的字符串的位置进行获取，如果不在返回内会抛出<code>StringIndexOutOfBoundsException</code>异常。</li></ul><h3 id="比较内容是否相等-equals-object-object" tabindex="-1"><a class="header-anchor" href="#比较内容是否相等-equals-object-object"><span>比较内容是否相等 equals(Object object)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Compares this string to the specified object.  The result is <span class="token punctuation">{</span><span class="token keyword">@code</span>
 <span class="token code-section">* <span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if and only if the argument is not <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> and is a <span class="token punctuation">{</span><span class="token keyword">@code</span>
 <span class="token code-section">* <span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object that represents the same sequence of characters as this
 * object.
 *
 * <span class="token keyword">@param</span>  <span class="token parameter">anObject</span>
 *         The object to compare this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> against
 *
 * <span class="token keyword">@return</span>  <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the given object represents a <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span>
 *          equivalent to this string, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> otherwise
 *
 * <span class="token keyword">@see</span>  <span class="token reference"><span class="token punctuation">#</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span>
 * <span class="token keyword">@see</span>  <span class="token reference"><span class="token punctuation">#</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>基本的数据类型相等的判断只需要<code>==</code>就可以判断，但是封装类型，需要通过 equals 进行判断。</li><li>如果需要对自定义对象进行判断是否相等，需要重写对象的<code>equals</code>方法，从而实现自定义比较方法。如果不重写，则默认比较内存地址。</li></ul><h3 id="忽略大小写比较是否相等-equalsignorecase-string-anotherstring" tabindex="-1"><a class="header-anchor" href="#忽略大小写比较是否相等-equalsignorecase-string-anotherstring"><span>忽略大小写比较是否相等 equalsIgnoreCase(String anotherString)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Compares this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> to another <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span>, ignoring case
 * considerations.  Two strings are considered equal ignoring case if they
 * are of the same length and corresponding characters in the two strings
 * are equal ignoring case.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> Two characters <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">c1</span></span><span class="token punctuation">}</span> and <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">c2</span></span><span class="token punctuation">}</span> are considered the same
 * ignoring case if at least one of the following is true:
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
 *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> The two characters are the same (as compared by the
 *        <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token operator">==</span></span></span><span class="token punctuation">}</span> operator)
 *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> Applying the method <span class="token punctuation">{</span><span class="token keyword">@link</span>
 *        <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Character</span><span class="token punctuation">#</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> to each character
 *        produces the same result
 *   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span> Applying the method <span class="token punctuation">{</span><span class="token keyword">@link</span>
 *        <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Character</span><span class="token punctuation">#</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> to each character
 *        produces the same result
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
 *
 * <span class="token keyword">@param</span>  <span class="token parameter">anotherString</span>
 *         The <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> to compare this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> against
 *
 * <span class="token keyword">@return</span>  <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the argument is not <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> and it
 *          represents an equivalent <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> ignoring case; <span class="token punctuation">{</span><span class="token keyword">@code</span>
 <span class="token code-section">*          <span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> otherwise
 *
 * <span class="token keyword">@see</span>  <span class="token reference"><span class="token punctuation">#</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anotherString<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span>
            <span class="token operator">:</span> <span class="token punctuation">(</span>anotherString <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">==</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
            <span class="token operator">&amp;&amp;</span> <span class="token function">regionMatches</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> anotherString<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>进行判断对象的内存地址是否相同---&gt;地址相同，说明同一个对象，自己比较自己肯定 true</li><li>然后判断是否为空，长度是否相同，然后再循环比较每个字符忽略大小写比较</li></ol><h3 id="比较字符串的大小-compareto-string-anotherstring" tabindex="-1"><a class="header-anchor" href="#比较字符串的大小-compareto-string-anotherstring"><span>比较字符串的大小 compareTo(String anotherString)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
    <span class="token doc-comment comment">/**
     * Compares two strings lexicographically.
     * The comparison is based on the Unicode value of each character in
     * the strings. The character sequence represented by this
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object is compared lexicographically to the
     * character sequence represented by the argument string. The result is
     * a negative integer if this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object
     * lexicographically precedes the argument string. The result is a
     * positive integer if this <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object lexicographically
     * follows the argument string. The result is zero if the strings
     * are equal; <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">compareTo</span></span><span class="token punctuation">}</span> returns <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> exactly when
     * the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> method would return <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span>.
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * This is the definition of lexicographic ordering. If two strings are
     * different, then either they have different characters at some index
     * that is a valid index for both strings, or their lengths are different,
     * or both. If they have different characters at one or more index
     * positions, let <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> be the smallest such index; then the string
     * whose character at position <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>k<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> has the smaller value, as
     * determined by using the <span class="token entity named-entity" title="&lt;">&amp;lt;</span> operator, lexicographically precedes the
     * other string. In this case, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">compareTo</span></span><span class="token punctuation">}</span> returns the
     * difference of the two character values at position <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">k</span></span><span class="token punctuation">}</span> in
     * the two string -- that is, the value:
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">* <span class="token line"><span class="token code language-java"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span>anotherString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span></span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span>
     * If there is no index position at which they differ, then the shorter
     * string lexicographically precedes the longer string. In this case,
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">compareTo</span></span><span class="token punctuation">}</span> returns the difference of the lengths of the
     * strings -- that is, the value:
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>blockquote</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
     <span class="token code-section">* <span class="token line"><span class="token code language-java"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>anotherString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>
     *</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>blockquote</span><span class="token punctuation">&gt;</span></span>
     *
     * <span class="token keyword">@param</span>   <span class="token parameter">anotherString</span>   the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> to be compared.
     * <span class="token keyword">@return</span>  the value <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if the argument string is equal to
     *          this string; a value less than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if this string
     *          is lexicographically less than the string argument; and a
     *          value greater than <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token number">0</span></span></span><span class="token punctuation">}</span> if this string is
     *          lexicographically greater than the string argument.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> len1 <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> len2 <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> lim <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>

        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> lim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> c1 <span class="token operator">=</span> v1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span> c2 <span class="token operator">=</span> v2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> c1 <span class="token operator">-</span> c2<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            k<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>找出长度最短的字符串长度</li><li>循环比较，如果有不相等的则返回插值</li><li>一直想等则返回长度差值</li></ol><h3 id="判断字符串是否从某个字符串开始的-startswith-string-prefix-int-toffset" tabindex="-1"><a class="header-anchor" href="#判断字符串是否从某个字符串开始的-startswith-string-prefix-int-toffset"><span>判断字符串是否从某个字符串开始的 startsWith(String prefix, int toffset)</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
    * Tests if the substring of this string beginning at the
    * specified index starts with the specified prefix.
    *
    * <span class="token keyword">@param</span>   <span class="token parameter">prefix</span>    the prefix.
    * <span class="token keyword">@param</span>   <span class="token parameter">toffset</span>   where to begin looking in this string.
    * <span class="token keyword">@return</span>  <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">true</span></span></span><span class="token punctuation">}</span> if the character sequence represented by the
    *          argument is a prefix of the substring of this object starting
    *          at index <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toffset</span></span><span class="token punctuation">}</span>; <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> otherwise.
    *          The result is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span> if <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">toffset</span></span><span class="token punctuation">}</span> is
    *          negative or greater than the length of this
    *          <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">String</span></span></span><span class="token punctuation">}</span> object; otherwise the result is the same
    *          as the result of the expression
    *
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>
    <span class="token code-section">*          <span class="token line"><span class="token code language-java"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>toffset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span></span></span>
    *</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>
*/</span>
   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token keyword">int</span> toffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">char</span> ta<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
       <span class="token keyword">int</span> <span class="token keyword">to</span> <span class="token operator">=</span> toffset<span class="token punctuation">;</span>
       <span class="token keyword">char</span> pa<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> prefix<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
       <span class="token keyword">int</span> po <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token keyword">int</span> pc <span class="token operator">=</span> prefix<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
       <span class="token comment">// Note: toffset might be near -1&gt;&gt;&gt;1.</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>toffset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>toffset <span class="token operator">&gt;</span> value<span class="token punctuation">.</span>length <span class="token operator">-</span> pc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>pc <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>ta<span class="token punctuation">[</span><span class="token keyword">to</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!=</span> pa<span class="token punctuation">[</span>po<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>获取对象的字符组、开始位置、传入的字符组，计算得出结束位置</li><li>判断开始位置和结束位置是否超出</li><li>循环比较是否相等</li></ol><h2 id="_4-常见问题" tabindex="-1"><a class="header-anchor" href="#_4-常见问题"><span>4. 常见问题</span></a></h2>`,45),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","string.html.vue"]]),k=JSON.parse('{"path":"/java/string.html","title":"String源码","lang":"zh-CN","frontmatter":{"title":"String源码","date":"2024-02-18T00:00:00.000Z","description":"1. 属性 使用 final 修饰的 value。只能初始化一次，如果大量拼接，不可使用该类型 使用字符组进行缓存数据 2. 构造方法 public String() 通过设置\\"\\".value，实现创建对象. hash 值默认为 0。 public String(String original) 通过传入的字符串，设置对象，并且设置对应的 hash p...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/java/string.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"String源码"}],["meta",{"property":"og:description","content":"1. 属性 使用 final 修饰的 value。只能初始化一次，如果大量拼接，不可使用该类型 使用字符组进行缓存数据 2. 构造方法 public String() 通过设置\\"\\".value，实现创建对象. hash 值默认为 0。 public String(String original) 通过传入的字符串，设置对象，并且设置对应的 hash p..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T10:26:17.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:published_time","content":"2024-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T10:26:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"String源码\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T10:26:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 属性","slug":"_1-属性","link":"#_1-属性","children":[]},{"level":2,"title":"2. 构造方法","slug":"_2-构造方法","link":"#_2-构造方法","children":[{"level":3,"title":"public String()","slug":"public-string","link":"#public-string","children":[]},{"level":3,"title":"public String(String original)","slug":"public-string-string-original","link":"#public-string-string-original","children":[]},{"level":3,"title":"public String(char value[])","slug":"public-string-char-value","link":"#public-string-char-value","children":[]},{"level":3,"title":"public String(byte bytes[])","slug":"public-string-byte-bytes","link":"#public-string-byte-bytes","children":[]},{"level":3,"title":"public String(StringBuffer buffer)","slug":"public-string-stringbuffer-buffer","link":"#public-string-stringbuffer-buffer","children":[]},{"level":3,"title":"public String(StringBuilder builder)","slug":"public-string-stringbuilder-builder","link":"#public-string-stringbuilder-builder","children":[]}]},{"level":2,"title":"3. 常用方法","slug":"_3-常用方法","link":"#_3-常用方法","children":[{"level":3,"title":"字符串的长度 length()","slug":"字符串的长度-length","link":"#字符串的长度-length","children":[]},{"level":3,"title":"是否为空 isEmpty()","slug":"是否为空-isempty","link":"#是否为空-isempty","children":[]},{"level":3,"title":"获得字符串的第几个字符 charAt(int index)","slug":"获得字符串的第几个字符-charat-int-index","link":"#获得字符串的第几个字符-charat-int-index","children":[]},{"level":3,"title":"比较内容是否相等 equals(Object object)","slug":"比较内容是否相等-equals-object-object","link":"#比较内容是否相等-equals-object-object","children":[]},{"level":3,"title":"忽略大小写比较是否相等 equalsIgnoreCase(String anotherString)","slug":"忽略大小写比较是否相等-equalsignorecase-string-anotherstring","link":"#忽略大小写比较是否相等-equalsignorecase-string-anotherstring","children":[]},{"level":3,"title":"比较字符串的大小 compareTo(String anotherString)","slug":"比较字符串的大小-compareto-string-anotherstring","link":"#比较字符串的大小-compareto-string-anotherstring","children":[]},{"level":3,"title":"判断字符串是否从某个字符串开始的 startsWith(String prefix, int toffset)","slug":"判断字符串是否从某个字符串开始的-startswith-string-prefix-int-toffset","link":"#判断字符串是否从某个字符串开始的-startswith-string-prefix-int-toffset","children":[]}]},{"level":2,"title":"4. 常见问题","slug":"_4-常见问题","link":"#_4-常见问题","children":[]}],"git":{"createdTime":1713090377000,"updatedTime":1713090377000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":7.09,"words":2128},"filePathRelative":"java/string.md","localizedDate":"2024年2月18日","excerpt":"<h2>1. 属性</h2>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token doc-comment comment\\">/** The value is used for character storage. */</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">char</span> value<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token doc-comment comment\\">/** Cache the hash code for the string */</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> hash<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Default to 0</span>\\n\\n<span class=\\"token doc-comment comment\\">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span>\\n<span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">long</span> serialVersionUID <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">6849794470754667710L</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
