import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,a as l}from"./app-CHtmpmKo.js";const n={},t=l('<h1 id="并发" tabindex="-1"><a class="header-anchor" href="#并发"><span>并发</span></a></h1><figure><img src="https://cdn.nlark.com/yuque/0/2023/jpeg/596546/1701843820446-ea034d0d-9437-4d56-b7b9-b38302f987dc.jpeg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="并发基础" tabindex="-1"><a class="header-anchor" href="#并发基础"><span>并发基础</span></a></h1><h2 id="为什么需要多线程" tabindex="-1"><a class="header-anchor" href="#为什么需要多线程"><span>为什么需要多线程</span></a></h2><p>CPU、内存、I/O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为:</p><ul><li>CPU 增加了缓存，以均衡与内存的速度差异；// 导致 可见性问题</li><li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；// 导致 原子性问题</li><li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。// 导致 有序性问题</li></ul><h2 id="为什么会出现并发问题" tabindex="-1"><a class="header-anchor" href="#为什么会出现并发问题"><span>为什么会出现并发问题</span></a></h2><h3 id="可见性-cpu缓存引起" tabindex="-1"><a class="header-anchor" href="#可见性-cpu缓存引起"><span>可见性: CPU缓存引起</span></a></h3><ol><li>假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。</li><li>此时线程2执行 j = i，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.</li><li>这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。</li></ol><h3 id="原子性-分时复用引起" tabindex="-1"><a class="header-anchor" href="#原子性-分时复用引起"><span>原子性: 分时复用引起</span></a></h3><p>i += 1需要三条 CPU 指令</p><ol><li>将变量 i 从内存读取到 CPU寄存器；</li><li>在CPU寄存器中执行 i + 1 操作；</li><li>将最后的结果i写入内存（缓存机制导致可能写入的是 CPU 缓存而不是内存）。</li></ol><p>由于CPU分时复用（线程切换）的存在，线程1执行了第一条指令后，就切换到线程2执行，假如线程2执行了这三条指令后，再切换会线程1执行后续两条指令，将造成最后写到内存中的i值是2而不是3。</p><h3 id="有序性-重排序引起" tabindex="-1"><a class="header-anchor" href="#有序性-重排序引起"><span>有序性: 重排序引起</span></a></h3><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p><ul><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li></ul><p>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/596546/1701831222920-84879a02-f44d-4a38-b3af-2bdfdb859082.png#averageHue=%23efeeed&amp;clientId=ucb0f80a1-4957-4&amp;from=paste&amp;height=76&amp;id=uc5b5c2ff&amp;originHeight=76&amp;originWidth=529&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4762&amp;status=done&amp;style=none&amp;taskId=u4ea1efd5-ce8c-4f07-b45a-3829875a38b&amp;title=&amp;width=529" alt="image.png" loading="lazy"><br> 上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 java 编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel 称之为 memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p><h2 id="java是怎么解决并发问题的" tabindex="-1"><a class="header-anchor" href="#java是怎么解决并发问题的"><span>JAVA是怎么解决并发问题的</span></a></h2><p>Java 内存模型规范了 JVM 如何提供按需禁用缓存和编译优化的方法。具体来说，这些方法包括：</p><ul><li>volatile、synchronized 和 final 三个关键字</li><li>Happens-Before 规则</li></ul><h3 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile"><span>volatile</span></a></h3><h3 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span>synchronized</span></a></h3><h3 id="final" tabindex="-1"><a class="header-anchor" href="#final"><span>final</span></a></h3><h3 id="happens-before" tabindex="-1"><a class="header-anchor" href="#happens-before"><span>Happens-Before</span></a></h3><ul><li>单一线程原则:在一个线程内，在程序前面的操作先行发生于后面的操作</li><li>管程锁定规则:一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</li><li>volatile 变量规则:对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</li><li>线程启动规则:Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</li><li>线程加入规则:Thread 对象的结束先行发生于 join() 方法返回。</li><li>线程中断规则:对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted() 方法检测到是否有中断发生。</li><li>对象终结规则:一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize() 方法的开始。</li><li>传递性:如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C。</li></ul><h3 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性"><span>原子性</span></a></h3><p>Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p><h3 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性"><span>可见性</span></a></h3><p>Java提供了volatile关键字来保证可见性。<br> 当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。<br> 而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。<br> 通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p><h3 id="有序性" tabindex="-1"><a class="header-anchor" href="#有序性"><span>有序性</span></a></h3><p>在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。当然JMM是通过Happens-Before 规则来保证有序性的。</p><h2 id="线程安全分类" tabindex="-1"><a class="header-anchor" href="#线程安全分类"><span>线程安全分类</span></a></h2><h3 id="不可变" tabindex="-1"><a class="header-anchor" href="#不可变"><span>不可变</span></a></h3><p>不可变(Immutable)的对象一定是线程安全的，不需要再采取任何的线程安全保障措施。只要一个不可变的对象被正确地构建出来，永远也不会看到它在多个线程之中处于不一致的状态。</p><h3 id="绝对线程安全" tabindex="-1"><a class="header-anchor" href="#绝对线程安全"><span>绝对线程安全</span></a></h3><p>不管运行时环境如何，调用者都不需要任何额外的同步措施。</p><h3 id="相对线程安全" tabindex="-1"><a class="header-anchor" href="#相对线程安全"><span>相对线程安全</span></a></h3><p>相对线程安全需要保证对这个对象单独的操作是线程安全的，在调用的时候不需要做额外的保障措施。但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><h3 id="线程兼容" tabindex="-1"><a class="header-anchor" href="#线程兼容"><span>线程兼容</span></a></h3><p>线程兼容是指对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用，我们平常说一个类不是线程安全的，绝大多数时候指的是这一种情况。Java API 中大部分的类都是属于线程兼容的，如与前面的 Vector 和 HashTable 相对应的集合类 ArrayList 和 HashMap 等。</p><h3 id="线程对立" tabindex="-1"><a class="header-anchor" href="#线程对立"><span>线程对立</span></a></h3><p>线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。由于 Java 语言天生就具备多线程特性，线程对立这种排斥多线程的代码是很少出现的，而且通常都是有害的，应当尽量避免。</p><h2 id="线程安全的实现" tabindex="-1"><a class="header-anchor" href="#线程安全的实现"><span>线程安全的实现</span></a></h2><h3 id="互斥同步" tabindex="-1"><a class="header-anchor" href="#互斥同步"><span>互斥同步</span></a></h3><p>互斥同步最主要的问题就是线程阻塞和唤醒所带来的性能问题，因此这种同步也称为阻塞同步。<br> 互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题。无论共享数据是否真的会出现竞争，它都要进行加锁(这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁)、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p><h3 id="非阻塞同步" tabindex="-1"><a class="header-anchor" href="#非阻塞同步"><span>非阻塞同步</span></a></h3><h4 id="cas" tabindex="-1"><a class="header-anchor" href="#cas"><span><strong>CAS</strong></span></a></h4><p>随着硬件指令集的发展，我们可以使用基于冲突检测的乐观并发策略: 先进行操作，如果没有其它线程争用共享数据，那操作就成功了，否则采取补偿措施(不断地重试，直到成功为止)。这种乐观的并发策略的许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。<br> 乐观锁需要操作和冲突检测这两个步骤具备原子性，这里就不能再使用互斥同步来保证了，只能靠硬件来完成。硬件支持的原子性操作最典型的是: 比较并交换(Compare-and-Swap，CAS)。CAS 指令需要有 3 个操作数，分别是内存地址 V、旧的预期值 A 和新值 B。当执行操作时，只有当 V 的值等于 A，才将 V 的值更新为 B。</p><h4 id="atomicinteger" tabindex="-1"><a class="header-anchor" href="#atomicinteger"><span><strong>AtomicInteger</strong></span></a></h4><p>J.U.C 包里面的整数原子类 AtomicInteger，其中的 compareAndSet() 和 getAndIncrement() 等方法都使用了 Unsafe 类的 CAS 操作。</p><h4 id="aba" tabindex="-1"><a class="header-anchor" href="#aba"><span><strong>ABA</strong></span></a></h4><p>如果一个变量初次读取的时候是 A 值，它的值被改成了 B，后来又被改回为 A，那 CAS 操作就会误认为它从来没有被改变过。<br> J.U.C 包提供了一个带有标记的原子引用类 AtomicStampedReference 来解决这个问题，它可以通过控制变量值的版本来保证 CAS 的正确性。大部分情况下 ABA 问题不会影响程序并发的正确性，如果需要解决 ABA 问题，改用传统的互斥同步可能会比原子类更高效。</p><h3 id="无同步方案" tabindex="-1"><a class="header-anchor" href="#无同步方案"><span>无同步方案</span></a></h3><p>要保证线程安全，并不是一定就要进行同步。如果一个方法本来就不涉及共享数据，那它自然就无须任何同步措施去保证正确性。</p><h4 id="栈封闭" tabindex="-1"><a class="header-anchor" href="#栈封闭"><span><strong>栈封闭</strong></span></a></h4><p>多个线程访问同一个方法的局部变量时，不会出现线程安全问题，因为局部变量存储在虚拟机栈中，属于线程私有的。</p><h4 id="线程本地存储-thread-local-storage" tabindex="-1"><a class="header-anchor" href="#线程本地存储-thread-local-storage"><span>线程本地存储(Thread Local Storage)</span></a></h4><p>如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。<br> 符合这种特点的应用并不少见，大部分使用消费队列的架构模式(如“生产者-消费者”模式)都会将产品的消费过程尽量在一个线程中消费完。其中最重要的一个应用实例就是经典 Web 交互模型中的“一个请求对应一个服务器线程”(Thread-per-Request)的处理方式，这种处理方式的广泛应用使得很多 Web 服务端应用都可以使用线程本地存储来解决线程安全问题。<br> 可以使用 java.lang.ThreadLocal 类来实现线程本地存储功能。</p><h4 id="可重入代码-reentrant-code" tabindex="-1"><a class="header-anchor" href="#可重入代码-reentrant-code"><span><strong>可重入代码(Reentrant Code)</strong></span></a></h4><p>这种代码也叫做纯代码(Pure Code)，可以在代码执行的任何时刻中断它，转而去执行另外一段代码(包括递归调用它本身)，而在控制权返回后，原来的程序不会出现任何错误。<br> 可重入代码有一些共同的特征，例如不依赖存储在堆上的数据和公用的系统资源、用到的状态量都由参数中传入、不调用非可重入的方法等。</p><h1 id="java-并发基础" tabindex="-1"><a class="header-anchor" href="#java-并发基础"><span>Java 并发基础</span></a></h1><h2 id="线程状态" tabindex="-1"><a class="header-anchor" href="#线程状态"><span>线程状态</span></a></h2><figure><img src="https://cdn.nlark.com/yuque/0/2023/png/596546/1701843201618-ef907aed-6019-4414-ba09-f6ade66cb3f8.png#averageHue=%23fdfcfc&amp;clientId=uf8f62781-375f-4&amp;from=paste&amp;height=492&amp;id=uff6e9313&amp;originHeight=492&amp;originWidth=893&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39323&amp;status=done&amp;style=none&amp;taskId=uf35e60da-266a-43be-beba-65cd04bba0a&amp;title=&amp;width=893" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="新建-new" tabindex="-1"><a class="header-anchor" href="#新建-new"><span>新建(New)</span></a></h3><p>创建后尚未启动。</p><h3 id="可运行-runnable" tabindex="-1"><a class="header-anchor" href="#可运行-runnable"><span>可运行(Runnable)</span></a></h3><p>可能正在运行，也可能正在等待 CPU 时间片。<br> 包含了操作系统线程状态中的 Running 和 Ready。</p><h3 id="阻塞-blocking" tabindex="-1"><a class="header-anchor" href="#阻塞-blocking"><span>阻塞(Blocking)</span></a></h3><p>等待获取一个排它锁，如果其线程释放了锁就会结束此状态。</p><h3 id="无限期等待-waiting" tabindex="-1"><a class="header-anchor" href="#无限期等待-waiting"><span>无限期等待(Waiting)</span></a></h3><p>等待其它线程显式地唤醒，否则不会被分配 CPU 时间片。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>没有设置 Timeout 参数的 Object.wait() 方法</td><td>Object.notify() / Object.notifyAll()</td></tr><tr><td>没有设置 Timeout 参数的 Thread.join() 方法</td><td>被调用的线程执行完毕</td></tr><tr><td>LockSupport.park() 方法</td><td>-</td></tr></tbody></table><h3 id="限期等待-timed-waiting" tabindex="-1"><a class="header-anchor" href="#限期等待-timed-waiting"><span>限期等待(Timed Waiting)</span></a></h3><p>无需等待其它线程显式地唤醒，在一定时间之后会被系统自动唤醒。<br> 调用 Thread.sleep() 方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。<br> 调用 Object.wait() 方法使线程进入限期等待或者无限期等待时，常常用“挂起一个线程”进行描述。<br> 睡眠和挂起是用来描述行为，而阻塞和等待用来描述状态。<br> 阻塞和等待的区别在于，阻塞是被动的，它是在等待获取一个排它锁。而等待是主动的，通过调用 Thread.sleep() 和 Object.wait() 等方法进入。</p><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>Thread.sleep() 方法</td><td>时间结束</td></tr><tr><td>设置了 Timeout 参数的 Object.wait() 方法</td><td>时间结束 / Object.notify() / Object.notifyAll()</td></tr><tr><td>设置了 Timeout 参数的 Thread.join() 方法</td><td>时间结束 / 被调用的线程执行完毕</td></tr><tr><td>LockSupport.parkNanos() 方法</td><td>-</td></tr><tr><td>LockSupport.parkUntil() 方法</td><td>-</td></tr></tbody></table><h3 id="死亡-terminated" tabindex="-1"><a class="header-anchor" href="#死亡-terminated"><span>死亡(Terminated)</span></a></h3><p>可以是线程结束任务之后自己结束，或者产生了异常而结束。</p><h2 id="线程使用方式" tabindex="-1"><a class="header-anchor" href="#线程使用方式"><span>线程使用方式</span></a></h2><p>有三种使用线程的方法:</p><ul><li>实现 Runnable 接口；</li><li>实现 Callable 接口；</li><li>继承 Thread 类。</li></ul><p>实现 Runnable 和 Callable 接口的类只能当做一个可以在线程中运行的任务，不是真正意义上的线程，因此最后还需要通过 Thread 来调用。可以说任务是通过线程驱动从而执行的。</p><h3 id="实现接口-vs-继承-thread" tabindex="-1"><a class="header-anchor" href="#实现接口-vs-继承-thread"><span>实现接口 VS 继承 Thread</span></a></h3><p>实现接口会更好一些，因为:</p><ul><li>Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；</li><li>类可能只要求可执行就行，继承整个 Thread 类开销过大。</li></ul><h2 id="基础线程机制" tabindex="-1"><a class="header-anchor" href="#基础线程机制"><span>基础线程机制</span></a></h2><h3 id="executor" tabindex="-1"><a class="header-anchor" href="#executor"><span>Executor</span></a></h3><p>Executor 管理多个异步任务的执行，而无需程序员显式地管理线程的生命周期。这里的异步是指多个任务的执行互不干扰，不需要进行同步操作。<br> 主要有三种 Executor:</p><ul><li>CachedThreadPool: 一个任务创建一个线程；</li><li>FixedThreadPool: 所有任务只能使用固定大小的线程；</li><li>SingleThreadExecutor: 相当于大小为 1 的 FixedThreadPool。</li></ul><h3 id="daemon" tabindex="-1"><a class="header-anchor" href="#daemon"><span>Daemon</span></a></h3><p>守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。<br> 当所有非守护线程结束时，程序也就终止，同时会杀死所有守护线程。<br> main() 属于非守护线程。<br> 使用 setDaemon() 方法将一个线程设置为守护线程。</p><h3 id="sleep" tabindex="-1"><a class="header-anchor" href="#sleep"><span>sleep()</span></a></h3><p>Thread.sleep(millisec) 方法会休眠当前正在执行的线程，millisec 单位为毫秒。<br> sleep() 可能会抛出 InterruptedException，因为异常不能跨线程传播回 main() 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理。</p><h3 id="yield" tabindex="-1"><a class="header-anchor" href="#yield"><span>yield()</span></a></h3><p>对静态方法 Thread.yield() 的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行。该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行。</p><h2 id="线程中断" tabindex="-1"><a class="header-anchor" href="#线程中断"><span>线程中断</span></a></h2><p>一个线程执行完毕之后会自动结束，如果在运行过程中发生异常也会提前结束。</p><h3 id="interruptedexception" tabindex="-1"><a class="header-anchor" href="#interruptedexception"><span>InterruptedException</span></a></h3><p>通过调用一个线程的 interrupt() 来中断该线程，如果该线程处于阻塞、限期等待或者无限期等待状态，那么就会抛出 InterruptedException，从而提前结束该线程。但是不能中断 I/O 阻塞和 synchronized 锁阻塞。</p><h3 id="interrupted" tabindex="-1"><a class="header-anchor" href="#interrupted"><span>interrupted()</span></a></h3><p>如果一个线程的 run() 方法执行一个无限循环，并且没有执行 sleep() 等会抛出 InterruptedException 的操作，那么调用线程的 interrupt() 方法就无法使线程提前结束。<br> 但是调用 interrupt() 方法会设置线程的中断标记，此时调用 interrupted() 方法会返回 true。因此可以在循环体中使用 interrupted() 方法来判断线程是否处于中断状态，从而提前结束线程。</p><h3 id="executor-的中断操作" tabindex="-1"><a class="header-anchor" href="#executor-的中断操作"><span>Executor 的中断操作</span></a></h3><p>调用 Executor 的 shutdown() 方法会等待线程都执行完毕之后再关闭，但是如果调用的是 shutdownNow() 方法，则相当于调用每个线程的 interrupt() 方法。</p><h2 id="线程互斥同步" tabindex="-1"><a class="header-anchor" href="#线程互斥同步"><span>线程互斥同步</span></a></h2><p>Java 提供了两种锁机制来控制多个线程对共享资源的互斥访问，第一个是 JVM 实现的 synchronized，而另一个是 JDK 实现的 ReentrantLock。</p><h2 id="线程间的协作" tabindex="-1"><a class="header-anchor" href="#线程间的协作"><span>线程间的协作</span></a></h2><p>当多个线程可以一起工作去解决某个问题时，如果某些部分必须在其它部分之前完成，那么就需要对线程进行协调。</p><h3 id="join" tabindex="-1"><a class="header-anchor" href="#join"><span>join()</span></a></h3><p>在线程中调用另一个线程的 join() 方法，会将当前线程挂起，而不是忙等待，直到目标线程结束。</p><h3 id="wait-notify-notifyall" tabindex="-1"><a class="header-anchor" href="#wait-notify-notifyall"><span>wait() notify() notifyAll()</span></a></h3><p>调用 wait() 使得线程等待某个条件满足，线程在等待时会被挂起，当其他线程的运行使得这个条件满足时，其它线程会调用 notify() 或者 notifyAll() 来唤醒挂起的线程。<br> 它们都属于 Object 的一部分，而不属于 Thread。<br> 只能用在同步方法或者同步控制块中使用，否则会在运行时抛出 IllegalMonitorStateExeception。<br> 使用 wait() 挂起期间，线程会释放锁。这是因为，如果没有释放锁，那么其它线程就无法进入对象的同步方法或者同步控制块中，那么就无法执行 notify() 或者 notifyAll() 来唤醒挂起的线程，造成死锁。</p><h3 id="wait-和-sleep-的区别" tabindex="-1"><a class="header-anchor" href="#wait-和-sleep-的区别"><span>wait() 和 sleep() 的区别</span></a></h3><ul><li>wait() 是 Object 的方法，而 sleep() 是 Thread 的静态方法；</li><li>wait() 会释放锁，sleep() 不会。</li></ul><h3 id="await-signal-signalall" tabindex="-1"><a class="header-anchor" href="#await-signal-signalall"><span>await() signal() signalAll()</span></a></h3><p>java.util.concurrent 类库中提供了 Condition 类来实现线程之间的协调，可以在 Condition 上调用 await() 方法使线程等待，其它线程调用 signal() 或 signalAll() 方法唤醒等待的线程。相比于 wait() 这种等待方式，await() 可以指定等待的条件，因此更加灵活。</p><h2 id="java-锁" tabindex="-1"><a class="header-anchor" href="#java-锁"><span>Java 锁</span></a></h2><h3 id="乐观锁-vs-悲观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁-vs-悲观锁"><span>乐观锁 VS 悲观锁</span></a></h3><ul><li>悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</li><li>乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</li></ul><p>根据从上面的概念描述我们可以发现：</p><ul><li><strong>悲观锁适合写操作多的场景</strong>，先加锁可以保证写操作时数据正确。</li><li><strong>乐观锁适合读操作多的场景</strong>，不加锁的特点能够使其读操作的性能大幅提升。</li></ul><h3 id="自旋锁-vs-适应性自旋锁" tabindex="-1"><a class="header-anchor" href="#自旋锁-vs-适应性自旋锁"><span>自旋锁 VS 适应性自旋锁</span></a></h3><ul><li>自旋锁：在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</li></ul><p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程</p><h3 id="无锁-vs-偏向锁-vs-轻量级锁-vs-重量级锁" tabindex="-1"><a class="header-anchor" href="#无锁-vs-偏向锁-vs-轻量级锁-vs-重量级锁"><span>无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</span></a></h3><p>偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/596546/1701845230310-5b22397a-78b1-4642-8322-616f1d790f68.png#averageHue=%23c8e7fc&amp;clientId=uf8f62781-375f-4&amp;from=paste&amp;height=264&amp;id=ub691bcfb&amp;originHeight=264&amp;originWidth=1544&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15475&amp;status=done&amp;style=none&amp;taskId=u8d8f8051-79b6-49ae-a6d4-6cb3a036ce8&amp;title=&amp;width=1544" alt="image.png" loading="lazy"></p><h3 id="公平锁-vs-非公平锁" tabindex="-1"><a class="header-anchor" href="#公平锁-vs-非公平锁"><span>公平锁 VS 非公平锁</span></a></h3><ul><li>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</li><li>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</li></ul><h3 id="可重入锁-vs-非可重入锁" tabindex="-1"><a class="header-anchor" href="#可重入锁-vs-非可重入锁"><span>可重入锁 VS 非可重入锁</span></a></h3><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p><h3 id="独享锁-排他锁-vs-共享锁" tabindex="-1"><a class="header-anchor" href="#独享锁-排他锁-vs-共享锁"><span>独享锁(排他锁) VS 共享锁</span></a></h3><ul><li><strong>独享锁也叫排他锁</strong>，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</li><li><strong>共享锁</strong>是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</li></ul><h3 id="final-详解" tabindex="-1"><a class="header-anchor" href="#final-详解"><span>final 详解</span></a></h3><h4 id="final基础使用" tabindex="-1"><a class="header-anchor" href="#final基础使用"><span>final基础使用</span></a></h4><h5 id="修饰类" tabindex="-1"><a class="header-anchor" href="#修饰类"><span>修饰类</span></a></h5><p>当某个类的整体定义为final时，就表明了你不能打算继承该类，而且也不允许别人这么做。即这个类是不能有子类的。<br> 注意：final类中的所有方法都隐式为final，因为无法覆盖他们，所以在final类中给任何方法添加final关键字是没有任何意义的。</p><h5 id="修饰方法" tabindex="-1"><a class="header-anchor" href="#修饰方法"><span>修饰方法</span></a></h5><ul><li>private 方法是隐式的final：Base和Son都有方法test(),但是这并不是一种覆盖，因为private所修饰的方法是隐式的final，也就是无法被继承，所以更不用说是覆盖了，在Son中的test()方法不过是属于Son的新成员罢了，Son进行向上转型得到father，但是father.test()是不可执行的，因为Base中的test方法是private的，无法被访问到。</li><li>final方法是可以被重载的</li></ul><h5 id="修饰参数" tabindex="-1"><a class="header-anchor" href="#修饰参数"><span>修饰参数</span></a></h5><h5 id="修饰变量" tabindex="-1"><a class="header-anchor" href="#修饰变量"><span>修饰变量</span></a></h5><h4 id="final域重排序规则" tabindex="-1"><a class="header-anchor" href="#final域重排序规则"><span>final域重排序规则</span></a></h4><h5 id="final域为基本类型" tabindex="-1"><a class="header-anchor" href="#final域为基本类型"><span>final域为基本类型</span></a></h5><h6 id="写final域重排序规则" tabindex="-1"><a class="header-anchor" href="#写final域重排序规则"><span>写final域重排序规则</span></a></h6><p>写final域的重排序规则禁止对final域的写重排序到构造函数之外，这个规则的实现主要包含了两个方面：</p><ul><li>JMM禁止编译器把final域的写重排序到构造函数之外；</li><li>编译器会在final域写之后，构造函数return之前，插入一个storestore屏障。这个屏障可以禁止处理器把final域的写重排序到构造函数之外。</li></ul><h6 id="读final域重排序规则" tabindex="-1"><a class="header-anchor" href="#读final域重排序规则"><span>读final域重排序规则</span></a></h6><p>在一个线程中，初次读对象引用和初次读该对象包含的final域，JMM会禁止这两个操作的重排序。(注意，这个规则仅仅是针对处理器)，处理器会在读final域操作的前面插入一个LoadLoad屏障。实际上，读对象的引用和读该对象的final域存在间接依赖性，一般处理器不会重排序这两个操作。但是有一些处理器会重排序，因此，这条禁止重排序规则就是针对这些处理器而设定的。</p><h5 id="final域为引用类型" tabindex="-1"><a class="header-anchor" href="#final域为引用类型"><span>final域为引用类型</span></a></h5><h6 id="对final修饰的对象的成员域写操作" tabindex="-1"><a class="header-anchor" href="#对final修饰的对象的成员域写操作"><span>对final修饰的对象的成员域写操作</span></a></h6><p>针对引用数据类型，final域写针对编译器和处理器重排序增加了这样的约束：在构造函数内对一个final修饰的对象的成员域的写入，与随后在构造函数之外把这个被构造的对象的引用赋给一个引用变量，这两个操作是不能被重排序的。注意这里的是“增加”也就说前面对final基本数据类型的重排序规则在这里还是使用。</p><h6 id="对final修饰的对象的成员域读操作" tabindex="-1"><a class="header-anchor" href="#对final修饰的对象的成员域读操作"><span>对final修饰的对象的成员域读操作</span></a></h6><p>MM可以确保线程C至少能看到写线程A对final引用的对象的成员域的写入，即能看下arrays[0] = 1，而写线程B对数组元素的写入可能看到可能看不到。JMM不保证线程B的写入对线程C可见，线程B和线程C之间存在数据竞争，此时的结果是不可预知的。如果可见的，可使用锁或者volatile。</p><h5 id="关于final重排序的总结" tabindex="-1"><a class="header-anchor" href="#关于final重排序的总结"><span>关于final重排序的总结</span></a></h5><p>按照final修饰的数据类型分类：</p><ul><li>基本数据类型: <ul><li>final域写：禁止final域写与构造方法重排序，即禁止final域写重排序到构造方法之外，从而保证该对象对所有线程可见时，该对象的final域全部已经初始化过。</li><li>final域读：禁止初次读对象的引用与读该对象包含的final域的重排序。</li></ul></li><li>引用数据类型： <ul><li>额外增加约束：禁止在构造函数对一个final修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序</li></ul></li></ul><h4 id="final的实现原理" tabindex="-1"><a class="header-anchor" href="#final的实现原理"><span>final的实现原理</span></a></h4><p>上面我们提到过，写final域会要求编译器在final域写之后，构造函数返回前插入一个StoreStore屏障。读final域的重排序规则会要求编译器在读final域的操作前插入一个LoadLoad屏障。<br> 很有意思的是，如果以X86处理为例，X86不会对写-写重排序，所以StoreStore屏障可以省略。由于不会对有间接依赖性的操作重排序，所以在X86处理器中，读final域需要的LoadLoad屏障也会被省略掉。也就是说，以X86为例的话，对final域的读/写的内存屏障都会被省略！具体是否插入还是得看是什么处理器</p><h3 id="volatile-详解" tabindex="-1"><a class="header-anchor" href="#volatile-详解"><span>volatile 详解</span></a></h3><h4 id="volatile的作用详解" tabindex="-1"><a class="header-anchor" href="#volatile的作用详解"><span>volatile的作用详解</span></a></h4><h5 id="防重排序" tabindex="-1"><a class="header-anchor" href="#防重排序"><span>防重排序</span></a></h5><p>实例化一个对象其实可以分为三个步骤：</p><ul><li>分配内存空间。</li><li>初始化对象。</li><li>将内存空间的地址赋值给对应的引用。</li></ul><p>但是由于操作系统可以对指令进行重排序，所以上面的过程也可能会变成如下过程：</p><ul><li>分配内存空间。</li><li>将内存空间的地址赋值给对应的引用。</li><li>初始化对象</li></ul><p>如果是这个流程，多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此，为了防止这个过程的重排序，我们需要将变量设置为volatile类型的变量。</p><h5 id="实现可见性" tabindex="-1"><a class="header-anchor" href="#实现可见性"><span>实现可见性</span></a></h5><p>可见性问题主要指一个线程修改了共享变量值，而另一个线程却看不到。引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区——线程工作内存。volatile关键字能有效的解决这个问题。</p><h5 id="保证原子性-单次读-写" tabindex="-1"><a class="header-anchor" href="#保证原子性-单次读-写"><span>保证原子性:单次读/写</span></a></h5><p>volatile不能保证完全的原子性，只能保证单次的读/写操作具有原子性</p><h6 id="问题1-i-为什么不能保证原子性" tabindex="-1"><a class="header-anchor" href="#问题1-i-为什么不能保证原子性"><span>问题1： i++为什么不能保证原子性?</span></a></h6><p>i++其实是一个复合操作，包括三步骤：</p><ul><li>读取i的值。</li><li>对i加1。</li><li>将i的值写回内存。 volatile是无法保证这三个操作是具有原子性的，我们可以通过AtomicInteger或者Synchronized来保证+1操作的原子性。 注：上面几段代码中多处执行了Thread.sleep()方法，目的是为了增加并发问题的产生几率，无其他作用。</li></ul><h6 id="问题2-共享的long和double变量的为什么要用volatile" tabindex="-1"><a class="header-anchor" href="#问题2-共享的long和double变量的为什么要用volatile"><span>问题2： 共享的long和double变量的为什么要用volatile?</span></a></h6><p>因为long和double两种数据类型的操作可分为高32位和低32位两部分，因此普通的long或double类型读/写可能不是原子的。因此，鼓励大家将共享的long和double变量设置为volatile类型，这样能保证任何情况下对long和double的单次读/写操作都具有原子性。</p><h4 id="volatile-的实现原理" tabindex="-1"><a class="header-anchor" href="#volatile-的实现原理"><span>volatile 的实现原理</span></a></h4><h5 id="volatile-可见性实现" tabindex="-1"><a class="header-anchor" href="#volatile-可见性实现"><span>volatile 可见性实现</span></a></h5><p>volatile 变量的内存可见性是基于内存屏障(Memory Barrier)实现:</p><ul><li>内存屏障，又称内存栅栏，是一个 CPU 指令。</li><li>在程序运行时，为了提高执行性能，编译器和处理器会对指令进行重排序，JMM 为了保证在不同的编译器和 CPU 上有相同的结果，通过插入特定类型的内存屏障来禁止+ 特定类型的编译器重排序和处理器重排序，插入一条内存屏障会告诉编译器和 CPU：不管什么指令都不能和这条 Memory Barrier 指令重排序。</li></ul><h5 id="volatile-有序性实现" tabindex="-1"><a class="header-anchor" href="#volatile-有序性实现"><span>volatile 有序性实现</span></a></h5><h6 id="happens-before-规则中有一条是-volatile-变量规则-对一个-volatile-域的写-happens-before-于任意后续对这个-volatile-域的读。" tabindex="-1"><a class="header-anchor" href="#happens-before-规则中有一条是-volatile-变量规则-对一个-volatile-域的写-happens-before-于任意后续对这个-volatile-域的读。"><span>happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</span></a></h6><h6 id="volatile-禁止重排序" tabindex="-1"><a class="header-anchor" href="#volatile-禁止重排序"><span>volatile 禁止重排序</span></a></h6><p>为了性能优化，JMM 在不改变正确语义的前提下，会允许编译器和处理器对指令序列进行重排序。JMM 提供了内存屏障阻止这种重排序。<br> Java 编译器会在生成指令系列时在适当的位置会插入内存屏障指令来禁止特定类型的处理器重排序。<br> JMM 会针对编译器制定 volatile 重排序规则表。<br> &quot; NO &quot; 表示禁止重排序。<br> 为了实现 volatile 内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。<br> 对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM 采取了保守的策略。</p><ul><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li></ul><p>volatile 写是在前面和后面分别插入内存屏障，而 volatile 读操作是在后面插入两个内存屏障。</p><table><thead><tr><th>内存屏障</th><th>说明</th></tr></thead><tbody><tr><td>StoreStore 屏障</td><td>禁止上面的普通写和下面的 volatile 写重排序。</td></tr><tr><td>StoreLoad 屏障</td><td>防止上面的 volatile 写与下面可能有的 volatile 读/写重排序。</td></tr><tr><td>LoadLoad 屏障</td><td>禁止下面所有的普通读操作和上面的 volatile 读重排序。</td></tr><tr><td>LoadStore 屏障</td><td>禁止下面所有的普通写操作和上面的 volatile 读重排序。</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2023/png/596546/1701848771460-8a0615f4-cc80-49f8-8c8f-c2fce8989cdc.png#averageHue=%23f8f8f8&amp;clientId=uf8f62781-375f-4&amp;from=paste&amp;height=461&amp;id=u1d96049e&amp;originHeight=461&amp;originWidth=747&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63220&amp;status=done&amp;style=none&amp;taskId=u115840d8-e970-4427-8b3a-4eff7d5f225&amp;title=&amp;width=747" alt="image.png" loading="lazy"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/596546/1701848776337-3ab657de-adcf-4436-ade6-9bd64d181407.png#averageHue=%23f8f8f8&amp;clientId=uf8f62781-375f-4&amp;from=paste&amp;height=459&amp;id=u001bd37f&amp;originHeight=459&amp;originWidth=801&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69061&amp;status=done&amp;style=none&amp;taskId=uac869fb0-1b45-446c-b05f-0126a489eb4&amp;title=&amp;width=801" alt="image.png" loading="lazy"></p><h3 id="synchronized-详解" tabindex="-1"><a class="header-anchor" href="#synchronized-详解"><span>synchronized 详解</span></a></h3><h1 id="java-进阶" tabindex="-1"><a class="header-anchor" href="#java-进阶"><span>Java 进阶</span></a></h1><h2 id="juc" tabindex="-1"><a class="header-anchor" href="#juc"><span>JUC</span></a></h2><h3 id="juc-原子类" tabindex="-1"><a class="header-anchor" href="#juc-原子类"><span>JUC 原子类</span></a></h3><h3 id="juc-锁" tabindex="-1"><a class="header-anchor" href="#juc-锁"><span>JUC 锁</span></a></h3><h3 id="juc-集合" tabindex="-1"><a class="header-anchor" href="#juc-集合"><span>JUC 集合</span></a></h3><h3 id="juc-线程池" tabindex="-1"><a class="header-anchor" href="#juc-线程池"><span>JUC 线程池</span></a></h3><h3 id="juc-工具类" tabindex="-1"><a class="header-anchor" href="#juc-工具类"><span>JUC 工具类</span></a></h3><h2 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal"><span>ThreadLocal</span></a></h2><h2 id="transmittable-thread-local" tabindex="-1"><a class="header-anchor" href="#transmittable-thread-local"><span>Transmittable-Thread-Local</span></a></h2>',194),r=[t];function h(s,d){return e(),i("div",null,r)}const c=a(n,[["render",h],["__file","并发.html.vue"]]),f=JSON.parse('{"path":"/java/%E5%B9%B6%E5%8F%91.html","title":"并发","lang":"zh-CN","frontmatter":{"title":"并发","date":"2024-02-18T00:00:00.000Z","description":"并发 并发基础 为什么需要多线程 CPU、内存、I/O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为: CPU 增加了缓存，以均衡与内存的速度差异；// 导致 可见性问题 操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/java/%E5%B9%B6%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"并发"}],["meta",{"property":"og:description","content":"并发 并发基础 为什么需要多线程 CPU、内存、I/O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为: CPU 增加了缓存，以均衡与内存的速度差异；// 导致 可见性问题 操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.nlark.com/yuque/0/2023/jpeg/596546/1701843820446-ea034d0d-9437-4d56-b7b9-b38302f987dc.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T10:26:17.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:published_time","content":"2024-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T10:26:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发\\",\\"image\\":[\\"https://cdn.nlark.com/yuque/0/2023/jpeg/596546/1701843820446-ea034d0d-9437-4d56-b7b9-b38302f987dc.jpeg\\",\\"https://cdn.nlark.com/yuque/0/2023/png/596546/1701831222920-84879a02-f44d-4a38-b3af-2bdfdb859082.png#averageHue=%23efeeed&clientId=ucb0f80a1-4957-4&from=paste&height=76&id=uc5b5c2ff&originHeight=76&originWidth=529&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4762&status=done&style=none&taskId=u4ea1efd5-ce8c-4f07-b45a-3829875a38b&title=&width=529\\",\\"https://cdn.nlark.com/yuque/0/2023/png/596546/1701843201618-ef907aed-6019-4414-ba09-f6ade66cb3f8.png#averageHue=%23fdfcfc&clientId=uf8f62781-375f-4&from=paste&height=492&id=uff6e9313&originHeight=492&originWidth=893&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39323&status=done&style=none&taskId=uf35e60da-266a-43be-beba-65cd04bba0a&title=&width=893\\",\\"https://cdn.nlark.com/yuque/0/2023/png/596546/1701845230310-5b22397a-78b1-4642-8322-616f1d790f68.png#averageHue=%23c8e7fc&clientId=uf8f62781-375f-4&from=paste&height=264&id=ub691bcfb&originHeight=264&originWidth=1544&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15475&status=done&style=none&taskId=u8d8f8051-79b6-49ae-a6d4-6cb3a036ce8&title=&width=1544\\",\\"https://cdn.nlark.com/yuque/0/2023/png/596546/1701848771460-8a0615f4-cc80-49f8-8c8f-c2fce8989cdc.png#averageHue=%23f8f8f8&clientId=uf8f62781-375f-4&from=paste&height=461&id=u1d96049e&originHeight=461&originWidth=747&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63220&status=done&style=none&taskId=u115840d8-e970-4427-8b3a-4eff7d5f225&title=&width=747\\",\\"https://cdn.nlark.com/yuque/0/2023/png/596546/1701848776337-3ab657de-adcf-4436-ade6-9bd64d181407.png#averageHue=%23f8f8f8&clientId=uf8f62781-375f-4&from=paste&height=459&id=u001bd37f&originHeight=459&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69061&status=done&style=none&taskId=uac869fb0-1b45-446c-b05f-0126a489eb4&title=&width=801\\"],\\"datePublished\\":\\"2024-02-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T10:26:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"为什么需要多线程","slug":"为什么需要多线程","link":"#为什么需要多线程","children":[]},{"level":2,"title":"为什么会出现并发问题","slug":"为什么会出现并发问题","link":"#为什么会出现并发问题","children":[{"level":3,"title":"可见性: CPU缓存引起","slug":"可见性-cpu缓存引起","link":"#可见性-cpu缓存引起","children":[]},{"level":3,"title":"原子性: 分时复用引起","slug":"原子性-分时复用引起","link":"#原子性-分时复用引起","children":[]},{"level":3,"title":"有序性: 重排序引起","slug":"有序性-重排序引起","link":"#有序性-重排序引起","children":[]}]},{"level":2,"title":"JAVA是怎么解决并发问题的","slug":"java是怎么解决并发问题的","link":"#java是怎么解决并发问题的","children":[{"level":3,"title":"volatile","slug":"volatile","link":"#volatile","children":[]},{"level":3,"title":"synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":3,"title":"final","slug":"final","link":"#final","children":[]},{"level":3,"title":"Happens-Before","slug":"happens-before","link":"#happens-before","children":[]},{"level":3,"title":"原子性","slug":"原子性","link":"#原子性","children":[]},{"level":3,"title":"可见性","slug":"可见性","link":"#可见性","children":[]},{"level":3,"title":"有序性","slug":"有序性","link":"#有序性","children":[]}]},{"level":2,"title":"线程安全分类","slug":"线程安全分类","link":"#线程安全分类","children":[{"level":3,"title":"不可变","slug":"不可变","link":"#不可变","children":[]},{"level":3,"title":"绝对线程安全","slug":"绝对线程安全","link":"#绝对线程安全","children":[]},{"level":3,"title":"相对线程安全","slug":"相对线程安全","link":"#相对线程安全","children":[]},{"level":3,"title":"线程兼容","slug":"线程兼容","link":"#线程兼容","children":[]},{"level":3,"title":"线程对立","slug":"线程对立","link":"#线程对立","children":[]}]},{"level":2,"title":"线程安全的实现","slug":"线程安全的实现","link":"#线程安全的实现","children":[{"level":3,"title":"互斥同步","slug":"互斥同步","link":"#互斥同步","children":[]},{"level":3,"title":"非阻塞同步","slug":"非阻塞同步","link":"#非阻塞同步","children":[]},{"level":3,"title":"无同步方案","slug":"无同步方案","link":"#无同步方案","children":[]}]},{"level":2,"title":"线程状态","slug":"线程状态","link":"#线程状态","children":[{"level":3,"title":"新建(New)","slug":"新建-new","link":"#新建-new","children":[]},{"level":3,"title":"可运行(Runnable)","slug":"可运行-runnable","link":"#可运行-runnable","children":[]},{"level":3,"title":"阻塞(Blocking)","slug":"阻塞-blocking","link":"#阻塞-blocking","children":[]},{"level":3,"title":"无限期等待(Waiting)","slug":"无限期等待-waiting","link":"#无限期等待-waiting","children":[]},{"level":3,"title":"限期等待(Timed Waiting)","slug":"限期等待-timed-waiting","link":"#限期等待-timed-waiting","children":[]},{"level":3,"title":"死亡(Terminated)","slug":"死亡-terminated","link":"#死亡-terminated","children":[]}]},{"level":2,"title":"线程使用方式","slug":"线程使用方式","link":"#线程使用方式","children":[{"level":3,"title":"实现接口 VS 继承 Thread","slug":"实现接口-vs-继承-thread","link":"#实现接口-vs-继承-thread","children":[]}]},{"level":2,"title":"基础线程机制","slug":"基础线程机制","link":"#基础线程机制","children":[{"level":3,"title":"Executor","slug":"executor","link":"#executor","children":[]},{"level":3,"title":"Daemon","slug":"daemon","link":"#daemon","children":[]},{"level":3,"title":"sleep()","slug":"sleep","link":"#sleep","children":[]},{"level":3,"title":"yield()","slug":"yield","link":"#yield","children":[]}]},{"level":2,"title":"线程中断","slug":"线程中断","link":"#线程中断","children":[{"level":3,"title":"InterruptedException","slug":"interruptedexception","link":"#interruptedexception","children":[]},{"level":3,"title":"interrupted()","slug":"interrupted","link":"#interrupted","children":[]},{"level":3,"title":"Executor 的中断操作","slug":"executor-的中断操作","link":"#executor-的中断操作","children":[]}]},{"level":2,"title":"线程互斥同步","slug":"线程互斥同步","link":"#线程互斥同步","children":[]},{"level":2,"title":"线程间的协作","slug":"线程间的协作","link":"#线程间的协作","children":[{"level":3,"title":"join()","slug":"join","link":"#join","children":[]},{"level":3,"title":"wait() notify() notifyAll()","slug":"wait-notify-notifyall","link":"#wait-notify-notifyall","children":[]},{"level":3,"title":"wait() 和 sleep() 的区别","slug":"wait-和-sleep-的区别","link":"#wait-和-sleep-的区别","children":[]},{"level":3,"title":"await() signal() signalAll()","slug":"await-signal-signalall","link":"#await-signal-signalall","children":[]}]},{"level":2,"title":"Java 锁","slug":"java-锁","link":"#java-锁","children":[{"level":3,"title":"乐观锁 VS 悲观锁","slug":"乐观锁-vs-悲观锁","link":"#乐观锁-vs-悲观锁","children":[]},{"level":3,"title":"自旋锁 VS 适应性自旋锁","slug":"自旋锁-vs-适应性自旋锁","link":"#自旋锁-vs-适应性自旋锁","children":[]},{"level":3,"title":"无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁","slug":"无锁-vs-偏向锁-vs-轻量级锁-vs-重量级锁","link":"#无锁-vs-偏向锁-vs-轻量级锁-vs-重量级锁","children":[]},{"level":3,"title":"公平锁 VS 非公平锁","slug":"公平锁-vs-非公平锁","link":"#公平锁-vs-非公平锁","children":[]},{"level":3,"title":"可重入锁 VS 非可重入锁","slug":"可重入锁-vs-非可重入锁","link":"#可重入锁-vs-非可重入锁","children":[]},{"level":3,"title":"独享锁(排他锁) VS 共享锁","slug":"独享锁-排他锁-vs-共享锁","link":"#独享锁-排他锁-vs-共享锁","children":[]},{"level":3,"title":"final 详解","slug":"final-详解","link":"#final-详解","children":[]},{"level":3,"title":"volatile 详解","slug":"volatile-详解","link":"#volatile-详解","children":[]},{"level":3,"title":"synchronized 详解","slug":"synchronized-详解","link":"#synchronized-详解","children":[]}]},{"level":2,"title":"JUC","slug":"juc","link":"#juc","children":[{"level":3,"title":"JUC 原子类","slug":"juc-原子类","link":"#juc-原子类","children":[]},{"level":3,"title":"JUC 锁","slug":"juc-锁","link":"#juc-锁","children":[]},{"level":3,"title":"JUC 集合","slug":"juc-集合","link":"#juc-集合","children":[]},{"level":3,"title":"JUC 线程池","slug":"juc-线程池","link":"#juc-线程池","children":[]},{"level":3,"title":"JUC 工具类","slug":"juc-工具类","link":"#juc-工具类","children":[]}]},{"level":2,"title":"ThreadLocal","slug":"threadlocal","link":"#threadlocal","children":[]},{"level":2,"title":"Transmittable-Thread-Local","slug":"transmittable-thread-local","link":"#transmittable-thread-local","children":[]}],"git":{"createdTime":1713090377000,"updatedTime":1713090377000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":29.68,"words":8905},"filePathRelative":"java/并发.md","localizedDate":"2024年2月18日","excerpt":"\\n<figure><img src=\\"https://cdn.nlark.com/yuque/0/2023/jpeg/596546/1701843820446-ea034d0d-9437-4d56-b7b9-b38302f987dc.jpeg\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h1>并发基础</h1>\\n<h2>为什么需要多线程</h2>\\n<p>CPU、内存、I/O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为:</p>","autoDesc":true}');export{c as comp,f as data};
