import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as i,a as e}from"./app-SYcRbavr.js";const n={},t=e('<h2 id="_1-java-语言有哪些特点" tabindex="-1"><a class="header-anchor" href="#_1-java-语言有哪些特点"><span>1. Java 语言有哪些特点</span></a></h2><ol><li>简单易学、有丰富的类库</li><li>面向对象（Java 最重要的特性，让程序耦合度更低，内聚性更高）</li><li>与平台无关性（JVM 是 Java 跨平台的根本）</li><li>可靠安全</li><li>支持多线程</li></ol><h2 id="_2-面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#_2-面向对象和面向过程的区别"><span>2. 面向对象和面向过程的区别</span></a></h2><ul><li>面向过程：是分析解决问题的步骤，然后用按说把这些步骤一步一步的实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发</li><li>面向对象：是吧构成问题的事务分解成对象，而建立对象的目的也不完全是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。但是性能上来说，比面向过程要低。</li></ul><h2 id="_3-八种基本数据类型的大小、以及他们的封装类" tabindex="-1"><a class="header-anchor" href="#_3-八种基本数据类型的大小、以及他们的封装类"><span>3. 八种基本数据类型的大小、以及他们的封装类</span></a></h2><ul><li>byte 1 字节 默认值 0 封装类 Byte</li><li>short 2 字节 默认值 0 封装类型 Short</li><li>char 2 字节 默认值 null（\\u000） 封装类型 Character</li><li>int 4 字节 默认值 0 封装类型 Integer</li><li>float 4 字节 默认值 0.0f 封装类型 Float</li><li>long 8 字节 默认值 0L 封装类型 Long</li><li>double 8 字节 默认值 0.0d 封装类型 Double</li><li>boolean 默认值 false 封装类型 Boolean <ul><li>JVM 虚拟机中没有提供 boolean 值专用的字节码指令，编译后是用 int 数据类型代替的，而 boolean 数组则会被编译成 byte<br> 数组。所以 boolean 单独使用时是 4 个字节，数组中是 1 个字节。</li></ul></li><li>注意： 除了八种基础类型外都是封装类型</li></ul><h2 id="_4-instanceof" tabindex="-1"><a class="header-anchor" href="#_4-instanceof"><span>4. instanceof</span></a></h2><ul><li>双目运算符，obj instanceof Class，判断 obj 是否是 Class （或其子类）的对象，若是返回 true</li><li>注意： 编译器会检查 obj 是否能够转换为右面的 class 类型，若是不能确定则看运行时，obj 不可使基础类型</li></ul><h2 id="_5-自动装箱和拆箱" tabindex="-1"><a class="header-anchor" href="#_5-自动装箱和拆箱"><span>5. 自动装箱和拆箱</span></a></h2><ul><li>装箱：就是自动把基础类型自动转换为封装类型</li><li>拆箱：就是自动把封装类型转化为基础类型</li><li>注意： Integer 内部存在存在有缓存，缓存的数据大小为[-128,127]</li></ul><h2 id="_6-重载和重写" tabindex="-1"><a class="header-anchor" href="#_6-重载和重写"><span>6. 重载和重写</span></a></h2><ul><li>重写： 子类把父类中的方法进行重写，要求方法名、参数列表、返回类型都相同，访问修饰权限不�����小于父类</li><li>重载：方法名称一致，参数列表不一致，返回类型无要求</li></ul><h2 id="_7-和-equals" tabindex="-1"><a class="header-anchor" href="#_7-和-equals"><span>7. == 和 equals</span></a></h2><ul><li>== 比较的地址，用于比较是否是同一个对象</li><li>equals 比较的是地址中的数据是否相等</li></ul><h2 id="_8-hashcode-作用" tabindex="-1"><a class="header-anchor" href="#_8-hashcode-作用"><span>8. hashCode 作用</span></a></h2><ul><li>hashCode：返回的是对象根据内存地址算出的一个值，提升直接通过 equals 进行判断数据是否一致的效率</li><li>在集合中会使用到对象的 hashCode，以此来提升性能</li></ul><h2 id="_9-string、stringbuffer、stringbuilder-区别" tabindex="-1"><a class="header-anchor" href="#_9-string、stringbuffer、stringbuilder-区别"><span>9. String、StringBuffer、StringBuilder 区别</span></a></h2><ul><li>String：内部是 final 修饰的字符数组，当 String 进行拼接时相当于新建字符数组进行替换，效率较低</li><li>StringBuffer、StringBuilder： 内部都是可变数组，进行频繁的字符串操作性能较高</li><li>StringBuffer： 对方法添加了同步锁或者调用的方法添加了同步锁，所以线程安全的</li><li>StringBuilder：线程不安全</li></ul><h2 id="_10-arraylist-和-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#_10-arraylist-和-linkedlist-的区别"><span>10. ArrayList 和 LinkedList 的区别</span></a></h2><ul><li>ArrayList： 内部基于数组进行存储的，所以通过索引查询的效率是 O(1)，删除数据是开销较大，需要进行数组的处理。</li><li>LinkedList： 内部是基于链表进行存储的，所以查询的效率较低，但是删除的效率较高。</li></ul><h2 id="_11-hashmap-和-hashtable-的区别" tabindex="-1"><a class="header-anchor" href="#_11-hashmap-和-hashtable-的区别"><span>11. HashMap 和 HashTable 的区别</span></a></h2><ul><li>HashMap <ul><li>继承自 AbstractMap 类，实现了 Map、Cloneable、Serializable 接口</li><li>kv 都支持 null，但实际 key 为 null 只会存在一个</li><li>线程不安全</li></ul></li><li>HashTable <ul><li>继承自 Dictionary 类，实现了 Map、Cloneable、Serializable 接口</li><li>kv 都不能为 null</li><li>线程安全</li></ul></li></ul><h2 id="_12-collection-包和-collections-包的区别" tabindex="-1"><a class="header-anchor" href="#_12-collection-包和-collections-包的区别"><span>12. Collection 包和 Collections 包的区别</span></a></h2><ul><li>Collection：是集合的上级接口包</li><li>Collections： 是集合的工具包</li></ul><h2 id="_13-java-的四种引用" tabindex="-1"><a class="header-anchor" href="#_13-java-的四种引用"><span>13. Java 的四种引用</span></a></h2><ol><li>强引用 <ul><li>String s = new String(&quot;1);</li></ul></li><li>软引用 <ul><li>SoftReference wrf = new SoftReference(new String(&quot;1&quot;)); new String 是软引用</li></ul></li><li>弱引用 <ul><li>WeakReference wrf = new WeakReference(str): WeakReference 的 key 是弱引用</li></ul></li><li>虚引用 <ul><li>PhantomReference prf = new PhantomReference(new String(&quot;1&quot;),new ReferenceQueue&lt;&gt;())</li></ul></li></ol><h2 id="_14-泛型常用特点" tabindex="-1"><a class="header-anchor" href="#_14-泛型常用特点"><span>14.泛型常用特点</span></a></h2><ul><li>不必因为类型不一致而创建不同类</li></ul><h2 id="_15-java-创建对象的方式" tabindex="-1"><a class="header-anchor" href="#_15-java-创建对象的方式"><span>15. Java 创建对象的方式</span></a></h2><ol><li>new 创建对象</li><li>反射 newInstance</li><li>clone 克隆</li><li>通过序列化</li></ol><h2 id="_16-有没有可能两个对象不等-但是-hashcode-相等" tabindex="-1"><a class="header-anchor" href="#_16-有没有可能两个对象不等-但是-hashcode-相等"><span>16. 有没有可能两个对象不等，但是 hashCode 相等？</span></a></h2><ul><li>可能得，会存在哈希冲突</li><li>解决方法 <ul><li>拉链法：例如 hashMap，若 hashCode 一致，则通过链表进行链接，获取的时候先通过 hashCode 查找，若存在多个则通过 equals 比较</li><li>开放定址法：一旦发生冲突，就去寻找下一个散列，只要散列足够大，空的散列地��总能找到，并记录存入</li><li>再哈希： 又叫双哈希，当第一个 哈希函数结果冲突就在用第二个、第三个，直到无冲突</li></ul></li></ul><h2 id="_17-深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#_17-深拷贝和浅拷贝"><span>17. 深拷贝和浅拷贝</span></a></h2><ul><li>浅拷贝：只复制当前对象，当前对象的属性还是引用之前对象的值</li><li>深拷贝：不仅仅复制当前对象，当前对象的属性也进行复制</li></ul><h2 id="_18-final-有哪些用法" tabindex="-1"><a class="header-anchor" href="#_18-final-有哪些用法"><span>18. final 有哪些用法</span></a></h2><ol><li>修饰的类不可被继承</li><li>被修饰的方法不可被重写</li><li>被修饰的变量不可被变更，但若是封装对象这可以改变引用地址内的内容</li><li>被修饰的方法 JVM 会尝试将其内联，以提高效率</li><li>被修饰的常量，在编译阶段会存入常量池中</li></ol><ul><li>遵守两个重排序规则 <ol><li>在构造函数内对一个 final 域的写入，与随后把这个被构造对象的引用赋值给一个变量，这两个操作之间不能重排序</li><li>初次读一个包含 final 域的对象的引用，与随后初次读这个 final 域，这两个操作之间不能重排序。</li><li>对于 final 域，编译器会在写入时插入一个 StoreStore 屏障，当读取 final 域时会插入 LoadLoad 屏障，这些屏障可以防止编译器和处理器在处理<br> final 域时进行过度的指令重排序。</li></ol></li><li>happens-before 规则 <ul><li>单一线程原则：在一个线程内，在程序前面的操作先行发生于后面的操作。</li><li>管程锁定规则：一个 unlock 操作先行发生于后面对同一个锁的 lock 操作。</li><li>volatile 变量规则：对一个 volatile 变量的写操作先行发生于后面对这个变量的读操作。</li><li>线程启动规则：Thread 对象的 start() 方法调用先行发生于此线程的每一个动作。</li><li>线程加入规则：Thread 对象的结束先行发生于 join() 方法返回</li><li>线程中断规则：对线程 interrupt() 方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 interrupted()<br> 方法检测到是否有中断发生。</li><li>对象终结规则：一个对象的初始化完成(构造函数执行结束)先行发生于它的 finalize() 方法的开始。</li><li>传递性：如果操作 A 先行发生于操作 B，操作 B 先行发生于操作 C，那么操作 A 先行发生于操作 C</li></ul></li></ul><h2 id="_19-static-的用法" tabindex="-1"><a class="header-anchor" href="#_19-static-的用法"><span>19.static 的用法</span></a></h2><ol><li>静态常量</li><li>静态方法</li><li>静态代码快</li><li>import staic 静态导包</li></ol><h2 id="_20-3-0-1-0-3-返回值是什么" tabindex="-1"><a class="header-anchor" href="#_20-3-0-1-0-3-返回值是什么"><span>20. 3*0.1 == 0.3 返回值是什么？</span></a></h2><ul><li>false，因为浮点数不能完全的精确的表示出来</li></ul><h2 id="_21-a-a-b-和-a-b-有什么区别" tabindex="-1"><a class="header-anchor" href="#_21-a-a-b-和-a-b-有什么区别"><span>21. a=a+b 和 a+=b 有什么区别</span></a></h2><ul><li>+= 会隐式自动转换</li><li>byte a = 127;byte b = 127;b= a+b; 会报错，类型转换为 intb+=a;不会报错</li></ul><h2 id="_22-try-catch-finally-try-里面有-return-finally-还会执行吗" tabindex="-1"><a class="header-anchor" href="#_22-try-catch-finally-try-里面有-return-finally-还会执行吗"><span>22. try catch finally,try 里面有 return，finally 还会执行吗？</span></a></h2><ul><li>会，在 return 前会执行 finally，如果 finally 有 return 则会直接 return</li></ul><h2 id="_23-exception-和-error-包结构" tabindex="-1"><a class="header-anchor" href="#_23-exception-和-error-包结构"><span>23. Exception 和 Error 包结构</span></a></h2><ul><li>可以抛出的异常有三种 <ul><li>RuntimeException：运行时异常</li><li>CheckException: 检查时异常</li><li>Error：错误</li></ul></li></ul><h2 id="_24-oom-你遇到过哪些情况-sof-你遇到过那些情况" tabindex="-1"><a class="header-anchor" href="#_24-oom-你遇到过哪些情况-sof-你遇到过那些情况"><span>24. OOM 你遇到过哪些情况，SOF 你遇到过那些情况</span></a></h2><ul><li><p>OOM</p></li><li><p>SOF</p></li></ul><h2 id="_25-简述线程、程序、进程的基本概念。以及他们之间的关系" tabindex="-1"><a class="header-anchor" href="#_25-简述线程、程序、进程的基本概念。以及他们之间的关系"><span>25. 简述线程、程序、进程的基本概念。以及他们之间的关系</span></a></h2><ul><li>线程：线程和进程类似，但是线程是一个比进程更小的执行单位，一个进程在其执行的过程中可以产生多个小城。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程或是在各个线程之间切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量进程。</li><li>程序：含有指令和数据的文件，被存在磁盘或其他的数据存储设备中，也就是说程序是静态的代码</li><li>进程：程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序及时一个进程从创建、运行至消亡的过程，简单来说，一个进程就是一个执行的程序，它在计算机中一个指令接着一个指令的执行着没同事，每一个程序还占用某些系统资源如<br> CPU 时间、内存空间、文件、输入输出设备的使用权等等。</li></ul><h2 id="_26-某些字段不行序列化怎么办" tabindex="-1"><a class="header-anchor" href="#_26-某些字段不行序列化怎么办"><span>26. 某些字段不行序列化怎么办？</span></a></h2><ul><li>使用 transient 关键字，阻止实例化中那些用此关键字修饰的变量序列化，相反 transient 修饰的变量值在被反序列化是也不会被持久化和回复。transient<br> 只能修饰变量，不能修饰类和方法</li></ul><h2 id="_27-java-中的-io-流" tabindex="-1"><a class="header-anchor" href="#_27-java-中的-io-流"><span>27. java 中的 IO 流</span></a></h2><ul><li>按照流向 <ul><li>输入</li><li>输出</li></ul></li><li>按照操作单元 <ul><li>字节流</li><li>字符流</li></ul></li><li>按照角色 <ul><li>节点流</li><li>处理流</li></ul></li></ul><h2 id="_28-io-和-nio-的区别" tabindex="-1"><a class="header-anchor" href="#_28-io-和-nio-的区别"><span>28. IO 和 NIO 的区别</span></a></h2><ul><li>有相同的作用和目的，但是实现方式不同</li><li>NIO 效率要比 IO 高很多</li><li>JAVA API 中提供了两套的 NIO，一套是针对标准的输入输出，另一套就是网络编程 NIO</li></ul><h2 id="_29-java-反射的作用与原理" tabindex="-1"><a class="header-anchor" href="#_29-java-反射的作用与原理"><span>29. java 反射的作用与原理</span></a></h2><ul><li><p>定义</p><ul><li>反射机制是在运行时，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意个对象，都能够调用它的任意一个方法，只要给定类的名称，就可以通过反射机制获得类的所有信息</li></ul></li><li><p>哪里用到</p><ul><li>框架中经常使用</li><li>JDBC 的 Class.forName(&quot;com.mysql.jdbc.Driver.class&quot;);</li></ul></li><li><p>反射的实现方式</p><ul><li>获取 class 对象的四种方式 <ul><li>Class.forName(&quot;&quot;)</li><li>类名.class</li><li>对象.getClass()</li><li>基础类型的包装类，可以调用包装类的 Type 属性来获得改包装的 Class 对象</li></ul></li></ul></li><li><p>反射能够获取的信息</p><ul><li>class：表示正在运行对象的类</li><li>Field： 提供有关类和接口的属性信息，以及对他的动态访问权限</li><li>Constructor： 构造方法</li><li>Method： 方法</li></ul></li><li><p>优点</p><ul><li>能够运行时动态获取类的实例，提高灵活性</li><li>与动态编译结合</li></ul></li><li><p>缺点</p><ul><li>使用反射性能较低，需要解析字节码，将内存的对象进行解析。 <ul><li>通过 setAccessible(true) 关闭 JDK 的安全检查来提升反射速度</li><li>多次创建一个类的实例时，有缓存会更多</li><li>ReflectASM 工具类，通过字节码生成的方式加快反射速度</li></ul></li></ul></li><li><p>相对不安全，破换了封装性</p></li></ul><h2 id="_30-list、set、map-什么区别" tabindex="-1"><a class="header-anchor" href="#_30-list、set、map-什么区别"><span>30. List、Set、Map 什么区别</span></a></h2><ul><li>List：是单元素集合且有序可重复</li><li>Set：是单元素集合且无序不可重复</li><li>Map：键值对存储，key 不能重复，value 可以重复</li></ul><h2 id="_31-object-有哪些方法" tabindex="-1"><a class="header-anchor" href="#_31-object-有哪些方法"><span>31. Object 有哪些方法</span></a></h2><ul><li>clone：克隆方法，实现对象的浅复制，只有实现了 Cloneable 接口才可以调用该方法，否则抛出 CloneNotSupportedException<br> 异常，深度拷贝也需要实现 Cloneable，同时其成员变量为引用类型也要实现 Cloneable，然后重写 clone 方法</li><li>finalize： 和垃圾收集器有关系，判断一个对象是都可以被回收的最后一步就是判断是否重写了此方法</li><li>equals</li><li>hashCode</li><li>wait</li><li>notify</li><li>notifyAll</li></ul><h2 id="_32-arraylist-和-linkedlist" tabindex="-1"><a class="header-anchor" href="#_32-arraylist-和-linkedlist"><span>32. ArrayList 和 LinkedList</span></a></h2><h2 id="_33-存在数组了为什么还要-arraylist" tabindex="-1"><a class="header-anchor" href="#_33-存在数组了为什么还要-arraylist"><span>33. 存在数组了为什么还要 ArrayList</span></a></h2><ul><li>数组不可以自动扩容</li></ul><h2 id="_34-什么是-fail-fast" tabindex="-1"><a class="header-anchor" href="#_34-什么是-fail-fast"><span>34. 什么是 fail-fast</span></a></h2><ul><li>集合的一种错误机制，集合在操作的时候 modCount 会自增，在进行迭代其遍历时会缓存当前的<br> modCount，然后每次迭代都会进行比较，要是不一致则说明存在别的线程在操作，从而抛出 ConcurrentModificationException 异常</li></ul><h2 id="_35-hashtable-和-hashmap" tabindex="-1"><a class="header-anchor" href="#_35-hashtable-和-hashmap"><span>35. HashTable 和 HashMap</span></a></h2><h2 id="_36-hashmap-中的-key-可以使用任何类作为-key-吗" tabindex="-1"><a class="header-anchor" href="#_36-hashmap-中的-key-可以使用任何类作为-key-吗"><span>36. HashMap 中的 key 可以使用任何类作为 key 吗？</span></a></h2><ul><li>若类重写了 equals，它也应该重写 hashCode 方法</li><li>类的所有实例需要遵守 equals 和 hashCode 相关的规则</li><li>如果一个类没有使用 equals，你也不应该在 hashCode 中使用它</li></ul><h2 id="_37-hashmap-的长度为什么是-2-的-n-次方" tabindex="-1"><a class="header-anchor" href="#_37-hashmap-的长度为什么是-2-的-n-次方"><span>37. HashMap 的长度为什么是 2 的 n 次方</span></a></h2><h2 id="_38-hashmap-和-concurrenthashmap-的异同" tabindex="-1"><a class="header-anchor" href="#_38-hashmap-和-concurrenthashmap-的异同"><span>38. HashMap 和 ConcurrentHashMap 的异同？</span></a></h2><h2 id="_39-红黑树" tabindex="-1"><a class="header-anchor" href="#_39-红黑树"><span>39. 红黑树</span></a></h2><h2 id="_40-怎么处理异常" tabindex="-1"><a class="header-anchor" href="#_40-怎么处理异常"><span>40. 怎么处理异常</span></a></h2>',75),s=[t];function r(h,o){return a(),i("div",null,s)}const u=l(n,[["render",r],["__file","面试题.html.vue"]]),p=JSON.parse('{"path":"/java/%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Java 基础面试题","lang":"zh-CN","frontmatter":{"title":"Java 基础面试题","date":"2024-02-18T00:00:00.000Z","description":"1. Java 语言有哪些特点 简单易学、有丰富的类库 面向对象（Java 最重要的特性，让程序耦合度更低，内聚性更高） 与平台无关性（JVM 是 Java 跨平台的根本） 可靠安全 支持多线程 2. 面向对象和面向过程的区别 面向过程：是分析解决问题的步骤，然后用按说把这些步骤一步一步的实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/java/%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"Java 基础面试题"}],["meta",{"property":"og:description","content":"1. Java 语言有哪些特点 简单易学、有丰富的类库 面向对象（Java 最重要的特性，让程序耦合度更低，内聚性更高） 与平台无关性（JVM 是 Java 跨平台的根本） 可靠安全 支持多线程 2. 面向对象和面向过程的区别 面向过程：是分析解决问题的步骤，然后用按说把这些步骤一步一步的实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-14T10:26:17.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:published_time","content":"2024-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-14T10:26:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础面试题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-02-18T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-14T10:26:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. Java 语言有哪些特点","slug":"_1-java-语言有哪些特点","link":"#_1-java-语言有哪些特点","children":[]},{"level":2,"title":"2. 面向对象和面向过程的区别","slug":"_2-面向对象和面向过程的区别","link":"#_2-面向对象和面向过程的区别","children":[]},{"level":2,"title":"3. 八种基本数据类型的大小、以及他们的封装类","slug":"_3-八种基本数据类型的大小、以及他们的封装类","link":"#_3-八种基本数据类型的大小、以及他们的封装类","children":[]},{"level":2,"title":"4. instanceof","slug":"_4-instanceof","link":"#_4-instanceof","children":[]},{"level":2,"title":"5. 自动装箱和拆箱","slug":"_5-自动装箱和拆箱","link":"#_5-自动装箱和拆箱","children":[]},{"level":2,"title":"6. 重载和重写","slug":"_6-重载和重写","link":"#_6-重载和重写","children":[]},{"level":2,"title":"7. == 和 equals","slug":"_7-和-equals","link":"#_7-和-equals","children":[]},{"level":2,"title":"8. hashCode 作用","slug":"_8-hashcode-作用","link":"#_8-hashcode-作用","children":[]},{"level":2,"title":"9. String、StringBuffer、StringBuilder 区别","slug":"_9-string、stringbuffer、stringbuilder-区别","link":"#_9-string、stringbuffer、stringbuilder-区别","children":[]},{"level":2,"title":"10. ArrayList 和 LinkedList 的区别","slug":"_10-arraylist-和-linkedlist-的区别","link":"#_10-arraylist-和-linkedlist-的区别","children":[]},{"level":2,"title":"11. HashMap 和 HashTable 的区别","slug":"_11-hashmap-和-hashtable-的区别","link":"#_11-hashmap-和-hashtable-的区别","children":[]},{"level":2,"title":"12. Collection 包和 Collections 包的区别","slug":"_12-collection-包和-collections-包的区别","link":"#_12-collection-包和-collections-包的区别","children":[]},{"level":2,"title":"13. Java 的四种引用","slug":"_13-java-的四种引用","link":"#_13-java-的四种引用","children":[]},{"level":2,"title":"14.泛型常用特点","slug":"_14-泛型常用特点","link":"#_14-泛型常用特点","children":[]},{"level":2,"title":"15. Java 创建对象的方式","slug":"_15-java-创建对象的方式","link":"#_15-java-创建对象的方式","children":[]},{"level":2,"title":"16. 有没有可能两个对象不等，但是 hashCode 相等？","slug":"_16-有没有可能两个对象不等-但是-hashcode-相等","link":"#_16-有没有可能两个对象不等-但是-hashcode-相等","children":[]},{"level":2,"title":"17. 深拷贝和浅拷贝","slug":"_17-深拷贝和浅拷贝","link":"#_17-深拷贝和浅拷贝","children":[]},{"level":2,"title":"18. final 有哪些用法","slug":"_18-final-有哪些用法","link":"#_18-final-有哪些用法","children":[]},{"level":2,"title":"19.static 的用法","slug":"_19-static-的用法","link":"#_19-static-的用法","children":[]},{"level":2,"title":"20. 3*0.1 == 0.3 返回值是什么？","slug":"_20-3-0-1-0-3-返回值是什么","link":"#_20-3-0-1-0-3-返回值是什么","children":[]},{"level":2,"title":"21. a=a+b 和 a+=b 有什么区别","slug":"_21-a-a-b-和-a-b-有什么区别","link":"#_21-a-a-b-和-a-b-有什么区别","children":[]},{"level":2,"title":"22. try catch finally,try 里面有 return，finally 还会执行吗？","slug":"_22-try-catch-finally-try-里面有-return-finally-还会执行吗","link":"#_22-try-catch-finally-try-里面有-return-finally-还会执行吗","children":[]},{"level":2,"title":"23. Exception 和 Error 包结构","slug":"_23-exception-和-error-包结构","link":"#_23-exception-和-error-包结构","children":[]},{"level":2,"title":"24. OOM 你遇到过哪些情况，SOF 你遇到过那些情况","slug":"_24-oom-你遇到过哪些情况-sof-你遇到过那些情况","link":"#_24-oom-你遇到过哪些情况-sof-你遇到过那些情况","children":[]},{"level":2,"title":"25. 简述线程、程序、进程的基本概念。以及他们之间的关系","slug":"_25-简述线程、程序、进程的基本概念。以及他们之间的关系","link":"#_25-简述线程、程序、进程的基本概念。以及他们之间的关系","children":[]},{"level":2,"title":"26. 某些字段不行序列化怎么办？","slug":"_26-某些字段不行序列化怎么办","link":"#_26-某些字段不行序列化怎么办","children":[]},{"level":2,"title":"27. java 中的 IO 流","slug":"_27-java-中的-io-流","link":"#_27-java-中的-io-流","children":[]},{"level":2,"title":"28. IO 和 NIO 的区别","slug":"_28-io-和-nio-的区别","link":"#_28-io-和-nio-的区别","children":[]},{"level":2,"title":"29. java 反射的作用与原理","slug":"_29-java-反射的作用与原理","link":"#_29-java-反射的作用与原理","children":[]},{"level":2,"title":"30. List、Set、Map 什么区别","slug":"_30-list、set、map-什么区别","link":"#_30-list、set、map-什么区别","children":[]},{"level":2,"title":"31. Object 有哪些方法","slug":"_31-object-有哪些方法","link":"#_31-object-有哪些方法","children":[]},{"level":2,"title":"32. ArrayList 和 LinkedList","slug":"_32-arraylist-和-linkedlist","link":"#_32-arraylist-和-linkedlist","children":[]},{"level":2,"title":"33. 存在数组了为什么还要 ArrayList","slug":"_33-存在数组了为什么还要-arraylist","link":"#_33-存在数组了为什么还要-arraylist","children":[]},{"level":2,"title":"34. 什么是 fail-fast","slug":"_34-什么是-fail-fast","link":"#_34-什么是-fail-fast","children":[]},{"level":2,"title":"35. HashTable 和 HashMap","slug":"_35-hashtable-和-hashmap","link":"#_35-hashtable-和-hashmap","children":[]},{"level":2,"title":"36. HashMap 中的 key 可以使用任何类作为 key 吗？","slug":"_36-hashmap-中的-key-可以使用任何类作为-key-吗","link":"#_36-hashmap-中的-key-可以使用任何类作为-key-吗","children":[]},{"level":2,"title":"37. HashMap 的长度为什么是 2 的 n 次方","slug":"_37-hashmap-的长度为什么是-2-的-n-次方","link":"#_37-hashmap-的长度为什么是-2-的-n-次方","children":[]},{"level":2,"title":"38. HashMap 和 ConcurrentHashMap 的异同？","slug":"_38-hashmap-和-concurrenthashmap-的异同","link":"#_38-hashmap-和-concurrenthashmap-的异同","children":[]},{"level":2,"title":"39. 红黑树","slug":"_39-红黑树","link":"#_39-红黑树","children":[]},{"level":2,"title":"40. 怎么处理异常","slug":"_40-怎么处理异常","link":"#_40-怎么处理异常","children":[]}],"git":{"createdTime":1713090377000,"updatedTime":1713090377000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":11.07,"words":3322},"filePathRelative":"java/面试题.md","localizedDate":"2024年2月18日","excerpt":"<h2>1. Java 语言有哪些特点</h2>\\n<ol>\\n<li>简单易学、有丰富的类库</li>\\n<li>面向对象（Java 最重要的特性，让程序耦合度更低，内聚性更高）</li>\\n<li>与平台无关性（JVM 是 Java 跨平台的根本）</li>\\n<li>可靠安全</li>\\n<li>支持多线程</li>\\n</ol>\\n<h2>2. 面向对象和面向过程的区别</h2>\\n<ul>\\n<li>面向过程：是分析解决问题的步骤，然后用按说把这些步骤一步一步的实现，然后在使用的时候一一调用则可。性能较高，所以单片机、嵌入式开发等一般采用面向过程开发</li>\\n<li>面向对象：是吧构成问题的事务分解成对象，而建立对象的目的也不完全是为了完成一个个步骤，而是为了描述某个事物在解决整个问题的过程中所发生的行为。面向对象有封装、继承、多态的特性，所以易维护、易复用、易扩展。可以设计出低耦合的系统。但是性能上来说，比面向过程要低。</li>\\n</ul>","autoDesc":true}');export{u as comp,p as data};
