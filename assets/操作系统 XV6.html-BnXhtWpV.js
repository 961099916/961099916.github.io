import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as i,c as t,b as e}from"./app-hIa7hjUq.js";const n={},a=e('<h2 id="_1-介绍和举例" tabindex="-1"><a class="header-anchor" href="#_1-介绍和举例"><span>1. 介绍和举例</span></a></h2><h3 id="_1-1-课程内容简介" tabindex="-1"><a class="header-anchor" href="#_1-1-课程内容简介"><span>1.1 课程内容简介</span></a></h3><ul><li>课程内容简介 <ul><li>理解操作系统的设计和实现</li><li>2.获得实际动手经验</li></ul></li><li>操作系统的目标 <ul><li>抽象硬件</li><li>多个应用程序之间共用硬件资源</li><li>隔离性，不同的活动之间不能相互影响</li><li>共享性，不同活动之间要能数据共享</li><li>权限管理</li><li>可以通过硬件提高应用程序的高性能</li><li>支持大量的不同的应用程序</li></ul></li></ul><h3 id="_1-2-操作系统结构" tabindex="-1"><a class="header-anchor" href="#_1-2-操作系统结构"><span>1.2 操作系统结构</span></a></h3><ul><li>最下层 <ul><li>CPU、内存、磁盘、网卡等</li></ul></li><li>最上层 <ul><li>vi、cc、cli、shell</li></ul></li><li>中间层 <ul><li>fs（文件系统）、AccessControl（权限控制）等</li></ul></li></ul><h3 id="_1-3-挑战和快乐" tabindex="-1"><a class="header-anchor" href="#_1-3-挑战和快乐"><span>1.3 挑战和快乐</span></a></h3><ul><li>一些矛盾的要求 <ul><li>高效又要易用</li><li>强大的服务又要简单的接口</li><li>既要给应用程序尽可能多的灵活性，又要在某种程度上限制其灵活性</li><li>大量的特性和大量的服务，需要大量的思考</li><li>需要满足广泛的使用场景</li></ul></li></ul><h3 id="_1-4-课程资源" tabindex="-1"><a class="header-anchor" href="#_1-4-课程资源"><span>1.4 课程资源</span></a></h3><h3 id="_1-5-函数" tabindex="-1"><a class="header-anchor" href="#_1-5-函数"><span>1.5+ 函数</span></a></h3><ul><li>int read(int fd, char *buf, int n) <ul><li>将n 个字节读入buf；返回读取的字节数；如果文件结束，返回0</li></ul></li><li>int write(int fd, char *buf, int n) <ul><li>从buf 写n 个字节到文件描述符fd; 返回n</li></ul></li><li>int exit(int status) <ul><li>终止当前进程，并将状态报告给wait()函数。无返回</li></ul></li><li>int open(char *file, int flags) <ul><li>打开一个文件；flags表示read/write；返回一个fd（文件描述符）</li></ul></li><li>shell</li><li>int fork() <ul><li>创建一个进程，返回子进程的PID</li></ul></li><li>int exec(char _file, char _argv[]) <ul><li>加载一个文件并使用参数执行它; 只有在出错时才返回</li></ul></li><li>int wait(int *status) <ul><li>等待一个子进程退出; 将退出状态存入*status; 返回子进程PID。</li></ul></li><li>int kill(int pid) <ul><li>终止对应PID的进程，返回0，或返回-1表示错误</li></ul></li><li>int getpid() <ul><li>返回当前进程的PID</li></ul></li><li>int sleep(int n) <ul><li>暂停n个时钟节拍</li></ul></li><li>char *sbrk(int n) <ul><li>按n 字节增长进程的内存。返回新内存的开始</li></ul></li><li>int close(int fd) <ul><li>释放打开的文件fd</li></ul></li><li>int dup(int fd) <ul><li>返回一个新的文件描述符，指向与fd 相同的文件</li></ul></li><li>int pipe(int p[]) <ul><li>创建一个管道，把read/write文件描述符放在p[0]和p[1]中</li></ul></li><li>int chdir(char *dir) <ul><li>改变当前的工作目录</li></ul></li><li>int mkdir(char *dir) <ul><li>创建一个新目录</li></ul></li><li>int mknod(char *file, int, int) <ul><li>创建一个设备文件</li></ul></li><li>int fstat(int fd, struct stat *st) <ul><li>将打开文件fd的信息放入*st</li></ul></li><li>int stat(char _file, struct stat _st) <ul><li>将指定名称的文件信息放入*st</li></ul></li><li>int link(char _file1, char _file2) <ul><li>为文件file1创建另一个名称(file2)</li></ul></li><li>int unlink(char *file) <ul><li>删除一个文件</li></ul></li><li>注意 <ul><li>xv6系统调用（除非另外声明，这些系统调用返回0表示无误，返回-1表示出错）</li></ul></li><li>I/O redirect</li></ul><h2 id="_2-操作系统架构和系统调用" tabindex="-1"><a class="header-anchor" href="#_2-操作系统架构和系统调用"><span>2. 操作系统架构和系统调用</span></a></h2>',11),r=[a];function u(s,c){return i(),t("div",null,r)}const d=l(n,[["render",u],["__file","操作系统 XV6.html.vue"]]),p=JSON.parse('{"path":"/%E9%80%9A%E7%94%A8/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20XV6.html","title":"操作系统XV6","lang":"zh-CN","frontmatter":{"title":"操作系统XV6","order":4,"description":"1. 介绍和举例 1.1 课程内容简介 课程内容简介 理解操作系统的设计和实现 2.获得实际动手经验 操作系统的目标 抽象硬件 多个应用程序之间共用硬件资源 隔离性，不同的活动之间不能相互影响 共享性，不同活动之间要能数据共享 权限管理 可以通过硬件提高应用程序的高性能 支持大量的不同的应用程序 1.2 操作系统结构 最下层 CPU、内存、磁盘、网卡等...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/%E9%80%9A%E7%94%A8/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20XV6.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"操作系统XV6"}],["meta",{"property":"og:description","content":"1. 介绍和举例 1.1 课程内容简介 课程内容简介 理解操作系统的设计和实现 2.获得实际动手经验 操作系统的目标 抽象硬件 多个应用程序之间共用硬件资源 隔离性，不同的活动之间不能相互影响 共享性，不同活动之间要能数据共享 权限管理 可以通过硬件提高应用程序的高性能 支持大量的不同的应用程序 1.2 操作系统结构 最下层 CPU、内存、磁盘、网卡等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T16:16:31.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:modified_time","content":"2024-06-21T16:16:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"操作系统XV6\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-21T16:16:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"1. 介绍和举例","slug":"_1-介绍和举例","link":"#_1-介绍和举例","children":[{"level":3,"title":"1.1 课程内容简介","slug":"_1-1-课程内容简介","link":"#_1-1-课程内容简介","children":[]},{"level":3,"title":"1.2 操作系统结构","slug":"_1-2-操作系统结构","link":"#_1-2-操作系统结构","children":[]},{"level":3,"title":"1.3 挑战和快乐","slug":"_1-3-挑战和快乐","link":"#_1-3-挑战和快乐","children":[]},{"level":3,"title":"1.4 课程资源","slug":"_1-4-课程资源","link":"#_1-4-课程资源","children":[]},{"level":3,"title":"1.5+ 函数","slug":"_1-5-函数","link":"#_1-5-函数","children":[]}]},{"level":2,"title":"2. 操作系统架构和系统调用","slug":"_2-操作系统架构和系统调用","link":"#_2-操作系统架构和系统调用","children":[]}],"git":{"createdTime":1718452146000,"updatedTime":1718986591000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":2.44,"words":732},"filePathRelative":"通用/操作系统/操作系统 XV6.md","localizedDate":"2024年6月15日","excerpt":"<h2>1. 介绍和举例</h2>\\n<h3>1.1 课程内容简介</h3>\\n<ul>\\n<li>课程内容简介\\n<ul>\\n<li>理解操作系统的设计和实现</li>\\n<li>2.获得实际动手经验</li>\\n</ul>\\n</li>\\n<li>操作系统的目标\\n<ul>\\n<li>抽象硬件</li>\\n<li>多个应用程序之间共用硬件资源</li>\\n<li>隔离性，不同的活动之间不能相互影响</li>\\n<li>共享性，不同活动之间要能数据共享</li>\\n<li>权限管理</li>\\n<li>可以通过硬件提高应用程序的高性能</li>\\n<li>支持大量的不同的应用程序</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{d as comp,p as data};
