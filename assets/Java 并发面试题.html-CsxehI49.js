import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as l,e as i}from"./app-BoJ75mrp.js";const n={},o=i('<h1 id="java-并发面试题" tabindex="-1"><a class="header-anchor" href="#java-并发面试题"><span>Java 并发面试题</span></a></h1><h2 id="java中的volatile关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#java中的volatile关键字有什么作用"><span>Java中的volatile关键字有什么作用？</span></a></h2><p>volatile关键字在Java中的作用包括：</p><ol><li>保证可见性： 确保变量的修改对其他线程立即可见。</li><li>防止指令重排： 防止编译器对操作进行重排序，保证代码的执行顺序。</li><li>非原子性： volatile变量的单次读/写操作是原子的，但复合操作（如i++）不是原子的。</li></ol><h2 id="java中的synchronized关键字及其工作原理。" tabindex="-1"><a class="header-anchor" href="#java中的synchronized关键字及其工作原理。"><span>Java中的synchronized关键字及其工作原理。</span></a></h2><p>synchronized关键字在Java中的作用及其工作原理：</p><ol><li>互斥锁： synchronized提供了一种锁机制，能够确保同一时刻只有一个线程执行某段代码。</li><li>对象锁和类锁： 可以锁定对象实例（方法或代码块）或整个类（静态方法）。</li><li>内存可见性： 保证了锁内操作对其他线程的可见性。</li><li>锁升级： 在JVM中，synchronized可能经历偏向锁、轻量级锁和重量级锁的升级。</li></ol><h2 id="java中的cas操作是什么-它如何实现无锁编程" tabindex="-1"><a class="header-anchor" href="#java中的cas操作是什么-它如何实现无锁编程"><span>Java中的CAS操作是什么？它如何实现无锁编程？</span></a></h2><p>CAS（Compare-And-Swap）操作在Java中的含义及无锁编程实现：</p><ol><li>原子操作： CAS是一种基于比较和交换的原子操作，用于实现无锁编程。</li><li>实现方式： 通过循环比较当前值和预期值，如果相同则更新为新值。</li><li>无锁优势： 减少线程阻塞，提高系统吞吐量。</li><li>ABA问题： CAS可能面临ABA问题，可以通过版本号等机制解决。</li></ol><h2 id="讲述java中的lock接口及其与synchronized的区别。" tabindex="-1"><a class="header-anchor" href="#讲述java中的lock接口及其与synchronized的区别。"><span>讲述Java中的Lock接口及其与synchronized的区别。</span></a></h2><p>Java中的Lock接口及其与synchronized的区别：</p><ol><li>显式锁定： Lock是一个接口，提供了比synchronized更灵活的锁定机制。</li><li>可中断锁定： Lock允许尝试非阻塞地获取锁，或者在锁定期间响应中断。</li><li>公平性选择： Lock提供了选择公平锁或非公平锁的能力。</li><li>性能差异： 在不同情况下，Lock和synchronized的性能表现有所不同。</li></ol><h2 id="什么是线程池-在java中如何使用线程池" tabindex="-1"><a class="header-anchor" href="#什么是线程池-在java中如何使用线程池"><span>什么是线程池？在Java中如何使用线程池？</span></a></h2><p>线程池及其在Java中的使用：</p><ol><li>线程复用： 线程池是一种限制和管理线程数量的机制，可以复用线程。</li><li>减少开销： 减少创建和销毁线程的性能开销。</li><li>使用方式： 通过Executor框架中的Executors类创建，例如Executors.newFixedThreadPool()。</li><li>任务提交： 将实现了Runnable或Callable接口的任务提交给线程池执行。</li></ol><h2 id="java内存模型中的happens-before原则是什么" tabindex="-1"><a class="header-anchor" href="#java内存模型中的happens-before原则是什么"><span>Java内存模型中的happens-before原则是什么？</span></a></h2><p>Java内存模型中的happens-before原则：</p><ol><li>定义： 是一种保证内存可见性和有序性的规则。</li><li>作用： 确保在一个线程中的操作对另一个线程可见。</li><li>实例： 如对一个volatile变量的写操作，happens-before于随后对这个变量的读操作。</li></ol><h2 id="java中synchronized和reentrantlock有什么区别" tabindex="-1"><a class="header-anchor" href="#java中synchronized和reentrantlock有什么区别"><span>Java中synchronized和ReentrantLock有什么区别？</span></a></h2><p>Java中synchronized和ReentrantLock的区别主要体现在以下几个方面：</p><ol><li>锁的实现方式： synchronized是Java内置的关键字，JVM层面实现；ReentrantLock是Java类库中的一个API。</li><li>锁的公平性： synchronized不保证公平性；而ReentrantLock可以通过构造函数设置公平性。</li><li>锁的灵活性： ReentrantLock提供更灵活的锁操作，它支持中断锁的获取、超时获取锁等高级功能。</li><li>条件变量支持： ReentrantLock可以与Condition类配合，实现分组唤醒等复杂的线程协作。</li></ol><h2 id="java中countdownlatch和cyclicbarrier有什么区别" tabindex="-1"><a class="header-anchor" href="#java中countdownlatch和cyclicbarrier有什么区别"><span>Java中CountDownLatch和CyclicBarrier有什么区别？</span></a></h2><p>CountDownLatch和CyclicBarrier在Java中的区别包括：</p><ol><li>用途差异： CountDownLatch主要用于一个或多个线程等待其他线程完成操作；而CyclicBarrier主要用于多个线程间相互等待，直到所有线程都达到公共屏障点。</li><li>可重用性： CountDownLatch是一次性的，计数器达到零后不能重置；CyclicBarrier可以重置，因此可以重复使用。</li><li>方法差异： CountDownLatch主要用countDown()和await()方法；CyclicBarrier主要通过await()方法使线程在屏障处等待。</li></ol><h2 id="java程序中正确地停止一个线程" tabindex="-1"><a class="header-anchor" href="#java程序中正确地停止一个线程"><span>Java程序中正确地停止一个线程？</span></a></h2><p>在Java程序中正确停止一个线程的方法：</p><ol><li>使用中断： 调用线程的interrupt()方法来设置线程的中断状态；线程需要定期检查自身的中断状态，并相应地响应中断。</li><li>使用标志位： 设置一个需要线程检查的标志位，线程周期性地检查该标志，以决定是否停止运行。</li><li>避免使用stop()方法： 不建议使用Thread类的stop()方法来停止线程，因为它是不安全的。</li></ol><h2 id="java中线程池的作用是什么-它是如何提高效率的" tabindex="-1"><a class="header-anchor" href="#java中线程池的作用是什么-它是如何提高效率的"><span>Java中线程池的作用是什么？它是如何提高效率的？</span></a></h2><p>线程池在Java中的作用及其效率提升机制：</p><ol><li>资源重用： 线程池通过重复使用预创建的线程来减少线程创建和销毁的开销。</li><li>控制资源消耗： 线程池可以限制系统中并发执行线程的数量，有效控制系统资源的消耗。</li><li>提高响应速度： 预创建的线程可以立即执行任务，无需等待线程创建。</li><li>提供更多高级功能： 线程池还提供任务排队、定时任务执行、线程池监控等高级功能。</li></ol><h2 id="countdownlatch在java中的用途和解释" tabindex="-1"><a class="header-anchor" href="#countdownlatch在java中的用途和解释"><span>CountDownLatch在Java中的用途和解释：</span></a></h2><ol><li>同步辅助类： CountDownLatch是一个同步辅助类，用于在完成一组正在其他线程中执行的操作之前，允许一个或多个线程等待。</li><li>计数器： 它维护一个计数器，初始化时设定计数，调用countDown()方法会减少计数器，而await()方法会阻塞，直到计数器为零。</li><li>用途： 用于控制一组线程等待某个事件发生后再全部同时继续执行。</li></ol><h2 id="java中的semaphore及其主要用途。" tabindex="-1"><a class="header-anchor" href="#java中的semaphore及其主要用途。"><span>Java中的Semaphore及其主要用途。</span></a></h2><p>Semaphore在Java中的解释及主要用途：</p><ol><li><p>定义： Semaphore是一个计数信号量，用来控制同时访问某个特定资源的操作数量，主要用于实现资源的并发限制。</p></li><li><p>使用方法： 通过acquire()方法获取一个许可，如果无可用许可，acquire()将会阻塞直到有许可；release()方法释放许可。</p></li><li><p>主要用途： 用于控制资源的访问数量，如限制文件的同时读写数量。</p></li></ol><h2 id="java中的readwritelock是什么-它如何提高应用程序的性能" tabindex="-1"><a class="header-anchor" href="#java中的readwritelock是什么-它如何提高应用程序的性能"><span>Java中的ReadWriteLock是什么？它如何提高应用程序的性能？</span></a></h2><p>ReadWriteLock在Java中的定义及性能提升方式：</p><ol><li><p>定义： ReadWriteLock维护了一对相关的锁 —— 一个用于只读操作的共享锁和一个用于写操作的排他锁。</p></li><li><p>读写分离： 允许多个读线程同时访问，但写线程访问时，所有的读线程和其他写线程都会被阻塞。</p></li><li><p>性能提升： 在读多写少的场景中，ReadWriteLock可以提高程序性能，因为它允许多个线程同时读取数据，而不是像synchronized那样互斥访问。</p></li></ol><h2 id="java中的threadlocal是什么-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#java中的threadlocal是什么-它是如何工作的"><span>Java中的ThreadLocal是什么，它是如何工作的？</span></a></h2><p>ThreadLocal在Java中的定义及工作原理：</p><p>1、定义： ThreadLocal用于创建线程局部变量，每个访问该变量的线程都有一个独立初始化的副本。</p><p>2、工作原理： ThreadLocal为每个线程提供独立的变量副本，实现线程间数据的隔离。</p><p>3、用途： 常用于保存线程私有数据，如用户身份信息、事务状态等。</p><p>4、内存泄漏问题： 使用不当时可能会导致内存泄漏，应确保及时调用remove()方法清理资源。</p><h2 id="java并发编程中的synchronized和volatile关键字的不同用途。" tabindex="-1"><a class="header-anchor" href="#java并发编程中的synchronized和volatile关键字的不同用途。"><span>Java并发编程中的synchronized和volatile关键字的不同用途。</span></a></h2><p>在Java并发编程中，synchronized和volatile关键字的不同用途：</p><ol><li><p>synchronized： 提供互斥锁功能，确保只有一个线程可以执行某段代码，主要用于实现线程间的同步和防止竞争条件。</p></li><li><p>volatile： 保证变量的内存可见性，确保一个线程修改的变量值对其他线程立即可见，用于轻量级的同步场景，但不解决原子性问题。</p></li></ol><h2 id="java中的thread-join-方法有什么作用" tabindex="-1"><a class="header-anchor" href="#java中的thread-join-方法有什么作用"><span>Java中的Thread.join()方法有什么作用？</span></a></h2><p>Thread.join()方法在Java中的作用：</p><ol><li><p>等待线程终止： join()方法允许一个线程等待另一个线程完成其执行。</p></li><li><p>确保顺序： 使用join()可以确保程序中线程的执行顺序。调用线程将会在join()调用的线程完成执行后继续执行。</p></li></ol><h2 id="java中如何使用wait-和notify-方法" tabindex="-1"><a class="header-anchor" href="#java中如何使用wait-和notify-方法"><span>Java中如何使用wait()和notify()方法？</span></a></h2><p>在Java中使用wait()和notify()方法的方式：</p><ol><li><p>wait()： 调用wait()使当前线程等待，直到其他线程调用此对象的notify()或notifyAll()方法。</p></li><li><p>notify()： 唤醒在此对象监视器上等待的单个线程。</p></li><li><p>同步块内使用： wait()和notify()必须在同步块或同步方法内部使用。</p></li><li><p>释放锁： 调用wait()会释放锁，而notify()不会释放锁。</p></li></ol><h2 id="java并发编程中的exchanger是什么" tabindex="-1"><a class="header-anchor" href="#java并发编程中的exchanger是什么"><span>Java并发编程中的Exchanger是什么？</span></a></h2><p>Java并发编程中的Exchanger：</p><ol><li><p>定义： Exchanger是一个用于线程间协作的工具类，用于进行线程间的数据交换。</p></li><li><p>用途： 它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。</p></li></ol><h2 id="java中的stampedlock有什么特点" tabindex="-1"><a class="header-anchor" href="#java中的stampedlock有什么特点"><span>Java中的StampedLock有什么特点？</span></a></h2><p>Java中的StampedLock的特点：</p><ol><li><p>读写锁： StampedLock提供了一种读写锁的实现。</p></li><li><p>锁升级和降级： 支持从读锁升级到写锁，以及写锁降级到读锁。</p></li><li><p>优化读性能： 提供了一种乐观读锁的机制，可以提升并发性能。</p></li></ol><h2 id="java并发编程中使用future和callable有什么好处" tabindex="-1"><a class="header-anchor" href="#java并发编程中使用future和callable有什么好处"><span>Java并发编程中使用Future和Callable有什么好处？</span></a></h2><p>在Java并发编程中使用Future和Callable的好处：</p><ol><li><p>异步执行： Callable代表一个有返回值的任务，Future可以用来获取这个任务的结果，实现异步执行。</p></li><li><p>获取结果： Future.get()方法用来获取Callable任务的执行结果。</p></li><li><p>异常处理： Future.get()会抛出执行中的异常，方便异常处理。</p></li><li><p>超时控制： Future.get()方法提供了超时控制的机制，防止无限等待。</p></li></ol><h2 id="java中的thread类和runnable接口有什么区别" tabindex="-1"><a class="header-anchor" href="#java中的thread类和runnable接口有什么区别"><span>Java中的Thread类和Runnable接口有什么区别？</span></a></h2><p>Java中Thread类和Runnable接口的区别：</p><ol><li><p>继承与实现： Thread是一个类，继承它需要使用extends关键字；Runnable是一个接口，实现它需要使用implements关键字。</p></li><li><p>多重继承： Java不支持多重继承。如果一个类已经继承了其他类，就不能再继承Thread，但它可以实现Runnable接口。</p></li><li><p>资源共享： 实现Runnable接口的方式更适合多个线程共享同一资源的情况。</p></li></ol><h2 id="java中的内存模型以及其对并发编程的影响。" tabindex="-1"><a class="header-anchor" href="#java中的内存模型以及其对并发编程的影响。"><span>Java中的内存模型以及其对并发编程的影响。</span></a></h2><p>Java内存模型(JMM)及其对并发编程的影响：</p><ol><li><p>可见性： JMM定义了线程如何和何时可以看到其他线程写入的共享变量的值，关键字如volatile在此起作用。</p></li><li><p>原子性： JMM定义了哪些操作是原子性的，即不可分割的。</p></li><li><p>顺序性： JMM通过happens-before原则，定义了一个线程对共享数据的写入何时对其他线程可见。</p></li></ol><h2 id="java并发编程中-如何保证操作的原子性" tabindex="-1"><a class="header-anchor" href="#java并发编程中-如何保证操作的原子性"><span>Java并发编程中，如何保证操作的原子性？</span></a></h2><p>在Java并发编程中保证操作的原子性的方法：</p><ol><li><p>synchronized关键字： 通过同步代码块或方法来保证操作的原子性。</p></li><li><p>Lock接口： 使用ReentrantLock等锁实现提供的锁机制。</p></li><li><p>原子变量： 使用java.util.concurrent.atomic包中的原子变量类。</p></li></ol><h2 id="java中的并发集合类有哪些-它们是如何实现线程安全的" tabindex="-1"><a class="header-anchor" href="#java中的并发集合类有哪些-它们是如何实现线程安全的"><span>Java中的并发集合类有哪些，它们是如何实现线程安全的？</span></a></h2><p>Java中的并发集合类及其线程安全实现：</p><ol><li><p>ConcurrentHashMap： 使用分段锁技术提高并发访问效率。</p></li><li><p>CopyOnWriteArrayList： 写操作时复制数据，读操作无锁，适用于读多写少的场景。</p></li><li><p>BlockingQueue： 提供阻塞的插入和移除方法，用于生产者消费者模式。</p></li></ol><h2 id="java中的死锁以及如何避免。" tabindex="-1"><a class="header-anchor" href="#java中的死锁以及如何避免。"><span>Java中的死锁以及如何避免。</span></a></h2><p>Java中的死锁及其避免方法：</p><ol><li><p>死锁定义： 多个线程因互相等待对方持有的锁而无法继续执行。</p></li><li><p>避免方法：</p><ol><li>避免一个线程同时获取多个锁。</li><li>设置锁获取的超时时间。</li><li>按顺序申请资源。</li><li></li></ol></li></ol><h2 id="java中使用wait-和notify-方法" tabindex="-1"><a class="header-anchor" href="#java中使用wait-和notify-方法"><span>Java中使用wait()和notify()方法？</span></a></h2><p>在Java中使用wait()和notify()方法：</p><ol><li><p>wait()： 调用该方法的线程释放锁并进入等待状态，直到其他线程调用同一对象的notify()或notifyAll()。</p></li><li><p>notify()/notifyAll()： 唤醒在该对象上等待的单个线程（notify()）或所有线程（notifyAll()）。</p></li><li><p>同步块： wait()和notify()必须在同步块或同步方法内部调用。</p></li></ol><h2 id="java中的aqs是什么-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#java中的aqs是什么-它是如何工作的"><span>Java中的AQS是什么，它是如何工作的？</span></a></h2><p>Java中的AQS（AbstractQueuedSynchronizer）及其工作原理：</p><ol><li>AQS定义： AQS是一个用于构建锁和同步器的框架，提供了一个基于FIFO队列的完整的阻塞锁实现。</li></ol><p>2、工作原理：</p><p>状态管理：AQS内部维护一个状态变量来表示同步状态。<br> 独占和共享：AQS支持两种同步模式：独占模式和共享模式。<br> 队列维护：线程获取同步状态失败后，会被加入到一个等待队列中，依次获取锁。<br> Java中的Fork/Join框架是什么？它是如何工作的？<br> Java中的Fork/Join框架及其工作原理：</p><p>1、定义： Fork/Join框架是Java 7引入的一种并行执行任务的框架，主要用于递归任务和大数据集的处理。</p><p>2、工作原理： 它基于&quot;分而治之&quot;的原则，将大任务分解（fork）成小任务，再并行执行这些任务，最后将小任务结果合并（join）成大任务结果。</p><p>3、工作窃取算法： 使用工作窃取算法优化任务的执行，空闲线程可以从其他线程的任务队列中偷取任务来执行。</p><p>Java中的阻塞队列及其如何用于并发编程。<br> Java中的阻塞队列及其在并发编程中的应用：</p><p>1、定义： 阻塞队列是一种支持两个附加操作的队列，这两个操作包括：在队列为空时阻塞获取元素的操作和在队列满时阻塞插入元素的操作。</p><p>2、用途： 常用于生产者-消费者模式，其中生产者不能向队列添加元素如果队列满了（会阻塞），消费者不能从队列取元素如果队列空了（也会阻塞）。</p><p>Java中的AQS（AbstractQueuedSynchronizer）是什么？<br> Java中的AQS（AbstractQueuedSynchronizer）：</p><p>1、定义： AQS是提供了一套用于开发锁和同步器的框架，它利用了一个int成员变量表示同步状态，以及一个FIFO队列来管理线程。</p><p>2、作用： AQS是实现锁和其他同步组件的基础，例如ReentrantLock, Semaphores, CountDownLatch等。</p><p>Java中的并发集合类及其优势。<br> Java中的并发集合类及其优势：</p><p>1、定义： 并发集合类是专门设计用于多线程环境下的集合类，如ConcurrentHashMap, CopyOnWriteArrayList等。</p><p>2、优势： 这些集合类在多线程环境下提供了更好的性能，同时保证了线程安全和高效的数据操作。</p><p>Java中的ThreadLocalRandom是什么？它解决了什么问题？<br> Java中的ThreadLocalRandom及其解决的问题：</p><p>1、定义： ThreadLocalRandom是Java并发包中的一个用于生成随机数的类，它是对java.util.Random的改进。</p><p>2、解决的问题： 解决了在多线程环境下使用普通Random实例时可能出现的竞争条件问题，提高了性能。</p><p>Java并发编程中的SynchronousQueue是什么？<br> Java并发编程中的SynchronousQueue：</p><p>1、定义： SynchronousQueue是一个没有存储空间的阻塞队列，每一个put操作必须等待一个take操作，反之亦然。</p><p>2、用途： 常用于传递数据，非常适合传递性的场景，如任务分发。</p><p>Java中的CompletableFuture及其优势。<br> Java中的CompletableFuture及其优势：</p><p>1、定义： CompletableFuture是Java 8引入的一个类，用于编写异步代码。</p><p>2、优势： 提供了非阻塞的方式来完成操作并获得结果，支持函数式编程，可以通过lambda表达式轻松管理异步任务。</p><p>3、组合式异步编程： 允许将多个异步操作串联或合并，提高代码的可读性和可维护性。</p><p>Java并发编程中的Phaser是什么，它与CyclicBarrier和CountDownLatch有何区别？<br> Java并发编程中的Phaser及其与CyclicBarrier和CountDownLatch的区别：</p><p>1、Phaser： 一个可重用的同步屏障，与CyclicBarrier类似，但提供更灵活的控制。支持动态地增加或减少线程。</p><p>2、CyclicBarrier vs Phaser： CyclicBarrier用于固定数量的线程等待彼此，而Phaser可以适应动态数量的线程。</p><p>3、CountDownLatch vs Phaser： CountDownLatch是一次性的，用于一个或多个线程等待其他线程完成操作，而Phaser可以在多个阶段重用。</p><p>Java中的Executor框架是什么？<br> Java中的Executor框架：</p><p>1、定义： Executor框架是Java 5中引入的一种基于线程池的解决方案，用于管理线程资源，提高线程的管理效率和性能。</p><p>2、组成： 包括Executor接口及其子接口ExecutorService，以及各种实现类，如ThreadPoolExecutor和ScheduledThreadPoolExecutor。</p><p>Java中的LockSupport是什么？它是如何工作的？<br> Java中的LockSupport及其工作原理：</p><p>1、定义： LockSupport是一个提供线程阻塞和唤醒的工具类，它是构建锁和其他同步类的基础。</p><p>2、工作原理： 主要提供park()和unpark()方法，park()用于阻塞线程，unpark()用于唤醒指定线程。</p><p>Java并发中的CopyOnWriteArrayList和Vector有何不同？<br> CopyOnWriteArrayList与Vector在Java并发中的不同点：</p><p>1、CopyOnWriteArrayList： 在进行修改操作（添加、删除等）时，它会先复制一个新的数组，然后在新数组上修改，修改完毕后，再将原数组引用指向新数组。</p><p>2、Vector： 所有操作几乎都是同步的，使用synchronized关键字，每个操作都是线程安全的，但在高并发环境下性能较低。</p><p>Java中，什么是线程饥饿？如何防止线程饥饿？<br> 线程饥饿及其预防方法在Java中的定义：</p><p>1、线程饥饿： 当线程长时间无法获得所需的资源时，比如CPU时间片或锁，导致无法正常执行。</p><p>2、预防方法： 使用公平锁、优先级调度、确保长时间运行的线程能释放资源等方法来防止线程饥饿。</p><p>Java中的Thread.yield()方法有什么作用？<br> Thread.yield()方法在Java中的作用：</p><p>1、定义： yield()是一种静态方法，用于提示线程调度器当前线程愿意放弃其当前的时间片。</p><p>2、作用： 该方法用于指示线程调度器当前线程愿意让出对处理器的占用，以便其他线程可以更快地执行，但这只是一个提示，没有任何机制保证它会被遵守。</p><p>Java中的原子类及其用途。<br> Java中的原子类及其用途：</p><p>1、定义： 原子类是一组在并发环境下保证了原子性操作的类，例如AtomicInteger, AtomicLong, AtomicBoolean等。</p><p>2、用途： 提供了一种无锁的方式来进行高性能的线程安全操作，常用于计数器、标志、状态更新等场景。</p><p>Java中的synchronized关键字的工作原理。<br> Java中synchronized关键字的工作原理：</p><p>1、锁的获取与释放： synchronized用于方法或代码块，当线程进入synchronized标记的方法或代码块时，它会自动获取锁，并在退出时释放锁。</p><p>2、内部锁（监视器锁）： synchronized使用对象内部的锁（也称为监视器锁）来实现同步。</p><p>3、锁的状态： 当一个线程拥有锁时，其他尝试进入同步代码块的线程将被阻塞，直到锁被释放。</p><p>Java中的StampedLock是什么，与ReadWriteLock有何不同？<br> Java中StampedLock与ReadWriteLock的区别：</p><p>1、StampedLock： StampedLock是Java 8引入的，提供了三种模式的读写控制：写锁、悲观读锁和乐观读。</p><p>2、ReadWriteLock： ReadWriteLock是传统的读写锁，提供了两种模式：读锁和写锁。</p><p>3、乐观读： StampedLock支持乐观读模式，这是ReadWriteLock不支持的。</p><p>4、锁降级和升级： StampedLock允许锁的降级和升级，而ReadWriteLock则不支持。</p><p>Java中如何正确地使用wait和notify机制？<br> 正确使用Java中的wait和notify机制：</p><p>1、在循环中调用wait： 应该在循环中调用wait方法，以避免虚假唤醒。</p><p>2、同步块： wait和notify必须在同步块或方法中使用。</p><p>3、正确的对象锁： 使用wait和notify时，必须确保线程持有正确对象的锁。</p><p>4、notifyAll vs notify： 通常优先使用notifyAll，以唤醒所有等待线程，避免死锁。</p><p>Java并发编程中的LockSupport类。<br> Java并发编程中的LockSupport类：</p><p>1、线程阻塞工具： LockSupport提供工具，用于挂起和恢复线程，不需要同步块。</p><p>2、park和unpark： park()用于挂起线程，unpark(Thread thread)用于恢复线程。</p><p>3、不需要锁和条件： LockSupport的操作不依赖于锁或条件变量，提供更灵活的线程控制。</p><p>Java并发编程中，什么是线程饥饿和线程活锁？如何避免它们？<br> 线程饥饿和线程活锁：</p><p>1、线程饥饿： 当线程无法获得足够的CPU时间执行任务时发生，通常是由于线程优先级不当或者长时间持有资源导致。</p><p>2、线程活锁： 线程不断重试操作，但总是失败，因为其他线程也在做相同的操作。</p><p>3、避免方法：</p><p>调整线程优先级。<br> 使用公平锁。<br> 避免长时间持有锁。<br> 为重试操作添加随机或指数退避。<br> Java中Future和CompletableFuture有什么区别？<br> Future与CompletableFuture的区别：</p><p>1、Future： Future提供了对异步操作结果的引用，但它不允许直接对这些结果进行操作。</p><p>2、CompletableFuture： CompletableFuture是Java 8中引入的，它实现了Future和CompletionStage接口，提供了方法链和组合式异步编程的能力。</p><p>3、方法丰富： CompletableFuture提供了丰富的方法，如thenApply、thenCombine等，使得异步编程更灵活。</p><p>Java中的Semaphore是什么，它通常用于哪些场景？<br> Java中的Semaphore及其使用场景：</p><p>1、Semaphore： Semaphore是一个计数信号量，用于控制同时访问特定资源的线程数量。</p><p>2、使用场景：</p><p>限制资源使用的并发数。<br> 实现资源池，如数据库连接池。<br> Java中的CountDownLatch和如何使用它。<br> Java中的CountDownLatch及其使用：</p><p>1、CountDownLatch： 一个同步辅助工具类，允许一个或多个线程等待直到在其他线程中进行的一组操作完成。</p><p>2、使用方式：</p><p>初始化CountDownLatch指定计数。<br> 在等待完成的线程中调用await()。<br> 在完成一个任务的线程中调用countDown()，计数器减一。<br> 当计数器达到零时，等待的线程被释放继续执行。</p>',163),r=[o];function t(p,c){return e(),l("div",null,r)}const d=a(n,[["render",t],["__file","Java 并发面试题.html.vue"]]),s=JSON.parse('{"path":"/%E9%9D%A2%E8%AF%95/Java%20%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Java 并发面试题","lang":"zh-CN","frontmatter":{"title":"Java 并发面试题","order":1,"description":"Java 并发面试题 Java中的volatile关键字有什么作用？ volatile关键字在Java中的作用包括： 保证可见性： 确保变量的修改对其他线程立即可见。 防止指令重排： 防止编译器对操作进行重排序，保证代码的执行顺序。 非原子性： volatile变量的单次读/写操作是原子的，但复合操作（如i++）不是原子的。 Java中的synchro...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/%E9%9D%A2%E8%AF%95/Java%20%E5%B9%B6%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"Java 并发面试题"}],["meta",{"property":"og:description","content":"Java 并发面试题 Java中的volatile关键字有什么作用？ volatile关键字在Java中的作用包括： 保证可见性： 确保变量的修改对其他线程立即可见。 防止指令重排： 防止编译器对操作进行重排序，保证代码的执行顺序。 非原子性： volatile变量的单次读/写操作是原子的，但复合操作（如i++）不是原子的。 Java中的synchro..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-24T14:16:35.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:modified_time","content":"2024-06-24T14:16:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 并发面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-24T14:16:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"Java中的volatile关键字有什么作用？","slug":"java中的volatile关键字有什么作用","link":"#java中的volatile关键字有什么作用","children":[]},{"level":2,"title":"Java中的synchronized关键字及其工作原理。","slug":"java中的synchronized关键字及其工作原理。","link":"#java中的synchronized关键字及其工作原理。","children":[]},{"level":2,"title":"Java中的CAS操作是什么？它如何实现无锁编程？","slug":"java中的cas操作是什么-它如何实现无锁编程","link":"#java中的cas操作是什么-它如何实现无锁编程","children":[]},{"level":2,"title":"讲述Java中的Lock接口及其与synchronized的区别。","slug":"讲述java中的lock接口及其与synchronized的区别。","link":"#讲述java中的lock接口及其与synchronized的区别。","children":[]},{"level":2,"title":"什么是线程池？在Java中如何使用线程池？","slug":"什么是线程池-在java中如何使用线程池","link":"#什么是线程池-在java中如何使用线程池","children":[]},{"level":2,"title":"Java内存模型中的happens-before原则是什么？","slug":"java内存模型中的happens-before原则是什么","link":"#java内存模型中的happens-before原则是什么","children":[]},{"level":2,"title":"Java中synchronized和ReentrantLock有什么区别？","slug":"java中synchronized和reentrantlock有什么区别","link":"#java中synchronized和reentrantlock有什么区别","children":[]},{"level":2,"title":"Java中CountDownLatch和CyclicBarrier有什么区别？","slug":"java中countdownlatch和cyclicbarrier有什么区别","link":"#java中countdownlatch和cyclicbarrier有什么区别","children":[]},{"level":2,"title":"Java程序中正确地停止一个线程？","slug":"java程序中正确地停止一个线程","link":"#java程序中正确地停止一个线程","children":[]},{"level":2,"title":"Java中线程池的作用是什么？它是如何提高效率的？","slug":"java中线程池的作用是什么-它是如何提高效率的","link":"#java中线程池的作用是什么-它是如何提高效率的","children":[]},{"level":2,"title":"CountDownLatch在Java中的用途和解释：","slug":"countdownlatch在java中的用途和解释","link":"#countdownlatch在java中的用途和解释","children":[]},{"level":2,"title":"Java中的Semaphore及其主要用途。","slug":"java中的semaphore及其主要用途。","link":"#java中的semaphore及其主要用途。","children":[]},{"level":2,"title":"Java中的ReadWriteLock是什么？它如何提高应用程序的性能？","slug":"java中的readwritelock是什么-它如何提高应用程序的性能","link":"#java中的readwritelock是什么-它如何提高应用程序的性能","children":[]},{"level":2,"title":"Java中的ThreadLocal是什么，它是如何工作的？","slug":"java中的threadlocal是什么-它是如何工作的","link":"#java中的threadlocal是什么-它是如何工作的","children":[]},{"level":2,"title":"Java并发编程中的synchronized和volatile关键字的不同用途。","slug":"java并发编程中的synchronized和volatile关键字的不同用途。","link":"#java并发编程中的synchronized和volatile关键字的不同用途。","children":[]},{"level":2,"title":"Java中的Thread.join()方法有什么作用？","slug":"java中的thread-join-方法有什么作用","link":"#java中的thread-join-方法有什么作用","children":[]},{"level":2,"title":"Java中如何使用wait()和notify()方法？","slug":"java中如何使用wait-和notify-方法","link":"#java中如何使用wait-和notify-方法","children":[]},{"level":2,"title":"Java并发编程中的Exchanger是什么？","slug":"java并发编程中的exchanger是什么","link":"#java并发编程中的exchanger是什么","children":[]},{"level":2,"title":"Java中的StampedLock有什么特点？","slug":"java中的stampedlock有什么特点","link":"#java中的stampedlock有什么特点","children":[]},{"level":2,"title":"Java并发编程中使用Future和Callable有什么好处？","slug":"java并发编程中使用future和callable有什么好处","link":"#java并发编程中使用future和callable有什么好处","children":[]},{"level":2,"title":"Java中的Thread类和Runnable接口有什么区别？","slug":"java中的thread类和runnable接口有什么区别","link":"#java中的thread类和runnable接口有什么区别","children":[]},{"level":2,"title":"Java中的内存模型以及其对并发编程的影响。","slug":"java中的内存模型以及其对并发编程的影响。","link":"#java中的内存模型以及其对并发编程的影响。","children":[]},{"level":2,"title":"Java并发编程中，如何保证操作的原子性？","slug":"java并发编程中-如何保证操作的原子性","link":"#java并发编程中-如何保证操作的原子性","children":[]},{"level":2,"title":"Java中的并发集合类有哪些，它们是如何实现线程安全的？","slug":"java中的并发集合类有哪些-它们是如何实现线程安全的","link":"#java中的并发集合类有哪些-它们是如何实现线程安全的","children":[]},{"level":2,"title":"Java中的死锁以及如何避免。","slug":"java中的死锁以及如何避免。","link":"#java中的死锁以及如何避免。","children":[]},{"level":2,"title":"Java中使用wait()和notify()方法？","slug":"java中使用wait-和notify-方法","link":"#java中使用wait-和notify-方法","children":[]},{"level":2,"title":"Java中的AQS是什么，它是如何工作的？","slug":"java中的aqs是什么-它是如何工作的","link":"#java中的aqs是什么-它是如何工作的","children":[]}],"git":{"createdTime":1719238595000,"updatedTime":1719238595000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":19.5,"words":5849},"filePathRelative":"面试/Java 并发面试题.md","localizedDate":"2024年6月24日","excerpt":"\\n<h2>Java中的volatile关键字有什么作用？</h2>\\n<p>volatile关键字在Java中的作用包括：</p>\\n<ol>\\n<li>保证可见性： 确保变量的修改对其他线程立即可见。</li>\\n<li>防止指令重排： 防止编译器对操作进行重排序，保证代码的执行顺序。</li>\\n<li>非原子性： volatile变量的单次读/写操作是原子的，但复合操作（如i++）不是原子的。</li>\\n</ol>\\n<h2>Java中的synchronized关键字及其工作原理。</h2>\\n<p>synchronized关键字在Java中的作用及其工作原理：</p>\\n<ol>\\n<li>互斥锁： synchronized提供了一种锁机制，能够确保同一时刻只有一个线程执行某段代码。</li>\\n<li>对象锁和类锁： 可以锁定对象实例（方法或代码块）或整个类（静态方法）。</li>\\n<li>内存可见性： 保证了锁内操作对其他线程的可见性。</li>\\n<li>锁升级： 在JVM中，synchronized可能经历偏向锁、轻量级锁和重量级锁的升级。</li>\\n</ol>","autoDesc":true}');export{d as comp,s as data};
