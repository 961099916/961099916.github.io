import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as p,c as e,a as t,b as l}from"./app-DYFaSDuA.js";const c={},o=l(`<h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h2><h3 id="封装" tabindex="-1"><a class="header-anchor" href="#封装"><span>封装</span></a></h3><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。<br> 优点：</p><ul><li><mark>减少耦合</mark> : 可以独立地开发、测试、优化、使用、理解和修改</li><li><mark>减轻维护的负担</mark> : 可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li><mark>有效地调节性能</mark> : 可以通过剖析确定哪些模块影响了系统的性能</li><li><mark>提高软件的可重用性</mark></li><li><mark>降低了构建大型系统的风险</mark> : 即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><p>继承实现了 IS-A 关系，例如 Cat 和 Animal 就是一种 IS-A 关系，因此 Cat 可以继承自 Animal，从而获得 Animal 非 private 的属性和方法。<br><mark>继承应该遵循里氏替换原则</mark> <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>。，子类对象必须能够替换掉所有父类对象。<br> Cat 可以当做 Animal 来使用，也就是说可以使用 Animal 引用 Cat 对象。父类引用指向子类对象称为 向上转型 。</p><h3 id="多态" tabindex="-1"><a class="header-anchor" href="#多态"><span>多态</span></a></h3><p>多态分为编译时多态和运行时多态:</p><ul><li><mark>编译时多态</mark>主要指方法的重载</li><li><mark>运行时多态</mark>指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件:</p><ol><li>继承</li><li>覆盖(重写)</li><li>向上转型</li></ol><h3 id="重写和重载" tabindex="-1"><a class="header-anchor" href="#重写和重载"><span>重写和重载</span></a></h3><h4 id="重写" tabindex="-1"><a class="header-anchor" href="#重写"><span>重写</span></a></h4><p>重写（Override）是指子类定义了一个与其父类中具有相同名称、参数列表和返回类型的方法，并且子类方法的实现覆盖了父类方法的实现。 即外壳不变，核心重写！<br> 重写规则：</p><ul><li>参数列表与被重写方法的参数列表必须完全相同。</li><li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为 final 的方法不能被重写。</li><li>声明为 static 的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个类，则不能重写该类的方法。</li></ul><h4 id="重载" tabindex="-1"><a class="header-anchor" href="#重载"><span>重载</span></a></h4><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。<br> 每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。<br> 最常用的地方就是构造器的重载。<br> 重载规则：</p><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h2 id="泛型机制" tabindex="-1"><a class="header-anchor" href="#泛型机制"><span>泛型机制</span></a></h2><div class="hint-container tip"><p class="hint-container-title">什么是泛型</p><p>泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。</p></div><h3 id="为什么引入泛型" tabindex="-1"><a class="header-anchor" href="#为什么引入泛型"><span>为什么引入泛型</span></a></h3><p>泛型的引入主要是为了提高代码的<mark>复用性</mark>和可读性，通过泛型可以将类型参数化，使得代码更加灵活、更加易于理解和维护。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot;+&quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span> <span class="token keyword">float</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot;+&quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot;+&quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有泛型，要实现不同类型的加法，每种类型都需要重载一个add方法；通过泛型，我们可以复用为一个方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> a<span class="token punctuation">,</span> <span class="token class-name">T</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">&quot;+&quot;</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型的基本使用" tabindex="-1"><a class="header-anchor" href="#泛型的基本使用"><span>泛型的基本使用</span></a></h3><h4 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类"><span>泛型类</span></a></h4><ul><li>单元泛型</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>         <span class="token comment">// 此处可以随便写标识符号，T是type的简称</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token keyword">var</span> <span class="token punctuation">;</span>     <span class="token comment">// var的类型由T指定，即：由外部指定</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 返回值的类型由外部决定</span>
        <span class="token keyword">return</span> <span class="token keyword">var</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVar</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 设置的类型也由外部决定</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token keyword">var</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericsDemo06</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Point</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     <span class="token comment">// 里面的var类型为String类型</span>
        p<span class="token punctuation">.</span><span class="token function">setVar</span><span class="token punctuation">(</span><span class="token string">&quot;it&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>                            <span class="token comment">// 设置字符串</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">// 取得字符串的长度</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>多参数泛型</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Notepad</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>       <span class="token comment">// 此处指定了两个泛型类型</span>
    <span class="token keyword">private</span> <span class="token class-name">K</span> key <span class="token punctuation">;</span>     <span class="token comment">// 此变量的类型由外部决定</span>
    <span class="token keyword">private</span> <span class="token class-name">V</span> value <span class="token punctuation">;</span>   <span class="token comment">// 此变量的类型由外部决定</span>
    <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericsDemo09</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Notepad</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> t <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>        <span class="token comment">// 定义两个泛型类型的对象</span>
        t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notepad</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>       <span class="token comment">// 里面的key为String，value为Integer</span>
        t<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span><span class="token string">&quot;汤姆&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token comment">// 设置第一个内容</span>
        t<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>            <span class="token comment">// 设置第二个内容</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;姓名；&quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>      <span class="token comment">// 取得信息</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;，年龄；&quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>       <span class="token comment">// 取得信息</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口"><span>泛型接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token comment">// 在接口上定义泛型</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">// 定义抽象方法，抽象方法的返回值就是泛型类型</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">InfoImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Info</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>   <span class="token comment">// 定义泛型接口的子类</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token keyword">var</span> <span class="token punctuation">;</span>             <span class="token comment">// 定义属性</span>
    <span class="token keyword">public</span> <span class="token class-name">InfoImpl</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">// 通过构造方法设置属性内容</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVar</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVar</span><span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">var</span> <span class="token operator">=</span> <span class="token keyword">var</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">var</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericsDemo24</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> arsg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Info</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 声明接口对象</span>
        i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;汤姆&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>  <span class="token comment">// 通过子类实例化对象</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;内容：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">getVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法"><span>泛型方法</span></a></h4><ul><li>泛型方法定义</li></ul><figure><img src="https://zhangjiahao-prd.oss-cn-beijing.aliyuncs.com/uPic/rc3hWT.png" alt="泛型方法定义" tabindex="0" loading="lazy"><figcaption>泛型方法定义</figcaption></figure><ul><li>方法调用</li></ul><figure><img src="https://zhangjiahao-prd.oss-cn-beijing.aliyuncs.com/uPic/5e5qp8.png" alt="泛型方法调用" tabindex="0" loading="lazy"><figcaption>泛型方法调用</figcaption></figure><h4 id="泛型的上下限" tabindex="-1"><a class="header-anchor" href="#泛型的上下限"><span>泛型的上下限</span></a></h4><h4 id="泛型数组" tabindex="-1"><a class="header-anchor" href="#泛型数组"><span>泛型数组</span></a></h4><h3 id="深入理解泛型" tabindex="-1"><a class="header-anchor" href="#深入理解泛型"><span>深入理解泛型</span></a></h3><p>Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。</p><h4 id="泛型的擦除原则" tabindex="-1"><a class="header-anchor" href="#泛型的擦除原则"><span>泛型的擦除原则</span></a></h4><ul><li>消除类型参数声明，即删除&lt;&gt;及其包围的部分。</li><li>根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为Object，如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型（即父类）。</li><li>为了保证类型安全，必要时插入强制类型转换代码。</li><li>自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。</li></ul><h4 id="如何进行擦除" tabindex="-1"><a class="header-anchor" href="#如何进行擦除"><span>如何进行擦除</span></a></h4><ol><li>擦除类定义中的类型参数 - 无限制类型擦除</li><li>擦除类定义中的类型参数 - 有限制类型擦除</li><li>擦除方法定义中的类型参数</li></ol><h4 id="如何证明类型的擦除" tabindex="-1"><a class="header-anchor" href="#如何证明类型的擦除"><span>如何证明类型的擦除</span></a></h4><h4 id="如何理解类型擦除后保留的原始类型" tabindex="-1"><a class="header-anchor" href="#如何理解类型擦除后保留的原始类型"><span>如何理解类型擦除后保留的原始类型</span></a></h4><h4 id="如何理解泛型的编译期检查" tabindex="-1"><a class="header-anchor" href="#如何理解泛型的编译期检查"><span>如何理解泛型的编译期检查</span></a></h4><h4 id="如何理解泛型的多态-泛型的桥接方法" tabindex="-1"><a class="header-anchor" href="#如何理解泛型的多态-泛型的桥接方法"><span>如何理解泛型的多态--泛型的桥接方法</span></a></h4><h4 id="如何理解基本类型不能作为泛型类型" tabindex="-1"><a class="header-anchor" href="#如何理解基本类型不能作为泛型类型"><span>如何理解基本类型不能作为泛型类型</span></a></h4><h4 id="泛型数组-能不能采用具体的泛型类型进行初始化" tabindex="-1"><a class="header-anchor" href="#泛型数组-能不能采用具体的泛型类型进行初始化"><span>泛型数组：能不能采用具体的泛型类型进行初始化</span></a></h4><h4 id="泛型数组-如何正确的初始化泛型数组实例" tabindex="-1"><a class="header-anchor" href="#泛型数组-如何正确的初始化泛型数组实例"><span>泛型数组：如何正确的初始化泛型数组实例</span></a></h4><h4 id="如何理解泛型类中的静态方法和静态变量" tabindex="-1"><a class="header-anchor" href="#如何理解泛型类中的静态方法和静态变量"><span>如何理解泛型类中的静态方法和静态变量</span></a></h4><h4 id="如何理解异常中使用泛型" tabindex="-1"><a class="header-anchor" href="#如何理解异常中使用泛型"><span>如何理解异常中使用泛型</span></a></h4><h4 id="如何获取泛型的参数类型" tabindex="-1"><a class="header-anchor" href="#如何获取泛型的参数类型"><span>如何获取泛型的参数类型</span></a></h4><h2 id="注解机制" tabindex="-1"><a class="header-anchor" href="#注解机制"><span>注解机制</span></a></h2><h3 id="注解基础" tabindex="-1"><a class="header-anchor" href="#注解基础"><span>注解基础</span></a></h3><p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。<br> 它主要的作用有以下四方面：</p><ul><li>生成文档，通过代码里标识的元数据生成javadoc文档。</li><li>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</li><li>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如动态生成代码。</li><li>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如使用反射注入实例。</li></ul><p>注解的常见分类：</p><ul><li>Java自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings，分别用于标明重写某个方法、标明某个类或方法过时、标明要忽略的警告，用这些注解标明后编译器就会进行检查。</li><li>元注解，元注解是用于定义注解的注解，包括@Retention、@Target、@Inherited、@Documented，@Retention用于标明注解被保留的阶段，@Target用于标明注解使用的范围，@Inherited用于标明注解可继承，@Documented用于标明是否生成javadoc文档。</li><li>自定义注解，可以根据自己的需求定义注解，并可用元注解对自定义注解进行注解。</li></ul><h4 id="java自带的标准注解" tabindex="-1"><a class="header-anchor" href="#java自带的标准注解"><span>Java自带的标准注解</span></a></h4><p>Java 1.5开始自带的标准注解，包括@Override、@Deprecated和@SuppressWarnings：</p><ul><li>@Override：表示当前的方法定义将覆盖父类中的方法</li><li>@Deprecated：表示代码被弃用，如果使用了被@Deprecated注解的代码则编译器将发出警告</li><li>@SuppressWarnings：表示关闭编译器警告信息</li></ul><h4 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h4><p>在JDK 1.5中提供了4个标准的元注解：@Target，@Retention，@Documented，@Inherited, 在JDK 1.8中提供了两个元注解 @Repeatable和@Native</p><h4 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h4><h3 id="深入理解注解" tabindex="-1"><a class="header-anchor" href="#深入理解注解"><span>深入理解注解</span></a></h3><h4 id="java8提供了哪些新的注解" tabindex="-1"><a class="header-anchor" href="#java8提供了哪些新的注解"><span>Java8提供了哪些新的注解</span></a></h4><h4 id="注解支持继承吗" tabindex="-1"><a class="header-anchor" href="#注解支持继承吗"><span>注解支持继承吗？</span></a></h4><h4 id="注解实现的原理" tabindex="-1"><a class="header-anchor" href="#注解实现的原理"><span>注解实现的原理</span></a></h4><h3 id="注解的使用场景" tabindex="-1"><a class="header-anchor" href="#注解的使用场景"><span>注解的使用场景</span></a></h3><h4 id="配置化到注解化-框架的演进" tabindex="-1"><a class="header-anchor" href="#配置化到注解化-框架的演进"><span>配置化到注解化 - 框架的演进</span></a></h4><h4 id="继承实现到注解实现-junit3到junit4" tabindex="-1"><a class="header-anchor" href="#继承实现到注解实现-junit3到junit4"><span>继承实现到注解实现 - Junit3到Junit4</span></a></h4><h4 id="自定义注解和aop-通过切面实现解耦" tabindex="-1"><a class="header-anchor" href="#自定义注解和aop-通过切面实现解耦"><span>自定义注解和AOP - 通过切面实现解耦</span></a></h4><h2 id="异常机制" tabindex="-1"><a class="header-anchor" href="#异常机制"><span>异常机制</span></a></h2><h3 id="异常的层次结构" tabindex="-1"><a class="header-anchor" href="#异常的层次结构"><span>异常的层次结构</span></a></h3><h3 id="异常基础" tabindex="-1"><a class="header-anchor" href="#异常基础"><span>异常基础</span></a></h3><h3 id="异常实践" tabindex="-1"><a class="header-anchor" href="#异常实践"><span>异常实践</span></a></h3><h3 id="深入理解异常" tabindex="-1"><a class="header-anchor" href="#深入理解异常"><span>深入理解异常</span></a></h3><h2 id="反射机制" tabindex="-1"><a class="header-anchor" href="#反射机制"><span>反射机制</span></a></h2><h3 id="反射基础" tabindex="-1"><a class="header-anchor" href="#反射基础"><span>反射基础</span></a></h3><h3 id="反射使用" tabindex="-1"><a class="header-anchor" href="#反射使用"><span>反射使用</span></a></h3><h3 id="反射机制执行的流程" tabindex="-1"><a class="header-anchor" href="#反射机制执行的流程"><span>反射机制执行的流程</span></a></h3><h2 id="spi-机制" tabindex="-1"><a class="header-anchor" href="#spi-机制"><span>SPI 机制</span></a></h2><h3 id="spi-机制介绍" tabindex="-1"><a class="header-anchor" href="#spi-机制介绍"><span>SPI 机制介绍</span></a></h3><h3 id="spi-机制的使用" tabindex="-1"><a class="header-anchor" href="#spi-机制的使用"><span>SPI 机制的使用</span></a></h3><h3 id="spi-机制的实现原理" tabindex="-1"><a class="header-anchor" href="#spi-机制的实现原理"><span>SPI 机制的实现原理</span></a></h3><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>里式替换原则 <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,91);function i(u,r){const n=s("MarkMap");return p(),e("div",null,[t(n,{id:"markmap-0",content:"eJzjUlbwSixLfDp/1/OFDVxcysoKL+cuejph4tP1O19sXAgWeLZ59tN53c/m7HrasQ0qsOLF8sVIAk/3ND3dsQNZoL/36YYWJIHgAE8FGBcAIDY56Q=="}),o])}const h=a(c,[["render",i],["__file","01-Java基础.html.vue"]]),v=JSON.parse('{"path":"/java/01-Java%E5%9F%BA%E7%A1%80.html","title":"Java基础","lang":"zh-CN","frontmatter":{"title":"Java基础","order":2,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[{"level":3,"title":"封装","slug":"封装","link":"#封装","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"多态","slug":"多态","link":"#多态","children":[]},{"level":3,"title":"重写和重载","slug":"重写和重载","link":"#重写和重载","children":[]}]},{"level":2,"title":"泛型机制","slug":"泛型机制","link":"#泛型机制","children":[{"level":3,"title":"为什么引入泛型","slug":"为什么引入泛型","link":"#为什么引入泛型","children":[]},{"level":3,"title":"泛型的基本使用","slug":"泛型的基本使用","link":"#泛型的基本使用","children":[]},{"level":3,"title":"深入理解泛型","slug":"深入理解泛型","link":"#深入理解泛型","children":[]}]},{"level":2,"title":"注解机制","slug":"注解机制","link":"#注解机制","children":[{"level":3,"title":"注解基础","slug":"注解基础","link":"#注解基础","children":[]},{"level":3,"title":"深入理解注解","slug":"深入理解注解","link":"#深入理解注解","children":[]},{"level":3,"title":"注解的使用场景","slug":"注解的使用场景","link":"#注解的使用场景","children":[]}]},{"level":2,"title":"异常机制","slug":"异常机制","link":"#异常机制","children":[{"level":3,"title":"异常的层次结构","slug":"异常的层次结构","link":"#异常的层次结构","children":[]},{"level":3,"title":"异常基础","slug":"异常基础","link":"#异常基础","children":[]},{"level":3,"title":"异常实践","slug":"异常实践","link":"#异常实践","children":[]},{"level":3,"title":"深入理解异常","slug":"深入理解异常","link":"#深入理解异常","children":[]}]},{"level":2,"title":"反射机制","slug":"反射机制","link":"#反射机制","children":[{"level":3,"title":"反射基础","slug":"反射基础","link":"#反射基础","children":[]},{"level":3,"title":"反射使用","slug":"反射使用","link":"#反射使用","children":[]},{"level":3,"title":"反射机制执行的流程","slug":"反射机制执行的流程","link":"#反射机制执行的流程","children":[]}]},{"level":2,"title":"SPI 机制","slug":"spi-机制","link":"#spi-机制","children":[{"level":3,"title":"SPI 机制介绍","slug":"spi-机制介绍","link":"#spi-机制介绍","children":[]},{"level":3,"title":"SPI 机制的使用","slug":"spi-机制的使用","link":"#spi-机制的使用","children":[]},{"level":3,"title":"SPI 机制的实现原理","slug":"spi-机制的实现原理","link":"#spi-机制的实现原理","children":[]}]}],"git":{"createdTime":1716025685000,"updatedTime":1716215379000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":5}]},"readingTime":{"minutes":10,"words":3001},"filePathRelative":"java/01-Java基础.md","localizedDate":"2024年5月18日"}');export{h as comp,v as data};
