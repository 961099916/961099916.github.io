import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,b as t}from"./app-H4a-jC_m.js";const p={},e=t(`<h2 id="包详解" tabindex="-1"><a class="header-anchor" href="#包详解"><span>包详解</span></a></h2><h3 id="transaction包" tabindex="-1"><a class="header-anchor" href="#transaction包"><span><code>transaction</code>包</span></a></h3><figure><img src="https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305241127435.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="背景知识" tabindex="-1"><a class="header-anchor" href="#背景知识"><span>背景知识</span></a></h4><ul><li>工厂模式</li></ul><h4 id="讲解" tabindex="-1"><a class="header-anchor" href="#讲解"><span>讲解</span></a></h4><p>这里并没有特别需要说的东西，只是基础的事务管理。但是这里很好的实现了<code>transaction</code>和<code>datasource</code>包的隔离，<code>transaction</code>通过<code>datasource</code>抽象出来的接口实现了业务隔离，事务管理器可以通过配置文件选择对应的数据源进行管理。</p><h3 id="jdbc包" tabindex="-1"><a class="header-anchor" href="#jdbc包"><span><code>jdbc</code>包</span></a></h3><h4 id="背景知识-1" tabindex="-1"><a class="header-anchor" href="#背景知识-1"><span>背景知识</span></a></h4><ul><li>模版模式</li><li>易用性</li></ul><h4 id="讲解-1" tabindex="-1"><a class="header-anchor" href="#讲解-1"><span>讲解</span></a></h4><h5 id="模版模式" tabindex="-1"><a class="header-anchor" href="#模版模式"><span>模版模式</span></a></h5><p>某些类通用的一些处理方法一致，但是处理对象可能存在不同，此时可以使用模版方法，抽取父类编写通用处理方法，子类只需实现获取对象的方法即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SQL</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSQL</span><span class="token generics"><span class="token punctuation">&lt;</span>SQL<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SQL</span> <span class="token function">getSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSQL</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AND</span> <span class="token operator">=</span> <span class="token string">&quot;) \\nAND (&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">OR</span> <span class="token operator">=</span> <span class="token string">&quot;) \\nOR (&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SQLStatement</span> sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">T</span> <span class="token function">getSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">UPDATE</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>statementType <span class="token operator">=</span> <span class="token class-name">SQLStatement<span class="token punctuation">.</span>StatementType</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">;</span>
        <span class="token function">sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">getSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">SET</span><span class="token punctuation">(</span><span class="token class-name">String</span> sets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">sql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sets<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sets<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">getSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码可知：</p><ol><li>若用户需要自定<code>SQL</code> 如  <code>ExplainSQL</code>，从而进行性能调优，此时只需要继承 <code>AbstractSQL</code>即可，而无需编写原方法。</li></ol><h5 id="易用性" tabindex="-1"><a class="header-anchor" href="#易用性"><span>易用性</span></a></h5><p>为了用户使用方便和构建 <code>SQL</code>的直观性，<code>AbstractSQL</code>命名采用了全大写的模式，以此让用户更加易用。</p><figure><img src="https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305221521914.png#id=Lbhr7&amp;originHeight=973&amp;originWidth=384&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="sqlrunner类" tabindex="-1"><a class="header-anchor" href="#sqlrunner类"><span><code>SqlRunner</code>类</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>useGeneratedKeySupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Statement</span><span class="token punctuation">.</span><span class="token constant">RETURN_GENERATED_KEYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">setParameters</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>useGeneratedKeySupport<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token function">getResults</span><span class="token punctuation">(</span>ps<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Object</span> genkey <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>genkey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>genkey<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token comment">//ignore, no numeric key support</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token constant">NO_GENERATED_KEY</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//ignore</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">setParameters</span><span class="token punctuation">(</span>ps<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//ignore</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此类在<code>Mybatis</code>中没有任何的使用，此类应该只是为了提供给用户，让用户可以自定义执行相关 <code>SQL</code>，分析其方法本质为原始<code>JDBC</code>相关操作流程。</p><h5 id="scriptrunner类" tabindex="-1"><a class="header-anchor" href="#scriptrunner类"><span><code>ScriptRunner</code>类</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executeFullScript</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> script <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">BufferedReader</span> lineReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> line<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> lineReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                script<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
                script<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">LINE_SEPARATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">String</span> command <span class="token operator">=</span> script<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">println</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">executeStatement</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">commitConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Error executing: &quot;</span> <span class="token operator">+</span> script <span class="token operator">+</span> <span class="token string">&quot;.  Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">;</span>
            <span class="token function">printlnError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeSqlException</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">executeLineByLine</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">BufferedReader</span> lineReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> line<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> lineReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">handleLine</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">commitConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">checkForMissingLineTerminator</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Error executing: &quot;</span> <span class="token operator">+</span> command <span class="token operator">+</span> <span class="token string">&quot;.  Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">;</span>
            <span class="token function">printlnError</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeSqlException</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleLine</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> command<span class="token punctuation">,</span> <span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> trimmedLine <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lineIsComment</span><span class="token punctuation">(</span>trimmedLine<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token constant">DELIMITER_PATTERN</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>trimmedLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                delimiter <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">println</span><span class="token punctuation">(</span>trimmedLine<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">commandReadyToExecute</span><span class="token punctuation">(</span>trimmedLine<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            command<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            command<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">LINE_SEPARATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">println</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">executeStatement</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            command<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>trimmedLine<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            command<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            command<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">LINE_SEPARATOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此类的核心方法如上，可看出其本质和<code>SqlRunner</code>类一致。</p><h3 id="datasource包" tabindex="-1"><a class="header-anchor" href="#datasource包"><span><code>datasource</code>包</span></a></h3><figure><img src="https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305241107709.png#id=XQR5r&amp;originHeight=486&amp;originWidth=404&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据包结构可看出，<code>Mybatis</code>抽象出<code>DataSourceFactory</code>进行生成对应的<code>DataSource</code>。可以知道<code>DataSourceFactory</code>的设计是采用了工厂模式。</p><h4 id="背景知识-2" tabindex="-1"><a class="header-anchor" href="#背景知识-2"><span>背景知识</span></a></h4><ul><li>数据库连接池</li><li>JNDI</li><li>设计模式：工厂模式、模版模式、代理模式</li></ul><h4 id="讲解-2" tabindex="-1"><a class="header-anchor" href="#讲解-2"><span>讲解</span></a></h4><h5 id="数据库连接池" tabindex="-1"><a class="header-anchor" href="#数据库连接池"><span>数据库连接池</span></a></h5><p>数据库在建立连接的时候需要走 TCP 的三次握手，如果在三次握手之后却只进行了一次查询这就会浪费较多的资源，所以想到了池化思想，对数据库连接进行池化，减少数据库连接的创建和销毁的资源浪费。<br> 数据库连接池的本质就是建立一个集合进行存储创建的连接，当有需要查询的时候从缓存的连接中返回一个，等使用完毕不再进行销毁而是再次放回到缓存中，此时就需要对连接部分方法的重写，但是 <code>Mybatis</code>是通过代理进行处理。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>       <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 当调用的方法是close 的时候不去进行真正的关闭，而是将连接放回连接池中</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">CLOSE</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> methodName<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">CLOSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dataSource<span class="token punctuation">.</span><span class="token function">pushConnection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// issue #579 toString() should never fail</span>
                    <span class="token comment">// throw an SQLException instead of a Runtime</span>
                    <span class="token function">checkConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>realConnection<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="jndi" tabindex="-1"><a class="header-anchor" href="#jndi"><span>JNDI</span></a></h5><p>TODO 待了解</p><h5 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式"><span>设计模式</span></a></h5><ul><li>即使工厂模式，也是模版模式</li><li>代理模式</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">PooledConnection</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">PooledDataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>hashCode <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>realConnection <span class="token operator">=</span> connection<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>createdTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastUsedTimestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建 connection 的代理对象，进行代理所有的请求</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>proxyConnection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Connection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">IFACES</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 拦截调用close方法，不去进行真正的关闭，而是将连接放回连接池中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">CLOSE</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> methodName<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">CLOSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataSource<span class="token punctuation">.</span><span class="token function">pushConnection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// issue #579 toString() should never fail</span>
                <span class="token comment">// throw an SQLException instead of a Runtime</span>
                <span class="token function">checkConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>realConnection<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token class-name">ExceptionUtil</span><span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exception包" tabindex="-1"><a class="header-anchor" href="#exception包"><span><code>exception</code>包</span></a></h3><p>下图是<code>Mybatis</code>中异常的关系图：</p><figure><img src="https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305221420554.png#id=GNQQU&amp;originHeight=1228&amp;originWidth=6562&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="背景知识-3" tabindex="-1"><a class="header-anchor" href="#背景知识-3"><span>背景知识</span></a></h4><ul><li>工厂模式</li><li>异常的封装</li></ul><h4 id="讲解-3" tabindex="-1"><a class="header-anchor" href="#讲解-3"><span>讲解</span></a></h4><h4 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionFactory</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Prevent Instantiation</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RuntimeException</span> <span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PersistenceException</span><span class="token punctuation">(</span><span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>私有构造函数：导致该工厂无法创建出对应的对象</li><li>静态<code>wrapException</code>方法，用于通过异常信息和异常类型进行封装异常为<code>Mybatis</code>中的异常类型。全局通过<code>ExceptionFactory.wrapException()</code>进行生产出对应的异常对象</li></ul><h4 id="异常类型" tabindex="-1"><a class="header-anchor" href="#异常类型"><span>异常类型</span></a></h4><ul><li>IbatisException：<code>Mybatis</code>中最高的异常，但是直接继承该类的子类只有<code>PersistenceException</code>，而且该类也添加了<code>@Deprecated</code>说明以后可能去除。</li><li>PersistenceException： 译为持久化异常。<code>Mybatis</code>对应是持久化框架，后期可能该异常类型为<code>Mybatis</code>所有异常的父类。</li><li>TooManyResultsException：译为多条返回结果异常。用处为<code>selectOne</code>却返回多条记录时所抛出的异常。</li><li>TypeException: 译为类型异常。当 <code>Mybatis</code> 中需要类型转化时，若转换失败则会抛出该异常。</li><li>CacheException: 译为缓存异常。当<code>Mybatis</code>读取缓存中数据出现问题时则会抛出该异常。</li><li>ParsingException: 译为解析异常。当前代码未看到使用。</li><li>ScriptingException: 译为脚本异常。</li><li>ResultMapException: 译为结果映射异常。在结果转换为对应类型的对象时，若转换失败则会抛出异常。</li><li>DataSourceException: 译为数据源异常。在初始化数据源时若出现错误则会抛出该异常。</li><li>TransactionException: 译为事务异常。在给<code>connection</code>开启事务时若失败则会抛出该异常。</li><li>BuilderException: 译为建造异常。在建造对象失败时会抛出该异常。</li><li>SqlSessionException: 译为<code>SqlSession</code>的异常。基本只会在<code>SqlSessionManager</code>中使用，主要是<code>SqlSession</code>使用过程中的异常。</li><li>ReflectionException: 译为反射异常。基本只会在反射使用时会抛出该异常。</li><li>ExecutorException: 译为执行器异常。会在线程操作数据库的时候抛出该异常。</li><li>BatchExecutorException：译为批量执行器异常。会在线程批量操作数据库的时候抛出该异常。</li><li>BindingException: 译为绑定异常。主要是 <code>mapper</code>映射的时候会抛出该异常。</li><li>LogException: 译为日志异常。目前只在<code>LogFactory</code>构建日志相关的时候才会抛出该异常。</li><li>PluginException: 译为插件异常。目前只在<code>Plugin</code>中使用，在获取插件信息时候会抛出该异常。</li></ul><p><code>Mybatis</code>类型主要是根据业务相关包放在一起，所以命名绝大多数都能够直观的看到原因所在。</p><h3 id="annotations和-lang包" tabindex="-1"><a class="header-anchor" href="#annotations和-lang包"><span><code>annotations</code>和 <code>lang</code>包</span></a></h3><h4 id="背景知识-4" tabindex="-1"><a class="header-anchor" href="#背景知识-4"><span>背景知识</span></a></h4><h4 id="讲解-4" tabindex="-1"><a class="header-anchor" href="#讲解-4"><span>讲解</span></a></h4>`,54),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","03-包详解.html.vue"]]),d=JSON.parse('{"path":"/%E6%A1%86%E6%9E%B6/mybatis/03-%E5%8C%85%E8%AF%A6%E8%A7%A3.html","title":"包详解","lang":"zh-CN","frontmatter":{"title":"包详解","order":3,"category":["it"],"tags":["框架","mybatis","源码"],"description":"包详解 transaction包 背景知识 工厂模式 讲解 这里并没有特别需要说的东西，只是基础的事务管理。但是这里很好的实现了transaction和datasource包的隔离，transaction通过datasource抽象出来的接口实现了业务隔离，事务管理器可以通过配置文件选择对应的数据源进行管理。 jdbc包 背景知识 模版模式 易用性 讲...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/%E6%A1%86%E6%9E%B6/mybatis/03-%E5%8C%85%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"包详解"}],["meta",{"property":"og:description","content":"包详解 transaction包 背景知识 工厂模式 讲解 这里并没有特别需要说的东西，只是基础的事务管理。但是这里很好的实现了transaction和datasource包的隔离，transaction通过datasource抽象出来的接口实现了业务隔离，事务管理器可以通过配置文件选择对应的数据源进行管理。 jdbc包 背景知识 模版模式 易用性 讲..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305241127435.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-22T05:58:54.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"mybatis"}],["meta",{"property":"article:tag","content":"源码"}],["meta",{"property":"article:modified_time","content":"2024-06-22T05:58:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"包详解\\",\\"image\\":[\\"https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305241127435.png\\",\\"https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305221521914.png#id=Lbhr7&originHeight=973&originWidth=384&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305241107709.png#id=XQR5r&originHeight=486&originWidth=404&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\",\\"https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305221420554.png#id=GNQQU&originHeight=1228&originWidth=6562&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\\"],\\"dateModified\\":\\"2024-06-22T05:58:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"包详解","slug":"包详解","link":"#包详解","children":[{"level":3,"title":"transaction包","slug":"transaction包","link":"#transaction包","children":[]},{"level":3,"title":"jdbc包","slug":"jdbc包","link":"#jdbc包","children":[]},{"level":3,"title":"datasource包","slug":"datasource包","link":"#datasource包","children":[]},{"level":3,"title":"exception包","slug":"exception包","link":"#exception包","children":[]},{"level":3,"title":"annotations和 lang包","slug":"annotations和-lang包","link":"#annotations和-lang包","children":[]}]}],"git":{"createdTime":1713090377000,"updatedTime":1719035934000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":6.33,"words":1900},"filePathRelative":"框架/mybatis/03-包详解.md","localizedDate":"2024年4月14日","excerpt":"<h2>包详解</h2>\\n<h3><code>transaction</code>包</h3>\\n<figure><img src=\\"https://zhangjiahao-blog.oss-cn-beijing.aliyuncs.com/picgo/202305241127435.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h4>背景知识</h4>\\n<ul>\\n<li>工厂模式</li>\\n</ul>\\n<h4>讲解</h4>\\n<p>这里并没有特别需要说的东西，只是基础的事务管理。但是这里很好的实现了<code>transaction</code>和<code>datasource</code>包的隔离，<code>transaction</code>通过<code>datasource</code>抽象出来的接口实现了业务隔离，事务管理器可以通过配置文件选择对应的数据源进行管理。</p>","autoDesc":true}');export{r as comp,d as data};
