import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as l,c as i,a as o,b as e,e as n}from"./app-BoJ75mrp.js";const p={},c=e("h1",{id:"设计理念和设计目标",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#设计理念和设计目标"},[e("span",null,"设计理念和设计目标")])],-1),s=n('<h2 id="设计理念" tabindex="-1"><a class="header-anchor" href="#设计理念"><span>设计理念</span></a></h2><p>RocketMQ设计基于主题的发布与订阅模式，其核心功能包括消息发送、消息存储和消息消费，整体设计追求简单和性能高效，主要体现在如下3个方面。</p><ol><li>摒弃了业界常用的将ZooKeeper作为信息管理的“注册中心”，而是自研NameServer实现元数据的管理（topic路由信息等）</li><li>高效的I/O存储机制。</li><li>容忍存在的设计缺陷。</li></ol><h3 id="为什么不用-zookeeper-而是自研-nameserver" tabindex="-1"><a class="header-anchor" href="#为什么不用-zookeeper-而是自研-nameserver"><span>为什么不用 Zookeeper 而是自研 NameServer？</span></a></h3><p>topic 路由信息无需在集群之间保持强一致，而是追求最终一致性，并且能够容忍分钟级别的不一致。真是因为这，RocketMQ的NameServer集群之间互不通信，这样极大地降低了NameServer实现的复杂度，对网络的要求也降低了不少，性能相比较ZooKeeper还有了极大的提升。</p><h3 id="高效的-i-o存储机制" tabindex="-1"><a class="header-anchor" href="#高效的-i-o存储机制"><span>高效的 I/O存储机制</span></a></h3><p>RocketMQ追求消息发送的高吞吐量，RocketMQ的消息存储文件被设计成文件组的概念，组内单个文件大小固定，方便引入内存映射机制，所有主题的消息存储按顺序编写，极大地提升了消息的写性能。同时为了兼顾消息消费与消息查找，引入了消息消费队列文件与索引文件。</p><h3 id="容忍存在的设计缺陷" tabindex="-1"><a class="header-anchor" href="#容忍存在的设计缺陷"><span>容忍存在的设计缺陷</span></a></h3><p>适当将某些工作下放给RocketMQ使用者。</p><p>例如：消息中间件的实现者经常会遇到一个难题：如何保证消息一定能被消息消费者消费，并且只消费一次？</p><p>RocketMQ的设计者给出的解决办法是不解决这个难题，而是退而求其次，只保证消息被消费者消费，在设计上允许消息被重复消费。这样极大地简化了消息中间件的内核，使得实现消息发送高可用变得非常简单和高效，消息重复问题由消费者在消息消费时实现幂等。</p><h2 id="设计目标" tabindex="-1"><a class="header-anchor" href="#设计目标"><span>设计目标</span></a></h2><p>作为一款消息中间件，RocketMQ 要解决以下问题：</p><ol><li>架构模式</li><li>顺序消费</li><li>消息过滤</li><li>消息存储</li><li>消息高可用性</li><li>消息消费低延迟</li><li>确保消息必须消费一次</li><li>回溯消息</li><li>消息堆积</li><li>定时消息</li><li>消息重试机制</li></ol><h3 id="架构模式" tabindex="-1"><a class="header-anchor" href="#架构模式"><span>架构模式</span></a></h3><p>RocketMQ与大部分消息中间件一样，采用发布订阅模式，主要参与组件包括：消息发送者、消息服务器（消息存储）、消息消费和路由发现。</p><h3 id="顺序消费" tabindex="-1"><a class="header-anchor" href="#顺序消费"><span>顺序消费</span></a></h3><p>所谓顺序消息，就是消息消费者按照消息达到消息存储服务器的顺序消费。RocketMQ可以严格保证消息有序。</p><h3 id="消息过滤" tabindex="-1"><a class="header-anchor" href="#消息过滤"><span>消息过滤</span></a></h3><p>消息过滤是指在消息消费时，消息消费者可以对同一主题下的消息按照规则只消费自己感兴趣的消息。RocketMQ消息过滤是由服务端和消费端共同完成的。</p><h3 id="消息存储" tabindex="-1"><a class="header-anchor" href="#消息存储"><span>消息存储</span></a></h3><p>消息中间件的一个核心实现是消息的存储，对于消息存储一般有如下两个维度的考量：消息堆积能力和消息存储性能。RocketMQ追求消息存储的高性能，引入内存映射机制，所有主题的消息按顺序存储在同一个文件中。同时为了避免消息在消息存储服务器中无限地累积，引入了消息文件过期机制与文件存储空间报警机制。</p><h3 id="消息高可用性" tabindex="-1"><a class="header-anchor" href="#消息高可用性"><span>消息高可用性</span></a></h3><p>通常影响消息可靠性的有以下几种情况。</p><ol><li><p>Broker异常崩溃。</p></li><li><p>操作系统崩溃。</p></li><li><p>机器断电，但是能立即恢复供电。</p></li><li><p>机器无法开机（可能是CPU、主板、内存等关键设备损坏）。</p></li><li><p>磁盘设备损坏。</p><p>前三种为持久化问题，RocketMQ 同步刷盘模式下可以保证不丢失任何信息，异步刷盘情况下可以保证丢失少量消息；后两种为单点故障问题，一旦发生则会导致节点数据全部丢失，，如果开启异步复制机制，RocketMQ 则可以保证只丢失少量消息。</p></li></ol><h3 id="消息消费低延迟" tabindex="-1"><a class="header-anchor" href="#消息消费低延迟"><span>消息消费低延迟</span></a></h3><p>RocketMQ 消息不堆积时，以长轮询模式实现准实时的消息推送模式。</p><h3 id="确保消息必须消费一次" tabindex="-1"><a class="header-anchor" href="#确保消息必须消费一次"><span>确保消息必须消费一次</span></a></h3><p>RocketMQ通过消息消费确认机制（ACK）确保消息至少被消费一次，因为ACK消息有可能出现丢失等情况，RocketMQ无法做到消息只被消费一次，所以有重复消费的可能。。</p><h3 id="回溯消息" tabindex="-1"><a class="header-anchor" href="#回溯消息"><span>回溯消息</span></a></h3><p>回溯消息是指消息消费端已经消费成功，根据业务要求，需要重新消费消息。RocketMQ支持按时间向前或向后回溯消息，时间维度可精确到毫秒。</p><h3 id="消息堆积" tabindex="-1"><a class="header-anchor" href="#消息堆积"><span>消息堆积</span></a></h3><p>消息中间件的主要功能是异步解耦，必须能应对前端的数据洪峰，提高后端系统的可用性，这必然要求消息中间件具备一定的消息堆积能力。RocketMQ使用磁盘文件存储消息（内存映射机制），并且在物理布局上为多个大小相等的文件组成逻辑文件组，可以无限循环使用。RocketMQ消息存储文件并不是永久存储在消息服务器端的，而是提供了过期机制，默认保留3天。</p><h3 id="定时消息" tabindex="-1"><a class="header-anchor" href="#定时消息"><span>定时消息</span></a></h3><p>定时消息是指消息发送到Broker后，不能被消息消费端立即消费，而是要到特定的时间点或者等待特定的时间后才能被消费。因为如果要支持任意精度的定时消息消费，就必须在消息服务端对消息进行排序，这势必带来很大的性能损耗，所以RocketMQ不支持任意进度的定时消息，只支持特定延迟级别。</p><h3 id="消息重试机制" tabindex="-1"><a class="header-anchor" href="#消息重试机制"><span>消息重试机制</span></a></h3><p>RocketMQ支持消息重试机制。消息重试是指在消息消费时如果发生异常，消息中间件支持消息重新投递。</p><h2 id="rocketmq-文件夹对应的用处" tabindex="-1"><a class="header-anchor" href="#rocketmq-文件夹对应的用处"><span>RocketMQ 文件夹对应的用处</span></a></h2><p>.<br> ├── acl 权限控制管理<br> ├── broker broker 模块<br> ├── client 消息客户端，包含生产者和消费者相关的类<br> ├── common 公共包<br> ├── conf 配置包<br> ├── dev 开发者信息包<br> ├── distribution 打包分发目录<br> ├── docs 文档<br> ├── example 案例<br> ├── filter 过滤相关基础类<br> ├── logging 日志实现类<br> ├── logs 日志文件包<br> ├── namesrv namesrv实现相关类<br> ├── openmessaging 消息开放标准 已发布<br> ├── remoting 远程通信模块，基于netty<br> ├── srvutil 服务相关工具类<br> ├── store 持久化相关<br> ├── style checkStyle 相关<br> ├── test 测试<br> └── tools 工具类，监控命令相关实现类</p>',39);function h(d,m){const t=r("MarkMap");return l(),i("div",null,[c,o(t,{id:"markmap-3",content:"eJxNkM1OwkAUhdfcp2jCWhT/fQRjogt37ozpwoXBEOO6ipaagKihERGRJiY0Ki1GLaUU+y7Ye2dY8QpObTHu5s6ce875BtISKQPe1gDSaYlbX9wy2JWKwSfAjMQsBcv6+KVGugapbEai6xv0C6Gnhm6d6SV0XVY1Wf0Mu+pOLrchy4dyPhw2QtcLA4NObPbrJgQjpUHvJqql0O1gUBgpDxO/xJUS1WxefGat6ubugbwt54/lPFpNdtnF8wLpXSpbYjl2mfjaUe5wf4/3bFZ9S/w7FxP/AlLzGSluKdTrs1vYqeGpSQ0PNedbOYXUQkZCq49BOXppRI0TVN8b3/UiyT/8e4taRYAIt+lQ84xMA/0KRBmGh16FHI1/9EF4ipMowYMiDZ5gcTrH6bA0nUUzrIjOJiltWJ7exi7h8BIHDg8eYSUjMcMKg4fEJDgfG4NE5Cr0asCqgLhvkhetCgWs/QW2VNa2ITsXUdbp1kkE2QghrlAsc1uPPwR+AHSvLfs="}),s])}const g=a(p,[["render",h],["__file","01-设计理念和设计目标.html.vue"]]),v=JSON.parse('{"path":"/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/01-%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E5%92%8C%E8%AE%BE%E8%AE%A1%E7%9B%AE%E6%A0%87.html","title":"设计理念和设计目标","lang":"zh-CN","frontmatter":{"title":"设计理念和设计目标","order":1,"category":["it"],"tags":["中间件","RocketMQ","源码"],"description":"设计理念和设计目标 设计理念 RocketMQ设计基于主题的发布与订阅模式，其核心功能包括消息发送、消息存储和消息消费，整体设计追求简单和性能高效，主要体现在如下3个方面。 摒弃了业界常用的将ZooKeeper作为信息管理的“注册中心”，而是自研NameServer实现元数据的管理（topic路由信息等） 高效的I/O存储机制。 容忍存在的设计缺陷。 ...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/%E4%B8%AD%E9%97%B4%E4%BB%B6/rocketmq/01-%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E5%92%8C%E8%AE%BE%E8%AE%A1%E7%9B%AE%E6%A0%87.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"设计理念和设计目标"}],["meta",{"property":"og:description","content":"设计理念和设计目标 设计理念 RocketMQ设计基于主题的发布与订阅模式，其核心功能包括消息发送、消息存储和消息消费，整体设计追求简单和性能高效，主要体现在如下3个方面。 摒弃了业界常用的将ZooKeeper作为信息管理的“注册中心”，而是自研NameServer实现元数据的管理（topic路由信息等） 高效的I/O存储机制。 容忍存在的设计缺陷。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T05:09:58.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:tag","content":"RocketMQ"}],["meta",{"property":"article:tag","content":"源码"}],["meta",{"property":"article:modified_time","content":"2024-06-23T05:09:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计理念和设计目标\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T05:09:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"设计理念","slug":"设计理念","link":"#设计理念","children":[{"level":3,"title":"为什么不用 Zookeeper 而是自研 NameServer？","slug":"为什么不用-zookeeper-而是自研-nameserver","link":"#为什么不用-zookeeper-而是自研-nameserver","children":[]},{"level":3,"title":"高效的 I/O存储机制","slug":"高效的-i-o存储机制","link":"#高效的-i-o存储机制","children":[]},{"level":3,"title":"容忍存在的设计缺陷","slug":"容忍存在的设计缺陷","link":"#容忍存在的设计缺陷","children":[]}]},{"level":2,"title":"设计目标","slug":"设计目标","link":"#设计目标","children":[{"level":3,"title":"架构模式","slug":"架构模式","link":"#架构模式","children":[]},{"level":3,"title":"顺序消费","slug":"顺序消费","link":"#顺序消费","children":[]},{"level":3,"title":"消息过滤","slug":"消息过滤","link":"#消息过滤","children":[]},{"level":3,"title":"消息存储","slug":"消息存储","link":"#消息存储","children":[]},{"level":3,"title":"消息高可用性","slug":"消息高可用性","link":"#消息高可用性","children":[]},{"level":3,"title":"消息消费低延迟","slug":"消息消费低延迟","link":"#消息消费低延迟","children":[]},{"level":3,"title":"确保消息必须消费一次","slug":"确保消息必须消费一次","link":"#确保消息必须消费一次","children":[]},{"level":3,"title":"回溯消息","slug":"回溯消息","link":"#回溯消息","children":[]},{"level":3,"title":"消息堆积","slug":"消息堆积","link":"#消息堆积","children":[]},{"level":3,"title":"定时消息","slug":"定时消息","link":"#定时消息","children":[]},{"level":3,"title":"消息重试机制","slug":"消息重试机制","link":"#消息重试机制","children":[]}]},{"level":2,"title":"RocketMQ 文件夹对应的用处","slug":"rocketmq-文件夹对应的用处","link":"#rocketmq-文件夹对应的用处","children":[]}],"git":{"createdTime":1719119398000,"updatedTime":1719119398000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":6.29,"words":1888},"filePathRelative":"中间件/rocketmq/01-设计理念和设计目标.md","localizedDate":"2024年6月23日","excerpt":"\\n<h2>设计理念</h2>\\n<p>RocketMQ设计基于主题的发布与订阅模式，其核心功能包括消息发送、消息存储和消息消费，整体设计追求简单和性能高效，主要体现在如下3个方面。</p>\\n<ol>\\n<li>摒弃了业界常用的将ZooKeeper作为信息管理的“注册中心”，而是自研NameServer实现元数据的管理（topic路由信息等）</li>\\n<li>高效的I/O存储机制。</li>\\n<li>容忍存在的设计缺陷。</li>\\n</ol>\\n<h3>为什么不用 Zookeeper 而是自研 NameServer？</h3>\\n<p>topic 路由信息无需在集群之间保持强一致，而是追求最终一致性，并且能够容忍分钟级别的不一致。真是因为这，RocketMQ的NameServer集群之间互不通信，这样极大地降低了NameServer实现的复杂度，对网络的要求也降低了不少，性能相比较ZooKeeper还有了极大的提升。</p>","autoDesc":true}');export{g as comp,v as data};
