import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as h,c as t,d as e,e as i,a as r,b as s}from"./app-CIMA7j_n.js";const p={},d={href:"https://zhuanlan.zhihu.com/p/128145128",target:"_blank",rel:"noopener noreferrer"},c=s('<h2 id="七大原则" tabindex="-1"><a class="header-anchor" href="#七大原则"><span>七大原则</span></a></h2><h3 id="开闭原则" tabindex="-1"><a class="header-anchor" href="#开闭原则"><span>开闭原则</span></a></h3><p>一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。</p><h3 id="单一职责原则" tabindex="-1"><a class="header-anchor" href="#单一职责原则"><span>单一职责原则</span></a></h3><p>一个类应该只有一个发生变化的原因。</p><h3 id="里氏替换原则" tabindex="-1"><a class="header-anchor" href="#里氏替换原则"><span>里氏替换原则</span></a></h3><p>所有引用基类的地方必须能透明地使用其子类的对象。</p><h3 id="依赖倒置原则" tabindex="-1"><a class="header-anchor" href="#依赖倒置原则"><span>依赖倒置原则</span></a></h3><p>1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。</p><p>2、抽象不应该依赖于细节，细节应该依赖于抽象。</p><h3 id="接口隔离原则" tabindex="-1"><a class="header-anchor" href="#接口隔离原则"><span>接口隔离原则</span></a></h3><p>1、客户端不应该依赖它不需要的接口。</p><p>2、类间的依赖关系应该建立在最小的接口上。</p><h3 id="迪米特法则" tabindex="-1"><a class="header-anchor" href="#迪米特法则"><span>迪米特法则</span></a></h3><p>只与你的直接朋友交谈，不跟“陌生人”说话。</p><h3 id="组合-聚合复用原则" tabindex="-1"><a class="header-anchor" href="#组合-聚合复用原则"><span>组合/聚合复用原则</span></a></h3><p>尽量使用对象组合/聚合，而不是继承关系达到软件复用的目的。</p><h2 id="创建型" tabindex="-1"><a class="header-anchor" href="#创建型"><span>创建型</span></a></h2><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h3><h4 id="饿汉式" tabindex="-1"><a class="header-anchor" href="#饿汉式"><span>饿汉式</span></a></h4><p>全局只会存在该类的唯一一个对象。在加载类的时候就已经开始初始化，而非等到使用的时候才进行初始化，此种方式线程安全，但可能存在资源浪费，即不会使用其对象还是会创建该对象。</p><blockquote><p>静态常量的方式枚举的方式</p></blockquote><h4 id="懒汉式" tabindex="-1"><a class="header-anchor" href="#懒汉式"><span>懒汉式</span></a></h4><p>只有在使用的时候才会进行创建该对象，但是由于可能存在多线程调用问题，所以需要注意线程安全问题。</p><blockquote><p>1.synchronized锁住创建方法</p></blockquote><p>2.双重校验锁（DCL，即 double-checked locking）</p><p>3.静态内部类的方式</p><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h3><p>通过工厂类能够进行生成所需对象，而非手动创建。一般会让工厂构造方法为私有，防止创建工厂的对象。只需调用工厂的某方法就可生成对应的对象。</p><h3 id="抽象工厂模式" tabindex="-1"><a class="header-anchor" href="#抽象工厂模式"><span>抽象工厂模式</span></a></h3><p>工厂模式的进阶用法，通过抽象工厂进行生成工厂。</p><h3 id="建造者模式" tabindex="-1"><a class="header-anchor" href="#建造者模式"><span>建造者模式</span></a></h3><p>把对象的组合构造或者某些属性设置进行封装，使之在创建对象的时候直接满足某些场景的数据，而非全由用户手动设置，防止构建出不符合的对象。</p><h3 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式"><span>原型模式</span></a></h3><p>根据某些已经存在的对象而无需再次手动创建此对象和赋值操作。</p><h2 id="结构型" tabindex="-1"><a class="header-anchor" href="#结构型"><span>结构型</span></a></h2><p>关注于对象的组成以及对象之间的依赖关系，描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。</p><h3 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式"><span>适配器模式</span></a></h3><p>适配器是作为两个不兼容的接口之间的桥梁。</p><p>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p>适配器模式主要改变所考虑对象的接口。</p><h3 id="桥梁模式" tabindex="-1"><a class="header-anchor" href="#桥梁模式"><span>桥梁模式</span></a></h3><h3 id="装饰器模式" tabindex="-1"><a class="header-anchor" href="#装饰器模式"><span>装饰器模式</span></a></h3><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><p>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p>装饰器模式为了增强功能。</p><h3 id="门面模式" tabindex="-1"><a class="header-anchor" href="#门面模式"><span>门面模式</span></a></h3><h3 id="合成模式" tabindex="-1"><a class="header-anchor" href="#合成模式"><span>合成模式</span></a></h3><h3 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式"><span>享元模式</span></a></h3><h3 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h3><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。</p><p>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><p>为其他对象提供一种代理以控制对这个对象的访问。</p><p>代理模式不能改变所代理类的接口。代理模式是为了加以控制。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项：</span></a></h3><p>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</p><p>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p><h2 id="行为型" tabindex="-1"><a class="header-anchor" href="#行为型"><span>行为型</span></a></h2><p>关注于对象的行为问题，是对在不同的对象之间划分责任和算法的抽象化；不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</p><h3 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式"><span>策略模式</span></a></h3><h3 id="模版方法模式" tabindex="-1"><a class="header-anchor" href="#模版方法模式"><span>模版方法模式</span></a></h3><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h3><h3 id="迭代器模式" tabindex="-1"><a class="header-anchor" href="#迭代器模式"><span>迭代器模式</span></a></h3><h3 id="责任链模式" tabindex="-1"><a class="header-anchor" href="#责任链模式"><span>责任链模式</span></a></h3><h3 id="命令模式" tabindex="-1"><a class="header-anchor" href="#命令模式"><span>命令模式</span></a></h3><h3 id="备忘录模式" tabindex="-1"><a class="header-anchor" href="#备忘录模式"><span>备忘录模式</span></a></h3><h3 id="状态模式" tabindex="-1"><a class="header-anchor" href="#状态模式"><span>状态模式</span></a></h3><h3 id="访问者模式" tabindex="-1"><a class="header-anchor" href="#访问者模式"><span>访问者模式</span></a></h3><h3 id="中介者模式" tabindex="-1"><a class="header-anchor" href="#中介者模式"><span>中介者模式</span></a></h3><h3 id="解释器模式" tabindex="-1"><a class="header-anchor" href="#解释器模式"><span>解释器模式</span></a></h3>',71);function o(u,g){const a=l("ExternalLinkIcon");return h(),t("div",null,[e("p",null,[e("a",d,[i("快速记忆23种设计模式 - 知乎"),r(a)])]),c])}const k=n(p,[["render",o],["__file","设计模式.html.vue"]]),x=JSON.parse('{"path":"/%E9%80%9A%E7%94%A8/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","order":2,"description":"快速记忆23种设计模式 - 知乎 七大原则 开闭原则 一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。 单一职责原则 一个类应该只有一个发生变化的原因。 里氏替换原则 所有引用基类的地方必须能透明地使用其子类的对象。 依赖倒置原则 1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。 2、抽象不应该依赖于细节，细节应该依赖于抽象。 接口隔离...","head":[["meta",{"property":"og:url","content":"https://961099916.github.io/%E9%80%9A%E7%94%A8/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"九夏的博客"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"快速记忆23种设计模式 - 知乎 七大原则 开闭原则 一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。 单一职责原则 一个类应该只有一个发生变化的原因。 里氏替换原则 所有引用基类的地方必须能透明地使用其子类的对象。 依赖倒置原则 1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。 2、抽象不应该依赖于细节，细节应该依赖于抽象。 接口隔离..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T16:16:31.000Z"}],["meta",{"property":"article:author","content":"九夏"}],["meta",{"property":"article:modified_time","content":"2024-06-21T16:16:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-21T16:16:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"九夏\\",\\"url\\":\\"https://blog.jiuxialb.top/\\"}]}"]]},"headers":[{"level":2,"title":"七大原则","slug":"七大原则","link":"#七大原则","children":[{"level":3,"title":"开闭原则","slug":"开闭原则","link":"#开闭原则","children":[]},{"level":3,"title":"单一职责原则","slug":"单一职责原则","link":"#单一职责原则","children":[]},{"level":3,"title":"里氏替换原则","slug":"里氏替换原则","link":"#里氏替换原则","children":[]},{"level":3,"title":"依赖倒置原则","slug":"依赖倒置原则","link":"#依赖倒置原则","children":[]},{"level":3,"title":"接口隔离原则","slug":"接口隔离原则","link":"#接口隔离原则","children":[]},{"level":3,"title":"迪米特法则","slug":"迪米特法则","link":"#迪米特法则","children":[]},{"level":3,"title":"组合/聚合复用原则","slug":"组合-聚合复用原则","link":"#组合-聚合复用原则","children":[]}]},{"level":2,"title":"创建型","slug":"创建型","link":"#创建型","children":[{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":3,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":3,"title":"抽象工厂模式","slug":"抽象工厂模式","link":"#抽象工厂模式","children":[]},{"level":3,"title":"建造者模式","slug":"建造者模式","link":"#建造者模式","children":[]},{"level":3,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]}]},{"level":2,"title":"结构型","slug":"结构型","link":"#结构型","children":[{"level":3,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":3,"title":"桥梁模式","slug":"桥梁模式","link":"#桥梁模式","children":[]},{"level":3,"title":"装饰器模式","slug":"装饰器模式","link":"#装饰器模式","children":[]},{"level":3,"title":"门面模式","slug":"门面模式","link":"#门面模式","children":[]},{"level":3,"title":"合成模式","slug":"合成模式","link":"#合成模式","children":[]},{"level":3,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]},{"level":3,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]},{"level":3,"title":"注意事项：","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"行为型","slug":"行为型","link":"#行为型","children":[{"level":3,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":3,"title":"模版方法模式","slug":"模版方法模式","link":"#模版方法模式","children":[]},{"level":3,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":3,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":3,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[]},{"level":3,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":3,"title":"备忘录模式","slug":"备忘录模式","link":"#备忘录模式","children":[]},{"level":3,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]},{"level":3,"title":"访问者模式","slug":"访问者模式","link":"#访问者模式","children":[]},{"level":3,"title":"中介者模式","slug":"中介者模式","link":"#中介者模式","children":[]},{"level":3,"title":"解释器模式","slug":"解释器模式","link":"#解释器模式","children":[]}]}],"git":{"createdTime":1716018035000,"updatedTime":1718986591000,"contributors":[{"name":"zhangjiahao","email":"961099916@qq.com","commits":1}]},"readingTime":{"minutes":4.11,"words":1232},"filePathRelative":"通用/设计模式/设计模式.md","localizedDate":"2024年5月18日","excerpt":"<p><a href=\\"https://zhuanlan.zhihu.com/p/128145128\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">快速记忆23种设计模式 - 知乎</a></p>\\n<h2>七大原则</h2>\\n<h3>开闭原则</h3>\\n<p>一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。</p>\\n<h3>单一职责原则</h3>\\n<p>一个类应该只有一个发生变化的原因。</p>\\n<h3>里氏替换原则</h3>\\n<p>所有引用基类的地方必须能透明地使用其子类的对象。</p>\\n<h3>依赖倒置原则</h3>\\n<p>1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。</p>","autoDesc":true}');export{k as comp,x as data};
